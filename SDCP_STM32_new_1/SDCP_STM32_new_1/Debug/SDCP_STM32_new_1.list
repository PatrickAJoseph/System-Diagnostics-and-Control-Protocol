
SDCP_STM32_new_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc30  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800cdc8  0800cdc8  0001cdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d344  0800d344  000200f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d344  0800d344  000200f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d344  0800d344  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d344  0800d344  0001d344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d348  0800d348  0001d348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  0800d34c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  200000f8  0800d444  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20000784  0800d444  00020784  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c63b  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000341b  00000000  00000000  0003c763  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  0003fb80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f0  00000000  00000000  00040468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019d68  00000000  00000000  00040c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c765  00000000  00000000  0005a9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088fe0  00000000  00000000  00067125  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b0  00000000  00000000  000f0180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000f8 	.word	0x200000f8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800cdb0 	.word	0x0800cdb0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000fc 	.word	0x200000fc
 80001d4:	0800cdb0 	.word	0x0800cdb0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <Config_write>:

#include "Configurations.h"

void Config_write()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0

	  /* Save accelerometer offset values. */

	  Config.IMU_accel_offset[0] = imu.accelerometer_offset[0];
 8000a5a:	4b70      	ldr	r3, [pc, #448]	; (8000c1c <Config_write+0x1c8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	ee07 3a90 	vmov	s15, r3
 8000a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a66:	4b6e      	ldr	r3, [pc, #440]	; (8000c20 <Config_write+0x1cc>)
 8000a68:	edc3 7a04 	vstr	s15, [r3, #16]
	  Config.IMU_accel_offset[1] = imu.accelerometer_offset[1];
 8000a6c:	4b6b      	ldr	r3, [pc, #428]	; (8000c1c <Config_write+0x1c8>)
 8000a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a70:	ee07 3a90 	vmov	s15, r3
 8000a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a78:	4b69      	ldr	r3, [pc, #420]	; (8000c20 <Config_write+0x1cc>)
 8000a7a:	edc3 7a05 	vstr	s15, [r3, #20]
	  Config.IMU_accel_offset[2] = imu.accelerometer_offset[2];
 8000a7e:	4b67      	ldr	r3, [pc, #412]	; (8000c1c <Config_write+0x1c8>)
 8000a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a82:	ee07 3a90 	vmov	s15, r3
 8000a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a8a:	4b65      	ldr	r3, [pc, #404]	; (8000c20 <Config_write+0x1cc>)
 8000a8c:	edc3 7a06 	vstr	s15, [r3, #24]

	  /* Save gyroscope offset values. */

	  Config.IMU_gyro_offset[0] = imu.gyroscope_offset[0];
 8000a90:	4b62      	ldr	r3, [pc, #392]	; (8000c1c <Config_write+0x1c8>)
 8000a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a94:	ee07 3a90 	vmov	s15, r3
 8000a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a9c:	4b60      	ldr	r3, [pc, #384]	; (8000c20 <Config_write+0x1cc>)
 8000a9e:	edc3 7a07 	vstr	s15, [r3, #28]
	  Config.IMU_gyro_offset[1] = imu.gyroscope_offset[1];
 8000aa2:	4b5e      	ldr	r3, [pc, #376]	; (8000c1c <Config_write+0x1c8>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aae:	4b5c      	ldr	r3, [pc, #368]	; (8000c20 <Config_write+0x1cc>)
 8000ab0:	edc3 7a08 	vstr	s15, [r3, #32]
	  Config.IMU_gyro_offset[2] = imu.gyroscope_offset[2];
 8000ab4:	4b59      	ldr	r3, [pc, #356]	; (8000c1c <Config_write+0x1c8>)
 8000ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac0:	4b57      	ldr	r3, [pc, #348]	; (8000c20 <Config_write+0x1cc>)
 8000ac2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	  /* Save complementary filter roll,pitch and yaw coefficients. */

	  Config.roll_coeff = Motion_Processing.roll_coeff;
 8000ac6:	4b57      	ldr	r3, [pc, #348]	; (8000c24 <Config_write+0x1d0>)
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	4a55      	ldr	r2, [pc, #340]	; (8000c20 <Config_write+0x1cc>)
 8000acc:	6013      	str	r3, [r2, #0]
	  Config.pitch_coeff = Motion_Processing.pitch_coeff;
 8000ace:	4b55      	ldr	r3, [pc, #340]	; (8000c24 <Config_write+0x1d0>)
 8000ad0:	691b      	ldr	r3, [r3, #16]
 8000ad2:	4a53      	ldr	r2, [pc, #332]	; (8000c20 <Config_write+0x1cc>)
 8000ad4:	6053      	str	r3, [r2, #4]
	  Config.yaw_coeff = Motion_Processing.yaw_coeff;
 8000ad6:	4b53      	ldr	r3, [pc, #332]	; (8000c24 <Config_write+0x1d0>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a51      	ldr	r2, [pc, #324]	; (8000c20 <Config_write+0x1cc>)
 8000adc:	6093      	str	r3, [r2, #8]

	  /* Save accelerometer and gyroscope full-scale ranges. */

	  Config.IMU_settings.IMU_settings_parameters.accel_fs =
	  imu.sensor_configurations.sensor_configuration_segments.accel_fs_config;
 8000ade:	4b4f      	ldr	r3, [pc, #316]	; (8000c1c <Config_write+0x1c8>)
 8000ae0:	7a1b      	ldrb	r3, [r3, #8]
 8000ae2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000ae6:	b2d9      	uxtb	r1, r3
	  Config.IMU_settings.IMU_settings_parameters.accel_fs =
 8000ae8:	4a4d      	ldr	r2, [pc, #308]	; (8000c20 <Config_write+0x1cc>)
 8000aea:	7b13      	ldrb	r3, [r2, #12]
 8000aec:	f361 03c5 	bfi	r3, r1, #3, #3
 8000af0:	7313      	strb	r3, [r2, #12]

	  Config.IMU_settings.IMU_settings_parameters.gyro_fs =
	  imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config;
 8000af2:	4b4a      	ldr	r3, [pc, #296]	; (8000c1c <Config_write+0x1c8>)
 8000af4:	7a1b      	ldrb	r3, [r3, #8]
 8000af6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8000afa:	b2d9      	uxtb	r1, r3
	  Config.IMU_settings.IMU_settings_parameters.gyro_fs =
 8000afc:	4a48      	ldr	r2, [pc, #288]	; (8000c20 <Config_write+0x1cc>)
 8000afe:	8993      	ldrh	r3, [r2, #12]
 8000b00:	f361 1388 	bfi	r3, r1, #6, #3
 8000b04:	8193      	strh	r3, [r2, #12]

	  Config.IMU_settings.IMU_settings_parameters.enable_RPY_accel =
	  Motion_Processing.output_config.output_config_segments.RPY_accel_output_enabled;
 8000b06:	4b47      	ldr	r3, [pc, #284]	; (8000c24 <Config_write+0x1d0>)
 8000b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b0c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000b10:	b2d9      	uxtb	r1, r3
	  Config.IMU_settings.IMU_settings_parameters.enable_RPY_accel =
 8000b12:	4a43      	ldr	r2, [pc, #268]	; (8000c20 <Config_write+0x1cc>)
 8000b14:	7b13      	ldrb	r3, [r2, #12]
 8000b16:	f361 0300 	bfi	r3, r1, #0, #1
 8000b1a:	7313      	strb	r3, [r2, #12]

	  Config.IMU_settings.IMU_settings_parameters.enable_RPY_gyro =
	  Motion_Processing.output_config.output_config_segments.RPY_gyro_output_enabled;
 8000b1c:	4b41      	ldr	r3, [pc, #260]	; (8000c24 <Config_write+0x1d0>)
 8000b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b22:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b26:	b2d9      	uxtb	r1, r3
	  Config.IMU_settings.IMU_settings_parameters.enable_RPY_gyro =
 8000b28:	4a3d      	ldr	r2, [pc, #244]	; (8000c20 <Config_write+0x1cc>)
 8000b2a:	7b13      	ldrb	r3, [r2, #12]
 8000b2c:	f361 0341 	bfi	r3, r1, #1, #1
 8000b30:	7313      	strb	r3, [r2, #12]

	  Config.IMU_settings.IMU_settings_parameters.enable_RPY_comp =
	  Motion_Processing.output_config.output_config_segments.RPY_filter_output_enabled;
 8000b32:	4b3c      	ldr	r3, [pc, #240]	; (8000c24 <Config_write+0x1d0>)
 8000b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b38:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000b3c:	b2d9      	uxtb	r1, r3
	  Config.IMU_settings.IMU_settings_parameters.enable_RPY_comp =
 8000b3e:	4a38      	ldr	r2, [pc, #224]	; (8000c20 <Config_write+0x1cc>)
 8000b40:	7b13      	ldrb	r3, [r2, #12]
 8000b42:	f361 0382 	bfi	r3, r1, #2, #1
 8000b46:	7313      	strb	r3, [r2, #12]

	  Config.angle_threshold[0] = Motion_Processing.angle_threshold[0];
 8000b48:	4b36      	ldr	r3, [pc, #216]	; (8000c24 <Config_write+0x1d0>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4c:	4a34      	ldr	r2, [pc, #208]	; (8000c20 <Config_write+0x1cc>)
 8000b4e:	6513      	str	r3, [r2, #80]	; 0x50
	  Config.angle_threshold[1] = Motion_Processing.angle_threshold[1];
 8000b50:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <Config_write+0x1d0>)
 8000b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b54:	4a32      	ldr	r2, [pc, #200]	; (8000c20 <Config_write+0x1cc>)
 8000b56:	6553      	str	r3, [r2, #84]	; 0x54
	  Config.angle_threshold[2] = Motion_Processing.angle_threshold[2];
 8000b58:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <Config_write+0x1d0>)
 8000b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b5c:	4a30      	ldr	r2, [pc, #192]	; (8000c20 <Config_write+0x1cc>)
 8000b5e:	6593      	str	r3, [r2, #88]	; 0x58
	  Config.vibration_threshold[0] = Motion_Processing.vibration_threshold[0];
 8000b60:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <Config_write+0x1d0>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4a2e      	ldr	r2, [pc, #184]	; (8000c20 <Config_write+0x1cc>)
 8000b66:	6453      	str	r3, [r2, #68]	; 0x44
	  Config.vibration_threshold[1] = Motion_Processing.vibration_threshold[1];
 8000b68:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <Config_write+0x1d0>)
 8000b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6c:	4a2c      	ldr	r2, [pc, #176]	; (8000c20 <Config_write+0x1cc>)
 8000b6e:	6493      	str	r3, [r2, #72]	; 0x48
	  Config.vibration_threshold[2] = Motion_Processing.vibration_threshold[2];
 8000b70:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <Config_write+0x1d0>)
 8000b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b74:	4a2a      	ldr	r2, [pc, #168]	; (8000c20 <Config_write+0x1cc>)
 8000b76:	64d3      	str	r3, [r2, #76]	; 0x4c

	  Config.LED_config.LED_config_segments.LED1_mode = LED.LED_parameters.LED1_mode;
 8000b78:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <Config_write+0x1d4>)
 8000b7a:	789b      	ldrb	r3, [r3, #2]
 8000b7c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8000b80:	b2d9      	uxtb	r1, r3
 8000b82:	4a27      	ldr	r2, [pc, #156]	; (8000c20 <Config_write+0x1cc>)
 8000b84:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8000b88:	f361 0302 	bfi	r3, r1, #0, #3
 8000b8c:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	  Config.LED_config.LED_config_segments.LED2_mode = LED.LED_parameters.LED2_mode;
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <Config_write+0x1d4>)
 8000b92:	78db      	ldrb	r3, [r3, #3]
 8000b94:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000b98:	b2d9      	uxtb	r1, r3
 8000b9a:	4a21      	ldr	r2, [pc, #132]	; (8000c20 <Config_write+0x1cc>)
 8000b9c:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8000ba0:	f361 03c5 	bfi	r3, r1, #3, #3
 8000ba4:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	  Config.LED_config.LED_config_segments.LED3_mode = LED.LED_parameters.LED3_mode;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <Config_write+0x1d4>)
 8000baa:	78db      	ldrb	r3, [r3, #3]
 8000bac:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8000bb0:	b2d9      	uxtb	r1, r3
 8000bb2:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <Config_write+0x1cc>)
 8000bb4:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 8000bb8:	f361 1388 	bfi	r3, r1, #6, #3
 8000bbc:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c

      Config.IMU_calibration.IMU_calibration_parameters.interval = imu.calibration_interval_ms;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <Config_write+0x1c8>)
 8000bc2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <Config_write+0x1cc>)
 8000bc8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      Config.IMU_calibration.IMU_calibration_parameters.points = imu.N_calibration_points;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <Config_write+0x1c8>)
 8000bce:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8000bd2:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <Config_write+0x1cc>)
 8000bd4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      Config.IMU_calibration.IMU_calibration_parameters.axis = imu.calibration_axis;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <Config_write+0x1c8>)
 8000bda:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <Config_write+0x1cc>)
 8000be0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

 /* Save config. */

  uint32_t address = (uint32_t)&Config;
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <Config_write+0x1cc>)
 8000be6:	60fb      	str	r3, [r7, #12]
  uint32_t size    = (uint32_t)sizeof(Config);
 8000be8:	2364      	movs	r3, #100	; 0x64
 8000bea:	60bb      	str	r3, [r7, #8]

  Flash_Operation_State_t state;

  state = Flash_Unlock();
 8000bec:	f000 f838 	bl	8000c60 <Flash_Unlock>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
  state = Flash_Sector_Erase();
 8000bf4:	f000 f86e 	bl	8000cd4 <Flash_Sector_Erase>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
  state = Flash_write(Flash_Start,address,size);
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	68f9      	ldr	r1, [r7, #12]
 8000c00:	480a      	ldr	r0, [pc, #40]	; (8000c2c <Config_write+0x1d8>)
 8000c02:	f000 f939 	bl	8000e78 <Flash_write>
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  state = Flash_Lock();
 8000c0a:	f000 f84b 	bl	8000ca4 <Flash_Lock>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000350 	.word	0x20000350
 8000c20:	200005b0 	.word	0x200005b0
 8000c24:	2000048c 	.word	0x2000048c
 8000c28:	200004fc 	.word	0x200004fc
 8000c2c:	08040000 	.word	0x08040000

08000c30 <Config_read>:

void Config_read()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  uint32_t address = (uint32_t)&Config;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <Config_read+0x28>)
 8000c38:	607b      	str	r3, [r7, #4]
  uint32_t size    = (uint32_t)sizeof(Config);
 8000c3a:	2364      	movs	r3, #100	; 0x64
 8000c3c:	603b      	str	r3, [r7, #0]

  Flash_Unlock();
 8000c3e:	f000 f80f 	bl	8000c60 <Flash_Unlock>
  Flash_read(Flash_Start,address,size);
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <Config_read+0x2c>)
 8000c48:	f000 f941 	bl	8000ece <Flash_read>
  Flash_Lock();
 8000c4c:	f000 f82a 	bl	8000ca4 <Flash_Lock>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200005b0 	.word	0x200005b0
 8000c5c:	08040000 	.word	0x08040000

08000c60 <Flash_Unlock>:

#include "Flash.h"

Flash_Operation_State_t Flash_Unlock()
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
  /* Disable interrupts. */

  __disable_irq();

  FLASH->KEYR = 0x45670123;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <Flash_Unlock+0x38>)
 8000c68:	4a0c      	ldr	r2, [pc, #48]	; (8000c9c <Flash_Unlock+0x3c>)
 8000c6a:	605a      	str	r2, [r3, #4]

  //asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP");

  FLASH->KEYR = 0xCDEF89AB;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <Flash_Unlock+0x38>)
 8000c6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <Flash_Unlock+0x40>)
 8000c70:	605a      	str	r2, [r3, #4]

  //asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP");

  /* Wait until busy flag is reset. */

  while( (FLASH->SR & FLASH_SR_BSY_Msk) );
 8000c72:	bf00      	nop
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <Flash_Unlock+0x38>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1f9      	bne.n	8000c74 <Flash_Unlock+0x14>

  /* Enable all flash interrupt flags (error and end of operations). */

  FLASH->CR |= ( ( 1UL << 25 ) | FLASH_CR_EOPIE_Msk );
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <Flash_Unlock+0x38>)
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <Flash_Unlock+0x38>)
 8000c86:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000c8a:	6113      	str	r3, [r2, #16]

  /* Enable interrupts. */

  //__enable_irq();

  return(Flash_Unlocked);
 8000c8c:	2303      	movs	r3, #3
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	40023c00 	.word	0x40023c00
 8000c9c:	45670123 	.word	0x45670123
 8000ca0:	cdef89ab 	.word	0xcdef89ab

08000ca4 <Flash_Lock>:

Flash_Operation_State_t Flash_Lock()
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	b672      	cpsid	i

  __disable_irq();

  /* Set LOCK bit to lock the flash and access to flash control register. */

  FLASH->CR |= FLASH_CR_LOCK_Msk;
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <Flash_Lock+0x2c>)
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <Flash_Lock+0x2c>)
 8000cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb4:	6113      	str	r3, [r2, #16]

  /* Wait until flash interface completes the required operation. */

  while( ( FLASH->SR & FLASH_SR_BSY_Msk ) );
 8000cb6:	bf00      	nop
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <Flash_Lock+0x2c>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1f9      	bne.n	8000cb8 <Flash_Lock+0x14>

  /* Enable interrupts. */

  //__enable_irq();
}
 8000cc4:	bf00      	nop
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	40023c00 	.word	0x40023c00

08000cd4 <Flash_Sector_Erase>:

}


Flash_Operation_State_t Flash_Sector_Erase()
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	b672      	cpsid	i

  __disable_irq();

  /* Check flash busy flag. */

  while( FLASH->SR & FLASH_SR_BSY_Msk );
 8000cda:	bf00      	nop
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <Flash_Sector_Erase+0xbc>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f9      	bne.n	8000cdc <Flash_Sector_Erase+0x8>

  /* Select sector to be erased and set the SER bit. */

  FLASH->CR |= ( ( FLASH_CR_SER_Msk )
 8000ce8:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <Flash_Sector_Erase+0xbc>)
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	4a28      	ldr	r2, [pc, #160]	; (8000d90 <Flash_Sector_Erase+0xbc>)
 8000cee:	f043 0332 	orr.w	r3, r3, #50	; 0x32
 8000cf2:	6113      	str	r3, [r2, #16]
		    |  ( (uint32_t)(Flash_Sector) << FLASH_CR_SNB_Pos ) );

  /* Set start bit for start erasing of the required sector. */

  FLASH->CR |= FLASH_CR_STRT_Msk;
 8000cf4:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <Flash_Sector_Erase+0xbc>)
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <Flash_Sector_Erase+0xbc>)
 8000cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cfe:	6113      	str	r3, [r2, #16]

  /* Wait for some time before starting the poll operation. */

  asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP");
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
  asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP");
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop

  Flash_Operation_State_t operationState;

  /* Wait until the busy flag is cleared or the end of operation bit is not set. */

  while( (FLASH->SR & FLASH_SR_BSY_Msk) || !(FLASH->SR & FLASH_SR_EOP_Msk) )
 8000d1c:	e026      	b.n	8000d6c <Flash_Sector_Erase+0x98>
  {
    if(   ( FLASH->SR & ( 1UL << 1 ) )
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <Flash_Sector_Erase+0xbc>)
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	f003 0202 	and.w	r2, r3, #2
        | ( FLASH->SR & FLASH_SR_WRPERR_Msk )
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <Flash_Sector_Erase+0xbc>)
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	431a      	orrs	r2, r3
		| ( FLASH->SR & FLASH_SR_PGAERR_Msk )
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <Flash_Sector_Erase+0xbc>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	f003 0320 	and.w	r3, r3, #32
 8000d38:	431a      	orrs	r2, r3
		| ( FLASH->SR & FLASH_SR_PGPERR_Msk )
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <Flash_Sector_Erase+0xbc>)
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d42:	431a      	orrs	r2, r3
		| ( FLASH->SR & FLASH_SR_PGSERR_Msk )
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <Flash_Sector_Erase+0xbc>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4c:	431a      	orrs	r2, r3
		| ( FLASH->SR & FLASH_SR_RDERR_Msk ) )
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <Flash_Sector_Erase+0xbc>)
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d56:	4313      	orrs	r3, r2
    if(   ( FLASH->SR & ( 1UL << 1 ) )
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d007      	beq.n	8000d6c <Flash_Sector_Erase+0x98>
    {
      /* Clear all interrupt flags. */

      FLASH->SR |= ( FLASH_SR_WRPERR_Msk | FLASH_SR_PGAERR_Msk | FLASH_SR_PGPERR_Msk
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <Flash_Sector_Erase+0xbc>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <Flash_Sector_Erase+0xbc>)
 8000d62:	f443 73f9 	orr.w	r3, r3, #498	; 0x1f2
 8000d66:	60d3      	str	r3, [r2, #12]
      		        | FLASH_SR_PGSERR_Msk | FLASH_SR_RDERR_Msk | ( 1UL << 1 ) );
      return(Flash_Error);
 8000d68:	2302      	movs	r3, #2
 8000d6a:	e00c      	b.n	8000d86 <Flash_Sector_Erase+0xb2>
  while( (FLASH->SR & FLASH_SR_BSY_Msk) || !(FLASH->SR & FLASH_SR_EOP_Msk) )
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <Flash_Sector_Erase+0xbc>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1d2      	bne.n	8000d1e <Flash_Sector_Erase+0x4a>
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <Flash_Sector_Erase+0xbc>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0cc      	beq.n	8000d1e <Flash_Sector_Erase+0x4a>
    }
  }

  //__enable_irq();

  return(Flash_Ok);
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <Flash_writeByte>:

Flash_Operation_State_t Flash_writeByte(uint32_t address, uint8_t value)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	70fb      	strb	r3, [r7, #3]
 8000da0:	b672      	cpsid	i
  __disable_irq();

  /* Wait until flash operations are completed. */

  while( FLASH->SR & FLASH_SR_BSY_Msk );
 8000da2:	bf00      	nop
 8000da4:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <Flash_writeByte+0xe0>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f9      	bne.n	8000da4 <Flash_writeByte+0x10>

  /* Set PG bit to start programming. */

  FLASH->CR |= FLASH_CR_PG_Msk;
 8000db0:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <Flash_writeByte+0xe0>)
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	4a2f      	ldr	r2, [pc, #188]	; (8000e74 <Flash_writeByte+0xe0>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6113      	str	r3, [r2, #16]

  /* Set flash access size to access a byte. */

  FLASH->CR &= ~( FLASH_CR_PSIZE_Msk );
 8000dbc:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <Flash_writeByte+0xe0>)
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	4a2c      	ldr	r2, [pc, #176]	; (8000e74 <Flash_writeByte+0xe0>)
 8000dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= ( 0x0UL << FLASH_CR_PSIZE_Pos );
 8000dc8:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <Flash_writeByte+0xe0>)
 8000dca:	4a2a      	ldr	r2, [pc, #168]	; (8000e74 <Flash_writeByte+0xe0>)
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	6113      	str	r3, [r2, #16]

  /* Wait until flash controller has completed operation. */

  while( FLASH->SR & FLASH_SR_BSY_Msk );
 8000dd0:	bf00      	nop
 8000dd2:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <Flash_writeByte+0xe0>)
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f9      	bne.n	8000dd2 <Flash_writeByte+0x3e>

  /* Load required value into memory address. */

  *((volatile uint8_t*)address) = value;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	78fa      	ldrb	r2, [r7, #3]
 8000de2:	701a      	strb	r2, [r3, #0]

  Flash_Operation_State_t operationState;

  /* Wait until the busy flag is cleared or the end of operation bit is not set. */

  while( (FLASH->SR & FLASH_SR_BSY_Msk) || !(FLASH->SR & FLASH_SR_EOP_Msk) )
 8000de4:	e02c      	b.n	8000e40 <Flash_writeByte+0xac>
  {
    if(   ( FLASH->SR & ( 1UL << 1 ) )
 8000de6:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <Flash_writeByte+0xe0>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	f003 0202 	and.w	r2, r3, #2
        | ( FLASH->SR & FLASH_SR_WRPERR_Msk )
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <Flash_writeByte+0xe0>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	f003 0310 	and.w	r3, r3, #16
 8000df6:	431a      	orrs	r2, r3
		| ( FLASH->SR & FLASH_SR_PGAERR_Msk )
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <Flash_writeByte+0xe0>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	f003 0320 	and.w	r3, r3, #32
 8000e00:	431a      	orrs	r2, r3
		| ( FLASH->SR & FLASH_SR_PGPERR_Msk )
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <Flash_writeByte+0xe0>)
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0a:	431a      	orrs	r2, r3
		| ( FLASH->SR & FLASH_SR_PGSERR_Msk )
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <Flash_writeByte+0xe0>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e14:	431a      	orrs	r2, r3
		| ( FLASH->SR & FLASH_SR_RDERR_Msk ) )
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <Flash_writeByte+0xe0>)
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	4313      	orrs	r3, r2
    if(   ( FLASH->SR & ( 1UL << 1 ) )
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d00d      	beq.n	8000e40 <Flash_writeByte+0xac>
    {
      /* Clear all interrupt flags. */

      FLASH->SR |= ( FLASH_SR_WRPERR_Msk | FLASH_SR_PGAERR_Msk | FLASH_SR_PGPERR_Msk
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <Flash_writeByte+0xe0>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <Flash_writeByte+0xe0>)
 8000e2a:	f443 73f9 	orr.w	r3, r3, #498	; 0x1f2
 8000e2e:	60d3      	str	r3, [r2, #12]
      		        | FLASH_SR_PGSERR_Msk | FLASH_SR_RDERR_Msk | ( 1UL << 1 ) );

      /* Disable flash programming. */

      FLASH->CR &= (~FLASH_CR_PG_Msk);
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <Flash_writeByte+0xe0>)
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <Flash_writeByte+0xe0>)
 8000e36:	f023 0301 	bic.w	r3, r3, #1
 8000e3a:	6113      	str	r3, [r2, #16]

      return(Flash_Error);
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	e012      	b.n	8000e66 <Flash_writeByte+0xd2>
  while( (FLASH->SR & FLASH_SR_BSY_Msk) || !(FLASH->SR & FLASH_SR_EOP_Msk) )
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <Flash_writeByte+0xe0>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1cc      	bne.n	8000de6 <Flash_writeByte+0x52>
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <Flash_writeByte+0xe0>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0c6      	beq.n	8000de6 <Flash_writeByte+0x52>
    }
  }

  /* Disable programming. */

  FLASH->CR &= (~FLASH_CR_PG_Msk);
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <Flash_writeByte+0xe0>)
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <Flash_writeByte+0xe0>)
 8000e5e:	f023 0301 	bic.w	r3, r3, #1
 8000e62:	6113      	str	r3, [r2, #16]

  //__enable_irq();

  return(Flash_Ok);
 8000e64:	2300      	movs	r3, #0

}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <Flash_write>:


Flash_Operation_State_t Flash_write(uint32_t flashStartAddress,
		                            uint32_t ramStartAddress,
									uint32_t nBytes)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t counter = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  uint8_t value = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	74fb      	strb	r3, [r7, #19]
  Flash_Operation_State_t flashState;

  while( counter < nBytes  )
 8000e8c:	e016      	b.n	8000ebc <Flash_write+0x44>
  {
	value =   *( (volatile uint8_t*)(ramStartAddress + counter) );
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	4413      	add	r3, r2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	74fb      	strb	r3, [r7, #19]

    flashState = Flash_writeByte( flashStartAddress + counter, value );
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	7cfa      	ldrb	r2, [r7, #19]
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff76 	bl	8000d94 <Flash_writeByte>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	74bb      	strb	r3, [r7, #18]

    if( flashState != Flash_Ok )
 8000eac:	7cbb      	ldrb	r3, [r7, #18]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <Flash_write+0x3e>
    {
      return(Flash_Error);
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	e007      	b.n	8000ec6 <Flash_write+0x4e>
    }

    counter++;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
  while( counter < nBytes  )
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d3e4      	bcc.n	8000e8e <Flash_write+0x16>
  }

  return(Flash_Ok);
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <Flash_read>:


Flash_Operation_State_t Flash_read(uint32_t fStartAddr, uint32_t rStartAddr, uint32_t n)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b087      	sub	sp, #28
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
  uint32_t counter = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]

  while( counter < n )
 8000ede:	e00b      	b.n	8000ef8 <Flash_read+0x2a>
  {
    *( (uint32_t*)( rStartAddr + counter ) ) = *( (uint8_t*)( fStartAddr + counter ) );
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	7819      	ldrb	r1, [r3, #0]
 8000ee8:	68ba      	ldr	r2, [r7, #8]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	4413      	add	r3, r2
 8000eee:	460a      	mov	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]
    counter++;
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
  while( counter < n )
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d3ef      	bcc.n	8000ee0 <Flash_read+0x12>
  }
}
 8000f00:	bf00      	nop
 8000f02:	4618      	mov	r0, r3
 8000f04:	371c      	adds	r7, #28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <LCD_GUI_Init>:

#include "LCD_GUI.h"

void LCD_GUI_Init()
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  LCD_GUI_screen_number = LCD_GUI_Main_Initialize;
 8000f16:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <LCD_GUI_Init+0xac>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]

  Nokia5110_Init();
 8000f1c:	f003 fd56 	bl	80049cc <Nokia5110_Init>

  Nokia5110.updated = 0;
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <LCD_GUI_Init+0xb0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
  Nokia5110.x_pos = 0;
 8000f28:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <LCD_GUI_Init+0xb0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 0;
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <LCD_GUI_Init+0xb0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  for(int i = 0 ; i < 504; i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	e007      	b.n	8000f4e <LCD_GUI_Init+0x3e>
  {
    Nokia5110.byte[i] = 0x00;
 8000f3e:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <LCD_GUI_Init+0xb0>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ; i < 504; i++)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000f54:	dbf3      	blt.n	8000f3e <LCD_GUI_Init+0x2e>
  }

  Nokia5110.x_pos = 8;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <LCD_GUI_Init+0xb0>)
 8000f58:	2208      	movs	r2, #8
 8000f5a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 8;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <LCD_GUI_Init+0xb0>)
 8000f60:	2208      	movs	r2, #8
 8000f62:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("IMU Tester");
 8000f66:	4817      	ldr	r0, [pc, #92]	; (8000fc4 <LCD_GUI_Init+0xb4>)
 8000f68:	f003 ff36 	bl	8004dd8 <Nokia5110_printString>


  Nokia5110.x_pos = 8;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <LCD_GUI_Init+0xb0>)
 8000f6e:	2208      	movs	r2, #8
 8000f70:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 16;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <LCD_GUI_Init+0xb0>)
 8000f76:	2210      	movs	r2, #16
 8000f78:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("Version 1.0");
 8000f7c:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <LCD_GUI_Init+0xb8>)
 8000f7e:	f003 ff2b 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 12;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <LCD_GUI_Init+0xb0>)
 8000f84:	220c      	movs	r2, #12
 8000f86:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 32;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <LCD_GUI_Init+0xb0>)
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("[Press SW");
 8000f92:	480e      	ldr	r0, [pc, #56]	; (8000fcc <LCD_GUI_Init+0xbc>)
 8000f94:	f003 ff20 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 12;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <LCD_GUI_Init+0xb0>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 40;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <LCD_GUI_Init+0xb0>)
 8000fa2:	2228      	movs	r2, #40	; 0x28
 8000fa4:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("to start]");
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <LCD_GUI_Init+0xc0>)
 8000faa:	f003 ff15 	bl	8004dd8 <Nokia5110_printString>


  Nokia5110_updateDisplay();
 8000fae:	f003 fc89 	bl	80048c4 <Nokia5110_updateDisplay>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000414 	.word	0x20000414
 8000fc0:	20000154 	.word	0x20000154
 8000fc4:	0800cdc8 	.word	0x0800cdc8
 8000fc8:	0800cdd4 	.word	0x0800cdd4
 8000fcc:	0800cde0 	.word	0x0800cde0
 8000fd0:	0800cdec 	.word	0x0800cdec

08000fd4 <LCD_GUI_Config_Screen>:


/* Configuration screen. */

static void LCD_GUI_Config_Screen()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  Nokia5110_clear();
 8000fd8:	f003 fa98 	bl	800450c <Nokia5110_clear>

  Nokia5110.x_pos = 0;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <LCD_GUI_Config_Screen+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 0;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <LCD_GUI_Config_Screen+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("[   CONFIG   ]");
 8000fec:	4813      	ldr	r0, [pc, #76]	; (800103c <LCD_GUI_Config_Screen+0x68>)
 8000fee:	f003 fef3 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 8;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <LCD_GUI_Config_Screen+0x64>)
 8000ff4:	2208      	movs	r2, #8
 8000ff6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 16;
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <LCD_GUI_Config_Screen+0x64>)
 8000ffc:	2210      	movs	r2, #16
 8000ffe:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("IMU");
 8001002:	480f      	ldr	r0, [pc, #60]	; (8001040 <LCD_GUI_Config_Screen+0x6c>)
 8001004:	f003 fee8 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 8;
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <LCD_GUI_Config_Screen+0x64>)
 800100a:	2208      	movs	r2, #8
 800100c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 24;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <LCD_GUI_Config_Screen+0x64>)
 8001012:	2218      	movs	r2, #24
 8001014:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("Comp. Filt.");
 8001018:	480a      	ldr	r0, [pc, #40]	; (8001044 <LCD_GUI_Config_Screen+0x70>)
 800101a:	f003 fedd 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 8;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <LCD_GUI_Config_Screen+0x64>)
 8001020:	2208      	movs	r2, #8
 8001022:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 32;
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <LCD_GUI_Config_Screen+0x64>)
 8001028:	2220      	movs	r2, #32
 800102a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("Tilt dtcn.");
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <LCD_GUI_Config_Screen+0x74>)
 8001030:	f003 fed2 	bl	8004dd8 <Nokia5110_printString>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000154 	.word	0x20000154
 800103c:	0800cdf8 	.word	0x0800cdf8
 8001040:	0800ce08 	.word	0x0800ce08
 8001044:	0800ce0c 	.word	0x0800ce0c
 8001048:	0800ce18 	.word	0x0800ce18

0800104c <LCD_GUI_Config_Screen_A>:

static void LCD_GUI_Config_Screen_A()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  Nokia5110_clear();
 8001050:	f003 fa5c 	bl	800450c <Nokia5110_clear>

  Nokia5110.x_pos = 0;
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <LCD_GUI_Config_Screen_A+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 0;
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <LCD_GUI_Config_Screen_A+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("[   CONFIG   ]");
 8001064:	4813      	ldr	r0, [pc, #76]	; (80010b4 <LCD_GUI_Config_Screen_A+0x68>)
 8001066:	f003 feb7 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 0;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <LCD_GUI_Config_Screen_A+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 16;
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <LCD_GUI_Config_Screen_A+0x64>)
 8001074:	2210      	movs	r2, #16
 8001076:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString(">IMU");
 800107a:	480f      	ldr	r0, [pc, #60]	; (80010b8 <LCD_GUI_Config_Screen_A+0x6c>)
 800107c:	f003 feac 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 8;
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <LCD_GUI_Config_Screen_A+0x64>)
 8001082:	2208      	movs	r2, #8
 8001084:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 24;
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <LCD_GUI_Config_Screen_A+0x64>)
 800108a:	2218      	movs	r2, #24
 800108c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("Comp. Filt.");
 8001090:	480a      	ldr	r0, [pc, #40]	; (80010bc <LCD_GUI_Config_Screen_A+0x70>)
 8001092:	f003 fea1 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 8;
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <LCD_GUI_Config_Screen_A+0x64>)
 8001098:	2208      	movs	r2, #8
 800109a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 32;
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <LCD_GUI_Config_Screen_A+0x64>)
 80010a0:	2220      	movs	r2, #32
 80010a2:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("Tilt dtcn.");
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <LCD_GUI_Config_Screen_A+0x74>)
 80010a8:	f003 fe96 	bl	8004dd8 <Nokia5110_printString>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000154 	.word	0x20000154
 80010b4:	0800cdf8 	.word	0x0800cdf8
 80010b8:	0800ce24 	.word	0x0800ce24
 80010bc:	0800ce0c 	.word	0x0800ce0c
 80010c0:	0800ce18 	.word	0x0800ce18

080010c4 <LCD_GUI_Config_Screen_IMU_settings_A>:


static void LCD_GUI_Config_Screen_IMU_settings_A()
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 80010c8:	f003 fa20 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 80010cc:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <LCD_GUI_Config_Screen_IMU_settings_A+0xf8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 80010d4:	4b39      	ldr	r3, [pc, #228]	; (80011bc <LCD_GUI_Config_Screen_IMU_settings_A+0xf8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[    IMU     ]");
 80010dc:	4838      	ldr	r0, [pc, #224]	; (80011c0 <LCD_GUI_Config_Screen_IMU_settings_A+0xfc>)
 80010de:	f003 fe7b 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 8;
 80010e2:	4b36      	ldr	r3, [pc, #216]	; (80011bc <LCD_GUI_Config_Screen_IMU_settings_A+0xf8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 80010ea:	4b34      	ldr	r3, [pc, #208]	; (80011bc <LCD_GUI_Config_Screen_IMU_settings_A+0xf8>)
 80010ec:	2208      	movs	r2, #8
 80010ee:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
	  Nokia5110_printString(">Accel FS:");
 80010f2:	4834      	ldr	r0, [pc, #208]	; (80011c4 <LCD_GUI_Config_Screen_IMU_settings_A+0x100>)
 80010f4:	f003 fe70 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 16;
 80010f8:	4b30      	ldr	r3, [pc, #192]	; (80011bc <LCD_GUI_Config_Screen_IMU_settings_A+0xf8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <LCD_GUI_Config_Screen_IMU_settings_A+0xf8>)
 8001102:	2210      	movs	r2, #16
 8001104:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  switch( imu.sensor_configurations.sensor_configuration_segments.accel_fs_config)
 8001108:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <LCD_GUI_Config_Screen_IMU_settings_A+0x104>)
 800110a:	7a1b      	ldrb	r3, [r3, #8]
 800110c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b03      	cmp	r3, #3
 8001114:	d81a      	bhi.n	800114c <LCD_GUI_Config_Screen_IMU_settings_A+0x88>
 8001116:	a201      	add	r2, pc, #4	; (adr r2, 800111c <LCD_GUI_Config_Screen_IMU_settings_A+0x58>)
 8001118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111c:	0800112d 	.word	0x0800112d
 8001120:	08001135 	.word	0x08001135
 8001124:	0800113d 	.word	0x0800113d
 8001128:	08001145 	.word	0x08001145
	  {
	    case(ACCEL_FS_2_G):{ Nokia5110_printString("2 G"); }break;
 800112c:	4827      	ldr	r0, [pc, #156]	; (80011cc <LCD_GUI_Config_Screen_IMU_settings_A+0x108>)
 800112e:	f003 fe53 	bl	8004dd8 <Nokia5110_printString>
 8001132:	e00b      	b.n	800114c <LCD_GUI_Config_Screen_IMU_settings_A+0x88>
	    case(ACCEL_FS_4_G):{ Nokia5110_printString("4 G"); }break;
 8001134:	4826      	ldr	r0, [pc, #152]	; (80011d0 <LCD_GUI_Config_Screen_IMU_settings_A+0x10c>)
 8001136:	f003 fe4f 	bl	8004dd8 <Nokia5110_printString>
 800113a:	e007      	b.n	800114c <LCD_GUI_Config_Screen_IMU_settings_A+0x88>
	    case(ACCEL_FS_8_G):{ Nokia5110_printString("8 G"); }break;
 800113c:	4825      	ldr	r0, [pc, #148]	; (80011d4 <LCD_GUI_Config_Screen_IMU_settings_A+0x110>)
 800113e:	f003 fe4b 	bl	8004dd8 <Nokia5110_printString>
 8001142:	e003      	b.n	800114c <LCD_GUI_Config_Screen_IMU_settings_A+0x88>
	    case(ACCEL_FS_16_G):{ Nokia5110_printString("16 G"); }break;
 8001144:	4824      	ldr	r0, [pc, #144]	; (80011d8 <LCD_GUI_Config_Screen_IMU_settings_A+0x114>)
 8001146:	f003 fe47 	bl	8004dd8 <Nokia5110_printString>
 800114a:	bf00      	nop
	  }

	  Nokia5110.x_pos = 8; Nokia5110.y_pos = 24;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <LCD_GUI_Config_Screen_IMU_settings_A+0xf8>)
 800114e:	2208      	movs	r2, #8
 8001150:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <LCD_GUI_Config_Screen_IMU_settings_A+0xf8>)
 8001156:	2218      	movs	r2, #24
 8001158:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
	  Nokia5110_printString("Gyro FS:");
 800115c:	481f      	ldr	r0, [pc, #124]	; (80011dc <LCD_GUI_Config_Screen_IMU_settings_A+0x118>)
 800115e:	f003 fe3b 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 32;
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <LCD_GUI_Config_Screen_IMU_settings_A+0xf8>)
 8001164:	2200      	movs	r2, #0
 8001166:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <LCD_GUI_Config_Screen_IMU_settings_A+0xf8>)
 800116c:	2220      	movs	r2, #32
 800116e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  switch( imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config)
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <LCD_GUI_Config_Screen_IMU_settings_A+0x104>)
 8001174:	7a1b      	ldrb	r3, [r3, #8]
 8001176:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b03      	cmp	r3, #3
 800117e:	d81b      	bhi.n	80011b8 <LCD_GUI_Config_Screen_IMU_settings_A+0xf4>
 8001180:	a201      	add	r2, pc, #4	; (adr r2, 8001188 <LCD_GUI_Config_Screen_IMU_settings_A+0xc4>)
 8001182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001186:	bf00      	nop
 8001188:	08001199 	.word	0x08001199
 800118c:	080011a1 	.word	0x080011a1
 8001190:	080011a9 	.word	0x080011a9
 8001194:	080011b1 	.word	0x080011b1
	  {
	    case(GYRO_FS_250_DPS):{ Nokia5110_printString("250 DPS"); }break;
 8001198:	4811      	ldr	r0, [pc, #68]	; (80011e0 <LCD_GUI_Config_Screen_IMU_settings_A+0x11c>)
 800119a:	f003 fe1d 	bl	8004dd8 <Nokia5110_printString>
 800119e:	e00b      	b.n	80011b8 <LCD_GUI_Config_Screen_IMU_settings_A+0xf4>
	    case(GYRO_FS_500_DPS):{ Nokia5110_printString("500 DPS"); }break;
 80011a0:	4810      	ldr	r0, [pc, #64]	; (80011e4 <LCD_GUI_Config_Screen_IMU_settings_A+0x120>)
 80011a2:	f003 fe19 	bl	8004dd8 <Nokia5110_printString>
 80011a6:	e007      	b.n	80011b8 <LCD_GUI_Config_Screen_IMU_settings_A+0xf4>
	    case(GYRO_FS_1000_DPS):{ Nokia5110_printString("1000 DPS"); }break;
 80011a8:	480f      	ldr	r0, [pc, #60]	; (80011e8 <LCD_GUI_Config_Screen_IMU_settings_A+0x124>)
 80011aa:	f003 fe15 	bl	8004dd8 <Nokia5110_printString>
 80011ae:	e003      	b.n	80011b8 <LCD_GUI_Config_Screen_IMU_settings_A+0xf4>
	    case(GYRO_FS_2000_DPS):{ Nokia5110_printString("2000 DPS"); }break;
 80011b0:	480e      	ldr	r0, [pc, #56]	; (80011ec <LCD_GUI_Config_Screen_IMU_settings_A+0x128>)
 80011b2:	f003 fe11 	bl	8004dd8 <Nokia5110_printString>
 80011b6:	bf00      	nop
	  }
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000154 	.word	0x20000154
 80011c0:	0800ce2c 	.word	0x0800ce2c
 80011c4:	0800ce3c 	.word	0x0800ce3c
 80011c8:	20000350 	.word	0x20000350
 80011cc:	0800ce48 	.word	0x0800ce48
 80011d0:	0800ce4c 	.word	0x0800ce4c
 80011d4:	0800ce50 	.word	0x0800ce50
 80011d8:	0800ce54 	.word	0x0800ce54
 80011dc:	0800ce5c 	.word	0x0800ce5c
 80011e0:	0800ce68 	.word	0x0800ce68
 80011e4:	0800ce70 	.word	0x0800ce70
 80011e8:	0800ce78 	.word	0x0800ce78
 80011ec:	0800ce84 	.word	0x0800ce84

080011f0 <LCD_GUI_Config_Screen_IMU_settings_B>:


static void LCD_GUI_Config_Screen_IMU_settings_B()
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 80011f4:	f003 f98a 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 80011f8:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <LCD_GUI_Config_Screen_IMU_settings_B+0xf8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8001200:	4b39      	ldr	r3, [pc, #228]	; (80012e8 <LCD_GUI_Config_Screen_IMU_settings_B+0xf8>)
 8001202:	2200      	movs	r2, #0
 8001204:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[    IMU     ]");
 8001208:	4838      	ldr	r0, [pc, #224]	; (80012ec <LCD_GUI_Config_Screen_IMU_settings_B+0xfc>)
 800120a:	f003 fde5 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 8; Nokia5110.y_pos = 8;
 800120e:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <LCD_GUI_Config_Screen_IMU_settings_B+0xf8>)
 8001210:	2208      	movs	r2, #8
 8001212:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8001216:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <LCD_GUI_Config_Screen_IMU_settings_B+0xf8>)
 8001218:	2208      	movs	r2, #8
 800121a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
	  Nokia5110_printString("Accel FS:");
 800121e:	4834      	ldr	r0, [pc, #208]	; (80012f0 <LCD_GUI_Config_Screen_IMU_settings_B+0x100>)
 8001220:	f003 fdda 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 16;
 8001224:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <LCD_GUI_Config_Screen_IMU_settings_B+0xf8>)
 8001226:	2200      	movs	r2, #0
 8001228:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 800122c:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <LCD_GUI_Config_Screen_IMU_settings_B+0xf8>)
 800122e:	2210      	movs	r2, #16
 8001230:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  switch( imu.sensor_configurations.sensor_configuration_segments.accel_fs_config)
 8001234:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <LCD_GUI_Config_Screen_IMU_settings_B+0x104>)
 8001236:	7a1b      	ldrb	r3, [r3, #8]
 8001238:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b03      	cmp	r3, #3
 8001240:	d81a      	bhi.n	8001278 <LCD_GUI_Config_Screen_IMU_settings_B+0x88>
 8001242:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <LCD_GUI_Config_Screen_IMU_settings_B+0x58>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	08001259 	.word	0x08001259
 800124c:	08001261 	.word	0x08001261
 8001250:	08001269 	.word	0x08001269
 8001254:	08001271 	.word	0x08001271
	  {
	    case(ACCEL_FS_2_G):{ Nokia5110_printString("2 G"); }break;
 8001258:	4827      	ldr	r0, [pc, #156]	; (80012f8 <LCD_GUI_Config_Screen_IMU_settings_B+0x108>)
 800125a:	f003 fdbd 	bl	8004dd8 <Nokia5110_printString>
 800125e:	e00b      	b.n	8001278 <LCD_GUI_Config_Screen_IMU_settings_B+0x88>
	    case(ACCEL_FS_4_G):{ Nokia5110_printString("4 G"); }break;
 8001260:	4826      	ldr	r0, [pc, #152]	; (80012fc <LCD_GUI_Config_Screen_IMU_settings_B+0x10c>)
 8001262:	f003 fdb9 	bl	8004dd8 <Nokia5110_printString>
 8001266:	e007      	b.n	8001278 <LCD_GUI_Config_Screen_IMU_settings_B+0x88>
	    case(ACCEL_FS_8_G):{ Nokia5110_printString("8 G"); }break;
 8001268:	4825      	ldr	r0, [pc, #148]	; (8001300 <LCD_GUI_Config_Screen_IMU_settings_B+0x110>)
 800126a:	f003 fdb5 	bl	8004dd8 <Nokia5110_printString>
 800126e:	e003      	b.n	8001278 <LCD_GUI_Config_Screen_IMU_settings_B+0x88>
	    case(ACCEL_FS_16_G):{ Nokia5110_printString("16 G"); }break;
 8001270:	4824      	ldr	r0, [pc, #144]	; (8001304 <LCD_GUI_Config_Screen_IMU_settings_B+0x114>)
 8001272:	f003 fdb1 	bl	8004dd8 <Nokia5110_printString>
 8001276:	bf00      	nop
	  }

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 24;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <LCD_GUI_Config_Screen_IMU_settings_B+0xf8>)
 800127a:	2200      	movs	r2, #0
 800127c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <LCD_GUI_Config_Screen_IMU_settings_B+0xf8>)
 8001282:	2218      	movs	r2, #24
 8001284:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
	  Nokia5110_printString(">Gyro FS:");
 8001288:	481f      	ldr	r0, [pc, #124]	; (8001308 <LCD_GUI_Config_Screen_IMU_settings_B+0x118>)
 800128a:	f003 fda5 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 32;
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <LCD_GUI_Config_Screen_IMU_settings_B+0xf8>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <LCD_GUI_Config_Screen_IMU_settings_B+0xf8>)
 8001298:	2220      	movs	r2, #32
 800129a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  switch( imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config)
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <LCD_GUI_Config_Screen_IMU_settings_B+0x104>)
 80012a0:	7a1b      	ldrb	r3, [r3, #8]
 80012a2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d81b      	bhi.n	80012e4 <LCD_GUI_Config_Screen_IMU_settings_B+0xf4>
 80012ac:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <LCD_GUI_Config_Screen_IMU_settings_B+0xc4>)
 80012ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b2:	bf00      	nop
 80012b4:	080012c5 	.word	0x080012c5
 80012b8:	080012cd 	.word	0x080012cd
 80012bc:	080012d5 	.word	0x080012d5
 80012c0:	080012dd 	.word	0x080012dd
	  {
	    case(GYRO_FS_250_DPS):{ Nokia5110_printString("250 DPS"); }break;
 80012c4:	4811      	ldr	r0, [pc, #68]	; (800130c <LCD_GUI_Config_Screen_IMU_settings_B+0x11c>)
 80012c6:	f003 fd87 	bl	8004dd8 <Nokia5110_printString>
 80012ca:	e00b      	b.n	80012e4 <LCD_GUI_Config_Screen_IMU_settings_B+0xf4>
	    case(GYRO_FS_500_DPS):{ Nokia5110_printString("500 DPS"); }break;
 80012cc:	4810      	ldr	r0, [pc, #64]	; (8001310 <LCD_GUI_Config_Screen_IMU_settings_B+0x120>)
 80012ce:	f003 fd83 	bl	8004dd8 <Nokia5110_printString>
 80012d2:	e007      	b.n	80012e4 <LCD_GUI_Config_Screen_IMU_settings_B+0xf4>
	    case(GYRO_FS_1000_DPS):{ Nokia5110_printString("1000 DPS"); }break;
 80012d4:	480f      	ldr	r0, [pc, #60]	; (8001314 <LCD_GUI_Config_Screen_IMU_settings_B+0x124>)
 80012d6:	f003 fd7f 	bl	8004dd8 <Nokia5110_printString>
 80012da:	e003      	b.n	80012e4 <LCD_GUI_Config_Screen_IMU_settings_B+0xf4>
	    case(GYRO_FS_2000_DPS):{ Nokia5110_printString("2000 DPS"); }break;
 80012dc:	480e      	ldr	r0, [pc, #56]	; (8001318 <LCD_GUI_Config_Screen_IMU_settings_B+0x128>)
 80012de:	f003 fd7b 	bl	8004dd8 <Nokia5110_printString>
 80012e2:	bf00      	nop
	  }
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000154 	.word	0x20000154
 80012ec:	0800ce2c 	.word	0x0800ce2c
 80012f0:	0800ce90 	.word	0x0800ce90
 80012f4:	20000350 	.word	0x20000350
 80012f8:	0800ce48 	.word	0x0800ce48
 80012fc:	0800ce4c 	.word	0x0800ce4c
 8001300:	0800ce50 	.word	0x0800ce50
 8001304:	0800ce54 	.word	0x0800ce54
 8001308:	0800ce9c 	.word	0x0800ce9c
 800130c:	0800ce68 	.word	0x0800ce68
 8001310:	0800ce70 	.word	0x0800ce70
 8001314:	0800ce78 	.word	0x0800ce78
 8001318:	0800ce84 	.word	0x0800ce84

0800131c <LCD_GUI_Config_Screen_IMU_settings_C>:


static void LCD_GUI_Config_Screen_IMU_settings_C()
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8001320:	f003 f8f4 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <LCD_GUI_Config_Screen_IMU_settings_C+0x88>)
 8001326:	2200      	movs	r2, #0
 8001328:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <LCD_GUI_Config_Screen_IMU_settings_C+0x88>)
 800132e:	2200      	movs	r2, #0
 8001330:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[    IMU     ]");
 8001334:	481c      	ldr	r0, [pc, #112]	; (80013a8 <LCD_GUI_Config_Screen_IMU_settings_C+0x8c>)
 8001336:	f003 fd4f 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 8;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <LCD_GUI_Config_Screen_IMU_settings_C+0x88>)
 800133c:	2200      	movs	r2, #0
 800133e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <LCD_GUI_Config_Screen_IMU_settings_C+0x88>)
 8001344:	2208      	movs	r2, #8
 8001346:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
	  Nokia5110_printString(">Calib. Pts. :");
 800134a:	4818      	ldr	r0, [pc, #96]	; (80013ac <LCD_GUI_Config_Screen_IMU_settings_C+0x90>)
 800134c:	f003 fd44 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 16;
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <LCD_GUI_Config_Screen_IMU_settings_C+0x88>)
 8001352:	2200      	movs	r2, #0
 8001354:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <LCD_GUI_Config_Screen_IMU_settings_C+0x88>)
 800135a:	2210      	movs	r2, #16
 800135c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

      Nokia5110_printU8(imu.N_calibration_points);
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <LCD_GUI_Config_Screen_IMU_settings_C+0x94>)
 8001362:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001366:	4618      	mov	r0, r3
 8001368:	f003 fd4c 	bl	8004e04 <Nokia5110_printU8>

	  Nokia5110.x_pos = 8; Nokia5110.y_pos = 24;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <LCD_GUI_Config_Screen_IMU_settings_C+0x88>)
 800136e:	2208      	movs	r2, #8
 8001370:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <LCD_GUI_Config_Screen_IMU_settings_C+0x88>)
 8001376:	2218      	movs	r2, #24
 8001378:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
	  Nokia5110_printString("Calib. int.:");
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <LCD_GUI_Config_Screen_IMU_settings_C+0x98>)
 800137e:	f003 fd2b 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 32;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <LCD_GUI_Config_Screen_IMU_settings_C+0x88>)
 8001384:	2200      	movs	r2, #0
 8001386:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <LCD_GUI_Config_Screen_IMU_settings_C+0x88>)
 800138c:	2220      	movs	r2, #32
 800138e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
      Nokia5110_printU8(imu.calibration_interval_ms);
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <LCD_GUI_Config_Screen_IMU_settings_C+0x94>)
 8001394:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001398:	4618      	mov	r0, r3
 800139a:	f003 fd33 	bl	8004e04 <Nokia5110_printU8>
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000154 	.word	0x20000154
 80013a8:	0800ce2c 	.word	0x0800ce2c
 80013ac:	0800cea8 	.word	0x0800cea8
 80013b0:	20000350 	.word	0x20000350
 80013b4:	0800ceb8 	.word	0x0800ceb8

080013b8 <LCD_GUI_Config_Screen_IMU_settings_D>:


static void LCD_GUI_Config_Screen_IMU_settings_D()
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 80013bc:	f003 f8a6 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <LCD_GUI_Config_Screen_IMU_settings_D+0x88>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <LCD_GUI_Config_Screen_IMU_settings_D+0x88>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[    IMU     ]");
 80013d0:	481c      	ldr	r0, [pc, #112]	; (8001444 <LCD_GUI_Config_Screen_IMU_settings_D+0x8c>)
 80013d2:	f003 fd01 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 8; Nokia5110.y_pos = 8;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <LCD_GUI_Config_Screen_IMU_settings_D+0x88>)
 80013d8:	2208      	movs	r2, #8
 80013da:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <LCD_GUI_Config_Screen_IMU_settings_D+0x88>)
 80013e0:	2208      	movs	r2, #8
 80013e2:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
	  Nokia5110_printString("Calib. Pts. :");
 80013e6:	4818      	ldr	r0, [pc, #96]	; (8001448 <LCD_GUI_Config_Screen_IMU_settings_D+0x90>)
 80013e8:	f003 fcf6 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 16;
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <LCD_GUI_Config_Screen_IMU_settings_D+0x88>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <LCD_GUI_Config_Screen_IMU_settings_D+0x88>)
 80013f6:	2210      	movs	r2, #16
 80013f8:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

      Nokia5110_printU8(imu.N_calibration_points);
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <LCD_GUI_Config_Screen_IMU_settings_D+0x94>)
 80013fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001402:	4618      	mov	r0, r3
 8001404:	f003 fcfe 	bl	8004e04 <Nokia5110_printU8>

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 24;
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <LCD_GUI_Config_Screen_IMU_settings_D+0x88>)
 800140a:	2200      	movs	r2, #0
 800140c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <LCD_GUI_Config_Screen_IMU_settings_D+0x88>)
 8001412:	2218      	movs	r2, #24
 8001414:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
	  Nokia5110_printString(">Calib. int.:");
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <LCD_GUI_Config_Screen_IMU_settings_D+0x98>)
 800141a:	f003 fcdd 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 32;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <LCD_GUI_Config_Screen_IMU_settings_D+0x88>)
 8001420:	2200      	movs	r2, #0
 8001422:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <LCD_GUI_Config_Screen_IMU_settings_D+0x88>)
 8001428:	2220      	movs	r2, #32
 800142a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
      Nokia5110_printU8(imu.calibration_interval_ms);
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <LCD_GUI_Config_Screen_IMU_settings_D+0x94>)
 8001430:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fce5 	bl	8004e04 <Nokia5110_printU8>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000154 	.word	0x20000154
 8001444:	0800ce2c 	.word	0x0800ce2c
 8001448:	0800cec8 	.word	0x0800cec8
 800144c:	20000350 	.word	0x20000350
 8001450:	0800ced8 	.word	0x0800ced8

08001454 <LCD_GUI_Config_Screen_IMU_settings_E>:


static void LCD_GUI_Config_Screen_IMU_settings_E()
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8001458:	f003 f858 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <LCD_GUI_Config_Screen_IMU_settings_E+0xb8>)
 800145e:	2200      	movs	r2, #0
 8001460:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <LCD_GUI_Config_Screen_IMU_settings_E+0xb8>)
 8001466:	2200      	movs	r2, #0
 8001468:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[    IMU     ]");
 800146c:	4828      	ldr	r0, [pc, #160]	; (8001510 <LCD_GUI_Config_Screen_IMU_settings_E+0xbc>)
 800146e:	f003 fcb3 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 8;
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <LCD_GUI_Config_Screen_IMU_settings_E+0xb8>)
 8001474:	2200      	movs	r2, #0
 8001476:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <LCD_GUI_Config_Screen_IMU_settings_E+0xb8>)
 800147c:	2208      	movs	r2, #8
 800147e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
	  Nokia5110_printString(">Calib. axis.:");
 8001482:	4824      	ldr	r0, [pc, #144]	; (8001514 <LCD_GUI_Config_Screen_IMU_settings_E+0xc0>)
 8001484:	f003 fca8 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 16;
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <LCD_GUI_Config_Screen_IMU_settings_E+0xb8>)
 800148a:	2200      	movs	r2, #0
 800148c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <LCD_GUI_Config_Screen_IMU_settings_E+0xb8>)
 8001492:	2210      	movs	r2, #16
 8001494:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  switch(imu.calibration_axis)
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <LCD_GUI_Config_Screen_IMU_settings_E+0xc4>)
 800149a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d826      	bhi.n	80014f0 <LCD_GUI_Config_Screen_IMU_settings_E+0x9c>
 80014a2:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <LCD_GUI_Config_Screen_IMU_settings_E+0x54>)
 80014a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a8:	080014c1 	.word	0x080014c1
 80014ac:	080014c9 	.word	0x080014c9
 80014b0:	080014d1 	.word	0x080014d1
 80014b4:	080014d9 	.word	0x080014d9
 80014b8:	080014e1 	.word	0x080014e1
 80014bc:	080014e9 	.word	0x080014e9
	  {
	    case(X_Positive):{ Nokia5110_printString("X positive"); }break;
 80014c0:	4816      	ldr	r0, [pc, #88]	; (800151c <LCD_GUI_Config_Screen_IMU_settings_E+0xc8>)
 80014c2:	f003 fc89 	bl	8004dd8 <Nokia5110_printString>
 80014c6:	e013      	b.n	80014f0 <LCD_GUI_Config_Screen_IMU_settings_E+0x9c>
	    case(X_Negative):{ Nokia5110_printString("X negative"); }break;
 80014c8:	4815      	ldr	r0, [pc, #84]	; (8001520 <LCD_GUI_Config_Screen_IMU_settings_E+0xcc>)
 80014ca:	f003 fc85 	bl	8004dd8 <Nokia5110_printString>
 80014ce:	e00f      	b.n	80014f0 <LCD_GUI_Config_Screen_IMU_settings_E+0x9c>
	    case(Y_Positive):{ Nokia5110_printString("Y positive"); }break;
 80014d0:	4814      	ldr	r0, [pc, #80]	; (8001524 <LCD_GUI_Config_Screen_IMU_settings_E+0xd0>)
 80014d2:	f003 fc81 	bl	8004dd8 <Nokia5110_printString>
 80014d6:	e00b      	b.n	80014f0 <LCD_GUI_Config_Screen_IMU_settings_E+0x9c>
	    case(Y_Negative):{ Nokia5110_printString("Y negative"); }break;
 80014d8:	4813      	ldr	r0, [pc, #76]	; (8001528 <LCD_GUI_Config_Screen_IMU_settings_E+0xd4>)
 80014da:	f003 fc7d 	bl	8004dd8 <Nokia5110_printString>
 80014de:	e007      	b.n	80014f0 <LCD_GUI_Config_Screen_IMU_settings_E+0x9c>
	    case(Z_Positive):{ Nokia5110_printString("Z positive"); }break;
 80014e0:	4812      	ldr	r0, [pc, #72]	; (800152c <LCD_GUI_Config_Screen_IMU_settings_E+0xd8>)
 80014e2:	f003 fc79 	bl	8004dd8 <Nokia5110_printString>
 80014e6:	e003      	b.n	80014f0 <LCD_GUI_Config_Screen_IMU_settings_E+0x9c>
	    case(Z_Negative):{ Nokia5110_printString("Z negative"); }break;
 80014e8:	4811      	ldr	r0, [pc, #68]	; (8001530 <LCD_GUI_Config_Screen_IMU_settings_E+0xdc>)
 80014ea:	f003 fc75 	bl	8004dd8 <Nokia5110_printString>
 80014ee:	bf00      	nop
	  }

	  Nokia5110.x_pos = 8; Nokia5110.y_pos = 24;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <LCD_GUI_Config_Screen_IMU_settings_E+0xb8>)
 80014f2:	2208      	movs	r2, #8
 80014f4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <LCD_GUI_Config_Screen_IMU_settings_E+0xb8>)
 80014fa:	2218      	movs	r2, #24
 80014fc:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
	  Nokia5110_printString("Return");
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <LCD_GUI_Config_Screen_IMU_settings_E+0xe0>)
 8001502:	f003 fc69 	bl	8004dd8 <Nokia5110_printString>
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000154 	.word	0x20000154
 8001510:	0800ce2c 	.word	0x0800ce2c
 8001514:	0800cee8 	.word	0x0800cee8
 8001518:	20000350 	.word	0x20000350
 800151c:	0800cef8 	.word	0x0800cef8
 8001520:	0800cf04 	.word	0x0800cf04
 8001524:	0800cf10 	.word	0x0800cf10
 8001528:	0800cf1c 	.word	0x0800cf1c
 800152c:	0800cf28 	.word	0x0800cf28
 8001530:	0800cf34 	.word	0x0800cf34
 8001534:	0800cf40 	.word	0x0800cf40

08001538 <LCD_GUI_Config_Screen_IMU_settings_F>:


static void LCD_GUI_Config_Screen_IMU_settings_F()
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 800153c:	f002 ffe6 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8001540:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <LCD_GUI_Config_Screen_IMU_settings_F+0xb8>)
 8001542:	2200      	movs	r2, #0
 8001544:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <LCD_GUI_Config_Screen_IMU_settings_F+0xb8>)
 800154a:	2200      	movs	r2, #0
 800154c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[    IMU     ]");
 8001550:	4828      	ldr	r0, [pc, #160]	; (80015f4 <LCD_GUI_Config_Screen_IMU_settings_F+0xbc>)
 8001552:	f003 fc41 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 8; Nokia5110.y_pos = 8;
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <LCD_GUI_Config_Screen_IMU_settings_F+0xb8>)
 8001558:	2208      	movs	r2, #8
 800155a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <LCD_GUI_Config_Screen_IMU_settings_F+0xb8>)
 8001560:	2208      	movs	r2, #8
 8001562:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
	  Nokia5110_printString("Calib. axis.:");
 8001566:	4824      	ldr	r0, [pc, #144]	; (80015f8 <LCD_GUI_Config_Screen_IMU_settings_F+0xc0>)
 8001568:	f003 fc36 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 16;
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <LCD_GUI_Config_Screen_IMU_settings_F+0xb8>)
 800156e:	2200      	movs	r2, #0
 8001570:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <LCD_GUI_Config_Screen_IMU_settings_F+0xb8>)
 8001576:	2210      	movs	r2, #16
 8001578:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  switch(imu.calibration_axis)
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <LCD_GUI_Config_Screen_IMU_settings_F+0xc4>)
 800157e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001582:	2b05      	cmp	r3, #5
 8001584:	d826      	bhi.n	80015d4 <LCD_GUI_Config_Screen_IMU_settings_F+0x9c>
 8001586:	a201      	add	r2, pc, #4	; (adr r2, 800158c <LCD_GUI_Config_Screen_IMU_settings_F+0x54>)
 8001588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158c:	080015a5 	.word	0x080015a5
 8001590:	080015ad 	.word	0x080015ad
 8001594:	080015b5 	.word	0x080015b5
 8001598:	080015bd 	.word	0x080015bd
 800159c:	080015c5 	.word	0x080015c5
 80015a0:	080015cd 	.word	0x080015cd
	  {
	    case(X_Positive):{ Nokia5110_printString("X positive"); }break;
 80015a4:	4816      	ldr	r0, [pc, #88]	; (8001600 <LCD_GUI_Config_Screen_IMU_settings_F+0xc8>)
 80015a6:	f003 fc17 	bl	8004dd8 <Nokia5110_printString>
 80015aa:	e013      	b.n	80015d4 <LCD_GUI_Config_Screen_IMU_settings_F+0x9c>
	    case(X_Negative):{ Nokia5110_printString("X negative"); }break;
 80015ac:	4815      	ldr	r0, [pc, #84]	; (8001604 <LCD_GUI_Config_Screen_IMU_settings_F+0xcc>)
 80015ae:	f003 fc13 	bl	8004dd8 <Nokia5110_printString>
 80015b2:	e00f      	b.n	80015d4 <LCD_GUI_Config_Screen_IMU_settings_F+0x9c>
	    case(Y_Positive):{ Nokia5110_printString("Y positive"); }break;
 80015b4:	4814      	ldr	r0, [pc, #80]	; (8001608 <LCD_GUI_Config_Screen_IMU_settings_F+0xd0>)
 80015b6:	f003 fc0f 	bl	8004dd8 <Nokia5110_printString>
 80015ba:	e00b      	b.n	80015d4 <LCD_GUI_Config_Screen_IMU_settings_F+0x9c>
	    case(Y_Negative):{ Nokia5110_printString("Y negative"); }break;
 80015bc:	4813      	ldr	r0, [pc, #76]	; (800160c <LCD_GUI_Config_Screen_IMU_settings_F+0xd4>)
 80015be:	f003 fc0b 	bl	8004dd8 <Nokia5110_printString>
 80015c2:	e007      	b.n	80015d4 <LCD_GUI_Config_Screen_IMU_settings_F+0x9c>
	    case(Z_Positive):{ Nokia5110_printString("Z positive"); }break;
 80015c4:	4812      	ldr	r0, [pc, #72]	; (8001610 <LCD_GUI_Config_Screen_IMU_settings_F+0xd8>)
 80015c6:	f003 fc07 	bl	8004dd8 <Nokia5110_printString>
 80015ca:	e003      	b.n	80015d4 <LCD_GUI_Config_Screen_IMU_settings_F+0x9c>
	    case(Z_Negative):{ Nokia5110_printString("Z negative"); }break;
 80015cc:	4811      	ldr	r0, [pc, #68]	; (8001614 <LCD_GUI_Config_Screen_IMU_settings_F+0xdc>)
 80015ce:	f003 fc03 	bl	8004dd8 <Nokia5110_printString>
 80015d2:	bf00      	nop
	  }

	  Nokia5110.x_pos = 0; Nokia5110.y_pos = 24;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <LCD_GUI_Config_Screen_IMU_settings_F+0xb8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <LCD_GUI_Config_Screen_IMU_settings_F+0xb8>)
 80015de:	2218      	movs	r2, #24
 80015e0:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
	  Nokia5110_printString(">Return");
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <LCD_GUI_Config_Screen_IMU_settings_F+0xe0>)
 80015e6:	f003 fbf7 	bl	8004dd8 <Nokia5110_printString>
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000154 	.word	0x20000154
 80015f4:	0800ce2c 	.word	0x0800ce2c
 80015f8:	0800cf48 	.word	0x0800cf48
 80015fc:	20000350 	.word	0x20000350
 8001600:	0800cef8 	.word	0x0800cef8
 8001604:	0800cf04 	.word	0x0800cf04
 8001608:	0800cf10 	.word	0x0800cf10
 800160c:	0800cf1c 	.word	0x0800cf1c
 8001610:	0800cf28 	.word	0x0800cf28
 8001614:	0800cf34 	.word	0x0800cf34
 8001618:	0800cf58 	.word	0x0800cf58

0800161c <LCD_GUI_Config_Screen_B>:



static void LCD_GUI_Config_Screen_B()
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  Nokia5110_clear();
 8001620:	f002 ff74 	bl	800450c <Nokia5110_clear>

  Nokia5110.x_pos = 0;
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <LCD_GUI_Config_Screen_B+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 0;
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <LCD_GUI_Config_Screen_B+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("[   CONFIG   ]");
 8001634:	4813      	ldr	r0, [pc, #76]	; (8001684 <LCD_GUI_Config_Screen_B+0x68>)
 8001636:	f003 fbcf 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 8;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <LCD_GUI_Config_Screen_B+0x64>)
 800163c:	2208      	movs	r2, #8
 800163e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 16;
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <LCD_GUI_Config_Screen_B+0x64>)
 8001644:	2210      	movs	r2, #16
 8001646:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("IMU");
 800164a:	480f      	ldr	r0, [pc, #60]	; (8001688 <LCD_GUI_Config_Screen_B+0x6c>)
 800164c:	f003 fbc4 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 0;
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <LCD_GUI_Config_Screen_B+0x64>)
 8001652:	2200      	movs	r2, #0
 8001654:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 24;
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <LCD_GUI_Config_Screen_B+0x64>)
 800165a:	2218      	movs	r2, #24
 800165c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString(">Comp. Filt.");
 8001660:	480a      	ldr	r0, [pc, #40]	; (800168c <LCD_GUI_Config_Screen_B+0x70>)
 8001662:	f003 fbb9 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 8;
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <LCD_GUI_Config_Screen_B+0x64>)
 8001668:	2208      	movs	r2, #8
 800166a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 32;
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <LCD_GUI_Config_Screen_B+0x64>)
 8001670:	2220      	movs	r2, #32
 8001672:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("Tilt dtcn.");
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <LCD_GUI_Config_Screen_B+0x74>)
 8001678:	f003 fbae 	bl	8004dd8 <Nokia5110_printString>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000154 	.word	0x20000154
 8001684:	0800cdf8 	.word	0x0800cdf8
 8001688:	0800ce08 	.word	0x0800ce08
 800168c:	0800cf60 	.word	0x0800cf60
 8001690:	0800ce18 	.word	0x0800ce18

08001694 <LCD_GUI_Config_Screen_CF_settings_A>:

static void LCD_GUI_Config_Screen_CF_settings_A()
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8001698:	f002 ff38 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <LCD_GUI_Config_Screen_CF_settings_A+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <LCD_GUI_Config_Screen_CF_settings_A+0x90>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[ COMP FILT  ]");
 80016ac:	481e      	ldr	r0, [pc, #120]	; (8001728 <LCD_GUI_Config_Screen_CF_settings_A+0x94>)
 80016ae:	f003 fb93 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <LCD_GUI_Config_Screen_CF_settings_A+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <LCD_GUI_Config_Screen_CF_settings_A+0x90>)
 80016bc:	2208      	movs	r2, #8
 80016be:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">Roll coeff:");
 80016c2:	481a      	ldr	r0, [pc, #104]	; (800172c <LCD_GUI_Config_Screen_CF_settings_A+0x98>)
 80016c4:	f003 fb88 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <LCD_GUI_Config_Screen_CF_settings_A+0x90>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <LCD_GUI_Config_Screen_CF_settings_A+0x90>)
 80016d2:	2210      	movs	r2, #16
 80016d4:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.roll_coeff,3);
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <LCD_GUI_Config_Screen_CF_settings_A+0x9c>)
 80016da:	edd3 7a03 	vldr	s15, [r3, #12]
 80016de:	2003      	movs	r0, #3
 80016e0:	eeb0 0a67 	vmov.f32	s0, s15
 80016e4:	f003 ffcc 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 8;
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <LCD_GUI_Config_Screen_CF_settings_A+0x90>)
 80016ea:	2208      	movs	r2, #8
 80016ec:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <LCD_GUI_Config_Screen_CF_settings_A+0x90>)
 80016f2:	2218      	movs	r2, #24
 80016f4:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Pitch coeff.");
 80016f8:	480e      	ldr	r0, [pc, #56]	; (8001734 <LCD_GUI_Config_Screen_CF_settings_A+0xa0>)
 80016fa:	f003 fb6d 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <LCD_GUI_Config_Screen_CF_settings_A+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 32;
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <LCD_GUI_Config_Screen_CF_settings_A+0x90>)
 8001708:	2220      	movs	r2, #32
 800170a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.pitch_coeff,3);
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <LCD_GUI_Config_Screen_CF_settings_A+0x9c>)
 8001710:	edd3 7a04 	vldr	s15, [r3, #16]
 8001714:	2003      	movs	r0, #3
 8001716:	eeb0 0a67 	vmov.f32	s0, s15
 800171a:	f003 ffb1 	bl	8005680 <Nokia5110_printFloat>
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000154 	.word	0x20000154
 8001728:	0800cf70 	.word	0x0800cf70
 800172c:	0800cf80 	.word	0x0800cf80
 8001730:	2000048c 	.word	0x2000048c
 8001734:	0800cf90 	.word	0x0800cf90

08001738 <LCD_GUI_Config_Screen_CF_settings_B>:


static void LCD_GUI_Config_Screen_CF_settings_B()
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 800173c:	f002 fee6 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <LCD_GUI_Config_Screen_CF_settings_B+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <LCD_GUI_Config_Screen_CF_settings_B+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[ COMP FILT  ]");
 8001750:	481e      	ldr	r0, [pc, #120]	; (80017cc <LCD_GUI_Config_Screen_CF_settings_B+0x94>)
 8001752:	f003 fb41 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 8;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <LCD_GUI_Config_Screen_CF_settings_B+0x90>)
 8001758:	2208      	movs	r2, #8
 800175a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <LCD_GUI_Config_Screen_CF_settings_B+0x90>)
 8001760:	2208      	movs	r2, #8
 8001762:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Roll coeff:");
 8001766:	481a      	ldr	r0, [pc, #104]	; (80017d0 <LCD_GUI_Config_Screen_CF_settings_B+0x98>)
 8001768:	f003 fb36 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <LCD_GUI_Config_Screen_CF_settings_B+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <LCD_GUI_Config_Screen_CF_settings_B+0x90>)
 8001776:	2210      	movs	r2, #16
 8001778:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.roll_coeff,3);
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <LCD_GUI_Config_Screen_CF_settings_B+0x9c>)
 800177e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001782:	2003      	movs	r0, #3
 8001784:	eeb0 0a67 	vmov.f32	s0, s15
 8001788:	f003 ff7a 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 0;
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <LCD_GUI_Config_Screen_CF_settings_B+0x90>)
 800178e:	2200      	movs	r2, #0
 8001790:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <LCD_GUI_Config_Screen_CF_settings_B+0x90>)
 8001796:	2218      	movs	r2, #24
 8001798:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">Pitch coeff.");
 800179c:	480e      	ldr	r0, [pc, #56]	; (80017d8 <LCD_GUI_Config_Screen_CF_settings_B+0xa0>)
 800179e:	f003 fb1b 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <LCD_GUI_Config_Screen_CF_settings_B+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 32;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <LCD_GUI_Config_Screen_CF_settings_B+0x90>)
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.pitch_coeff,3);
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <LCD_GUI_Config_Screen_CF_settings_B+0x9c>)
 80017b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80017b8:	2003      	movs	r0, #3
 80017ba:	eeb0 0a67 	vmov.f32	s0, s15
 80017be:	f003 ff5f 	bl	8005680 <Nokia5110_printFloat>
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000154 	.word	0x20000154
 80017cc:	0800cf70 	.word	0x0800cf70
 80017d0:	0800cfa0 	.word	0x0800cfa0
 80017d4:	2000048c 	.word	0x2000048c
 80017d8:	0800cfac 	.word	0x0800cfac

080017dc <LCD_GUI_Config_Screen_CF_settings_C>:


static void LCD_GUI_Config_Screen_CF_settings_C()
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 80017e0:	f002 fe94 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <LCD_GUI_Config_Screen_CF_settings_C+0x70>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <LCD_GUI_Config_Screen_CF_settings_C+0x70>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[ COMP FILT  ]");
 80017f4:	4816      	ldr	r0, [pc, #88]	; (8001850 <LCD_GUI_Config_Screen_CF_settings_C+0x74>)
 80017f6:	f003 faef 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <LCD_GUI_Config_Screen_CF_settings_C+0x70>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <LCD_GUI_Config_Screen_CF_settings_C+0x70>)
 8001804:	2208      	movs	r2, #8
 8001806:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">Yaw coeff.:");
 800180a:	4812      	ldr	r0, [pc, #72]	; (8001854 <LCD_GUI_Config_Screen_CF_settings_C+0x78>)
 800180c:	f003 fae4 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <LCD_GUI_Config_Screen_CF_settings_C+0x70>)
 8001812:	2200      	movs	r2, #0
 8001814:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <LCD_GUI_Config_Screen_CF_settings_C+0x70>)
 800181a:	2210      	movs	r2, #16
 800181c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.yaw_coeff,3);
 8001820:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <LCD_GUI_Config_Screen_CF_settings_C+0x7c>)
 8001822:	edd3 7a05 	vldr	s15, [r3, #20]
 8001826:	2003      	movs	r0, #3
 8001828:	eeb0 0a67 	vmov.f32	s0, s15
 800182c:	f003 ff28 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 8;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <LCD_GUI_Config_Screen_CF_settings_C+0x70>)
 8001832:	2208      	movs	r2, #8
 8001834:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <LCD_GUI_Config_Screen_CF_settings_C+0x70>)
 800183a:	2218      	movs	r2, #24
 800183c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Return");
 8001840:	4806      	ldr	r0, [pc, #24]	; (800185c <LCD_GUI_Config_Screen_CF_settings_C+0x80>)
 8001842:	f003 fac9 	bl	8004dd8 <Nokia5110_printString>
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000154 	.word	0x20000154
 8001850:	0800cf70 	.word	0x0800cf70
 8001854:	0800cfbc 	.word	0x0800cfbc
 8001858:	2000048c 	.word	0x2000048c
 800185c:	0800cf40 	.word	0x0800cf40

08001860 <LCD_GUI_Config_Screen_CF_settings_D>:


static void LCD_GUI_Config_Screen_CF_settings_D()
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8001864:	f002 fe52 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <LCD_GUI_Config_Screen_CF_settings_D+0x70>)
 800186a:	2200      	movs	r2, #0
 800186c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <LCD_GUI_Config_Screen_CF_settings_D+0x70>)
 8001872:	2200      	movs	r2, #0
 8001874:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[ COMP FILT  ]");
 8001878:	4816      	ldr	r0, [pc, #88]	; (80018d4 <LCD_GUI_Config_Screen_CF_settings_D+0x74>)
 800187a:	f003 faad 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 8;
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <LCD_GUI_Config_Screen_CF_settings_D+0x70>)
 8001880:	2208      	movs	r2, #8
 8001882:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <LCD_GUI_Config_Screen_CF_settings_D+0x70>)
 8001888:	2208      	movs	r2, #8
 800188a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Yaw coeff.:");
 800188e:	4812      	ldr	r0, [pc, #72]	; (80018d8 <LCD_GUI_Config_Screen_CF_settings_D+0x78>)
 8001890:	f003 faa2 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <LCD_GUI_Config_Screen_CF_settings_D+0x70>)
 8001896:	2200      	movs	r2, #0
 8001898:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <LCD_GUI_Config_Screen_CF_settings_D+0x70>)
 800189e:	2210      	movs	r2, #16
 80018a0:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.yaw_coeff,3);
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <LCD_GUI_Config_Screen_CF_settings_D+0x7c>)
 80018a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80018aa:	2003      	movs	r0, #3
 80018ac:	eeb0 0a67 	vmov.f32	s0, s15
 80018b0:	f003 fee6 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 0;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <LCD_GUI_Config_Screen_CF_settings_D+0x70>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <LCD_GUI_Config_Screen_CF_settings_D+0x70>)
 80018be:	2218      	movs	r2, #24
 80018c0:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">Return");
 80018c4:	4806      	ldr	r0, [pc, #24]	; (80018e0 <LCD_GUI_Config_Screen_CF_settings_D+0x80>)
 80018c6:	f003 fa87 	bl	8004dd8 <Nokia5110_printString>
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000154 	.word	0x20000154
 80018d4:	0800cf70 	.word	0x0800cf70
 80018d8:	0800cfcc 	.word	0x0800cfcc
 80018dc:	2000048c 	.word	0x2000048c
 80018e0:	0800cf58 	.word	0x0800cf58

080018e4 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A>:


static void LCD_GUI_Config_Screen_Tilt_Detection_settings_A()
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 80018e8:	f002 fe10 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 80018ec:	4b21      	ldr	r3, [pc, #132]	; (8001974 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A+0x90>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A+0x90>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[Tilt  Detect]");
 80018fc:	481e      	ldr	r0, [pc, #120]	; (8001978 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A+0x94>)
 80018fe:	f003 fa6b 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001902:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A+0x90>)
 800190c:	2208      	movs	r2, #8
 800190e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">X_angle:");
 8001912:	481a      	ldr	r0, [pc, #104]	; (800197c <LCD_GUI_Config_Screen_Tilt_Detection_settings_A+0x98>)
 8001914:	f003 fa60 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A+0x90>)
 800191a:	2200      	movs	r2, #0
 800191c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A+0x90>)
 8001922:	2210      	movs	r2, #16
 8001924:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.angle_threshold[X],1);
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A+0x9c>)
 800192a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800192e:	2001      	movs	r0, #1
 8001930:	eeb0 0a67 	vmov.f32	s0, s15
 8001934:	f003 fea4 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 8;
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A+0x90>)
 800193a:	2208      	movs	r2, #8
 800193c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A+0x90>)
 8001942:	2218      	movs	r2, #24
 8001944:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Y_angle:");
 8001948:	480e      	ldr	r0, [pc, #56]	; (8001984 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A+0xa0>)
 800194a:	f003 fa45 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A+0x90>)
 8001950:	2200      	movs	r2, #0
 8001952:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 32;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A+0x90>)
 8001958:	2220      	movs	r2, #32
 800195a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.angle_threshold[Y],1);
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A+0x9c>)
 8001960:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001964:	2001      	movs	r0, #1
 8001966:	eeb0 0a67 	vmov.f32	s0, s15
 800196a:	f003 fe89 	bl	8005680 <Nokia5110_printFloat>
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000154 	.word	0x20000154
 8001978:	0800cfd8 	.word	0x0800cfd8
 800197c:	0800cfe8 	.word	0x0800cfe8
 8001980:	2000048c 	.word	0x2000048c
 8001984:	0800cff4 	.word	0x0800cff4

08001988 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B>:


static void LCD_GUI_Config_Screen_Tilt_Detection_settings_B()
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 800198c:	f002 fdbe 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8001990:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B+0x90>)
 8001992:	2200      	movs	r2, #0
 8001994:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B+0x90>)
 800199a:	2200      	movs	r2, #0
 800199c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[Tilt  Detect]");
 80019a0:	481e      	ldr	r0, [pc, #120]	; (8001a1c <LCD_GUI_Config_Screen_Tilt_Detection_settings_B+0x94>)
 80019a2:	f003 fa19 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 8;
 80019a6:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B+0x90>)
 80019a8:	2208      	movs	r2, #8
 80019aa:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B+0x90>)
 80019b0:	2208      	movs	r2, #8
 80019b2:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("X_angle:");
 80019b6:	481a      	ldr	r0, [pc, #104]	; (8001a20 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B+0x98>)
 80019b8:	f003 fa0e 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B+0x90>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B+0x90>)
 80019c6:	2210      	movs	r2, #16
 80019c8:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.angle_threshold[X],1);
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B+0x9c>)
 80019ce:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80019d2:	2001      	movs	r0, #1
 80019d4:	eeb0 0a67 	vmov.f32	s0, s15
 80019d8:	f003 fe52 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 0;
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B+0x90>)
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B+0x90>)
 80019e6:	2218      	movs	r2, #24
 80019e8:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">Y_angle:");
 80019ec:	480e      	ldr	r0, [pc, #56]	; (8001a28 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B+0xa0>)
 80019ee:	f003 f9f3 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B+0x90>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 32;
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B+0x90>)
 80019fc:	2220      	movs	r2, #32
 80019fe:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.angle_threshold[Y],1);
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B+0x9c>)
 8001a04:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001a08:	2001      	movs	r0, #1
 8001a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0e:	f003 fe37 	bl	8005680 <Nokia5110_printFloat>
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000154 	.word	0x20000154
 8001a1c:	0800cfd8 	.word	0x0800cfd8
 8001a20:	0800d000 	.word	0x0800d000
 8001a24:	2000048c 	.word	0x2000048c
 8001a28:	0800d00c 	.word	0x0800d00c

08001a2c <LCD_GUI_Config_Screen_Tilt_Detection_settings_C>:


static void LCD_GUI_Config_Screen_Tilt_Detection_settings_C()
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8001a30:	f002 fd6c 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <LCD_GUI_Config_Screen_Tilt_Detection_settings_C+0x70>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8001a3c:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <LCD_GUI_Config_Screen_Tilt_Detection_settings_C+0x70>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[Tilt  Detect]");
 8001a44:	4816      	ldr	r0, [pc, #88]	; (8001aa0 <LCD_GUI_Config_Screen_Tilt_Detection_settings_C+0x74>)
 8001a46:	f003 f9c7 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <LCD_GUI_Config_Screen_Tilt_Detection_settings_C+0x70>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <LCD_GUI_Config_Screen_Tilt_Detection_settings_C+0x70>)
 8001a54:	2208      	movs	r2, #8
 8001a56:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">Z_angle:");
 8001a5a:	4812      	ldr	r0, [pc, #72]	; (8001aa4 <LCD_GUI_Config_Screen_Tilt_Detection_settings_C+0x78>)
 8001a5c:	f003 f9bc 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <LCD_GUI_Config_Screen_Tilt_Detection_settings_C+0x70>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <LCD_GUI_Config_Screen_Tilt_Detection_settings_C+0x70>)
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.angle_threshold[Z],1);
 8001a70:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <LCD_GUI_Config_Screen_Tilt_Detection_settings_C+0x7c>)
 8001a72:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001a76:	2001      	movs	r0, #1
 8001a78:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7c:	f003 fe00 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 8;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <LCD_GUI_Config_Screen_Tilt_Detection_settings_C+0x70>)
 8001a82:	2208      	movs	r2, #8
 8001a84:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <LCD_GUI_Config_Screen_Tilt_Detection_settings_C+0x70>)
 8001a8a:	2218      	movs	r2, #24
 8001a8c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Return");
 8001a90:	4806      	ldr	r0, [pc, #24]	; (8001aac <LCD_GUI_Config_Screen_Tilt_Detection_settings_C+0x80>)
 8001a92:	f003 f9a1 	bl	8004dd8 <Nokia5110_printString>
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000154 	.word	0x20000154
 8001aa0:	0800cfd8 	.word	0x0800cfd8
 8001aa4:	0800d018 	.word	0x0800d018
 8001aa8:	2000048c 	.word	0x2000048c
 8001aac:	0800cf40 	.word	0x0800cf40

08001ab0 <LCD_GUI_Config_Screen_Tilt_Detection_settings_D>:


static void LCD_GUI_Config_Screen_Tilt_Detection_settings_D()
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8001ab4:	f002 fd2a 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <LCD_GUI_Config_Screen_Tilt_Detection_settings_D+0x70>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <LCD_GUI_Config_Screen_Tilt_Detection_settings_D+0x70>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[Tilt  Detect]");
 8001ac8:	4816      	ldr	r0, [pc, #88]	; (8001b24 <LCD_GUI_Config_Screen_Tilt_Detection_settings_D+0x74>)
 8001aca:	f003 f985 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 8;
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <LCD_GUI_Config_Screen_Tilt_Detection_settings_D+0x70>)
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <LCD_GUI_Config_Screen_Tilt_Detection_settings_D+0x70>)
 8001ad8:	2208      	movs	r2, #8
 8001ada:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Z_angle:");
 8001ade:	4812      	ldr	r0, [pc, #72]	; (8001b28 <LCD_GUI_Config_Screen_Tilt_Detection_settings_D+0x78>)
 8001ae0:	f003 f97a 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <LCD_GUI_Config_Screen_Tilt_Detection_settings_D+0x70>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <LCD_GUI_Config_Screen_Tilt_Detection_settings_D+0x70>)
 8001aee:	2210      	movs	r2, #16
 8001af0:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.angle_threshold[Z],1);
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <LCD_GUI_Config_Screen_Tilt_Detection_settings_D+0x7c>)
 8001af6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001afa:	2001      	movs	r0, #1
 8001afc:	eeb0 0a67 	vmov.f32	s0, s15
 8001b00:	f003 fdbe 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 0;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <LCD_GUI_Config_Screen_Tilt_Detection_settings_D+0x70>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <LCD_GUI_Config_Screen_Tilt_Detection_settings_D+0x70>)
 8001b0e:	2218      	movs	r2, #24
 8001b10:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">Return");
 8001b14:	4806      	ldr	r0, [pc, #24]	; (8001b30 <LCD_GUI_Config_Screen_Tilt_Detection_settings_D+0x80>)
 8001b16:	f003 f95f 	bl	8004dd8 <Nokia5110_printString>
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000154 	.word	0x20000154
 8001b24:	0800cfd8 	.word	0x0800cfd8
 8001b28:	0800d024 	.word	0x0800d024
 8001b2c:	2000048c 	.word	0x2000048c
 8001b30:	0800cf58 	.word	0x0800cf58

08001b34 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A>:


static void LCD_GUI_Config_Screen_Vibration_Detection_settings_A()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8001b38:	f002 fce8 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8001b3c:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A+0x90>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A+0x90>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[ VBR DETECT ]");
 8001b4c:	481e      	ldr	r0, [pc, #120]	; (8001bc8 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A+0x94>)
 8001b4e:	f003 f943 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A+0x90>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A+0x90>)
 8001b5c:	2208      	movs	r2, #8
 8001b5e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">X_velocity:");
 8001b62:	481a      	ldr	r0, [pc, #104]	; (8001bcc <LCD_GUI_Config_Screen_Vibration_Detection_settings_A+0x98>)
 8001b64:	f003 f938 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A+0x90>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A+0x90>)
 8001b72:	2210      	movs	r2, #16
 8001b74:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.vibration_threshold[X],1);
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A+0x9c>)
 8001b7a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001b7e:	2001      	movs	r0, #1
 8001b80:	eeb0 0a67 	vmov.f32	s0, s15
 8001b84:	f003 fd7c 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 8;
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A+0x90>)
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A+0x90>)
 8001b92:	2218      	movs	r2, #24
 8001b94:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Y_velocity:");
 8001b98:	480e      	ldr	r0, [pc, #56]	; (8001bd4 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A+0xa0>)
 8001b9a:	f003 f91d 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A+0x90>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 32;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A+0x90>)
 8001ba8:	2220      	movs	r2, #32
 8001baa:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.vibration_threshold[Y],1);
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A+0x9c>)
 8001bb0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bba:	f003 fd61 	bl	8005680 <Nokia5110_printFloat>
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000154 	.word	0x20000154
 8001bc8:	0800d030 	.word	0x0800d030
 8001bcc:	0800d040 	.word	0x0800d040
 8001bd0:	2000048c 	.word	0x2000048c
 8001bd4:	0800d050 	.word	0x0800d050

08001bd8 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B>:


static void LCD_GUI_Config_Screen_Vibration_Detection_settings_B()
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8001bdc:	f002 fc96 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8001be0:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B+0x90>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8001be8:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B+0x90>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[ VBR DETECT ]");
 8001bf0:	481e      	ldr	r0, [pc, #120]	; (8001c6c <LCD_GUI_Config_Screen_Vibration_Detection_settings_B+0x94>)
 8001bf2:	f003 f8f1 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 8;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B+0x90>)
 8001bf8:	2208      	movs	r2, #8
 8001bfa:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B+0x90>)
 8001c00:	2208      	movs	r2, #8
 8001c02:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("X_velocity:");
 8001c06:	481a      	ldr	r0, [pc, #104]	; (8001c70 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B+0x98>)
 8001c08:	f003 f8e6 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B+0x90>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 8001c14:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B+0x90>)
 8001c16:	2210      	movs	r2, #16
 8001c18:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.vibration_threshold[X],1);
 8001c1c:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B+0x9c>)
 8001c1e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001c22:	2001      	movs	r0, #1
 8001c24:	eeb0 0a67 	vmov.f32	s0, s15
 8001c28:	f003 fd2a 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 0;
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B+0x90>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B+0x90>)
 8001c36:	2218      	movs	r2, #24
 8001c38:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">Y_velocity:");
 8001c3c:	480e      	ldr	r0, [pc, #56]	; (8001c78 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B+0xa0>)
 8001c3e:	f003 f8cb 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 32;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B+0x90>)
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.vibration_threshold[Y],1);
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B+0x9c>)
 8001c54:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001c58:	2001      	movs	r0, #1
 8001c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5e:	f003 fd0f 	bl	8005680 <Nokia5110_printFloat>
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000154 	.word	0x20000154
 8001c6c:	0800d030 	.word	0x0800d030
 8001c70:	0800d05c 	.word	0x0800d05c
 8001c74:	2000048c 	.word	0x2000048c
 8001c78:	0800d068 	.word	0x0800d068

08001c7c <LCD_GUI_Config_Screen_Vibration_Detection_settings_C>:


static void LCD_GUI_Config_Screen_Vibration_Detection_settings_C()
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8001c80:	f002 fc44 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <LCD_GUI_Config_Screen_Vibration_Detection_settings_C+0x70>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <LCD_GUI_Config_Screen_Vibration_Detection_settings_C+0x70>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[ VBR DETECT ]");
 8001c94:	4816      	ldr	r0, [pc, #88]	; (8001cf0 <LCD_GUI_Config_Screen_Vibration_Detection_settings_C+0x74>)
 8001c96:	f003 f89f 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <LCD_GUI_Config_Screen_Vibration_Detection_settings_C+0x70>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <LCD_GUI_Config_Screen_Vibration_Detection_settings_C+0x70>)
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">Z_velocity.:");
 8001caa:	4812      	ldr	r0, [pc, #72]	; (8001cf4 <LCD_GUI_Config_Screen_Vibration_Detection_settings_C+0x78>)
 8001cac:	f003 f894 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <LCD_GUI_Config_Screen_Vibration_Detection_settings_C+0x70>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <LCD_GUI_Config_Screen_Vibration_Detection_settings_C+0x70>)
 8001cba:	2210      	movs	r2, #16
 8001cbc:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.vibration_threshold[Z],1);
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <LCD_GUI_Config_Screen_Vibration_Detection_settings_C+0x7c>)
 8001cc2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ccc:	f003 fcd8 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 8;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <LCD_GUI_Config_Screen_Vibration_Detection_settings_C+0x70>)
 8001cd2:	2208      	movs	r2, #8
 8001cd4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <LCD_GUI_Config_Screen_Vibration_Detection_settings_C+0x70>)
 8001cda:	2218      	movs	r2, #24
 8001cdc:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Return");
 8001ce0:	4806      	ldr	r0, [pc, #24]	; (8001cfc <LCD_GUI_Config_Screen_Vibration_Detection_settings_C+0x80>)
 8001ce2:	f003 f879 	bl	8004dd8 <Nokia5110_printString>
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000154 	.word	0x20000154
 8001cf0:	0800d030 	.word	0x0800d030
 8001cf4:	0800d078 	.word	0x0800d078
 8001cf8:	2000048c 	.word	0x2000048c
 8001cfc:	0800cf40 	.word	0x0800cf40

08001d00 <LCD_GUI_Config_Screen_Vibration_Detection_settings_D>:


static void LCD_GUI_Config_Screen_Vibration_Detection_settings_D()
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8001d04:	f002 fc02 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <LCD_GUI_Config_Screen_Vibration_Detection_settings_D+0x70>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <LCD_GUI_Config_Screen_Vibration_Detection_settings_D+0x70>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[ VBR DETECT ]");
 8001d18:	4816      	ldr	r0, [pc, #88]	; (8001d74 <LCD_GUI_Config_Screen_Vibration_Detection_settings_D+0x74>)
 8001d1a:	f003 f85d 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 8;
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <LCD_GUI_Config_Screen_Vibration_Detection_settings_D+0x70>)
 8001d20:	2208      	movs	r2, #8
 8001d22:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <LCD_GUI_Config_Screen_Vibration_Detection_settings_D+0x70>)
 8001d28:	2208      	movs	r2, #8
 8001d2a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Z_velocity:");
 8001d2e:	4812      	ldr	r0, [pc, #72]	; (8001d78 <LCD_GUI_Config_Screen_Vibration_Detection_settings_D+0x78>)
 8001d30:	f003 f852 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <LCD_GUI_Config_Screen_Vibration_Detection_settings_D+0x70>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <LCD_GUI_Config_Screen_Vibration_Detection_settings_D+0x70>)
 8001d3e:	2210      	movs	r2, #16
 8001d40:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printFloat(Motion_Processing.vibration_threshold[Z],1);
 8001d44:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <LCD_GUI_Config_Screen_Vibration_Detection_settings_D+0x7c>)
 8001d46:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d50:	f003 fc96 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 0;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <LCD_GUI_Config_Screen_Vibration_Detection_settings_D+0x70>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <LCD_GUI_Config_Screen_Vibration_Detection_settings_D+0x70>)
 8001d5e:	2218      	movs	r2, #24
 8001d60:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">Return");
 8001d64:	4806      	ldr	r0, [pc, #24]	; (8001d80 <LCD_GUI_Config_Screen_Vibration_Detection_settings_D+0x80>)
 8001d66:	f003 f837 	bl	8004dd8 <Nokia5110_printString>
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000154 	.word	0x20000154
 8001d74:	0800d030 	.word	0x0800d030
 8001d78:	0800d088 	.word	0x0800d088
 8001d7c:	2000048c 	.word	0x2000048c
 8001d80:	0800cf58 	.word	0x0800cf58

08001d84 <LCD_GUI_Config_Screen_LED_settings_A>:



static void LCD_GUI_Config_Screen_LED_settings_A()
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8001d88:	f002 fbc0 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8001d8c:	4b3b      	ldr	r3, [pc, #236]	; (8001e7c <LCD_GUI_Config_Screen_LED_settings_A+0xf8>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8001d94:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <LCD_GUI_Config_Screen_LED_settings_A+0xf8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[ LED CONFIG ]");
 8001d9c:	4838      	ldr	r0, [pc, #224]	; (8001e80 <LCD_GUI_Config_Screen_LED_settings_A+0xfc>)
 8001d9e:	f003 f81b 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001da2:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <LCD_GUI_Config_Screen_LED_settings_A+0xf8>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 8001daa:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <LCD_GUI_Config_Screen_LED_settings_A+0xf8>)
 8001dac:	2208      	movs	r2, #8
 8001dae:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">X_LED mode:");
 8001db2:	4834      	ldr	r0, [pc, #208]	; (8001e84 <LCD_GUI_Config_Screen_LED_settings_A+0x100>)
 8001db4:	f003 f810 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001db8:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <LCD_GUI_Config_Screen_LED_settings_A+0xf8>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 8001dc0:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <LCD_GUI_Config_Screen_LED_settings_A+0xf8>)
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  switch(LED.LED_parameters.LED1_mode)
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <LCD_GUI_Config_Screen_LED_settings_A+0x104>)
 8001dca:	789b      	ldrb	r3, [r3, #2]
 8001dcc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d81a      	bhi.n	8001e0c <LCD_GUI_Config_Screen_LED_settings_A+0x88>
 8001dd6:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <LCD_GUI_Config_Screen_LED_settings_A+0x58>)
 8001dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ddc:	08001ded 	.word	0x08001ded
 8001de0:	08001df5 	.word	0x08001df5
 8001de4:	08001dfd 	.word	0x08001dfd
 8001de8:	08001e05 	.word	0x08001e05
	  {
	    case(Angle_detection):{Nokia5110_printString("Tilt dct.");}break;
 8001dec:	4827      	ldr	r0, [pc, #156]	; (8001e8c <LCD_GUI_Config_Screen_LED_settings_A+0x108>)
 8001dee:	f002 fff3 	bl	8004dd8 <Nokia5110_printString>
 8001df2:	e00b      	b.n	8001e0c <LCD_GUI_Config_Screen_LED_settings_A+0x88>
	    case(Vibration_detection):{Nokia5110_printString("Vbr dct.");}break;
 8001df4:	4826      	ldr	r0, [pc, #152]	; (8001e90 <LCD_GUI_Config_Screen_LED_settings_A+0x10c>)
 8001df6:	f002 ffef 	bl	8004dd8 <Nokia5110_printString>
 8001dfa:	e007      	b.n	8001e0c <LCD_GUI_Config_Screen_LED_settings_A+0x88>
	    case(Accelerometer_measurement):{Nokia5110_printString("Accel meas.");}break;
 8001dfc:	4825      	ldr	r0, [pc, #148]	; (8001e94 <LCD_GUI_Config_Screen_LED_settings_A+0x110>)
 8001dfe:	f002 ffeb 	bl	8004dd8 <Nokia5110_printString>
 8001e02:	e003      	b.n	8001e0c <LCD_GUI_Config_Screen_LED_settings_A+0x88>
	    case(Gyroscope_measurement):{Nokia5110_printString("Gyro meas.");}break;
 8001e04:	4824      	ldr	r0, [pc, #144]	; (8001e98 <LCD_GUI_Config_Screen_LED_settings_A+0x114>)
 8001e06:	f002 ffe7 	bl	8004dd8 <Nokia5110_printString>
 8001e0a:	bf00      	nop
	  }

	  Nokia5110.x_pos = 8;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <LCD_GUI_Config_Screen_LED_settings_A+0xf8>)
 8001e0e:	2208      	movs	r2, #8
 8001e10:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <LCD_GUI_Config_Screen_LED_settings_A+0xf8>)
 8001e16:	2218      	movs	r2, #24
 8001e18:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Y_LED mode:");
 8001e1c:	481f      	ldr	r0, [pc, #124]	; (8001e9c <LCD_GUI_Config_Screen_LED_settings_A+0x118>)
 8001e1e:	f002 ffdb 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <LCD_GUI_Config_Screen_LED_settings_A+0xf8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 32;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <LCD_GUI_Config_Screen_LED_settings_A+0xf8>)
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  switch(LED.LED_parameters.LED2_mode)
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <LCD_GUI_Config_Screen_LED_settings_A+0x104>)
 8001e34:	78db      	ldrb	r3, [r3, #3]
 8001e36:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d81b      	bhi.n	8001e78 <LCD_GUI_Config_Screen_LED_settings_A+0xf4>
 8001e40:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <LCD_GUI_Config_Screen_LED_settings_A+0xc4>)
 8001e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e46:	bf00      	nop
 8001e48:	08001e59 	.word	0x08001e59
 8001e4c:	08001e61 	.word	0x08001e61
 8001e50:	08001e69 	.word	0x08001e69
 8001e54:	08001e71 	.word	0x08001e71
	  {
	    case(Angle_detection):{Nokia5110_printString("Tilt dct.");}break;
 8001e58:	480c      	ldr	r0, [pc, #48]	; (8001e8c <LCD_GUI_Config_Screen_LED_settings_A+0x108>)
 8001e5a:	f002 ffbd 	bl	8004dd8 <Nokia5110_printString>
 8001e5e:	e00b      	b.n	8001e78 <LCD_GUI_Config_Screen_LED_settings_A+0xf4>
	    case(Vibration_detection):{Nokia5110_printString("Vbr dct.");}break;
 8001e60:	480b      	ldr	r0, [pc, #44]	; (8001e90 <LCD_GUI_Config_Screen_LED_settings_A+0x10c>)
 8001e62:	f002 ffb9 	bl	8004dd8 <Nokia5110_printString>
 8001e66:	e007      	b.n	8001e78 <LCD_GUI_Config_Screen_LED_settings_A+0xf4>
	    case(Accelerometer_measurement):{Nokia5110_printString("Accel meas.");}break;
 8001e68:	480a      	ldr	r0, [pc, #40]	; (8001e94 <LCD_GUI_Config_Screen_LED_settings_A+0x110>)
 8001e6a:	f002 ffb5 	bl	8004dd8 <Nokia5110_printString>
 8001e6e:	e003      	b.n	8001e78 <LCD_GUI_Config_Screen_LED_settings_A+0xf4>
	    case(Gyroscope_measurement):{Nokia5110_printString("Gyro meas.");}break;
 8001e70:	4809      	ldr	r0, [pc, #36]	; (8001e98 <LCD_GUI_Config_Screen_LED_settings_A+0x114>)
 8001e72:	f002 ffb1 	bl	8004dd8 <Nokia5110_printString>
 8001e76:	bf00      	nop
	  }
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000154 	.word	0x20000154
 8001e80:	0800d094 	.word	0x0800d094
 8001e84:	0800d0a4 	.word	0x0800d0a4
 8001e88:	200004fc 	.word	0x200004fc
 8001e8c:	0800d0b4 	.word	0x0800d0b4
 8001e90:	0800d0c0 	.word	0x0800d0c0
 8001e94:	0800d0cc 	.word	0x0800d0cc
 8001e98:	0800d0d8 	.word	0x0800d0d8
 8001e9c:	0800d0e4 	.word	0x0800d0e4

08001ea0 <LCD_GUI_Config_Screen_LED_settings_B>:


static void LCD_GUI_Config_Screen_LED_settings_B()
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8001ea4:	f002 fb32 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8001ea8:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <LCD_GUI_Config_Screen_LED_settings_B+0xf8>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8001eb0:	4b39      	ldr	r3, [pc, #228]	; (8001f98 <LCD_GUI_Config_Screen_LED_settings_B+0xf8>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[ LED CONFIG ]");
 8001eb8:	4838      	ldr	r0, [pc, #224]	; (8001f9c <LCD_GUI_Config_Screen_LED_settings_B+0xfc>)
 8001eba:	f002 ff8d 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 8;
 8001ebe:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <LCD_GUI_Config_Screen_LED_settings_B+0xf8>)
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 8001ec6:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <LCD_GUI_Config_Screen_LED_settings_B+0xf8>)
 8001ec8:	2208      	movs	r2, #8
 8001eca:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("X_LED mode:");
 8001ece:	4834      	ldr	r0, [pc, #208]	; (8001fa0 <LCD_GUI_Config_Screen_LED_settings_B+0x100>)
 8001ed0:	f002 ff82 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001ed4:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <LCD_GUI_Config_Screen_LED_settings_B+0xf8>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 8001edc:	4b2e      	ldr	r3, [pc, #184]	; (8001f98 <LCD_GUI_Config_Screen_LED_settings_B+0xf8>)
 8001ede:	2210      	movs	r2, #16
 8001ee0:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  switch(LED.LED_parameters.LED1_mode)
 8001ee4:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <LCD_GUI_Config_Screen_LED_settings_B+0x104>)
 8001ee6:	789b      	ldrb	r3, [r3, #2]
 8001ee8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d81a      	bhi.n	8001f28 <LCD_GUI_Config_Screen_LED_settings_B+0x88>
 8001ef2:	a201      	add	r2, pc, #4	; (adr r2, 8001ef8 <LCD_GUI_Config_Screen_LED_settings_B+0x58>)
 8001ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef8:	08001f09 	.word	0x08001f09
 8001efc:	08001f11 	.word	0x08001f11
 8001f00:	08001f19 	.word	0x08001f19
 8001f04:	08001f21 	.word	0x08001f21
	  {
	    case(Angle_detection):{Nokia5110_printString("Tilt dct.");}break;
 8001f08:	4827      	ldr	r0, [pc, #156]	; (8001fa8 <LCD_GUI_Config_Screen_LED_settings_B+0x108>)
 8001f0a:	f002 ff65 	bl	8004dd8 <Nokia5110_printString>
 8001f0e:	e00b      	b.n	8001f28 <LCD_GUI_Config_Screen_LED_settings_B+0x88>
	    case(Vibration_detection):{Nokia5110_printString("Vbr dct.");}break;
 8001f10:	4826      	ldr	r0, [pc, #152]	; (8001fac <LCD_GUI_Config_Screen_LED_settings_B+0x10c>)
 8001f12:	f002 ff61 	bl	8004dd8 <Nokia5110_printString>
 8001f16:	e007      	b.n	8001f28 <LCD_GUI_Config_Screen_LED_settings_B+0x88>
	    case(Accelerometer_measurement):{Nokia5110_printString("Accel meas.");}break;
 8001f18:	4825      	ldr	r0, [pc, #148]	; (8001fb0 <LCD_GUI_Config_Screen_LED_settings_B+0x110>)
 8001f1a:	f002 ff5d 	bl	8004dd8 <Nokia5110_printString>
 8001f1e:	e003      	b.n	8001f28 <LCD_GUI_Config_Screen_LED_settings_B+0x88>
	    case(Gyroscope_measurement):{Nokia5110_printString("Gyro meas.");}break;
 8001f20:	4824      	ldr	r0, [pc, #144]	; (8001fb4 <LCD_GUI_Config_Screen_LED_settings_B+0x114>)
 8001f22:	f002 ff59 	bl	8004dd8 <Nokia5110_printString>
 8001f26:	bf00      	nop
	  }

	  Nokia5110.x_pos = 0;
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <LCD_GUI_Config_Screen_LED_settings_B+0xf8>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <LCD_GUI_Config_Screen_LED_settings_B+0xf8>)
 8001f32:	2218      	movs	r2, #24
 8001f34:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">Y_LED mode:");
 8001f38:	481f      	ldr	r0, [pc, #124]	; (8001fb8 <LCD_GUI_Config_Screen_LED_settings_B+0x118>)
 8001f3a:	f002 ff4d 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <LCD_GUI_Config_Screen_LED_settings_B+0xf8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 32;
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <LCD_GUI_Config_Screen_LED_settings_B+0xf8>)
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  switch(LED.LED_parameters.LED2_mode)
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <LCD_GUI_Config_Screen_LED_settings_B+0x104>)
 8001f50:	78db      	ldrb	r3, [r3, #3]
 8001f52:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d81b      	bhi.n	8001f94 <LCD_GUI_Config_Screen_LED_settings_B+0xf4>
 8001f5c:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <LCD_GUI_Config_Screen_LED_settings_B+0xc4>)
 8001f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f62:	bf00      	nop
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f7d 	.word	0x08001f7d
 8001f6c:	08001f85 	.word	0x08001f85
 8001f70:	08001f8d 	.word	0x08001f8d
	  {
	    case(Angle_detection):{Nokia5110_printString("Tilt dct.");}break;
 8001f74:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <LCD_GUI_Config_Screen_LED_settings_B+0x108>)
 8001f76:	f002 ff2f 	bl	8004dd8 <Nokia5110_printString>
 8001f7a:	e00b      	b.n	8001f94 <LCD_GUI_Config_Screen_LED_settings_B+0xf4>
	    case(Vibration_detection):{Nokia5110_printString("Vbr dct.");}break;
 8001f7c:	480b      	ldr	r0, [pc, #44]	; (8001fac <LCD_GUI_Config_Screen_LED_settings_B+0x10c>)
 8001f7e:	f002 ff2b 	bl	8004dd8 <Nokia5110_printString>
 8001f82:	e007      	b.n	8001f94 <LCD_GUI_Config_Screen_LED_settings_B+0xf4>
	    case(Accelerometer_measurement):{Nokia5110_printString("Accel meas.");}break;
 8001f84:	480a      	ldr	r0, [pc, #40]	; (8001fb0 <LCD_GUI_Config_Screen_LED_settings_B+0x110>)
 8001f86:	f002 ff27 	bl	8004dd8 <Nokia5110_printString>
 8001f8a:	e003      	b.n	8001f94 <LCD_GUI_Config_Screen_LED_settings_B+0xf4>
	    case(Gyroscope_measurement):{Nokia5110_printString("Gyro meas.");}break;
 8001f8c:	4809      	ldr	r0, [pc, #36]	; (8001fb4 <LCD_GUI_Config_Screen_LED_settings_B+0x114>)
 8001f8e:	f002 ff23 	bl	8004dd8 <Nokia5110_printString>
 8001f92:	bf00      	nop
	  }
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000154 	.word	0x20000154
 8001f9c:	0800d094 	.word	0x0800d094
 8001fa0:	0800d0f0 	.word	0x0800d0f0
 8001fa4:	200004fc 	.word	0x200004fc
 8001fa8:	0800d0b4 	.word	0x0800d0b4
 8001fac:	0800d0c0 	.word	0x0800d0c0
 8001fb0:	0800d0cc 	.word	0x0800d0cc
 8001fb4:	0800d0d8 	.word	0x0800d0d8
 8001fb8:	0800d0fc 	.word	0x0800d0fc

08001fbc <LCD_GUI_Config_Screen_LED_settings_C>:


static void LCD_GUI_Config_Screen_LED_settings_C()
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8001fc0:	f002 faa4 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8001fc4:	4b26      	ldr	r3, [pc, #152]	; (8002060 <LCD_GUI_Config_Screen_LED_settings_C+0xa4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8001fcc:	4b24      	ldr	r3, [pc, #144]	; (8002060 <LCD_GUI_Config_Screen_LED_settings_C+0xa4>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[LED CONFIG]");
 8001fd4:	4823      	ldr	r0, [pc, #140]	; (8002064 <LCD_GUI_Config_Screen_LED_settings_C+0xa8>)
 8001fd6:	f002 feff 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <LCD_GUI_Config_Screen_LED_settings_C+0xa4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <LCD_GUI_Config_Screen_LED_settings_C+0xa4>)
 8001fe4:	2208      	movs	r2, #8
 8001fe6:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">Z_LED mode.:");
 8001fea:	481f      	ldr	r0, [pc, #124]	; (8002068 <LCD_GUI_Config_Screen_LED_settings_C+0xac>)
 8001fec:	f002 fef4 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <LCD_GUI_Config_Screen_LED_settings_C+0xa4>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <LCD_GUI_Config_Screen_LED_settings_C+0xa4>)
 8001ffa:	2210      	movs	r2, #16
 8001ffc:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  switch(LED.LED_parameters.LED3_mode)
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <LCD_GUI_Config_Screen_LED_settings_C+0xb0>)
 8002002:	78db      	ldrb	r3, [r3, #3]
 8002004:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b03      	cmp	r3, #3
 800200c:	d81a      	bhi.n	8002044 <LCD_GUI_Config_Screen_LED_settings_C+0x88>
 800200e:	a201      	add	r2, pc, #4	; (adr r2, 8002014 <LCD_GUI_Config_Screen_LED_settings_C+0x58>)
 8002010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002014:	08002025 	.word	0x08002025
 8002018:	0800202d 	.word	0x0800202d
 800201c:	08002035 	.word	0x08002035
 8002020:	0800203d 	.word	0x0800203d
	  {
	    case(Angle_detection):{Nokia5110_printString("Tilt dct.");}break;
 8002024:	4812      	ldr	r0, [pc, #72]	; (8002070 <LCD_GUI_Config_Screen_LED_settings_C+0xb4>)
 8002026:	f002 fed7 	bl	8004dd8 <Nokia5110_printString>
 800202a:	e00b      	b.n	8002044 <LCD_GUI_Config_Screen_LED_settings_C+0x88>
	    case(Vibration_detection):{Nokia5110_printString("Vbr dct.");}break;
 800202c:	4811      	ldr	r0, [pc, #68]	; (8002074 <LCD_GUI_Config_Screen_LED_settings_C+0xb8>)
 800202e:	f002 fed3 	bl	8004dd8 <Nokia5110_printString>
 8002032:	e007      	b.n	8002044 <LCD_GUI_Config_Screen_LED_settings_C+0x88>
	    case(Accelerometer_measurement):{Nokia5110_printString("Accel meas.");}break;
 8002034:	4810      	ldr	r0, [pc, #64]	; (8002078 <LCD_GUI_Config_Screen_LED_settings_C+0xbc>)
 8002036:	f002 fecf 	bl	8004dd8 <Nokia5110_printString>
 800203a:	e003      	b.n	8002044 <LCD_GUI_Config_Screen_LED_settings_C+0x88>
	    case(Gyroscope_measurement):{Nokia5110_printString("Gyro meas.");}break;
 800203c:	480f      	ldr	r0, [pc, #60]	; (800207c <LCD_GUI_Config_Screen_LED_settings_C+0xc0>)
 800203e:	f002 fecb 	bl	8004dd8 <Nokia5110_printString>
 8002042:	bf00      	nop
	  }

	  Nokia5110.x_pos = 8;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <LCD_GUI_Config_Screen_LED_settings_C+0xa4>)
 8002046:	2208      	movs	r2, #8
 8002048:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <LCD_GUI_Config_Screen_LED_settings_C+0xa4>)
 800204e:	2218      	movs	r2, #24
 8002050:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Return");
 8002054:	480a      	ldr	r0, [pc, #40]	; (8002080 <LCD_GUI_Config_Screen_LED_settings_C+0xc4>)
 8002056:	f002 febf 	bl	8004dd8 <Nokia5110_printString>
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000154 	.word	0x20000154
 8002064:	0800d10c 	.word	0x0800d10c
 8002068:	0800d11c 	.word	0x0800d11c
 800206c:	200004fc 	.word	0x200004fc
 8002070:	0800d0b4 	.word	0x0800d0b4
 8002074:	0800d0c0 	.word	0x0800d0c0
 8002078:	0800d0cc 	.word	0x0800d0cc
 800207c:	0800d0d8 	.word	0x0800d0d8
 8002080:	0800cf40 	.word	0x0800cf40

08002084 <LCD_GUI_Config_Screen_LED_settings_D>:


static void LCD_GUI_Config_Screen_LED_settings_D()
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8002088:	f002 fa40 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 800208c:	4b26      	ldr	r3, [pc, #152]	; (8002128 <LCD_GUI_Config_Screen_LED_settings_D+0xa4>)
 800208e:	2200      	movs	r2, #0
 8002090:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <LCD_GUI_Config_Screen_LED_settings_D+0xa4>)
 8002096:	2200      	movs	r2, #0
 8002098:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[LED CONFIG]");
 800209c:	4823      	ldr	r0, [pc, #140]	; (800212c <LCD_GUI_Config_Screen_LED_settings_D+0xa8>)
 800209e:	f002 fe9b 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 8;
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <LCD_GUI_Config_Screen_LED_settings_D+0xa4>)
 80020a4:	2208      	movs	r2, #8
 80020a6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 8;
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <LCD_GUI_Config_Screen_LED_settings_D+0xa4>)
 80020ac:	2208      	movs	r2, #8
 80020ae:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Z_LED mode.:");
 80020b2:	481f      	ldr	r0, [pc, #124]	; (8002130 <LCD_GUI_Config_Screen_LED_settings_D+0xac>)
 80020b4:	f002 fe90 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <LCD_GUI_Config_Screen_LED_settings_D+0xa4>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <LCD_GUI_Config_Screen_LED_settings_D+0xa4>)
 80020c2:	2210      	movs	r2, #16
 80020c4:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  switch(LED.LED_parameters.LED3_mode)
 80020c8:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <LCD_GUI_Config_Screen_LED_settings_D+0xb0>)
 80020ca:	78db      	ldrb	r3, [r3, #3]
 80020cc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d81a      	bhi.n	800210c <LCD_GUI_Config_Screen_LED_settings_D+0x88>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <LCD_GUI_Config_Screen_LED_settings_D+0x58>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020f5 	.word	0x080020f5
 80020e4:	080020fd 	.word	0x080020fd
 80020e8:	08002105 	.word	0x08002105
	  {
	    case(Angle_detection):{Nokia5110_printString("Tilt dct.");}break;
 80020ec:	4812      	ldr	r0, [pc, #72]	; (8002138 <LCD_GUI_Config_Screen_LED_settings_D+0xb4>)
 80020ee:	f002 fe73 	bl	8004dd8 <Nokia5110_printString>
 80020f2:	e00b      	b.n	800210c <LCD_GUI_Config_Screen_LED_settings_D+0x88>
	    case(Vibration_detection):{Nokia5110_printString("Vbr dct.");}break;
 80020f4:	4811      	ldr	r0, [pc, #68]	; (800213c <LCD_GUI_Config_Screen_LED_settings_D+0xb8>)
 80020f6:	f002 fe6f 	bl	8004dd8 <Nokia5110_printString>
 80020fa:	e007      	b.n	800210c <LCD_GUI_Config_Screen_LED_settings_D+0x88>
	    case(Accelerometer_measurement):{Nokia5110_printString("Accel meas.");}break;
 80020fc:	4810      	ldr	r0, [pc, #64]	; (8002140 <LCD_GUI_Config_Screen_LED_settings_D+0xbc>)
 80020fe:	f002 fe6b 	bl	8004dd8 <Nokia5110_printString>
 8002102:	e003      	b.n	800210c <LCD_GUI_Config_Screen_LED_settings_D+0x88>
	    case(Gyroscope_measurement):{Nokia5110_printString("Gyro meas.");}break;
 8002104:	480f      	ldr	r0, [pc, #60]	; (8002144 <LCD_GUI_Config_Screen_LED_settings_D+0xc0>)
 8002106:	f002 fe67 	bl	8004dd8 <Nokia5110_printString>
 800210a:	bf00      	nop
	  }

	  Nokia5110.x_pos = 0;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <LCD_GUI_Config_Screen_LED_settings_D+0xa4>)
 800210e:	2200      	movs	r2, #0
 8002110:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <LCD_GUI_Config_Screen_LED_settings_D+0xa4>)
 8002116:	2218      	movs	r2, #24
 8002118:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString(">Return");
 800211c:	480a      	ldr	r0, [pc, #40]	; (8002148 <LCD_GUI_Config_Screen_LED_settings_D+0xc4>)
 800211e:	f002 fe5b 	bl	8004dd8 <Nokia5110_printString>
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000154 	.word	0x20000154
 800212c:	0800d10c 	.word	0x0800d10c
 8002130:	0800d12c 	.word	0x0800d12c
 8002134:	200004fc 	.word	0x200004fc
 8002138:	0800d0b4 	.word	0x0800d0b4
 800213c:	0800d0c0 	.word	0x0800d0c0
 8002140:	0800d0cc 	.word	0x0800d0cc
 8002144:	0800d0d8 	.word	0x0800d0d8
 8002148:	0800cf58 	.word	0x0800cf58

0800214c <LCD_GUI_Config_Screen_C>:


static void LCD_GUI_Config_Screen_C()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  Nokia5110_clear();
 8002150:	f002 f9dc 	bl	800450c <Nokia5110_clear>

  Nokia5110.x_pos = 0;
 8002154:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <LCD_GUI_Config_Screen_C+0x64>)
 8002156:	2200      	movs	r2, #0
 8002158:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 0;
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <LCD_GUI_Config_Screen_C+0x64>)
 800215e:	2200      	movs	r2, #0
 8002160:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("[   CONFIG   ]");
 8002164:	4813      	ldr	r0, [pc, #76]	; (80021b4 <LCD_GUI_Config_Screen_C+0x68>)
 8002166:	f002 fe37 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 8;
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <LCD_GUI_Config_Screen_C+0x64>)
 800216c:	2208      	movs	r2, #8
 800216e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 16;
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <LCD_GUI_Config_Screen_C+0x64>)
 8002174:	2210      	movs	r2, #16
 8002176:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("IMU");
 800217a:	480f      	ldr	r0, [pc, #60]	; (80021b8 <LCD_GUI_Config_Screen_C+0x6c>)
 800217c:	f002 fe2c 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 8;
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <LCD_GUI_Config_Screen_C+0x64>)
 8002182:	2208      	movs	r2, #8
 8002184:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 24;
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <LCD_GUI_Config_Screen_C+0x64>)
 800218a:	2218      	movs	r2, #24
 800218c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("Comp. Filt.");
 8002190:	480a      	ldr	r0, [pc, #40]	; (80021bc <LCD_GUI_Config_Screen_C+0x70>)
 8002192:	f002 fe21 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 0;
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <LCD_GUI_Config_Screen_C+0x64>)
 8002198:	2200      	movs	r2, #0
 800219a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 32;
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <LCD_GUI_Config_Screen_C+0x64>)
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString(">Tilt dctn.");
 80021a6:	4806      	ldr	r0, [pc, #24]	; (80021c0 <LCD_GUI_Config_Screen_C+0x74>)
 80021a8:	f002 fe16 	bl	8004dd8 <Nokia5110_printString>
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000154 	.word	0x20000154
 80021b4:	0800cdf8 	.word	0x0800cdf8
 80021b8:	0800ce08 	.word	0x0800ce08
 80021bc:	0800ce0c 	.word	0x0800ce0c
 80021c0:	0800d13c 	.word	0x0800d13c

080021c4 <LCD_GUI_Config_Screen_D>:


static void LCD_GUI_Config_Screen_D()
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  Nokia5110_clear();
 80021c8:	f002 f9a0 	bl	800450c <Nokia5110_clear>

  Nokia5110.x_pos = 0;
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <LCD_GUI_Config_Screen_D+0x64>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 0;
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <LCD_GUI_Config_Screen_D+0x64>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("[   CONFIG   ]");
 80021dc:	4813      	ldr	r0, [pc, #76]	; (800222c <LCD_GUI_Config_Screen_D+0x68>)
 80021de:	f002 fdfb 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 0;
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <LCD_GUI_Config_Screen_D+0x64>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 16;
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <LCD_GUI_Config_Screen_D+0x64>)
 80021ec:	2210      	movs	r2, #16
 80021ee:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString(">Vbr. dctn.");
 80021f2:	480f      	ldr	r0, [pc, #60]	; (8002230 <LCD_GUI_Config_Screen_D+0x6c>)
 80021f4:	f002 fdf0 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 8;
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <LCD_GUI_Config_Screen_D+0x64>)
 80021fa:	2208      	movs	r2, #8
 80021fc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 24;
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <LCD_GUI_Config_Screen_D+0x64>)
 8002202:	2218      	movs	r2, #24
 8002204:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("LED config.");
 8002208:	480a      	ldr	r0, [pc, #40]	; (8002234 <LCD_GUI_Config_Screen_D+0x70>)
 800220a:	f002 fde5 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 8;
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <LCD_GUI_Config_Screen_D+0x64>)
 8002210:	2208      	movs	r2, #8
 8002212:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 32;
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <LCD_GUI_Config_Screen_D+0x64>)
 8002218:	2220      	movs	r2, #32
 800221a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("Save");
 800221e:	4806      	ldr	r0, [pc, #24]	; (8002238 <LCD_GUI_Config_Screen_D+0x74>)
 8002220:	f002 fdda 	bl	8004dd8 <Nokia5110_printString>
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000154 	.word	0x20000154
 800222c:	0800cdf8 	.word	0x0800cdf8
 8002230:	0800d148 	.word	0x0800d148
 8002234:	0800d154 	.word	0x0800d154
 8002238:	0800d160 	.word	0x0800d160

0800223c <LCD_GUI_Config_Screen_E>:


static void LCD_GUI_Config_Screen_E()
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  Nokia5110_clear();
 8002240:	f002 f964 	bl	800450c <Nokia5110_clear>

  Nokia5110.x_pos = 0;
 8002244:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <LCD_GUI_Config_Screen_E+0x64>)
 8002246:	2200      	movs	r2, #0
 8002248:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 0;
 800224c:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <LCD_GUI_Config_Screen_E+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("[   CONFIG   ]");
 8002254:	4813      	ldr	r0, [pc, #76]	; (80022a4 <LCD_GUI_Config_Screen_E+0x68>)
 8002256:	f002 fdbf 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 8;
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <LCD_GUI_Config_Screen_E+0x64>)
 800225c:	2208      	movs	r2, #8
 800225e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 16;
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <LCD_GUI_Config_Screen_E+0x64>)
 8002264:	2210      	movs	r2, #16
 8002266:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("Vbr. dctn.");
 800226a:	480f      	ldr	r0, [pc, #60]	; (80022a8 <LCD_GUI_Config_Screen_E+0x6c>)
 800226c:	f002 fdb4 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 0;
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <LCD_GUI_Config_Screen_E+0x64>)
 8002272:	2200      	movs	r2, #0
 8002274:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 24;
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <LCD_GUI_Config_Screen_E+0x64>)
 800227a:	2218      	movs	r2, #24
 800227c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString(">LED config.");
 8002280:	480a      	ldr	r0, [pc, #40]	; (80022ac <LCD_GUI_Config_Screen_E+0x70>)
 8002282:	f002 fda9 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 8;
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <LCD_GUI_Config_Screen_E+0x64>)
 8002288:	2208      	movs	r2, #8
 800228a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 32;
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <LCD_GUI_Config_Screen_E+0x64>)
 8002290:	2220      	movs	r2, #32
 8002292:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("Save");
 8002296:	4806      	ldr	r0, [pc, #24]	; (80022b0 <LCD_GUI_Config_Screen_E+0x74>)
 8002298:	f002 fd9e 	bl	8004dd8 <Nokia5110_printString>
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000154 	.word	0x20000154
 80022a4:	0800cdf8 	.word	0x0800cdf8
 80022a8:	0800d168 	.word	0x0800d168
 80022ac:	0800d174 	.word	0x0800d174
 80022b0:	0800d160 	.word	0x0800d160

080022b4 <LCD_GUI_Config_Screen_F>:

static void LCD_GUI_Config_Screen_F()
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  Nokia5110_clear();
 80022b8:	f002 f928 	bl	800450c <Nokia5110_clear>

  Nokia5110.x_pos = 0;
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <LCD_GUI_Config_Screen_F+0x64>)
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 0;
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <LCD_GUI_Config_Screen_F+0x64>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("[   CONFIG   ]");
 80022cc:	4813      	ldr	r0, [pc, #76]	; (800231c <LCD_GUI_Config_Screen_F+0x68>)
 80022ce:	f002 fd83 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 8;
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <LCD_GUI_Config_Screen_F+0x64>)
 80022d4:	2208      	movs	r2, #8
 80022d6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 16;
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <LCD_GUI_Config_Screen_F+0x64>)
 80022dc:	2210      	movs	r2, #16
 80022de:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("Vbr. dctn.");
 80022e2:	480f      	ldr	r0, [pc, #60]	; (8002320 <LCD_GUI_Config_Screen_F+0x6c>)
 80022e4:	f002 fd78 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 8;
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <LCD_GUI_Config_Screen_F+0x64>)
 80022ea:	2208      	movs	r2, #8
 80022ec:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 24;
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <LCD_GUI_Config_Screen_F+0x64>)
 80022f2:	2218      	movs	r2, #24
 80022f4:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("LED config.");
 80022f8:	480a      	ldr	r0, [pc, #40]	; (8002324 <LCD_GUI_Config_Screen_F+0x70>)
 80022fa:	f002 fd6d 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 0;
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <LCD_GUI_Config_Screen_F+0x64>)
 8002300:	2200      	movs	r2, #0
 8002302:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 32;
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <LCD_GUI_Config_Screen_F+0x64>)
 8002308:	2220      	movs	r2, #32
 800230a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString(">Save");
 800230e:	4806      	ldr	r0, [pc, #24]	; (8002328 <LCD_GUI_Config_Screen_F+0x74>)
 8002310:	f002 fd62 	bl	8004dd8 <Nokia5110_printString>
}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000154 	.word	0x20000154
 800231c:	0800cdf8 	.word	0x0800cdf8
 8002320:	0800d168 	.word	0x0800d168
 8002324:	0800d154 	.word	0x0800d154
 8002328:	0800d184 	.word	0x0800d184

0800232c <LCD_GUI_Accel_Raw>:


/* IMU accelerations (raw) */

static void LCD_GUI_Accel_Raw()
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  Nokia5110_clear();
 8002330:	f002 f8ec 	bl	800450c <Nokia5110_clear>

  Nokia5110.x_pos = 0;
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <LCD_GUI_Accel_Raw+0x84>)
 8002336:	2200      	movs	r2, #0
 8002338:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 0;
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <LCD_GUI_Accel_Raw+0x84>)
 800233e:	2200      	movs	r2, #0
 8002340:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("[ ACCEL RAW  ]");
 8002344:	481b      	ldr	r0, [pc, #108]	; (80023b4 <LCD_GUI_Accel_Raw+0x88>)
 8002346:	f002 fd47 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 0;
 800234a:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <LCD_GUI_Accel_Raw+0x84>)
 800234c:	2200      	movs	r2, #0
 800234e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 16;
 8002352:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <LCD_GUI_Accel_Raw+0x84>)
 8002354:	2210      	movs	r2, #16
 8002356:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("A_x=");  Nokia5110_printU16(imu.accelerometer_raw[X]);
 800235a:	4817      	ldr	r0, [pc, #92]	; (80023b8 <LCD_GUI_Accel_Raw+0x8c>)
 800235c:	f002 fd3c 	bl	8004dd8 <Nokia5110_printString>
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <LCD_GUI_Accel_Raw+0x90>)
 8002362:	899b      	ldrh	r3, [r3, #12]
 8002364:	4618      	mov	r0, r3
 8002366:	f002 fdf1 	bl	8004f4c <Nokia5110_printU16>

  Nokia5110.x_pos = 0;
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <LCD_GUI_Accel_Raw+0x84>)
 800236c:	2200      	movs	r2, #0
 800236e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 24;
 8002372:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <LCD_GUI_Accel_Raw+0x84>)
 8002374:	2218      	movs	r2, #24
 8002376:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("A_y=");  Nokia5110_printU16(imu.accelerometer_raw[Y]);
 800237a:	4811      	ldr	r0, [pc, #68]	; (80023c0 <LCD_GUI_Accel_Raw+0x94>)
 800237c:	f002 fd2c 	bl	8004dd8 <Nokia5110_printString>
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <LCD_GUI_Accel_Raw+0x90>)
 8002382:	89db      	ldrh	r3, [r3, #14]
 8002384:	4618      	mov	r0, r3
 8002386:	f002 fde1 	bl	8004f4c <Nokia5110_printU16>

  Nokia5110.x_pos = 0;
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <LCD_GUI_Accel_Raw+0x84>)
 800238c:	2200      	movs	r2, #0
 800238e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 32;
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <LCD_GUI_Accel_Raw+0x84>)
 8002394:	2220      	movs	r2, #32
 8002396:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("A_z=");  Nokia5110_printU16(imu.accelerometer_raw[Z]);
 800239a:	480a      	ldr	r0, [pc, #40]	; (80023c4 <LCD_GUI_Accel_Raw+0x98>)
 800239c:	f002 fd1c 	bl	8004dd8 <Nokia5110_printString>
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <LCD_GUI_Accel_Raw+0x90>)
 80023a2:	8a1b      	ldrh	r3, [r3, #16]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f002 fdd1 	bl	8004f4c <Nokia5110_printU16>
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000154 	.word	0x20000154
 80023b4:	0800d18c 	.word	0x0800d18c
 80023b8:	0800d19c 	.word	0x0800d19c
 80023bc:	20000350 	.word	0x20000350
 80023c0:	0800d1a4 	.word	0x0800d1a4
 80023c4:	0800d1ac 	.word	0x0800d1ac

080023c8 <LCD_GUI_Accel_Processed>:

/* IMU accelerations (processed) */

static void LCD_GUI_Accel_Processed()
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  Nokia5110_clear();
 80023cc:	f002 f89e 	bl	800450c <Nokia5110_clear>

  Nokia5110.x_pos = 0;
 80023d0:	4b1e      	ldr	r3, [pc, #120]	; (800244c <LCD_GUI_Accel_Processed+0x84>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 0;
 80023d8:	4b1c      	ldr	r3, [pc, #112]	; (800244c <LCD_GUI_Accel_Processed+0x84>)
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("[ACCEL PRCSSD]");
 80023e0:	481b      	ldr	r0, [pc, #108]	; (8002450 <LCD_GUI_Accel_Processed+0x88>)
 80023e2:	f002 fcf9 	bl	8004dd8 <Nokia5110_printString>

  Nokia5110.x_pos = 0;
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <LCD_GUI_Accel_Processed+0x84>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 16;
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <LCD_GUI_Accel_Processed+0x84>)
 80023f0:	2210      	movs	r2, #16
 80023f2:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("A_x=");  Nokia5110_printI32(imu.accelerometer[X]);
 80023f6:	4817      	ldr	r0, [pc, #92]	; (8002454 <LCD_GUI_Accel_Processed+0x8c>)
 80023f8:	f002 fcee 	bl	8004dd8 <Nokia5110_printString>
 80023fc:	4b16      	ldr	r3, [pc, #88]	; (8002458 <LCD_GUI_Accel_Processed+0x90>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4618      	mov	r0, r3
 8002402:	f003 f927 	bl	8005654 <Nokia5110_printI32>

  Nokia5110.x_pos = 0;
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <LCD_GUI_Accel_Processed+0x84>)
 8002408:	2200      	movs	r2, #0
 800240a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 24;
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <LCD_GUI_Accel_Processed+0x84>)
 8002410:	2218      	movs	r2, #24
 8002412:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("A_y=");  Nokia5110_printI32(imu.accelerometer[Y]);
 8002416:	4811      	ldr	r0, [pc, #68]	; (800245c <LCD_GUI_Accel_Processed+0x94>)
 8002418:	f002 fcde 	bl	8004dd8 <Nokia5110_printString>
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <LCD_GUI_Accel_Processed+0x90>)
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	4618      	mov	r0, r3
 8002422:	f003 f917 	bl	8005654 <Nokia5110_printI32>

  Nokia5110.x_pos = 0;
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <LCD_GUI_Accel_Processed+0x84>)
 8002428:	2200      	movs	r2, #0
 800242a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 32;
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <LCD_GUI_Accel_Processed+0x84>)
 8002430:	2220      	movs	r2, #32
 8002432:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  Nokia5110_printString("A_z=");  Nokia5110_printI32(imu.accelerometer[Z]);
 8002436:	480a      	ldr	r0, [pc, #40]	; (8002460 <LCD_GUI_Accel_Processed+0x98>)
 8002438:	f002 fcce 	bl	8004dd8 <Nokia5110_printString>
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <LCD_GUI_Accel_Processed+0x90>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4618      	mov	r0, r3
 8002442:	f003 f907 	bl	8005654 <Nokia5110_printI32>
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000154 	.word	0x20000154
 8002450:	0800d1b4 	.word	0x0800d1b4
 8002454:	0800d19c 	.word	0x0800d19c
 8002458:	20000350 	.word	0x20000350
 800245c:	0800d1a4 	.word	0x0800d1a4
 8002460:	0800d1ac 	.word	0x0800d1ac

08002464 <LCD_GUI_Gyro_Raw>:

/* IMU gyroscope readings (raw) */

static void LCD_GUI_Gyro_Raw()
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8002468:	f002 f850 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <LCD_GUI_Gyro_Raw+0x84>)
 800246e:	2200      	movs	r2, #0
 8002470:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8002474:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <LCD_GUI_Gyro_Raw+0x84>)
 8002476:	2200      	movs	r2, #0
 8002478:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[ GYRO   RAW ]");
 800247c:	481b      	ldr	r0, [pc, #108]	; (80024ec <LCD_GUI_Gyro_Raw+0x88>)
 800247e:	f002 fcab 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <LCD_GUI_Gyro_Raw+0x84>)
 8002484:	2200      	movs	r2, #0
 8002486:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 800248a:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <LCD_GUI_Gyro_Raw+0x84>)
 800248c:	2210      	movs	r2, #16
 800248e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("G_x=");  Nokia5110_printI32(imu.gyroscope_raw[X]);
 8002492:	4817      	ldr	r0, [pc, #92]	; (80024f0 <LCD_GUI_Gyro_Raw+0x8c>)
 8002494:	f002 fca0 	bl	8004dd8 <Nokia5110_printString>
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <LCD_GUI_Gyro_Raw+0x90>)
 800249a:	8a5b      	ldrh	r3, [r3, #18]
 800249c:	4618      	mov	r0, r3
 800249e:	f003 f8d9 	bl	8005654 <Nokia5110_printI32>

	  Nokia5110.x_pos = 0;
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <LCD_GUI_Gyro_Raw+0x84>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <LCD_GUI_Gyro_Raw+0x84>)
 80024ac:	2218      	movs	r2, #24
 80024ae:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("G_y=");  Nokia5110_printI32(imu.gyroscope_raw[Y]);
 80024b2:	4811      	ldr	r0, [pc, #68]	; (80024f8 <LCD_GUI_Gyro_Raw+0x94>)
 80024b4:	f002 fc90 	bl	8004dd8 <Nokia5110_printString>
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <LCD_GUI_Gyro_Raw+0x90>)
 80024ba:	8a9b      	ldrh	r3, [r3, #20]
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 f8c9 	bl	8005654 <Nokia5110_printI32>

	  Nokia5110.x_pos = 0;
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <LCD_GUI_Gyro_Raw+0x84>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 32;
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <LCD_GUI_Gyro_Raw+0x84>)
 80024cc:	2220      	movs	r2, #32
 80024ce:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("G_z=");  Nokia5110_printI32(imu.gyroscope_raw[Z]);
 80024d2:	480a      	ldr	r0, [pc, #40]	; (80024fc <LCD_GUI_Gyro_Raw+0x98>)
 80024d4:	f002 fc80 	bl	8004dd8 <Nokia5110_printString>
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <LCD_GUI_Gyro_Raw+0x90>)
 80024da:	8adb      	ldrh	r3, [r3, #22]
 80024dc:	4618      	mov	r0, r3
 80024de:	f003 f8b9 	bl	8005654 <Nokia5110_printI32>

}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000154 	.word	0x20000154
 80024ec:	0800d1c4 	.word	0x0800d1c4
 80024f0:	0800d1d4 	.word	0x0800d1d4
 80024f4:	20000350 	.word	0x20000350
 80024f8:	0800d1dc 	.word	0x0800d1dc
 80024fc:	0800d1e4 	.word	0x0800d1e4

08002500 <LCD_GUI_Gyro_Processed>:

/* IMU gyroscope readings (processed) */

static void LCD_GUI_Gyro_Processed()
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 8002504:	f002 f802 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8002508:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <LCD_GUI_Gyro_Processed+0x84>)
 800250a:	2200      	movs	r2, #0
 800250c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8002510:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <LCD_GUI_Gyro_Processed+0x84>)
 8002512:	2200      	movs	r2, #0
 8002514:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[GYRO  PRCSSD]");
 8002518:	481b      	ldr	r0, [pc, #108]	; (8002588 <LCD_GUI_Gyro_Processed+0x88>)
 800251a:	f002 fc5d 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 800251e:	4b19      	ldr	r3, [pc, #100]	; (8002584 <LCD_GUI_Gyro_Processed+0x84>)
 8002520:	2200      	movs	r2, #0
 8002522:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <LCD_GUI_Gyro_Processed+0x84>)
 8002528:	2210      	movs	r2, #16
 800252a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("G_x=");  Nokia5110_printI32(imu.gyroscope[X]);
 800252e:	4817      	ldr	r0, [pc, #92]	; (800258c <LCD_GUI_Gyro_Processed+0x8c>)
 8002530:	f002 fc52 	bl	8004dd8 <Nokia5110_printString>
 8002534:	4b16      	ldr	r3, [pc, #88]	; (8002590 <LCD_GUI_Gyro_Processed+0x90>)
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	4618      	mov	r0, r3
 800253a:	f003 f88b 	bl	8005654 <Nokia5110_printI32>

	  Nokia5110.x_pos = 0;
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <LCD_GUI_Gyro_Processed+0x84>)
 8002540:	2200      	movs	r2, #0
 8002542:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <LCD_GUI_Gyro_Processed+0x84>)
 8002548:	2218      	movs	r2, #24
 800254a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("G_y=");  Nokia5110_printI32(imu.gyroscope[Y]);
 800254e:	4811      	ldr	r0, [pc, #68]	; (8002594 <LCD_GUI_Gyro_Processed+0x94>)
 8002550:	f002 fc42 	bl	8004dd8 <Nokia5110_printString>
 8002554:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <LCD_GUI_Gyro_Processed+0x90>)
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	4618      	mov	r0, r3
 800255a:	f003 f87b 	bl	8005654 <Nokia5110_printI32>

	  Nokia5110.x_pos = 0;
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <LCD_GUI_Gyro_Processed+0x84>)
 8002560:	2200      	movs	r2, #0
 8002562:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 32;
 8002566:	4b07      	ldr	r3, [pc, #28]	; (8002584 <LCD_GUI_Gyro_Processed+0x84>)
 8002568:	2220      	movs	r2, #32
 800256a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("G_z=");  Nokia5110_printI32(imu.gyroscope[Z]);
 800256e:	480a      	ldr	r0, [pc, #40]	; (8002598 <LCD_GUI_Gyro_Processed+0x98>)
 8002570:	f002 fc32 	bl	8004dd8 <Nokia5110_printString>
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <LCD_GUI_Gyro_Processed+0x90>)
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	4618      	mov	r0, r3
 800257a:	f003 f86b 	bl	8005654 <Nokia5110_printI32>

}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000154 	.word	0x20000154
 8002588:	0800d1ec 	.word	0x0800d1ec
 800258c:	0800d1d4 	.word	0x0800d1d4
 8002590:	20000350 	.word	0x20000350
 8002594:	0800d1dc 	.word	0x0800d1dc
 8002598:	0800d1e4 	.word	0x0800d1e4

0800259c <LCD_GUI_RYP_Accel>:

/* RYP from accelerometers. */

static void LCD_GUI_RYP_Accel()
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 80025a0:	f001 ffb4 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 80025a4:	4b22      	ldr	r3, [pc, #136]	; (8002630 <LCD_GUI_RYP_Accel+0x94>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 80025ac:	4b20      	ldr	r3, [pc, #128]	; (8002630 <LCD_GUI_RYP_Accel+0x94>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[ RYP  ACCEL ]");
 80025b4:	481f      	ldr	r0, [pc, #124]	; (8002634 <LCD_GUI_RYP_Accel+0x98>)
 80025b6:	f002 fc0f 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <LCD_GUI_RYP_Accel+0x94>)
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <LCD_GUI_RYP_Accel+0x94>)
 80025c4:	2210      	movs	r2, #16
 80025c6:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("R=");  Nokia5110_printFloat(Motion_Processing.accel_roll,2);
 80025ca:	481b      	ldr	r0, [pc, #108]	; (8002638 <LCD_GUI_RYP_Accel+0x9c>)
 80025cc:	f002 fc04 	bl	8004dd8 <Nokia5110_printString>
 80025d0:	4b1a      	ldr	r3, [pc, #104]	; (800263c <LCD_GUI_RYP_Accel+0xa0>)
 80025d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80025d6:	2002      	movs	r0, #2
 80025d8:	eeb0 0a67 	vmov.f32	s0, s15
 80025dc:	f003 f850 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 0;
 80025e0:	4b13      	ldr	r3, [pc, #76]	; (8002630 <LCD_GUI_RYP_Accel+0x94>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <LCD_GUI_RYP_Accel+0x94>)
 80025ea:	2218      	movs	r2, #24
 80025ec:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("P=");  Nokia5110_printFloat(Motion_Processing.accel_pitch,2);
 80025f0:	4813      	ldr	r0, [pc, #76]	; (8002640 <LCD_GUI_RYP_Accel+0xa4>)
 80025f2:	f002 fbf1 	bl	8004dd8 <Nokia5110_printString>
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <LCD_GUI_RYP_Accel+0xa0>)
 80025f8:	edd3 7a07 	vldr	s15, [r3, #28]
 80025fc:	2002      	movs	r0, #2
 80025fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002602:	f003 f83d 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 0;
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <LCD_GUI_RYP_Accel+0x94>)
 8002608:	2200      	movs	r2, #0
 800260a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 32;
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <LCD_GUI_RYP_Accel+0x94>)
 8002610:	2220      	movs	r2, #32
 8002612:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Y=");  Nokia5110_printFloat(Motion_Processing.accel_yaw,2);
 8002616:	480b      	ldr	r0, [pc, #44]	; (8002644 <LCD_GUI_RYP_Accel+0xa8>)
 8002618:	f002 fbde 	bl	8004dd8 <Nokia5110_printString>
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <LCD_GUI_RYP_Accel+0xa0>)
 800261e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002622:	2002      	movs	r0, #2
 8002624:	eeb0 0a67 	vmov.f32	s0, s15
 8002628:	f003 f82a 	bl	8005680 <Nokia5110_printFloat>
}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000154 	.word	0x20000154
 8002634:	0800d1fc 	.word	0x0800d1fc
 8002638:	0800d20c 	.word	0x0800d20c
 800263c:	2000048c 	.word	0x2000048c
 8002640:	0800d210 	.word	0x0800d210
 8002644:	0800d214 	.word	0x0800d214

08002648 <LCD_GUI_RYP_Gyro>:

/* RYP from gyroscope. */

static void LCD_GUI_RYP_Gyro()
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 800264c:	f001 ff5e 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <LCD_GUI_RYP_Gyro+0x94>)
 8002652:	2200      	movs	r2, #0
 8002654:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8002658:	4b20      	ldr	r3, [pc, #128]	; (80026dc <LCD_GUI_RYP_Gyro+0x94>)
 800265a:	2200      	movs	r2, #0
 800265c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[ RYP   GYRO ]");
 8002660:	481f      	ldr	r0, [pc, #124]	; (80026e0 <LCD_GUI_RYP_Gyro+0x98>)
 8002662:	f002 fbb9 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <LCD_GUI_RYP_Gyro+0x94>)
 8002668:	2200      	movs	r2, #0
 800266a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <LCD_GUI_RYP_Gyro+0x94>)
 8002670:	2210      	movs	r2, #16
 8002672:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("R=");  Nokia5110_printFloat(Motion_Processing.gyro_roll,2);
 8002676:	481b      	ldr	r0, [pc, #108]	; (80026e4 <LCD_GUI_RYP_Gyro+0x9c>)
 8002678:	f002 fbae 	bl	8004dd8 <Nokia5110_printString>
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <LCD_GUI_RYP_Gyro+0xa0>)
 800267e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002682:	2002      	movs	r0, #2
 8002684:	eeb0 0a67 	vmov.f32	s0, s15
 8002688:	f002 fffa 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 0;
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <LCD_GUI_RYP_Gyro+0x94>)
 800268e:	2200      	movs	r2, #0
 8002690:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <LCD_GUI_RYP_Gyro+0x94>)
 8002696:	2218      	movs	r2, #24
 8002698:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("P=");  Nokia5110_printFloat(Motion_Processing.gyro_pitch,2);
 800269c:	4813      	ldr	r0, [pc, #76]	; (80026ec <LCD_GUI_RYP_Gyro+0xa4>)
 800269e:	f002 fb9b 	bl	8004dd8 <Nokia5110_printString>
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <LCD_GUI_RYP_Gyro+0xa0>)
 80026a4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80026a8:	2002      	movs	r0, #2
 80026aa:	eeb0 0a67 	vmov.f32	s0, s15
 80026ae:	f002 ffe7 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 0;
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <LCD_GUI_RYP_Gyro+0x94>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 32;
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <LCD_GUI_RYP_Gyro+0x94>)
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Y=");  Nokia5110_printFloat(Motion_Processing.gyro_yaw,2);
 80026c2:	480b      	ldr	r0, [pc, #44]	; (80026f0 <LCD_GUI_RYP_Gyro+0xa8>)
 80026c4:	f002 fb88 	bl	8004dd8 <Nokia5110_printString>
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <LCD_GUI_RYP_Gyro+0xa0>)
 80026ca:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80026ce:	2002      	movs	r0, #2
 80026d0:	eeb0 0a67 	vmov.f32	s0, s15
 80026d4:	f002 ffd4 	bl	8005680 <Nokia5110_printFloat>
}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000154 	.word	0x20000154
 80026e0:	0800d218 	.word	0x0800d218
 80026e4:	0800d20c 	.word	0x0800d20c
 80026e8:	2000048c 	.word	0x2000048c
 80026ec:	0800d210 	.word	0x0800d210
 80026f0:	0800d214 	.word	0x0800d214

080026f4 <LCD_GUI_RYP_Filter>:

/* RYP from complementary filter. */

static void LCD_GUI_RYP_Filter()
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 80026f8:	f001 ff08 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 80026fc:	4b22      	ldr	r3, [pc, #136]	; (8002788 <LCD_GUI_RYP_Filter+0x94>)
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 8002704:	4b20      	ldr	r3, [pc, #128]	; (8002788 <LCD_GUI_RYP_Filter+0x94>)
 8002706:	2200      	movs	r2, #0
 8002708:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[  RPY   CF  ]");
 800270c:	481f      	ldr	r0, [pc, #124]	; (800278c <LCD_GUI_RYP_Filter+0x98>)
 800270e:	f002 fb63 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <LCD_GUI_RYP_Filter+0x94>)
 8002714:	2200      	movs	r2, #0
 8002716:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <LCD_GUI_RYP_Filter+0x94>)
 800271c:	2210      	movs	r2, #16
 800271e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("R=");  Nokia5110_printFloat(Motion_Processing.filter_roll,2);
 8002722:	481b      	ldr	r0, [pc, #108]	; (8002790 <LCD_GUI_RYP_Filter+0x9c>)
 8002724:	f002 fb58 	bl	8004dd8 <Nokia5110_printString>
 8002728:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <LCD_GUI_RYP_Filter+0xa0>)
 800272a:	edd3 7a00 	vldr	s15, [r3]
 800272e:	2002      	movs	r0, #2
 8002730:	eeb0 0a67 	vmov.f32	s0, s15
 8002734:	f002 ffa4 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 0;
 8002738:	4b13      	ldr	r3, [pc, #76]	; (8002788 <LCD_GUI_RYP_Filter+0x94>)
 800273a:	2200      	movs	r2, #0
 800273c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <LCD_GUI_RYP_Filter+0x94>)
 8002742:	2218      	movs	r2, #24
 8002744:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("P=");  Nokia5110_printFloat(Motion_Processing.filter_pitch,2);
 8002748:	4813      	ldr	r0, [pc, #76]	; (8002798 <LCD_GUI_RYP_Filter+0xa4>)
 800274a:	f002 fb45 	bl	8004dd8 <Nokia5110_printString>
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <LCD_GUI_RYP_Filter+0xa0>)
 8002750:	edd3 7a01 	vldr	s15, [r3, #4]
 8002754:	2002      	movs	r0, #2
 8002756:	eeb0 0a67 	vmov.f32	s0, s15
 800275a:	f002 ff91 	bl	8005680 <Nokia5110_printFloat>

	  Nokia5110.x_pos = 0;
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <LCD_GUI_RYP_Filter+0x94>)
 8002760:	2200      	movs	r2, #0
 8002762:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 32;
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <LCD_GUI_RYP_Filter+0x94>)
 8002768:	2220      	movs	r2, #32
 800276a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("Y=");  Nokia5110_printFloat(Motion_Processing.filter_yaw,2);
 800276e:	480b      	ldr	r0, [pc, #44]	; (800279c <LCD_GUI_RYP_Filter+0xa8>)
 8002770:	f002 fb32 	bl	8004dd8 <Nokia5110_printString>
 8002774:	4b07      	ldr	r3, [pc, #28]	; (8002794 <LCD_GUI_RYP_Filter+0xa0>)
 8002776:	edd3 7a02 	vldr	s15, [r3, #8]
 800277a:	2002      	movs	r0, #2
 800277c:	eeb0 0a67 	vmov.f32	s0, s15
 8002780:	f002 ff7e 	bl	8005680 <Nokia5110_printFloat>
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000154 	.word	0x20000154
 800278c:	0800d228 	.word	0x0800d228
 8002790:	0800d20c 	.word	0x0800d20c
 8002794:	2000048c 	.word	0x2000048c
 8002798:	0800d210 	.word	0x0800d210
 800279c:	0800d214 	.word	0x0800d214

080027a0 <LCD_GUI_Motion_Detection>:

/* Motion detection. */

static void LCD_GUI_Motion_Detection()
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	  Nokia5110_clear();
 80027a4:	f001 feb2 	bl	800450c <Nokia5110_clear>

	  Nokia5110.x_pos = 0;
 80027a8:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <LCD_GUI_Motion_Detection+0x114>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 0;
 80027b0:	4b40      	ldr	r3, [pc, #256]	; (80028b4 <LCD_GUI_Motion_Detection+0x114>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("[MOTION  DDCT]");
 80027b8:	483f      	ldr	r0, [pc, #252]	; (80028b8 <LCD_GUI_Motion_Detection+0x118>)
 80027ba:	f002 fb0d 	bl	8004dd8 <Nokia5110_printString>

	  Nokia5110.x_pos = 0;
 80027be:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <LCD_GUI_Motion_Detection+0x114>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 80027c6:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <LCD_GUI_Motion_Detection+0x114>)
 80027c8:	2210      	movs	r2, #16
 80027ca:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("T_x:");
 80027ce:	483b      	ldr	r0, [pc, #236]	; (80028bc <LCD_GUI_Motion_Detection+0x11c>)
 80027d0:	f002 fb02 	bl	8004dd8 <Nokia5110_printString>
	  Nokia5110_printU8(Motion_Processing.motion_detection.motion_detection_segments.X_angle_detected);
 80027d4:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <LCD_GUI_Motion_Detection+0x120>)
 80027d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 fb0f 	bl	8004e04 <Nokia5110_printU8>

	  Nokia5110.x_pos = 42;
 80027e6:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <LCD_GUI_Motion_Detection+0x114>)
 80027e8:	222a      	movs	r2, #42	; 0x2a
 80027ea:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 16;
 80027ee:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <LCD_GUI_Motion_Detection+0x114>)
 80027f0:	2210      	movs	r2, #16
 80027f2:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
	  Nokia5110_printString("V_x:");
 80027f6:	4833      	ldr	r0, [pc, #204]	; (80028c4 <LCD_GUI_Motion_Detection+0x124>)
 80027f8:	f002 faee 	bl	8004dd8 <Nokia5110_printString>
	  Nokia5110_printU8(Motion_Processing.motion_detection.motion_detection_segments.X_vibration_detected);
 80027fc:	4b30      	ldr	r3, [pc, #192]	; (80028c0 <LCD_GUI_Motion_Detection+0x120>)
 80027fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002802:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002806:	b2db      	uxtb	r3, r3
 8002808:	4618      	mov	r0, r3
 800280a:	f002 fafb 	bl	8004e04 <Nokia5110_printU8>

	  Nokia5110.x_pos = 0;
 800280e:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <LCD_GUI_Motion_Detection+0x114>)
 8002810:	2200      	movs	r2, #0
 8002812:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 8002816:	4b27      	ldr	r3, [pc, #156]	; (80028b4 <LCD_GUI_Motion_Detection+0x114>)
 8002818:	2218      	movs	r2, #24
 800281a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("T_y:");
 800281e:	482a      	ldr	r0, [pc, #168]	; (80028c8 <LCD_GUI_Motion_Detection+0x128>)
 8002820:	f002 fada 	bl	8004dd8 <Nokia5110_printString>
	  Nokia5110_printU8(Motion_Processing.motion_detection.motion_detection_segments.Y_angle_detected);
 8002824:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <LCD_GUI_Motion_Detection+0x120>)
 8002826:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800282a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	4618      	mov	r0, r3
 8002832:	f002 fae7 	bl	8004e04 <Nokia5110_printU8>

	  Nokia5110.x_pos = 42;
 8002836:	4b1f      	ldr	r3, [pc, #124]	; (80028b4 <LCD_GUI_Motion_Detection+0x114>)
 8002838:	222a      	movs	r2, #42	; 0x2a
 800283a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 24;
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <LCD_GUI_Motion_Detection+0x114>)
 8002840:	2218      	movs	r2, #24
 8002842:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
	  Nokia5110_printString("V_y:");
 8002846:	4821      	ldr	r0, [pc, #132]	; (80028cc <LCD_GUI_Motion_Detection+0x12c>)
 8002848:	f002 fac6 	bl	8004dd8 <Nokia5110_printString>
	  Nokia5110_printU8(Motion_Processing.motion_detection.motion_detection_segments.Y_vibration_detected);
 800284c:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <LCD_GUI_Motion_Detection+0x120>)
 800284e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002852:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4618      	mov	r0, r3
 800285a:	f002 fad3 	bl	8004e04 <Nokia5110_printU8>

	  Nokia5110.x_pos = 0;
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <LCD_GUI_Motion_Detection+0x114>)
 8002860:	2200      	movs	r2, #0
 8002862:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 32;
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <LCD_GUI_Motion_Detection+0x114>)
 8002868:	2220      	movs	r2, #32
 800286a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

	  Nokia5110_printString("T_z:");
 800286e:	4818      	ldr	r0, [pc, #96]	; (80028d0 <LCD_GUI_Motion_Detection+0x130>)
 8002870:	f002 fab2 	bl	8004dd8 <Nokia5110_printString>
	  Nokia5110_printU8(Motion_Processing.motion_detection.motion_detection_segments.Z_angle_detected);
 8002874:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <LCD_GUI_Motion_Detection+0x120>)
 8002876:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800287a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4618      	mov	r0, r3
 8002882:	f002 fabf 	bl	8004e04 <Nokia5110_printU8>

	  Nokia5110.x_pos = 42;
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <LCD_GUI_Motion_Detection+0x114>)
 8002888:	222a      	movs	r2, #42	; 0x2a
 800288a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	  Nokia5110.y_pos = 32;
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <LCD_GUI_Motion_Detection+0x114>)
 8002890:	2220      	movs	r2, #32
 8002892:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
	  Nokia5110_printString("V_z:");
 8002896:	480f      	ldr	r0, [pc, #60]	; (80028d4 <LCD_GUI_Motion_Detection+0x134>)
 8002898:	f002 fa9e 	bl	8004dd8 <Nokia5110_printString>
	  Nokia5110_printU8(Motion_Processing.motion_detection.motion_detection_segments.Z_vibration_detected);
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <LCD_GUI_Motion_Detection+0x120>)
 800289e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028a2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	4618      	mov	r0, r3
 80028aa:	f002 faab 	bl	8004e04 <Nokia5110_printU8>
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000154 	.word	0x20000154
 80028b8:	0800d238 	.word	0x0800d238
 80028bc:	0800d248 	.word	0x0800d248
 80028c0:	2000048c 	.word	0x2000048c
 80028c4:	0800d250 	.word	0x0800d250
 80028c8:	0800d258 	.word	0x0800d258
 80028cc:	0800d260 	.word	0x0800d260
 80028d0:	0800d268 	.word	0x0800d268
 80028d4:	0800d270 	.word	0x0800d270

080028d8 <LCD_GUI_Update>:


/*********		Main FSM   **********/

void LCD_GUI_Update()
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
  SDCP_Param parameter;

  switch(LCD_GUI_screen_number)
 80028de:	4bbe      	ldr	r3, [pc, #760]	; (8002bd8 <LCD_GUI_Update+0x300>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b25      	cmp	r3, #37	; 0x25
 80028e4:	f201 85a4 	bhi.w	8004430 <LCD_GUI_Update+0x1b58>
 80028e8:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <LCD_GUI_Update+0x18>)
 80028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ee:	bf00      	nop
 80028f0:	08002989 	.word	0x08002989
 80028f4:	080029bf 	.word	0x080029bf
 80028f8:	08002a07 	.word	0x08002a07
 80028fc:	08002a63 	.word	0x08002a63
 8002900:	08002abf 	.word	0x08002abf
 8002904:	08002b1d 	.word	0x08002b1d
 8002908:	08002b7b 	.word	0x08002b7b
 800290c:	08002be5 	.word	0x08002be5
 8002910:	08002c43 	.word	0x08002c43
 8002914:	08002ca1 	.word	0x08002ca1
 8002918:	08002cff 	.word	0x08002cff
 800291c:	08002d45 	.word	0x08002d45
 8002920:	08002d8b 	.word	0x08002d8b
 8002924:	08002dd1 	.word	0x08002dd1
 8002928:	08002e17 	.word	0x08002e17
 800292c:	08002e5d 	.word	0x08002e5d
 8002930:	08002ebd 	.word	0x08002ebd
 8002934:	08002fd9 	.word	0x08002fd9
 8002938:	080030fb 	.word	0x080030fb
 800293c:	080031e1 	.word	0x080031e1
 8002940:	080032b3 	.word	0x080032b3
 8002944:	080033c5 	.word	0x080033c5
 8002948:	0800340b 	.word	0x0800340b
 800294c:	0800354b 	.word	0x0800354b
 8002950:	080036a7 	.word	0x080036a7
 8002954:	080037e7 	.word	0x080037e7
 8002958:	08003849 	.word	0x08003849
 800295c:	0800396f 	.word	0x0800396f
 8002960:	08003a95 	.word	0x08003a95
 8002964:	08003be5 	.word	0x08003be5
 8002968:	08003c29 	.word	0x08003c29
 800296c:	08003d3d 	.word	0x08003d3d
 8002970:	08003e7b 	.word	0x08003e7b
 8002974:	08003f8f 	.word	0x08003f8f
 8002978:	08003fd3 	.word	0x08003fd3
 800297c:	08004111 	.word	0x08004111
 8002980:	0800422b 	.word	0x0800422b
 8002984:	08004359 	.word	0x08004359
  {
    case(LCD_GUI_Main_Initialize):
	{
	  /* If the switch is pressed, proceed to config screen. */

	  if(Rotary_Encoder.parameters.switch_state)
 8002988:	4b94      	ldr	r3, [pc, #592]	; (8002bdc <LCD_GUI_Update+0x304>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	f001 8501 	beq.w	800439a <LCD_GUI_Update+0x1ac2>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_Config_Mode;
 8002998:	4b8f      	ldr	r3, [pc, #572]	; (8002bd8 <LCD_GUI_Update+0x300>)
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	b672      	cpsid	i

		__disable_irq();
		MPU6050_calibrate(imu.calibration_axis,imu.N_calibration_points);
 80029a0:	4b8f      	ldr	r3, [pc, #572]	; (8002be0 <LCD_GUI_Update+0x308>)
 80029a2:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 80029a6:	4b8e      	ldr	r3, [pc, #568]	; (8002be0 <LCD_GUI_Update+0x308>)
 80029a8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80029ac:	4619      	mov	r1, r3
 80029ae:	4610      	mov	r0, r2
 80029b0:	f005 fba0 	bl	80080f4 <MPU6050_calibrate>
  __ASM volatile ("cpsie i" : : : "memory");
 80029b4:	b662      	cpsie	i
		__enable_irq();

		MP_Init();
 80029b6:	f005 fde7 	bl	8008588 <MP_Init>
	  }
    }
	break;
 80029ba:	f001 bcee 	b.w	800439a <LCD_GUI_Update+0x1ac2>


    case(LCD_GUI_Main_Config_Mode):
	{
	  LCD_GUI_Config_Screen();
 80029be:	f7fe fb09 	bl	8000fd4 <LCD_GUI_Config_Screen>

	  if(Rotary_Encoder.parameters.clockwise)
 80029c2:	4b86      	ldr	r3, [pc, #536]	; (8002bdc <LCD_GUI_Update+0x304>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <LCD_GUI_Update+0x100>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_IMU_accel_raw;
 80029d0:	4b81      	ldr	r3, [pc, #516]	; (8002bd8 <LCD_GUI_Update+0x300>)
 80029d2:	2202      	movs	r2, #2
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e009      	b.n	80029ec <LCD_GUI_Update+0x114>
	  }
	  else if(Rotary_Encoder.parameters.anticlockwise)
 80029d8:	4b80      	ldr	r3, [pc, #512]	; (8002bdc <LCD_GUI_Update+0x304>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <LCD_GUI_Update+0x114>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_Motion_Detection;
 80029e6:	4b7c      	ldr	r3, [pc, #496]	; (8002bd8 <LCD_GUI_Update+0x300>)
 80029e8:	2209      	movs	r2, #9
 80029ea:	701a      	strb	r2, [r3, #0]
	  }

	  /* When in configuration screen, if switch is pressed, transition to
	   * configuration mode. */

	  if(Rotary_Encoder.parameters.switch_state)
 80029ec:	4b7b      	ldr	r3, [pc, #492]	; (8002bdc <LCD_GUI_Update+0x304>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f001 84d1 	beq.w	800439e <LCD_GUI_Update+0x1ac6>
	  {
        LCD_GUI_screen_number = LCD_GUI_Config_Menu_A;
 80029fc:	4b76      	ldr	r3, [pc, #472]	; (8002bd8 <LCD_GUI_Update+0x300>)
 80029fe:	220a      	movs	r2, #10
 8002a00:	701a      	strb	r2, [r3, #0]
	  }
	}
	break;
 8002a02:	f001 bccc 	b.w	800439e <LCD_GUI_Update+0x1ac6>


	case(LCD_GUI_Main_IMU_accel_raw):
	{
	  LCD_GUI_Accel_Raw();
 8002a06:	f7ff fc91 	bl	800232c <LCD_GUI_Accel_Raw>

	  if(Rotary_Encoder.parameters.clockwise)
 8002a0a:	4b74      	ldr	r3, [pc, #464]	; (8002bdc <LCD_GUI_Update+0x304>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <LCD_GUI_Update+0x146>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_IMU_accel_processed;
 8002a18:	4b6f      	ldr	r3, [pc, #444]	; (8002bd8 <LCD_GUI_Update+0x300>)
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	701a      	strb	r2, [r3, #0]
	  }
	  if(Rotary_Encoder.parameters.anticlockwise)
 8002a1e:	4b6f      	ldr	r3, [pc, #444]	; (8002bdc <LCD_GUI_Update+0x304>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <LCD_GUI_Update+0x15a>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_Config_Mode;
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <LCD_GUI_Update+0x300>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
	  }

      if(Rotary_Encoder.parameters.switch_state)
 8002a32:	4b6a      	ldr	r3, [pc, #424]	; (8002bdc <LCD_GUI_Update+0x304>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f001 84b0 	beq.w	80043a2 <LCD_GUI_Update+0x1aca>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a42:	b672      	cpsid	i
	  {
	    __disable_irq();
		MPU6050_calibrate(imu.calibration_axis,imu.N_calibration_points);
 8002a44:	4b66      	ldr	r3, [pc, #408]	; (8002be0 <LCD_GUI_Update+0x308>)
 8002a46:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8002a4a:	4b65      	ldr	r3, [pc, #404]	; (8002be0 <LCD_GUI_Update+0x308>)
 8002a4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002a50:	4619      	mov	r1, r3
 8002a52:	4610      	mov	r0, r2
 8002a54:	f005 fb4e 	bl	80080f4 <MPU6050_calibrate>
  __ASM volatile ("cpsie i" : : : "memory");
 8002a58:	b662      	cpsie	i
		__enable_irq();
	    MP_Init();
 8002a5a:	f005 fd95 	bl	8008588 <MP_Init>
	  }
    }
	break;
 8002a5e:	f001 bca0 	b.w	80043a2 <LCD_GUI_Update+0x1aca>

	case(LCD_GUI_Main_IMU_accel_processed):
	{
	  LCD_GUI_Accel_Processed();
 8002a62:	f7ff fcb1 	bl	80023c8 <LCD_GUI_Accel_Processed>

	  if(Rotary_Encoder.parameters.clockwise)
 8002a66:	4b5d      	ldr	r3, [pc, #372]	; (8002bdc <LCD_GUI_Update+0x304>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <LCD_GUI_Update+0x1a2>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_IMU_gyro_raw;
 8002a74:	4b58      	ldr	r3, [pc, #352]	; (8002bd8 <LCD_GUI_Update+0x300>)
 8002a76:	2204      	movs	r2, #4
 8002a78:	701a      	strb	r2, [r3, #0]
	  }
	  if(Rotary_Encoder.parameters.anticlockwise)
 8002a7a:	4b58      	ldr	r3, [pc, #352]	; (8002bdc <LCD_GUI_Update+0x304>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <LCD_GUI_Update+0x1b6>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_IMU_accel_raw;
 8002a88:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <LCD_GUI_Update+0x300>)
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	701a      	strb	r2, [r3, #0]
	  }
	  if(Rotary_Encoder.parameters.switch_state)
 8002a8e:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <LCD_GUI_Update+0x304>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f001 8484 	beq.w	80043a6 <LCD_GUI_Update+0x1ace>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a9e:	b672      	cpsid	i
	  {
		__disable_irq();
		MPU6050_calibrate(imu.calibration_axis,imu.N_calibration_points);
 8002aa0:	4b4f      	ldr	r3, [pc, #316]	; (8002be0 <LCD_GUI_Update+0x308>)
 8002aa2:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8002aa6:	4b4e      	ldr	r3, [pc, #312]	; (8002be0 <LCD_GUI_Update+0x308>)
 8002aa8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002aac:	4619      	mov	r1, r3
 8002aae:	4610      	mov	r0, r2
 8002ab0:	f005 fb20 	bl	80080f4 <MPU6050_calibrate>
  __ASM volatile ("cpsie i" : : : "memory");
 8002ab4:	b662      	cpsie	i
		__enable_irq();
		MP_Init();
 8002ab6:	f005 fd67 	bl	8008588 <MP_Init>
	  }
    }
	break;
 8002aba:	f001 bc74 	b.w	80043a6 <LCD_GUI_Update+0x1ace>

	case(LCD_GUI_Main_IMU_gyro_raw):
	{
	  LCD_GUI_Gyro_Raw();
 8002abe:	f7ff fcd1 	bl	8002464 <LCD_GUI_Gyro_Raw>

	  if(Rotary_Encoder.parameters.clockwise)
 8002ac2:	4b46      	ldr	r3, [pc, #280]	; (8002bdc <LCD_GUI_Update+0x304>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <LCD_GUI_Update+0x200>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_IMU_gyro_processed;
 8002ad0:	4b41      	ldr	r3, [pc, #260]	; (8002bd8 <LCD_GUI_Update+0x300>)
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e009      	b.n	8002aec <LCD_GUI_Update+0x214>
	  }
	  else if(Rotary_Encoder.parameters.anticlockwise)
 8002ad8:	4b40      	ldr	r3, [pc, #256]	; (8002bdc <LCD_GUI_Update+0x304>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <LCD_GUI_Update+0x214>
	  {
        LCD_GUI_screen_number = LCD_GUI_Main_IMU_accel_processed;
 8002ae6:	4b3c      	ldr	r3, [pc, #240]	; (8002bd8 <LCD_GUI_Update+0x300>)
 8002ae8:	2203      	movs	r2, #3
 8002aea:	701a      	strb	r2, [r3, #0]
	  }

      if(Rotary_Encoder.parameters.switch_state)
 8002aec:	4b3b      	ldr	r3, [pc, #236]	; (8002bdc <LCD_GUI_Update+0x304>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f001 8457 	beq.w	80043aa <LCD_GUI_Update+0x1ad2>
  __ASM volatile ("cpsid i" : : : "memory");
 8002afc:	b672      	cpsid	i
	  {
	    __disable_irq();
		MPU6050_calibrate(imu.calibration_axis,imu.N_calibration_points);
 8002afe:	4b38      	ldr	r3, [pc, #224]	; (8002be0 <LCD_GUI_Update+0x308>)
 8002b00:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8002b04:	4b36      	ldr	r3, [pc, #216]	; (8002be0 <LCD_GUI_Update+0x308>)
 8002b06:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	f005 faf1 	bl	80080f4 <MPU6050_calibrate>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b12:	b662      	cpsie	i
		__enable_irq();
		MP_Init();
 8002b14:	f005 fd38 	bl	8008588 <MP_Init>
	  }
	}
	break;
 8002b18:	f001 bc47 	b.w	80043aa <LCD_GUI_Update+0x1ad2>

	case(LCD_GUI_Main_IMU_gyro_processed):
	{
	  LCD_GUI_Gyro_Processed();
 8002b1c:	f7ff fcf0 	bl	8002500 <LCD_GUI_Gyro_Processed>

	  if(Rotary_Encoder.parameters.clockwise)
 8002b20:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <LCD_GUI_Update+0x304>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <LCD_GUI_Update+0x25e>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_RPY_accel;
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	; (8002bd8 <LCD_GUI_Update+0x300>)
 8002b30:	2206      	movs	r2, #6
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e009      	b.n	8002b4a <LCD_GUI_Update+0x272>
	  }
	  else if(Rotary_Encoder.parameters.anticlockwise)
 8002b36:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <LCD_GUI_Update+0x304>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <LCD_GUI_Update+0x272>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_IMU_gyro_raw;
 8002b44:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <LCD_GUI_Update+0x300>)
 8002b46:	2204      	movs	r2, #4
 8002b48:	701a      	strb	r2, [r3, #0]
	  }

	  if(Rotary_Encoder.parameters.switch_state)
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <LCD_GUI_Update+0x304>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f001 842a 	beq.w	80043ae <LCD_GUI_Update+0x1ad6>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b5a:	b672      	cpsid	i
	  {
	    __disable_irq();
		MPU6050_calibrate(imu.calibration_axis,imu.N_calibration_points);
 8002b5c:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <LCD_GUI_Update+0x308>)
 8002b5e:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <LCD_GUI_Update+0x308>)
 8002b64:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f005 fac2 	bl	80080f4 <MPU6050_calibrate>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b70:	b662      	cpsie	i
		__enable_irq();
		MP_Init();
 8002b72:	f005 fd09 	bl	8008588 <MP_Init>
      }
    }
	break;
 8002b76:	f001 bc1a 	b.w	80043ae <LCD_GUI_Update+0x1ad6>


    case(LCD_GUI_Main_RPY_accel):
	{
      LCD_GUI_RYP_Accel();
 8002b7a:	f7ff fd0f 	bl	800259c <LCD_GUI_RYP_Accel>

	  if(Rotary_Encoder.parameters.clockwise)
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <LCD_GUI_Update+0x304>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <LCD_GUI_Update+0x2ba>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_RPY_gyro;
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <LCD_GUI_Update+0x300>)
 8002b8e:	2207      	movs	r2, #7
 8002b90:	701a      	strb	r2, [r3, #0]
	  }
	  if(Rotary_Encoder.parameters.anticlockwise)
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <LCD_GUI_Update+0x304>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <LCD_GUI_Update+0x2ce>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_IMU_gyro_processed;
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <LCD_GUI_Update+0x300>)
 8002ba2:	2205      	movs	r2, #5
 8002ba4:	701a      	strb	r2, [r3, #0]
	  }
	  if(Rotary_Encoder.parameters.switch_state)
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <LCD_GUI_Update+0x304>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f001 83fe 	beq.w	80043b2 <LCD_GUI_Update+0x1ada>
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb6:	b672      	cpsid	i
	  {
		__disable_irq();
		MPU6050_calibrate(imu.calibration_axis,imu.N_calibration_points);
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <LCD_GUI_Update+0x308>)
 8002bba:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <LCD_GUI_Update+0x308>)
 8002bc0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	f005 fa94 	bl	80080f4 <MPU6050_calibrate>
  __ASM volatile ("cpsie i" : : : "memory");
 8002bcc:	b662      	cpsie	i
		__enable_irq();
		MP_Init();
 8002bce:	f005 fcdb 	bl	8008588 <MP_Init>
	  }
    }
	break;
 8002bd2:	f001 bbee 	b.w	80043b2 <LCD_GUI_Update+0x1ada>
 8002bd6:	bf00      	nop
 8002bd8:	20000414 	.word	0x20000414
 8002bdc:	200005a0 	.word	0x200005a0
 8002be0:	20000350 	.word	0x20000350


    case(LCD_GUI_Main_RPY_gyro):
	{
	  LCD_GUI_RYP_Gyro();
 8002be4:	f7ff fd30 	bl	8002648 <LCD_GUI_RYP_Gyro>

	  if(Rotary_Encoder.parameters.clockwise)
 8002be8:	4bb1      	ldr	r3, [pc, #708]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <LCD_GUI_Update+0x326>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_RPY_filter;
 8002bf6:	4baf      	ldr	r3, [pc, #700]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002bf8:	2208      	movs	r2, #8
 8002bfa:	701a      	strb	r2, [r3, #0]
 8002bfc:	e009      	b.n	8002c12 <LCD_GUI_Update+0x33a>
	  }
	  else if(Rotary_Encoder.parameters.anticlockwise)
 8002bfe:	4bac      	ldr	r3, [pc, #688]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <LCD_GUI_Update+0x33a>
	  {
		LCD_GUI_screen_number = LCD_GUI_Main_RPY_accel;
 8002c0c:	4ba9      	ldr	r3, [pc, #676]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002c0e:	2206      	movs	r2, #6
 8002c10:	701a      	strb	r2, [r3, #0]
	  }

	  if(Rotary_Encoder.parameters.switch_state)
 8002c12:	4ba7      	ldr	r3, [pc, #668]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f001 83ca 	beq.w	80043b6 <LCD_GUI_Update+0x1ade>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c22:	b672      	cpsid	i
	  {
	    __disable_irq();
		MPU6050_calibrate(imu.calibration_axis,imu.N_calibration_points);
 8002c24:	4ba4      	ldr	r3, [pc, #656]	; (8002eb8 <LCD_GUI_Update+0x5e0>)
 8002c26:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8002c2a:	4ba3      	ldr	r3, [pc, #652]	; (8002eb8 <LCD_GUI_Update+0x5e0>)
 8002c2c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f005 fa5e 	bl	80080f4 <MPU6050_calibrate>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c38:	b662      	cpsie	i
		__enable_irq();
		MP_Init();
 8002c3a:	f005 fca5 	bl	8008588 <MP_Init>
	  }
    }
	break;
 8002c3e:	f001 bbba 	b.w	80043b6 <LCD_GUI_Update+0x1ade>


	case(LCD_GUI_Main_RPY_filter):
	{
	  LCD_GUI_RYP_Filter();
 8002c42:	f7ff fd57 	bl	80026f4 <LCD_GUI_RYP_Filter>

	  if(Rotary_Encoder.parameters.clockwise)
 8002c46:	4b9a      	ldr	r3, [pc, #616]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <LCD_GUI_Update+0x384>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_Motion_Detection;
 8002c54:	4b97      	ldr	r3, [pc, #604]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002c56:	2209      	movs	r2, #9
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e009      	b.n	8002c70 <LCD_GUI_Update+0x398>
	  }
	  else if(Rotary_Encoder.parameters.anticlockwise)
 8002c5c:	4b94      	ldr	r3, [pc, #592]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <LCD_GUI_Update+0x398>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_RPY_gyro;
 8002c6a:	4b92      	ldr	r3, [pc, #584]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002c6c:	2207      	movs	r2, #7
 8002c6e:	701a      	strb	r2, [r3, #0]
	  }

      if(Rotary_Encoder.parameters.switch_state)
 8002c70:	4b8f      	ldr	r3, [pc, #572]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f001 839d 	beq.w	80043ba <LCD_GUI_Update+0x1ae2>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c80:	b672      	cpsid	i
	  {
		__disable_irq();
		MPU6050_calibrate(imu.calibration_axis,imu.N_calibration_points);
 8002c82:	4b8d      	ldr	r3, [pc, #564]	; (8002eb8 <LCD_GUI_Update+0x5e0>)
 8002c84:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8002c88:	4b8b      	ldr	r3, [pc, #556]	; (8002eb8 <LCD_GUI_Update+0x5e0>)
 8002c8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4610      	mov	r0, r2
 8002c92:	f005 fa2f 	bl	80080f4 <MPU6050_calibrate>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c96:	b662      	cpsie	i
		__enable_irq();
		MP_Init();
 8002c98:	f005 fc76 	bl	8008588 <MP_Init>
	  }
    }
	break;
 8002c9c:	f001 bb8d 	b.w	80043ba <LCD_GUI_Update+0x1ae2>

	case(LCD_GUI_Main_Motion_Detection):
	{
	  LCD_GUI_Motion_Detection();
 8002ca0:	f7ff fd7e 	bl	80027a0 <LCD_GUI_Motion_Detection>

	  if(Rotary_Encoder.parameters.clockwise)
 8002ca4:	4b82      	ldr	r3, [pc, #520]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <LCD_GUI_Update+0x3e2>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_Config_Mode;
 8002cb2:	4b80      	ldr	r3, [pc, #512]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	e009      	b.n	8002cce <LCD_GUI_Update+0x3f6>
	  }
	  else if(Rotary_Encoder.parameters.anticlockwise)
 8002cba:	4b7d      	ldr	r3, [pc, #500]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <LCD_GUI_Update+0x3f6>
	  {
	    LCD_GUI_screen_number = LCD_GUI_Main_RPY_filter;
 8002cc8:	4b7a      	ldr	r3, [pc, #488]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002cca:	2208      	movs	r2, #8
 8002ccc:	701a      	strb	r2, [r3, #0]
	  }

	  if(Rotary_Encoder.parameters.switch_state)
 8002cce:	4b78      	ldr	r3, [pc, #480]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f001 8370 	beq.w	80043be <LCD_GUI_Update+0x1ae6>
  __ASM volatile ("cpsid i" : : : "memory");
 8002cde:	b672      	cpsid	i
	  {
	    __disable_irq();
		MPU6050_calibrate(imu.calibration_axis,imu.N_calibration_points);
 8002ce0:	4b75      	ldr	r3, [pc, #468]	; (8002eb8 <LCD_GUI_Update+0x5e0>)
 8002ce2:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8002ce6:	4b74      	ldr	r3, [pc, #464]	; (8002eb8 <LCD_GUI_Update+0x5e0>)
 8002ce8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f005 fa00 	bl	80080f4 <MPU6050_calibrate>
  __ASM volatile ("cpsie i" : : : "memory");
 8002cf4:	b662      	cpsie	i
		__enable_irq();
		MP_Init();
 8002cf6:	f005 fc47 	bl	8008588 <MP_Init>
	  }
    }
	break;
 8002cfa:	f001 bb60 	b.w	80043be <LCD_GUI_Update+0x1ae6>

  /**************	Configuration screen. ************/

  	case(LCD_GUI_Config_Menu_A):
     {
      LCD_GUI_Config_Screen_A();
 8002cfe:	f7fe f9a5 	bl	800104c <LCD_GUI_Config_Screen_A>

      if( Rotary_Encoder.parameters.clockwise )
 8002d02:	4b6b      	ldr	r3, [pc, #428]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <LCD_GUI_Update+0x43e>
      {
      	LCD_GUI_screen_number = LCD_GUI_Config_Menu_B;
 8002d10:	4b68      	ldr	r3, [pc, #416]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002d12:	220b      	movs	r2, #11
 8002d14:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.anticlockwise )
 8002d16:	4b66      	ldr	r3, [pc, #408]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <LCD_GUI_Update+0x452>
      {
      	LCD_GUI_screen_number =	LCD_GUI_Config_Menu_F;
 8002d24:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002d26:	220f      	movs	r2, #15
 8002d28:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.switch_state )
 8002d2a:	4b61      	ldr	r3, [pc, #388]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f001 8344 	beq.w	80043c2 <LCD_GUI_Update+0x1aea>
      {

        LCD_GUI_screen_number = LCD_GUI_IMU_Config_Menu_A;
 8002d3a:	4b5e      	ldr	r3, [pc, #376]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	701a      	strb	r2, [r3, #0]
      }
     }
    break;
 8002d40:	f001 bb3f 	b.w	80043c2 <LCD_GUI_Update+0x1aea>

    case(LCD_GUI_Config_Menu_B):
     {
      LCD_GUI_Config_Screen_B();
 8002d44:	f7fe fc6a 	bl	800161c <LCD_GUI_Config_Screen_B>

      if( Rotary_Encoder.parameters.clockwise )
 8002d48:	4b59      	ldr	r3, [pc, #356]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <LCD_GUI_Update+0x484>
      {
      	LCD_GUI_screen_number = LCD_GUI_Config_Menu_C;
 8002d56:	4b57      	ldr	r3, [pc, #348]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002d58:	220c      	movs	r2, #12
 8002d5a:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.anticlockwise )
 8002d5c:	4b54      	ldr	r3, [pc, #336]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <LCD_GUI_Update+0x498>
      {
      	LCD_GUI_screen_number = LCD_GUI_Config_Menu_A;
 8002d6a:	4b52      	ldr	r3, [pc, #328]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002d6c:	220a      	movs	r2, #10
 8002d6e:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.switch_state )
 8002d70:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f001 8323 	beq.w	80043c6 <LCD_GUI_Update+0x1aee>
      {
        LCD_GUI_screen_number = LCD_GUI_CF_Menu_A;
 8002d80:	4b4c      	ldr	r3, [pc, #304]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002d82:	2216      	movs	r2, #22
 8002d84:	701a      	strb	r2, [r3, #0]
      }
     }
    break;
 8002d86:	f001 bb1e 	b.w	80043c6 <LCD_GUI_Update+0x1aee>

    case(LCD_GUI_Config_Menu_C):
     {
      LCD_GUI_Config_Screen_C();
 8002d8a:	f7ff f9df 	bl	800214c <LCD_GUI_Config_Screen_C>

      if( Rotary_Encoder.parameters.clockwise )
 8002d8e:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <LCD_GUI_Update+0x4ca>
      {
      	LCD_GUI_screen_number = LCD_GUI_Config_Menu_D;
 8002d9c:	4b45      	ldr	r3, [pc, #276]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002d9e:	220d      	movs	r2, #13
 8002da0:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.anticlockwise )
 8002da2:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <LCD_GUI_Update+0x4de>
      {
      	LCD_GUI_screen_number =	LCD_GUI_Config_Menu_B;
 8002db0:	4b40      	ldr	r3, [pc, #256]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002db2:	220b      	movs	r2, #11
 8002db4:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.switch_state )
 8002db6:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f001 8302 	beq.w	80043ca <LCD_GUI_Update+0x1af2>
      {
        LCD_GUI_screen_number = LCD_GUI_Tilt_Detection_Menu_A;
 8002dc6:	4b3b      	ldr	r3, [pc, #236]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002dc8:	221a      	movs	r2, #26
 8002dca:	701a      	strb	r2, [r3, #0]
      }
     }
    break;
 8002dcc:	f001 bafd 	b.w	80043ca <LCD_GUI_Update+0x1af2>

    case(LCD_GUI_Config_Menu_D):
     {
      LCD_GUI_Config_Screen_D();
 8002dd0:	f7ff f9f8 	bl	80021c4 <LCD_GUI_Config_Screen_D>

      if( Rotary_Encoder.parameters.clockwise )
 8002dd4:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <LCD_GUI_Update+0x510>
      {
      	LCD_GUI_screen_number = LCD_GUI_Config_Menu_E;
 8002de2:	4b34      	ldr	r3, [pc, #208]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002de4:	220e      	movs	r2, #14
 8002de6:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.anticlockwise )
 8002de8:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <LCD_GUI_Update+0x524>
      {
      	LCD_GUI_screen_number = LCD_GUI_Config_Menu_C;
 8002df6:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002df8:	220c      	movs	r2, #12
 8002dfa:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.switch_state )
 8002dfc:	4b2c      	ldr	r3, [pc, #176]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f001 82e1 	beq.w	80043ce <LCD_GUI_Update+0x1af6>
      {
        LCD_GUI_screen_number = LCD_GUI_Vibration_Detection_Menu_A;
 8002e0c:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002e0e:	221e      	movs	r2, #30
 8002e10:	701a      	strb	r2, [r3, #0]
      }
     }
    break;
 8002e12:	f001 badc 	b.w	80043ce <LCD_GUI_Update+0x1af6>

    case(LCD_GUI_Config_Menu_E):
     {
      LCD_GUI_Config_Screen_E();
 8002e16:	f7ff fa11 	bl	800223c <LCD_GUI_Config_Screen_E>

      if( Rotary_Encoder.parameters.clockwise )
 8002e1a:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <LCD_GUI_Update+0x556>
      {
      	LCD_GUI_screen_number = LCD_GUI_Config_Menu_F;
 8002e28:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002e2a:	220f      	movs	r2, #15
 8002e2c:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.anticlockwise )
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <LCD_GUI_Update+0x56a>
      {
      	LCD_GUI_screen_number = LCD_GUI_Config_Menu_D;
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002e3e:	220d      	movs	r2, #13
 8002e40:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.switch_state )
 8002e42:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f001 82c0 	beq.w	80043d2 <LCD_GUI_Update+0x1afa>
      {
        LCD_GUI_screen_number = LCD_GUI_LED_Config_Menu_A;
 8002e52:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002e54:	2222      	movs	r2, #34	; 0x22
 8002e56:	701a      	strb	r2, [r3, #0]
      }
     }
    break;
 8002e58:	f001 babb 	b.w	80043d2 <LCD_GUI_Update+0x1afa>

    case(LCD_GUI_Config_Menu_F):
     {
      LCD_GUI_Config_Screen_F();
 8002e5c:	f7ff fa2a 	bl	80022b4 <LCD_GUI_Config_Screen_F>

      if( Rotary_Encoder.parameters.clockwise )
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <LCD_GUI_Update+0x59c>
      {
      	LCD_GUI_screen_number = LCD_GUI_Config_Menu_A;
 8002e6e:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002e70:	220a      	movs	r2, #10
 8002e72:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.anticlockwise )
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <LCD_GUI_Update+0x5b0>
      {
      	LCD_GUI_screen_number = LCD_GUI_Config_Menu_E;
 8002e82:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002e84:	220e      	movs	r2, #14
 8002e86:	701a      	strb	r2, [r3, #0]
      }

      if( Rotary_Encoder.parameters.switch_state )
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <LCD_GUI_Update+0x5d8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f001 829f 	beq.w	80043d6 <LCD_GUI_Update+0x1afe>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e98:	b672      	cpsid	i
      {
    	  __disable_irq();
    	  System_SysTick_delay_ms(100);
 8002e9a:	2064      	movs	r0, #100	; 0x64
 8002e9c:	f008 fb3a 	bl	800b514 <System_SysTick_delay_ms>
    	  Config_write();
 8002ea0:	f7fd fdd8 	bl	8000a54 <Config_write>
  __ASM volatile ("cpsie i" : : : "memory");
 8002ea4:	b662      	cpsie	i
    	  __enable_irq();

    	  LCD_GUI_screen_number = LCD_GUI_Main_Config_Mode;
 8002ea6:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <LCD_GUI_Update+0x5dc>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
      }
     }
    break;
 8002eac:	f001 ba93 	b.w	80043d6 <LCD_GUI_Update+0x1afe>
 8002eb0:	200005a0 	.word	0x200005a0
 8002eb4:	20000414 	.word	0x20000414
 8002eb8:	20000350 	.word	0x20000350

  /***************	Configuration screen: IMU settings  ************/

    case(LCD_GUI_IMU_Config_Menu_A):
	{
      LCD_GUI_Config_Screen_IMU_settings_A();
 8002ebc:	f7fe f902 	bl	80010c4 <LCD_GUI_Config_Screen_IMU_settings_A>

      if( Rotary_Encoder.parameters.switch_state )
 8002ec0:	4b96      	ldr	r3, [pc, #600]	; (800311c <LCD_GUI_Update+0x844>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <LCD_GUI_Update+0x60c>
      {
        if( LCD_GUI_selected )
 8002ece:	4b94      	ldr	r3, [pc, #592]	; (8003120 <LCD_GUI_Update+0x848>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <LCD_GUI_Update+0x606>
        {
        	LCD_GUI_selected = 0;
 8002ed6:	4b92      	ldr	r3, [pc, #584]	; (8003120 <LCD_GUI_Update+0x848>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	e002      	b.n	8002ee4 <LCD_GUI_Update+0x60c>
        }
        else
        {
        	LCD_GUI_selected = 1;
 8002ede:	4b90      	ldr	r3, [pc, #576]	; (8003120 <LCD_GUI_Update+0x848>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
        }
      }

      if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected )
 8002ee4:	4b8d      	ldr	r3, [pc, #564]	; (800311c <LCD_GUI_Update+0x844>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d006      	beq.n	8002f00 <LCD_GUI_Update+0x628>
 8002ef2:	4b8b      	ldr	r3, [pc, #556]	; (8003120 <LCD_GUI_Update+0x848>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <LCD_GUI_Update+0x628>
      {
    	 LCD_GUI_screen_number =  LCD_GUI_IMU_Config_Menu_B;
 8002efa:	4b8a      	ldr	r3, [pc, #552]	; (8003124 <LCD_GUI_Update+0x84c>)
 8002efc:	2211      	movs	r2, #17
 8002efe:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected )
 8002f00:	4b86      	ldr	r3, [pc, #536]	; (800311c <LCD_GUI_Update+0x844>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <LCD_GUI_Update+0x644>
 8002f0e:	4b84      	ldr	r3, [pc, #528]	; (8003120 <LCD_GUI_Update+0x848>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <LCD_GUI_Update+0x644>
      {
        LCD_GUI_screen_number = LCD_GUI_IMU_Config_Menu_F;
 8002f16:	4b83      	ldr	r3, [pc, #524]	; (8003124 <LCD_GUI_Update+0x84c>)
 8002f18:	2215      	movs	r2, #21
 8002f1a:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected )
 8002f1c:	4b7f      	ldr	r3, [pc, #508]	; (800311c <LCD_GUI_Update+0x844>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d028      	beq.n	8002f7c <LCD_GUI_Update+0x6a4>
 8002f2a:	4b7d      	ldr	r3, [pc, #500]	; (8003120 <LCD_GUI_Update+0x848>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d024      	beq.n	8002f7c <LCD_GUI_Update+0x6a4>
      {
    	 imu.sensor_configurations.sensor_configuration_segments.accel_fs_config++;
 8002f32:	4b7d      	ldr	r3, [pc, #500]	; (8003128 <LCD_GUI_Update+0x850>)
 8002f34:	7a1b      	ldrb	r3, [r3, #8]
 8002f36:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	b2d9      	uxtb	r1, r3
 8002f44:	4a78      	ldr	r2, [pc, #480]	; (8003128 <LCD_GUI_Update+0x850>)
 8002f46:	7a13      	ldrb	r3, [r2, #8]
 8002f48:	f361 0302 	bfi	r3, r1, #0, #3
 8002f4c:	7213      	strb	r3, [r2, #8]

    	 if(imu.sensor_configurations.sensor_configuration_segments.accel_fs_config > ACCEL_FS_16_G)
 8002f4e:	4b76      	ldr	r3, [pc, #472]	; (8003128 <LCD_GUI_Update+0x850>)
 8002f50:	7a1b      	ldrb	r3, [r3, #8]
 8002f52:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d905      	bls.n	8002f68 <LCD_GUI_Update+0x690>
    	 {
    	   imu.sensor_configurations.sensor_configuration_segments.accel_fs_config = ACCEL_FS_16_G;
 8002f5c:	4a72      	ldr	r2, [pc, #456]	; (8003128 <LCD_GUI_Update+0x850>)
 8002f5e:	7a13      	ldrb	r3, [r2, #8]
 8002f60:	2103      	movs	r1, #3
 8002f62:	f361 0302 	bfi	r3, r1, #0, #3
 8002f66:	7213      	strb	r3, [r2, #8]
    	 }

    	 IMU_settings_SMF.IMU_settings_SMF_segments.ACCEL_FS =
    	 imu.sensor_configurations.sensor_configuration_segments.accel_fs_config;
 8002f68:	4b6f      	ldr	r3, [pc, #444]	; (8003128 <LCD_GUI_Update+0x850>)
 8002f6a:	7a1b      	ldrb	r3, [r3, #8]
 8002f6c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002f70:	b2d9      	uxtb	r1, r3
    	 IMU_settings_SMF.IMU_settings_SMF_segments.ACCEL_FS =
 8002f72:	4a6e      	ldr	r2, [pc, #440]	; (800312c <LCD_GUI_Update+0x854>)
 8002f74:	8813      	ldrh	r3, [r2, #0]
 8002f76:	f361 13c9 	bfi	r3, r1, #7, #3
 8002f7a:	8013      	strh	r3, [r2, #0]
      }
      if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected )
 8002f7c:	4b67      	ldr	r3, [pc, #412]	; (800311c <LCD_GUI_Update+0x844>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f001 8227 	beq.w	80043da <LCD_GUI_Update+0x1b02>
 8002f8c:	4b64      	ldr	r3, [pc, #400]	; (8003120 <LCD_GUI_Update+0x848>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f001 8222 	beq.w	80043da <LCD_GUI_Update+0x1b02>
      {
        if(imu.sensor_configurations.sensor_configuration_segments.accel_fs_config)
 8002f96:	4b64      	ldr	r3, [pc, #400]	; (8003128 <LCD_GUI_Update+0x850>)
 8002f98:	7a1b      	ldrb	r3, [r3, #8]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00d      	beq.n	8002fc0 <LCD_GUI_Update+0x6e8>
        {
        	imu.sensor_configurations.sensor_configuration_segments.accel_fs_config--;
 8002fa4:	4b60      	ldr	r3, [pc, #384]	; (8003128 <LCD_GUI_Update+0x850>)
 8002fa6:	7a1b      	ldrb	r3, [r3, #8]
 8002fa8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	3307      	adds	r3, #7
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	b2d9      	uxtb	r1, r3
 8002fb6:	4a5c      	ldr	r2, [pc, #368]	; (8003128 <LCD_GUI_Update+0x850>)
 8002fb8:	7a13      	ldrb	r3, [r2, #8]
 8002fba:	f361 0302 	bfi	r3, r1, #0, #3
 8002fbe:	7213      	strb	r3, [r2, #8]
        }

        IMU_settings_SMF.IMU_settings_SMF_segments.ACCEL_FS =
        imu.sensor_configurations.sensor_configuration_segments.accel_fs_config;
 8002fc0:	4b59      	ldr	r3, [pc, #356]	; (8003128 <LCD_GUI_Update+0x850>)
 8002fc2:	7a1b      	ldrb	r3, [r3, #8]
 8002fc4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002fc8:	b2d9      	uxtb	r1, r3
        IMU_settings_SMF.IMU_settings_SMF_segments.ACCEL_FS =
 8002fca:	4a58      	ldr	r2, [pc, #352]	; (800312c <LCD_GUI_Update+0x854>)
 8002fcc:	8813      	ldrh	r3, [r2, #0]
 8002fce:	f361 13c9 	bfi	r3, r1, #7, #3
 8002fd2:	8013      	strh	r3, [r2, #0]
      }

	}
    break;
 8002fd4:	f001 ba01 	b.w	80043da <LCD_GUI_Update+0x1b02>

    case(LCD_GUI_IMU_Config_Menu_B):
	{
      LCD_GUI_Config_Screen_IMU_settings_B();
 8002fd8:	f7fe f90a 	bl	80011f0 <LCD_GUI_Config_Screen_IMU_settings_B>

      if( Rotary_Encoder.parameters.switch_state )
 8002fdc:	4b4f      	ldr	r3, [pc, #316]	; (800311c <LCD_GUI_Update+0x844>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <LCD_GUI_Update+0x728>
      {
        if( LCD_GUI_selected )
 8002fea:	4b4d      	ldr	r3, [pc, #308]	; (8003120 <LCD_GUI_Update+0x848>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <LCD_GUI_Update+0x722>
        {
        	LCD_GUI_selected = 0;
 8002ff2:	4b4b      	ldr	r3, [pc, #300]	; (8003120 <LCD_GUI_Update+0x848>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	e002      	b.n	8003000 <LCD_GUI_Update+0x728>
        }
        else
        {
        	LCD_GUI_selected = 1;
 8002ffa:	4b49      	ldr	r3, [pc, #292]	; (8003120 <LCD_GUI_Update+0x848>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
        }
      }

      if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected)
 8003000:	4b46      	ldr	r3, [pc, #280]	; (800311c <LCD_GUI_Update+0x844>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d006      	beq.n	800301c <LCD_GUI_Update+0x744>
 800300e:	4b44      	ldr	r3, [pc, #272]	; (8003120 <LCD_GUI_Update+0x848>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <LCD_GUI_Update+0x744>
      {
    	  LCD_GUI_screen_number =  LCD_GUI_IMU_Config_Menu_C;
 8003016:	4b43      	ldr	r3, [pc, #268]	; (8003124 <LCD_GUI_Update+0x84c>)
 8003018:	2212      	movs	r2, #18
 800301a:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected)
 800301c:	4b3f      	ldr	r3, [pc, #252]	; (800311c <LCD_GUI_Update+0x844>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d006      	beq.n	8003038 <LCD_GUI_Update+0x760>
 800302a:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <LCD_GUI_Update+0x848>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <LCD_GUI_Update+0x760>
      {
    	  LCD_GUI_screen_number = LCD_GUI_IMU_Config_Menu_A;
 8003032:	4b3c      	ldr	r3, [pc, #240]	; (8003124 <LCD_GUI_Update+0x84c>)
 8003034:	2210      	movs	r2, #16
 8003036:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected)
 8003038:	4b38      	ldr	r3, [pc, #224]	; (800311c <LCD_GUI_Update+0x844>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d028      	beq.n	8003098 <LCD_GUI_Update+0x7c0>
 8003046:	4b36      	ldr	r3, [pc, #216]	; (8003120 <LCD_GUI_Update+0x848>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d024      	beq.n	8003098 <LCD_GUI_Update+0x7c0>
      {
    	  imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config++;
 800304e:	4b36      	ldr	r3, [pc, #216]	; (8003128 <LCD_GUI_Update+0x850>)
 8003050:	7a1b      	ldrb	r3, [r3, #8]
 8003052:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	3301      	adds	r3, #1
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	b2d9      	uxtb	r1, r3
 8003060:	4a31      	ldr	r2, [pc, #196]	; (8003128 <LCD_GUI_Update+0x850>)
 8003062:	7a13      	ldrb	r3, [r2, #8]
 8003064:	f361 03c5 	bfi	r3, r1, #3, #3
 8003068:	7213      	strb	r3, [r2, #8]

    	  if(imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config > GYRO_FS_2000_DPS)
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <LCD_GUI_Update+0x850>)
 800306c:	7a1b      	ldrb	r3, [r3, #8]
 800306e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b03      	cmp	r3, #3
 8003076:	d905      	bls.n	8003084 <LCD_GUI_Update+0x7ac>
    	  {
    		  imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config = GYRO_FS_2000_DPS;
 8003078:	4a2b      	ldr	r2, [pc, #172]	; (8003128 <LCD_GUI_Update+0x850>)
 800307a:	7a13      	ldrb	r3, [r2, #8]
 800307c:	2103      	movs	r1, #3
 800307e:	f361 03c5 	bfi	r3, r1, #3, #3
 8003082:	7213      	strb	r3, [r2, #8]
    	  }

    	  IMU_settings_SMF.IMU_settings_SMF_segments.GYRO_FS =
    	  imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config;
 8003084:	4b28      	ldr	r3, [pc, #160]	; (8003128 <LCD_GUI_Update+0x850>)
 8003086:	7a1b      	ldrb	r3, [r3, #8]
 8003088:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800308c:	b2d9      	uxtb	r1, r3
    	  IMU_settings_SMF.IMU_settings_SMF_segments.GYRO_FS =
 800308e:	4a27      	ldr	r2, [pc, #156]	; (800312c <LCD_GUI_Update+0x854>)
 8003090:	7813      	ldrb	r3, [r2, #0]
 8003092:	f361 1306 	bfi	r3, r1, #4, #3
 8003096:	7013      	strb	r3, [r2, #0]
      }
      if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected)
 8003098:	4b20      	ldr	r3, [pc, #128]	; (800311c <LCD_GUI_Update+0x844>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f001 819b 	beq.w	80043de <LCD_GUI_Update+0x1b06>
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <LCD_GUI_Update+0x848>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f001 8196 	beq.w	80043de <LCD_GUI_Update+0x1b06>
      {
    	  if(imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config)
 80030b2:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <LCD_GUI_Update+0x850>)
 80030b4:	7a1b      	ldrb	r3, [r3, #8]
 80030b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00d      	beq.n	80030dc <LCD_GUI_Update+0x804>
    	  {
    		  imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config--;
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <LCD_GUI_Update+0x850>)
 80030c2:	7a1b      	ldrb	r3, [r3, #8]
 80030c4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	3307      	adds	r3, #7
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	b2d9      	uxtb	r1, r3
 80030d2:	4a15      	ldr	r2, [pc, #84]	; (8003128 <LCD_GUI_Update+0x850>)
 80030d4:	7a13      	ldrb	r3, [r2, #8]
 80030d6:	f361 03c5 	bfi	r3, r1, #3, #3
 80030da:	7213      	strb	r3, [r2, #8]
    	  }

    	  IMU_settings_SMF.IMU_settings_SMF_segments.GYRO_FS =
    	  imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config;
 80030dc:	4b12      	ldr	r3, [pc, #72]	; (8003128 <LCD_GUI_Update+0x850>)
 80030de:	7a1b      	ldrb	r3, [r3, #8]
 80030e0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80030e4:	b2d9      	uxtb	r1, r3
    	  IMU_settings_SMF.IMU_settings_SMF_segments.GYRO_FS =
 80030e6:	4a11      	ldr	r2, [pc, #68]	; (800312c <LCD_GUI_Update+0x854>)
 80030e8:	7813      	ldrb	r3, [r2, #0]
 80030ea:	f361 1306 	bfi	r3, r1, #4, #3
 80030ee:	7013      	strb	r3, [r2, #0]

    	  LCD_GUI_screen_number = LCD_GUI_IMU_Config_Menu_A;
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <LCD_GUI_Update+0x84c>)
 80030f2:	2210      	movs	r2, #16
 80030f4:	701a      	strb	r2, [r3, #0]
      }

	}
    break;
 80030f6:	f001 b972 	b.w	80043de <LCD_GUI_Update+0x1b06>

    case(LCD_GUI_IMU_Config_Menu_C):
	{
      LCD_GUI_Config_Screen_IMU_settings_C();
 80030fa:	f7fe f90f 	bl	800131c <LCD_GUI_Config_Screen_IMU_settings_C>

      if( Rotary_Encoder.parameters.switch_state )
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <LCD_GUI_Update+0x844>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d014      	beq.n	8003136 <LCD_GUI_Update+0x85e>
      {
        if( LCD_GUI_selected )
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <LCD_GUI_Update+0x848>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00d      	beq.n	8003130 <LCD_GUI_Update+0x858>
        {
        	LCD_GUI_selected = 0;
 8003114:	4b02      	ldr	r3, [pc, #8]	; (8003120 <LCD_GUI_Update+0x848>)
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e00c      	b.n	8003136 <LCD_GUI_Update+0x85e>
 800311c:	200005a0 	.word	0x200005a0
 8003120:	2000039c 	.word	0x2000039c
 8003124:	20000414 	.word	0x20000414
 8003128:	20000350 	.word	0x20000350
 800312c:	20000484 	.word	0x20000484
        }
        else
        {
        	LCD_GUI_selected = 1;
 8003130:	4b9f      	ldr	r3, [pc, #636]	; (80033b0 <LCD_GUI_Update+0xad8>)
 8003132:	2201      	movs	r2, #1
 8003134:	701a      	strb	r2, [r3, #0]
        }
      }

      if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected)
 8003136:	4b9f      	ldr	r3, [pc, #636]	; (80033b4 <LCD_GUI_Update+0xadc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d006      	beq.n	8003152 <LCD_GUI_Update+0x87a>
 8003144:	4b9a      	ldr	r3, [pc, #616]	; (80033b0 <LCD_GUI_Update+0xad8>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <LCD_GUI_Update+0x87a>
      {
    	  LCD_GUI_screen_number =  LCD_GUI_IMU_Config_Menu_D;
 800314c:	4b9a      	ldr	r3, [pc, #616]	; (80033b8 <LCD_GUI_Update+0xae0>)
 800314e:	2213      	movs	r2, #19
 8003150:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected)
 8003152:	4b98      	ldr	r3, [pc, #608]	; (80033b4 <LCD_GUI_Update+0xadc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d006      	beq.n	800316e <LCD_GUI_Update+0x896>
 8003160:	4b93      	ldr	r3, [pc, #588]	; (80033b0 <LCD_GUI_Update+0xad8>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <LCD_GUI_Update+0x896>
      {
    	  LCD_GUI_screen_number = LCD_GUI_IMU_Config_Menu_B;
 8003168:	4b93      	ldr	r3, [pc, #588]	; (80033b8 <LCD_GUI_Update+0xae0>)
 800316a:	2211      	movs	r2, #17
 800316c:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected)
 800316e:	4b91      	ldr	r3, [pc, #580]	; (80033b4 <LCD_GUI_Update+0xadc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d010      	beq.n	800319e <LCD_GUI_Update+0x8c6>
 800317c:	4b8c      	ldr	r3, [pc, #560]	; (80033b0 <LCD_GUI_Update+0xad8>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00c      	beq.n	800319e <LCD_GUI_Update+0x8c6>
      {
    	  imu.N_calibration_points++;
 8003184:	4b8d      	ldr	r3, [pc, #564]	; (80033bc <LCD_GUI_Update+0xae4>)
 8003186:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800318a:	3301      	adds	r3, #1
 800318c:	b2da      	uxtb	r2, r3
 800318e:	4b8b      	ldr	r3, [pc, #556]	; (80033bc <LCD_GUI_Update+0xae4>)
 8003190:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    	  IMU_calibration_SMF.IMU_calibration_SMF_segments.points =
    	  imu.N_calibration_points;
 8003194:	4b89      	ldr	r3, [pc, #548]	; (80033bc <LCD_GUI_Update+0xae4>)
 8003196:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    	  IMU_calibration_SMF.IMU_calibration_SMF_segments.points =
 800319a:	4b89      	ldr	r3, [pc, #548]	; (80033c0 <LCD_GUI_Update+0xae8>)
 800319c:	705a      	strb	r2, [r3, #1]
      }
      if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected)
 800319e:	4b85      	ldr	r3, [pc, #532]	; (80033b4 <LCD_GUI_Update+0xadc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f001 811a 	beq.w	80043e2 <LCD_GUI_Update+0x1b0a>
 80031ae:	4b80      	ldr	r3, [pc, #512]	; (80033b0 <LCD_GUI_Update+0xad8>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f001 8115 	beq.w	80043e2 <LCD_GUI_Update+0x1b0a>
      {
    	  if( imu.N_calibration_points )
 80031b8:	4b80      	ldr	r3, [pc, #512]	; (80033bc <LCD_GUI_Update+0xae4>)
 80031ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <LCD_GUI_Update+0x8fa>
    	  {
    		  imu.N_calibration_points--;
 80031c2:	4b7e      	ldr	r3, [pc, #504]	; (80033bc <LCD_GUI_Update+0xae4>)
 80031c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	4b7b      	ldr	r3, [pc, #492]	; (80033bc <LCD_GUI_Update+0xae4>)
 80031ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    	  }

    	  IMU_calibration_SMF.IMU_calibration_SMF_segments.points =
    	  imu.N_calibration_points;
 80031d2:	4b7a      	ldr	r3, [pc, #488]	; (80033bc <LCD_GUI_Update+0xae4>)
 80031d4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    	  IMU_calibration_SMF.IMU_calibration_SMF_segments.points =
 80031d8:	4b79      	ldr	r3, [pc, #484]	; (80033c0 <LCD_GUI_Update+0xae8>)
 80031da:	705a      	strb	r2, [r3, #1]
      }
	}
    break;
 80031dc:	f001 b901 	b.w	80043e2 <LCD_GUI_Update+0x1b0a>

    case(LCD_GUI_IMU_Config_Menu_D):
	{
      LCD_GUI_Config_Screen_IMU_settings_D();
 80031e0:	f7fe f8ea 	bl	80013b8 <LCD_GUI_Config_Screen_IMU_settings_D>

      if( Rotary_Encoder.parameters.switch_state )
 80031e4:	4b73      	ldr	r3, [pc, #460]	; (80033b4 <LCD_GUI_Update+0xadc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <LCD_GUI_Update+0x930>
      {
        if( LCD_GUI_selected )
 80031f2:	4b6f      	ldr	r3, [pc, #444]	; (80033b0 <LCD_GUI_Update+0xad8>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <LCD_GUI_Update+0x92a>
        {
        	LCD_GUI_selected = 0;
 80031fa:	4b6d      	ldr	r3, [pc, #436]	; (80033b0 <LCD_GUI_Update+0xad8>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e002      	b.n	8003208 <LCD_GUI_Update+0x930>
        }
        else
        {
        	LCD_GUI_selected = 1;
 8003202:	4b6b      	ldr	r3, [pc, #428]	; (80033b0 <LCD_GUI_Update+0xad8>)
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
        }
      }

      if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected )
 8003208:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <LCD_GUI_Update+0xadc>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <LCD_GUI_Update+0x94c>
 8003216:	4b66      	ldr	r3, [pc, #408]	; (80033b0 <LCD_GUI_Update+0xad8>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <LCD_GUI_Update+0x94c>
      {
    	  LCD_GUI_screen_number =  LCD_GUI_IMU_Config_Menu_E;
 800321e:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <LCD_GUI_Update+0xae0>)
 8003220:	2214      	movs	r2, #20
 8003222:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected )
 8003224:	4b63      	ldr	r3, [pc, #396]	; (80033b4 <LCD_GUI_Update+0xadc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d006      	beq.n	8003240 <LCD_GUI_Update+0x968>
 8003232:	4b5f      	ldr	r3, [pc, #380]	; (80033b0 <LCD_GUI_Update+0xad8>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <LCD_GUI_Update+0x968>
      {
    	  LCD_GUI_screen_number = LCD_GUI_IMU_Config_Menu_C;
 800323a:	4b5f      	ldr	r3, [pc, #380]	; (80033b8 <LCD_GUI_Update+0xae0>)
 800323c:	2212      	movs	r2, #18
 800323e:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected )
 8003240:	4b5c      	ldr	r3, [pc, #368]	; (80033b4 <LCD_GUI_Update+0xadc>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d010      	beq.n	8003270 <LCD_GUI_Update+0x998>
 800324e:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <LCD_GUI_Update+0xad8>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00c      	beq.n	8003270 <LCD_GUI_Update+0x998>
      {
    	  imu.calibration_interval_ms++;
 8003256:	4b59      	ldr	r3, [pc, #356]	; (80033bc <LCD_GUI_Update+0xae4>)
 8003258:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800325c:	3301      	adds	r3, #1
 800325e:	b2da      	uxtb	r2, r3
 8003260:	4b56      	ldr	r3, [pc, #344]	; (80033bc <LCD_GUI_Update+0xae4>)
 8003262:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    	  IMU_calibration_SMF.IMU_calibration_SMF_segments.interval =
    	  imu.calibration_interval_ms;
 8003266:	4b55      	ldr	r3, [pc, #340]	; (80033bc <LCD_GUI_Update+0xae4>)
 8003268:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
    	  IMU_calibration_SMF.IMU_calibration_SMF_segments.interval =
 800326c:	4b54      	ldr	r3, [pc, #336]	; (80033c0 <LCD_GUI_Update+0xae8>)
 800326e:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected )
 8003270:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <LCD_GUI_Update+0xadc>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	f001 80b3 	beq.w	80043e6 <LCD_GUI_Update+0x1b0e>
 8003280:	4b4b      	ldr	r3, [pc, #300]	; (80033b0 <LCD_GUI_Update+0xad8>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	f001 80ae 	beq.w	80043e6 <LCD_GUI_Update+0x1b0e>
      {
    	  if( imu.calibration_interval_ms )
 800328a:	4b4c      	ldr	r3, [pc, #304]	; (80033bc <LCD_GUI_Update+0xae4>)
 800328c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <LCD_GUI_Update+0x9cc>
    	  {
    		  imu.calibration_interval_ms--;
 8003294:	4b49      	ldr	r3, [pc, #292]	; (80033bc <LCD_GUI_Update+0xae4>)
 8003296:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800329a:	3b01      	subs	r3, #1
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4b47      	ldr	r3, [pc, #284]	; (80033bc <LCD_GUI_Update+0xae4>)
 80032a0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    	  }

    	  IMU_calibration_SMF.IMU_calibration_SMF_segments.interval =
    	  imu.calibration_interval_ms;
 80032a4:	4b45      	ldr	r3, [pc, #276]	; (80033bc <LCD_GUI_Update+0xae4>)
 80032a6:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
    	  IMU_calibration_SMF.IMU_calibration_SMF_segments.interval =
 80032aa:	4b45      	ldr	r3, [pc, #276]	; (80033c0 <LCD_GUI_Update+0xae8>)
 80032ac:	701a      	strb	r2, [r3, #0]
      }

	}
    break;
 80032ae:	f001 b89a 	b.w	80043e6 <LCD_GUI_Update+0x1b0e>


    case(LCD_GUI_IMU_Config_Menu_E):
	{
      LCD_GUI_Config_Screen_IMU_settings_E();
 80032b2:	f7fe f8cf 	bl	8001454 <LCD_GUI_Config_Screen_IMU_settings_E>

      if( Rotary_Encoder.parameters.switch_state )
 80032b6:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <LCD_GUI_Update+0xadc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <LCD_GUI_Update+0xa02>
      {
        if( LCD_GUI_selected )
 80032c4:	4b3a      	ldr	r3, [pc, #232]	; (80033b0 <LCD_GUI_Update+0xad8>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <LCD_GUI_Update+0x9fc>
        {
        	LCD_GUI_selected = 0;
 80032cc:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <LCD_GUI_Update+0xad8>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e002      	b.n	80032da <LCD_GUI_Update+0xa02>
        }
        else
        {
        	LCD_GUI_selected = 1;
 80032d4:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <LCD_GUI_Update+0xad8>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
        }
      }

      if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected)
 80032da:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <LCD_GUI_Update+0xadc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d006      	beq.n	80032f6 <LCD_GUI_Update+0xa1e>
 80032e8:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <LCD_GUI_Update+0xad8>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <LCD_GUI_Update+0xa1e>
      {
    	  LCD_GUI_screen_number =  LCD_GUI_IMU_Config_Menu_F;
 80032f0:	4b31      	ldr	r3, [pc, #196]	; (80033b8 <LCD_GUI_Update+0xae0>)
 80032f2:	2215      	movs	r2, #21
 80032f4:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected)
 80032f6:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <LCD_GUI_Update+0xadc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d006      	beq.n	8003312 <LCD_GUI_Update+0xa3a>
 8003304:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <LCD_GUI_Update+0xad8>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <LCD_GUI_Update+0xa3a>
      {
    	  LCD_GUI_screen_number = LCD_GUI_IMU_Config_Menu_D;
 800330c:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <LCD_GUI_Update+0xae0>)
 800330e:	2213      	movs	r2, #19
 8003310:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected)
 8003312:	4b28      	ldr	r3, [pc, #160]	; (80033b4 <LCD_GUI_Update+0xadc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01f      	beq.n	8003360 <LCD_GUI_Update+0xa88>
 8003320:	4b23      	ldr	r3, [pc, #140]	; (80033b0 <LCD_GUI_Update+0xad8>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01b      	beq.n	8003360 <LCD_GUI_Update+0xa88>
      {
    	  imu.calibration_axis++;
 8003328:	4b24      	ldr	r3, [pc, #144]	; (80033bc <LCD_GUI_Update+0xae4>)
 800332a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800332e:	3301      	adds	r3, #1
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4b22      	ldr	r3, [pc, #136]	; (80033bc <LCD_GUI_Update+0xae4>)
 8003334:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

    	  if(imu.calibration_axis > Z_Negative )
 8003338:	4b20      	ldr	r3, [pc, #128]	; (80033bc <LCD_GUI_Update+0xae4>)
 800333a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800333e:	2b05      	cmp	r3, #5
 8003340:	d903      	bls.n	800334a <LCD_GUI_Update+0xa72>
    	  {
            imu.calibration_axis = Z_Negative;
 8003342:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <LCD_GUI_Update+0xae4>)
 8003344:	2205      	movs	r2, #5
 8003346:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    	  }

    	  IMU_calibration_SMF.IMU_calibration_SMF_segments.axis =
    	  imu.calibration_axis;
 800334a:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <LCD_GUI_Update+0xae4>)
 800334c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	b2d9      	uxtb	r1, r3
    	  IMU_calibration_SMF.IMU_calibration_SMF_segments.axis =
 8003356:	4a1a      	ldr	r2, [pc, #104]	; (80033c0 <LCD_GUI_Update+0xae8>)
 8003358:	7893      	ldrb	r3, [r2, #2]
 800335a:	f361 0302 	bfi	r3, r1, #0, #3
 800335e:	7093      	strb	r3, [r2, #2]
      }
      if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected)
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <LCD_GUI_Update+0xadc>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	f001 803d 	beq.w	80043ea <LCD_GUI_Update+0x1b12>
 8003370:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <LCD_GUI_Update+0xad8>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	f001 8038 	beq.w	80043ea <LCD_GUI_Update+0x1b12>
      {
    	  if( imu.calibration_axis )
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <LCD_GUI_Update+0xae4>)
 800337c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <LCD_GUI_Update+0xabc>
    	  {
    		  imu.calibration_axis--;
 8003384:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <LCD_GUI_Update+0xae4>)
 8003386:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800338a:	3b01      	subs	r3, #1
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <LCD_GUI_Update+0xae4>)
 8003390:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    	  }

    	  IMU_calibration_SMF.IMU_calibration_SMF_segments.axis =
    	  imu.calibration_axis;
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <LCD_GUI_Update+0xae4>)
 8003396:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	b2d9      	uxtb	r1, r3
    	  IMU_calibration_SMF.IMU_calibration_SMF_segments.axis =
 80033a0:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <LCD_GUI_Update+0xae8>)
 80033a2:	7893      	ldrb	r3, [r2, #2]
 80033a4:	f361 0302 	bfi	r3, r1, #0, #3
 80033a8:	7093      	strb	r3, [r2, #2]
      }


	}
    break;
 80033aa:	f001 b81e 	b.w	80043ea <LCD_GUI_Update+0x1b12>
 80033ae:	bf00      	nop
 80033b0:	2000039c 	.word	0x2000039c
 80033b4:	200005a0 	.word	0x200005a0
 80033b8:	20000414 	.word	0x20000414
 80033bc:	20000350 	.word	0x20000350
 80033c0:	200004f8 	.word	0x200004f8

    case(LCD_GUI_IMU_Config_Menu_F):
	{
      LCD_GUI_Config_Screen_IMU_settings_F();
 80033c4:	f7fe f8b8 	bl	8001538 <LCD_GUI_Config_Screen_IMU_settings_F>

      if( Rotary_Encoder.parameters.clockwise )
 80033c8:	4b68      	ldr	r3, [pc, #416]	; (800356c <LCD_GUI_Update+0xc94>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <LCD_GUI_Update+0xb04>
      {
    	  LCD_GUI_screen_number =  LCD_GUI_IMU_Config_Menu_F;
 80033d6:	4b66      	ldr	r3, [pc, #408]	; (8003570 <LCD_GUI_Update+0xc98>)
 80033d8:	2215      	movs	r2, #21
 80033da:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.anticlockwise )
 80033dc:	4b63      	ldr	r3, [pc, #396]	; (800356c <LCD_GUI_Update+0xc94>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <LCD_GUI_Update+0xb18>
      {
    	  LCD_GUI_screen_number = LCD_GUI_IMU_Config_Menu_E;
 80033ea:	4b61      	ldr	r3, [pc, #388]	; (8003570 <LCD_GUI_Update+0xc98>)
 80033ec:	2214      	movs	r2, #20
 80033ee:	701a      	strb	r2, [r3, #0]
      }
      if( Rotary_Encoder.parameters.switch_state )
 80033f0:	4b5e      	ldr	r3, [pc, #376]	; (800356c <LCD_GUI_Update+0xc94>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 87f7 	beq.w	80043ee <LCD_GUI_Update+0x1b16>
      {
    	  LCD_GUI_screen_number = LCD_GUI_Config_Menu_A;
 8003400:	4b5b      	ldr	r3, [pc, #364]	; (8003570 <LCD_GUI_Update+0xc98>)
 8003402:	220a      	movs	r2, #10
 8003404:	701a      	strb	r2, [r3, #0]
      }
	}
    break;
 8003406:	f000 bff2 	b.w	80043ee <LCD_GUI_Update+0x1b16>

    /***************	Configuration screen: Complementary filter  ************/

      case(LCD_GUI_CF_Menu_A):
  	{
        LCD_GUI_Config_Screen_CF_settings_A();
 800340a:	f7fe f943 	bl	8001694 <LCD_GUI_Config_Screen_CF_settings_A>

        if( Rotary_Encoder.parameters.switch_state )
 800340e:	4b57      	ldr	r3, [pc, #348]	; (800356c <LCD_GUI_Update+0xc94>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <LCD_GUI_Update+0xb5a>
        {
          if( LCD_GUI_selected )
 800341c:	4b55      	ldr	r3, [pc, #340]	; (8003574 <LCD_GUI_Update+0xc9c>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <LCD_GUI_Update+0xb54>
          {
          	LCD_GUI_selected = 0;
 8003424:	4b53      	ldr	r3, [pc, #332]	; (8003574 <LCD_GUI_Update+0xc9c>)
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	e002      	b.n	8003432 <LCD_GUI_Update+0xb5a>
          }
          else
          {
          	LCD_GUI_selected = 1;
 800342c:	4b51      	ldr	r3, [pc, #324]	; (8003574 <LCD_GUI_Update+0xc9c>)
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]
          }
        }

        if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected)
 8003432:	4b4e      	ldr	r3, [pc, #312]	; (800356c <LCD_GUI_Update+0xc94>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d006      	beq.n	800344e <LCD_GUI_Update+0xb76>
 8003440:	4b4c      	ldr	r3, [pc, #304]	; (8003574 <LCD_GUI_Update+0xc9c>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <LCD_GUI_Update+0xb76>
        {
      	 LCD_GUI_screen_number =  LCD_GUI_CF_Menu_B;
 8003448:	4b49      	ldr	r3, [pc, #292]	; (8003570 <LCD_GUI_Update+0xc98>)
 800344a:	2217      	movs	r2, #23
 800344c:	701a      	strb	r2, [r3, #0]
        }
        if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected)
 800344e:	4b47      	ldr	r3, [pc, #284]	; (800356c <LCD_GUI_Update+0xc94>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d006      	beq.n	800346a <LCD_GUI_Update+0xb92>
 800345c:	4b45      	ldr	r3, [pc, #276]	; (8003574 <LCD_GUI_Update+0xc9c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <LCD_GUI_Update+0xb92>
        {
          LCD_GUI_screen_number = LCD_GUI_CF_Menu_A;
 8003464:	4b42      	ldr	r3, [pc, #264]	; (8003570 <LCD_GUI_Update+0xc98>)
 8003466:	2216      	movs	r2, #22
 8003468:	701a      	strb	r2, [r3, #0]
        }
        if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected)
 800346a:	4b40      	ldr	r3, [pc, #256]	; (800356c <LCD_GUI_Update+0xc94>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d02f      	beq.n	80034d8 <LCD_GUI_Update+0xc00>
 8003478:	4b3e      	ldr	r3, [pc, #248]	; (8003574 <LCD_GUI_Update+0xc9c>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d02b      	beq.n	80034d8 <LCD_GUI_Update+0xc00>
        {
      	 Motion_Processing.roll_coeff += 0.001f;
 8003480:	4b3d      	ldr	r3, [pc, #244]	; (8003578 <LCD_GUI_Update+0xca0>)
 8003482:	edd3 7a03 	vldr	s15, [r3, #12]
 8003486:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800357c <LCD_GUI_Update+0xca4>
 800348a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800348e:	4b3a      	ldr	r3, [pc, #232]	; (8003578 <LCD_GUI_Update+0xca0>)
 8003490:	edc3 7a03 	vstr	s15, [r3, #12]

      	 if(Motion_Processing.roll_coeff > 1.0f)
 8003494:	4b38      	ldr	r3, [pc, #224]	; (8003578 <LCD_GUI_Update+0xca0>)
 8003496:	edd3 7a03 	vldr	s15, [r3, #12]
 800349a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800349e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a6:	dd03      	ble.n	80034b0 <LCD_GUI_Update+0xbd8>
      	 {
      		 Motion_Processing.roll_coeff = 1.0f;
 80034a8:	4b33      	ldr	r3, [pc, #204]	; (8003578 <LCD_GUI_Update+0xca0>)
 80034aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80034ae:	60da      	str	r2, [r3, #12]
      	 }

          parameter.value = Motion_Processing.roll_coeff;
 80034b0:	4b31      	ldr	r3, [pc, #196]	; (8003578 <LCD_GUI_Update+0xca0>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	61fb      	str	r3, [r7, #28]
          parameter.startBit = Roll_coeff_SBIT;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
          parameter.bitLength = Roll_coeff_BLEN;
 80034ba:	230a      	movs	r3, #10
 80034bc:	613b      	str	r3, [r7, #16]
          parameter.dataType = UNSIGNED;
 80034be:	2300      	movs	r3, #0
 80034c0:	60bb      	str	r3, [r7, #8]
          parameter.offset = Roll_coeff_OFFSET;
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	61bb      	str	r3, [r7, #24]
          parameter.pFrame = &CF_coeff_SMF;
 80034c8:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <LCD_GUI_Update+0xca8>)
 80034ca:	607b      	str	r3, [r7, #4]
          parameter.factor = Roll_coeff_FACTOR;
 80034cc:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <LCD_GUI_Update+0xcac>)
 80034ce:	617b      	str	r3, [r7, #20]

          SDCP_WPF(&parameter);
 80034d0:	1d3b      	adds	r3, r7, #4
 80034d2:	4618      	mov	r0, r3
 80034d4:	f007 fd84 	bl	800afe0 <SDCP_WPF>
        }
        if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected)
 80034d8:	4b24      	ldr	r3, [pc, #144]	; (800356c <LCD_GUI_Update+0xc94>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8785 	beq.w	80043f2 <LCD_GUI_Update+0x1b1a>
 80034e8:	4b22      	ldr	r3, [pc, #136]	; (8003574 <LCD_GUI_Update+0xc9c>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8780 	beq.w	80043f2 <LCD_GUI_Update+0x1b1a>
        {
         	 Motion_Processing.roll_coeff -= 0.001f;
 80034f2:	4b21      	ldr	r3, [pc, #132]	; (8003578 <LCD_GUI_Update+0xca0>)
 80034f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80034f8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800357c <LCD_GUI_Update+0xca4>
 80034fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003500:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <LCD_GUI_Update+0xca0>)
 8003502:	edc3 7a03 	vstr	s15, [r3, #12]

         	 if(Motion_Processing.roll_coeff < 0.0f)
 8003506:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <LCD_GUI_Update+0xca0>)
 8003508:	edd3 7a03 	vldr	s15, [r3, #12]
 800350c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003514:	d503      	bpl.n	800351e <LCD_GUI_Update+0xc46>
         	 {
         		 Motion_Processing.roll_coeff = 0.0f;
 8003516:	4b18      	ldr	r3, [pc, #96]	; (8003578 <LCD_GUI_Update+0xca0>)
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	60da      	str	r2, [r3, #12]
         	 }

             parameter.value = Motion_Processing.roll_coeff;
 800351e:	4b16      	ldr	r3, [pc, #88]	; (8003578 <LCD_GUI_Update+0xca0>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	61fb      	str	r3, [r7, #28]
             parameter.startBit = Roll_coeff_SBIT;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
             parameter.bitLength = Roll_coeff_BLEN;
 8003528:	230a      	movs	r3, #10
 800352a:	613b      	str	r3, [r7, #16]
             parameter.dataType = UNSIGNED;
 800352c:	2300      	movs	r3, #0
 800352e:	60bb      	str	r3, [r7, #8]
             parameter.offset = Roll_coeff_OFFSET;
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
             parameter.pFrame = &CF_coeff_SMF;
 8003536:	4b12      	ldr	r3, [pc, #72]	; (8003580 <LCD_GUI_Update+0xca8>)
 8003538:	607b      	str	r3, [r7, #4]
             parameter.factor = Roll_coeff_FACTOR;
 800353a:	4b12      	ldr	r3, [pc, #72]	; (8003584 <LCD_GUI_Update+0xcac>)
 800353c:	617b      	str	r3, [r7, #20]

             SDCP_WPF(&parameter);
 800353e:	1d3b      	adds	r3, r7, #4
 8003540:	4618      	mov	r0, r3
 8003542:	f007 fd4d 	bl	800afe0 <SDCP_WPF>
        }


  	}
      break;
 8003546:	f000 bf54 	b.w	80043f2 <LCD_GUI_Update+0x1b1a>

      case(LCD_GUI_CF_Menu_B):
  	{
        LCD_GUI_Config_Screen_CF_settings_B();
 800354a:	f7fe f8f5 	bl	8001738 <LCD_GUI_Config_Screen_CF_settings_B>

        if( Rotary_Encoder.parameters.switch_state )
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <LCD_GUI_Update+0xc94>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d018      	beq.n	800358e <LCD_GUI_Update+0xcb6>
        {
          if( LCD_GUI_selected )
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <LCD_GUI_Update+0xc9c>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d011      	beq.n	8003588 <LCD_GUI_Update+0xcb0>
          {
          	LCD_GUI_selected = 0;
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <LCD_GUI_Update+0xc9c>)
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e010      	b.n	800358e <LCD_GUI_Update+0xcb6>
 800356c:	200005a0 	.word	0x200005a0
 8003570:	20000414 	.word	0x20000414
 8003574:	2000039c 	.word	0x2000039c
 8003578:	2000048c 	.word	0x2000048c
 800357c:	3a83126f 	.word	0x3a83126f
 8003580:	20000144 	.word	0x20000144
 8003584:	3a800eae 	.word	0x3a800eae
          }
          else
          {
          	LCD_GUI_selected = 1;
 8003588:	4ba8      	ldr	r3, [pc, #672]	; (800382c <LCD_GUI_Update+0xf54>)
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
          }
        }

        if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected)
 800358e:	4ba8      	ldr	r3, [pc, #672]	; (8003830 <LCD_GUI_Update+0xf58>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d006      	beq.n	80035aa <LCD_GUI_Update+0xcd2>
 800359c:	4ba3      	ldr	r3, [pc, #652]	; (800382c <LCD_GUI_Update+0xf54>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <LCD_GUI_Update+0xcd2>
        {
      	  LCD_GUI_screen_number =  LCD_GUI_CF_Menu_C;
 80035a4:	4ba3      	ldr	r3, [pc, #652]	; (8003834 <LCD_GUI_Update+0xf5c>)
 80035a6:	2218      	movs	r2, #24
 80035a8:	701a      	strb	r2, [r3, #0]
        }
        if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected)
 80035aa:	4ba1      	ldr	r3, [pc, #644]	; (8003830 <LCD_GUI_Update+0xf58>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d006      	beq.n	80035c6 <LCD_GUI_Update+0xcee>
 80035b8:	4b9c      	ldr	r3, [pc, #624]	; (800382c <LCD_GUI_Update+0xf54>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <LCD_GUI_Update+0xcee>
        {
      	  LCD_GUI_screen_number = LCD_GUI_CF_Menu_A;
 80035c0:	4b9c      	ldr	r3, [pc, #624]	; (8003834 <LCD_GUI_Update+0xf5c>)
 80035c2:	2216      	movs	r2, #22
 80035c4:	701a      	strb	r2, [r3, #0]
        }
        if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected)
 80035c6:	4b9a      	ldr	r3, [pc, #616]	; (8003830 <LCD_GUI_Update+0xf58>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d02f      	beq.n	8003634 <LCD_GUI_Update+0xd5c>
 80035d4:	4b95      	ldr	r3, [pc, #596]	; (800382c <LCD_GUI_Update+0xf54>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d02b      	beq.n	8003634 <LCD_GUI_Update+0xd5c>
        {
      	 Motion_Processing.pitch_coeff += 0.001f;
 80035dc:	4b96      	ldr	r3, [pc, #600]	; (8003838 <LCD_GUI_Update+0xf60>)
 80035de:	edd3 7a04 	vldr	s15, [r3, #16]
 80035e2:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800383c <LCD_GUI_Update+0xf64>
 80035e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035ea:	4b93      	ldr	r3, [pc, #588]	; (8003838 <LCD_GUI_Update+0xf60>)
 80035ec:	edc3 7a04 	vstr	s15, [r3, #16]

      	 if(Motion_Processing.pitch_coeff > 1.0f)
 80035f0:	4b91      	ldr	r3, [pc, #580]	; (8003838 <LCD_GUI_Update+0xf60>)
 80035f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80035f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003602:	dd03      	ble.n	800360c <LCD_GUI_Update+0xd34>
      	 {
      		 Motion_Processing.pitch_coeff = 1.0f;
 8003604:	4b8c      	ldr	r3, [pc, #560]	; (8003838 <LCD_GUI_Update+0xf60>)
 8003606:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800360a:	611a      	str	r2, [r3, #16]
      	 }

         parameter.value = Motion_Processing.pitch_coeff;
 800360c:	4b8a      	ldr	r3, [pc, #552]	; (8003838 <LCD_GUI_Update+0xf60>)
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	61fb      	str	r3, [r7, #28]
         parameter.startBit = Pitch_coeff_SBIT;
 8003612:	230a      	movs	r3, #10
 8003614:	60fb      	str	r3, [r7, #12]
         parameter.bitLength = Pitch_coeff_BLEN;
 8003616:	230a      	movs	r3, #10
 8003618:	613b      	str	r3, [r7, #16]
         parameter.dataType = UNSIGNED;
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]
         parameter.offset = Pitch_coeff_OFFSET;
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]
         parameter.pFrame = &CF_coeff_SMF;
 8003624:	4b86      	ldr	r3, [pc, #536]	; (8003840 <LCD_GUI_Update+0xf68>)
 8003626:	607b      	str	r3, [r7, #4]
         parameter.factor = Pitch_coeff_FACTOR;
 8003628:	4b86      	ldr	r3, [pc, #536]	; (8003844 <LCD_GUI_Update+0xf6c>)
 800362a:	617b      	str	r3, [r7, #20]

         SDCP_WPF(&parameter);
 800362c:	1d3b      	adds	r3, r7, #4
 800362e:	4618      	mov	r0, r3
 8003630:	f007 fcd6 	bl	800afe0 <SDCP_WPF>

        }
        if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected)
 8003634:	4b7e      	ldr	r3, [pc, #504]	; (8003830 <LCD_GUI_Update+0xf58>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 86d9 	beq.w	80043f6 <LCD_GUI_Update+0x1b1e>
 8003644:	4b79      	ldr	r3, [pc, #484]	; (800382c <LCD_GUI_Update+0xf54>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 86d4 	beq.w	80043f6 <LCD_GUI_Update+0x1b1e>
        {
         	 Motion_Processing.pitch_coeff -= 0.001f;
 800364e:	4b7a      	ldr	r3, [pc, #488]	; (8003838 <LCD_GUI_Update+0xf60>)
 8003650:	edd3 7a04 	vldr	s15, [r3, #16]
 8003654:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800383c <LCD_GUI_Update+0xf64>
 8003658:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800365c:	4b76      	ldr	r3, [pc, #472]	; (8003838 <LCD_GUI_Update+0xf60>)
 800365e:	edc3 7a04 	vstr	s15, [r3, #16]

         	 if(Motion_Processing.pitch_coeff < 0.0f)
 8003662:	4b75      	ldr	r3, [pc, #468]	; (8003838 <LCD_GUI_Update+0xf60>)
 8003664:	edd3 7a04 	vldr	s15, [r3, #16]
 8003668:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003670:	d503      	bpl.n	800367a <LCD_GUI_Update+0xda2>
         	 {
         		 Motion_Processing.pitch_coeff = 0.0f;
 8003672:	4b71      	ldr	r3, [pc, #452]	; (8003838 <LCD_GUI_Update+0xf60>)
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	611a      	str	r2, [r3, #16]
         	 }

             parameter.value = Motion_Processing.pitch_coeff;
 800367a:	4b6f      	ldr	r3, [pc, #444]	; (8003838 <LCD_GUI_Update+0xf60>)
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	61fb      	str	r3, [r7, #28]
             parameter.startBit = Pitch_coeff_SBIT;
 8003680:	230a      	movs	r3, #10
 8003682:	60fb      	str	r3, [r7, #12]
             parameter.bitLength = Pitch_coeff_BLEN;
 8003684:	230a      	movs	r3, #10
 8003686:	613b      	str	r3, [r7, #16]
             parameter.dataType = UNSIGNED;
 8003688:	2300      	movs	r3, #0
 800368a:	60bb      	str	r3, [r7, #8]
             parameter.offset = Pitch_coeff_OFFSET;
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
             parameter.pFrame = &CF_coeff_SMF;
 8003692:	4b6b      	ldr	r3, [pc, #428]	; (8003840 <LCD_GUI_Update+0xf68>)
 8003694:	607b      	str	r3, [r7, #4]
             parameter.factor = Pitch_coeff_FACTOR;
 8003696:	4b6b      	ldr	r3, [pc, #428]	; (8003844 <LCD_GUI_Update+0xf6c>)
 8003698:	617b      	str	r3, [r7, #20]

             SDCP_WPF(&parameter);
 800369a:	1d3b      	adds	r3, r7, #4
 800369c:	4618      	mov	r0, r3
 800369e:	f007 fc9f 	bl	800afe0 <SDCP_WPF>
        }
  	}
      break;
 80036a2:	f000 bea8 	b.w	80043f6 <LCD_GUI_Update+0x1b1e>

      case(LCD_GUI_CF_Menu_C):
  	{
        LCD_GUI_Config_Screen_CF_settings_C();
 80036a6:	f7fe f899 	bl	80017dc <LCD_GUI_Config_Screen_CF_settings_C>

        if( Rotary_Encoder.parameters.switch_state )
 80036aa:	4b61      	ldr	r3, [pc, #388]	; (8003830 <LCD_GUI_Update+0xf58>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <LCD_GUI_Update+0xdf6>
        {
          if( LCD_GUI_selected )
 80036b8:	4b5c      	ldr	r3, [pc, #368]	; (800382c <LCD_GUI_Update+0xf54>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <LCD_GUI_Update+0xdf0>
          {
          	LCD_GUI_selected = 0;
 80036c0:	4b5a      	ldr	r3, [pc, #360]	; (800382c <LCD_GUI_Update+0xf54>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	e002      	b.n	80036ce <LCD_GUI_Update+0xdf6>
          }
          else
          {
          	LCD_GUI_selected = 1;
 80036c8:	4b58      	ldr	r3, [pc, #352]	; (800382c <LCD_GUI_Update+0xf54>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	701a      	strb	r2, [r3, #0]
          }
        }

        if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected)
 80036ce:	4b58      	ldr	r3, [pc, #352]	; (8003830 <LCD_GUI_Update+0xf58>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d006      	beq.n	80036ea <LCD_GUI_Update+0xe12>
 80036dc:	4b53      	ldr	r3, [pc, #332]	; (800382c <LCD_GUI_Update+0xf54>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d102      	bne.n	80036ea <LCD_GUI_Update+0xe12>
        {
      	  LCD_GUI_screen_number =  LCD_GUI_CF_Menu_D;
 80036e4:	4b53      	ldr	r3, [pc, #332]	; (8003834 <LCD_GUI_Update+0xf5c>)
 80036e6:	2219      	movs	r2, #25
 80036e8:	701a      	strb	r2, [r3, #0]
        }
        if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected)
 80036ea:	4b51      	ldr	r3, [pc, #324]	; (8003830 <LCD_GUI_Update+0xf58>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d006      	beq.n	8003706 <LCD_GUI_Update+0xe2e>
 80036f8:	4b4c      	ldr	r3, [pc, #304]	; (800382c <LCD_GUI_Update+0xf54>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d102      	bne.n	8003706 <LCD_GUI_Update+0xe2e>
        {
      	  LCD_GUI_screen_number = LCD_GUI_CF_Menu_B;
 8003700:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <LCD_GUI_Update+0xf5c>)
 8003702:	2217      	movs	r2, #23
 8003704:	701a      	strb	r2, [r3, #0]
        }

        if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected)
 8003706:	4b4a      	ldr	r3, [pc, #296]	; (8003830 <LCD_GUI_Update+0xf58>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d02f      	beq.n	8003774 <LCD_GUI_Update+0xe9c>
 8003714:	4b45      	ldr	r3, [pc, #276]	; (800382c <LCD_GUI_Update+0xf54>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d02b      	beq.n	8003774 <LCD_GUI_Update+0xe9c>
        {
      	 Motion_Processing.yaw_coeff += 0.001f;
 800371c:	4b46      	ldr	r3, [pc, #280]	; (8003838 <LCD_GUI_Update+0xf60>)
 800371e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003722:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800383c <LCD_GUI_Update+0xf64>
 8003726:	ee77 7a87 	vadd.f32	s15, s15, s14
 800372a:	4b43      	ldr	r3, [pc, #268]	; (8003838 <LCD_GUI_Update+0xf60>)
 800372c:	edc3 7a05 	vstr	s15, [r3, #20]

      	 if(Motion_Processing.yaw_coeff > 1.0f)
 8003730:	4b41      	ldr	r3, [pc, #260]	; (8003838 <LCD_GUI_Update+0xf60>)
 8003732:	edd3 7a05 	vldr	s15, [r3, #20]
 8003736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800373a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800373e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003742:	dd03      	ble.n	800374c <LCD_GUI_Update+0xe74>
      	 {
      		 Motion_Processing.yaw_coeff = 1.0f;
 8003744:	4b3c      	ldr	r3, [pc, #240]	; (8003838 <LCD_GUI_Update+0xf60>)
 8003746:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800374a:	615a      	str	r2, [r3, #20]
      	 }

         parameter.value = Motion_Processing.yaw_coeff;
 800374c:	4b3a      	ldr	r3, [pc, #232]	; (8003838 <LCD_GUI_Update+0xf60>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	61fb      	str	r3, [r7, #28]
         parameter.startBit = Yaw_coeff_SBIT;
 8003752:	2314      	movs	r3, #20
 8003754:	60fb      	str	r3, [r7, #12]
         parameter.bitLength = Yaw_coeff_BLEN;
 8003756:	230a      	movs	r3, #10
 8003758:	613b      	str	r3, [r7, #16]
         parameter.dataType = UNSIGNED;
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
         parameter.offset = Yaw_coeff_OFFSET;
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	61bb      	str	r3, [r7, #24]
         parameter.pFrame = &CF_coeff_SMF;
 8003764:	4b36      	ldr	r3, [pc, #216]	; (8003840 <LCD_GUI_Update+0xf68>)
 8003766:	607b      	str	r3, [r7, #4]
         parameter.factor = Yaw_coeff_FACTOR;
 8003768:	4b36      	ldr	r3, [pc, #216]	; (8003844 <LCD_GUI_Update+0xf6c>)
 800376a:	617b      	str	r3, [r7, #20]

         SDCP_WPF(&parameter);
 800376c:	1d3b      	adds	r3, r7, #4
 800376e:	4618      	mov	r0, r3
 8003770:	f007 fc36 	bl	800afe0 <SDCP_WPF>
        }
        if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected)
 8003774:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <LCD_GUI_Update+0xf58>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 863b 	beq.w	80043fa <LCD_GUI_Update+0x1b22>
 8003784:	4b29      	ldr	r3, [pc, #164]	; (800382c <LCD_GUI_Update+0xf54>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 8636 	beq.w	80043fa <LCD_GUI_Update+0x1b22>
        {
         	 Motion_Processing.yaw_coeff -= 0.001f;
 800378e:	4b2a      	ldr	r3, [pc, #168]	; (8003838 <LCD_GUI_Update+0xf60>)
 8003790:	edd3 7a05 	vldr	s15, [r3, #20]
 8003794:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800383c <LCD_GUI_Update+0xf64>
 8003798:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800379c:	4b26      	ldr	r3, [pc, #152]	; (8003838 <LCD_GUI_Update+0xf60>)
 800379e:	edc3 7a05 	vstr	s15, [r3, #20]

         	 if(Motion_Processing.yaw_coeff < 0.0f)
 80037a2:	4b25      	ldr	r3, [pc, #148]	; (8003838 <LCD_GUI_Update+0xf60>)
 80037a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80037a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b0:	d503      	bpl.n	80037ba <LCD_GUI_Update+0xee2>
         	 {
         		 Motion_Processing.yaw_coeff = 0.0f;
 80037b2:	4b21      	ldr	r3, [pc, #132]	; (8003838 <LCD_GUI_Update+0xf60>)
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	615a      	str	r2, [r3, #20]
         	 }

             parameter.value = Motion_Processing.yaw_coeff;
 80037ba:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <LCD_GUI_Update+0xf60>)
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	61fb      	str	r3, [r7, #28]
             parameter.startBit = Yaw_coeff_SBIT;
 80037c0:	2314      	movs	r3, #20
 80037c2:	60fb      	str	r3, [r7, #12]
             parameter.bitLength = Yaw_coeff_BLEN;
 80037c4:	230a      	movs	r3, #10
 80037c6:	613b      	str	r3, [r7, #16]
             parameter.dataType = UNSIGNED;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60bb      	str	r3, [r7, #8]
             parameter.offset = Yaw_coeff_OFFSET;
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	61bb      	str	r3, [r7, #24]
             parameter.pFrame = &CF_coeff_SMF;
 80037d2:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <LCD_GUI_Update+0xf68>)
 80037d4:	607b      	str	r3, [r7, #4]
             parameter.factor = Yaw_coeff_FACTOR;
 80037d6:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <LCD_GUI_Update+0xf6c>)
 80037d8:	617b      	str	r3, [r7, #20]

             SDCP_WPF(&parameter);
 80037da:	1d3b      	adds	r3, r7, #4
 80037dc:	4618      	mov	r0, r3
 80037de:	f007 fbff 	bl	800afe0 <SDCP_WPF>
        }
  	}
      break;
 80037e2:	f000 be0a 	b.w	80043fa <LCD_GUI_Update+0x1b22>

      case(LCD_GUI_CF_Menu_D):
  	{
        LCD_GUI_Config_Screen_CF_settings_D();
 80037e6:	f7fe f83b 	bl	8001860 <LCD_GUI_Config_Screen_CF_settings_D>

        if( Rotary_Encoder.parameters.clockwise )
 80037ea:	4b11      	ldr	r3, [pc, #68]	; (8003830 <LCD_GUI_Update+0xf58>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <LCD_GUI_Update+0xf26>
        {
      	  LCD_GUI_screen_number =  LCD_GUI_CF_Menu_D;
 80037f8:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <LCD_GUI_Update+0xf5c>)
 80037fa:	2219      	movs	r2, #25
 80037fc:	701a      	strb	r2, [r3, #0]
        }
        if( Rotary_Encoder.parameters.anticlockwise )
 80037fe:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <LCD_GUI_Update+0xf58>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <LCD_GUI_Update+0xf3a>
        {
      	  LCD_GUI_screen_number = LCD_GUI_CF_Menu_C;
 800380c:	4b09      	ldr	r3, [pc, #36]	; (8003834 <LCD_GUI_Update+0xf5c>)
 800380e:	2218      	movs	r2, #24
 8003810:	701a      	strb	r2, [r3, #0]
        }
        if( Rotary_Encoder.parameters.switch_state)
 8003812:	4b07      	ldr	r3, [pc, #28]	; (8003830 <LCD_GUI_Update+0xf58>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 85ee 	beq.w	80043fe <LCD_GUI_Update+0x1b26>
        {
          LCD_GUI_screen_number = LCD_GUI_Config_Menu_B;
 8003822:	4b04      	ldr	r3, [pc, #16]	; (8003834 <LCD_GUI_Update+0xf5c>)
 8003824:	220b      	movs	r2, #11
 8003826:	701a      	strb	r2, [r3, #0]
        }
  	}
      break;
 8003828:	f000 bde9 	b.w	80043fe <LCD_GUI_Update+0x1b26>
 800382c:	2000039c 	.word	0x2000039c
 8003830:	200005a0 	.word	0x200005a0
 8003834:	20000414 	.word	0x20000414
 8003838:	2000048c 	.word	0x2000048c
 800383c:	3a83126f 	.word	0x3a83126f
 8003840:	20000144 	.word	0x20000144
 8003844:	3a800eae 	.word	0x3a800eae

      /***************	Configuration screen: Tilt threshold  ************/

        case(LCD_GUI_Tilt_Detection_Menu_A):
    	{
          LCD_GUI_Config_Screen_Tilt_Detection_settings_A();
 8003848:	f7fe f84c 	bl	80018e4 <LCD_GUI_Config_Screen_Tilt_Detection_settings_A>

          if( Rotary_Encoder.parameters.switch_state )
 800384c:	4b9a      	ldr	r3, [pc, #616]	; (8003ab8 <LCD_GUI_Update+0x11e0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <LCD_GUI_Update+0xf98>
          {
            if( LCD_GUI_selected )
 800385a:	4b98      	ldr	r3, [pc, #608]	; (8003abc <LCD_GUI_Update+0x11e4>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <LCD_GUI_Update+0xf92>
            {
            	LCD_GUI_selected = 0;
 8003862:	4b96      	ldr	r3, [pc, #600]	; (8003abc <LCD_GUI_Update+0x11e4>)
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	e002      	b.n	8003870 <LCD_GUI_Update+0xf98>
            }
            else
            {
            	LCD_GUI_selected = 1;
 800386a:	4b94      	ldr	r3, [pc, #592]	; (8003abc <LCD_GUI_Update+0x11e4>)
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
            }
          }

          if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected)
 8003870:	4b91      	ldr	r3, [pc, #580]	; (8003ab8 <LCD_GUI_Update+0x11e0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d006      	beq.n	800388c <LCD_GUI_Update+0xfb4>
 800387e:	4b8f      	ldr	r3, [pc, #572]	; (8003abc <LCD_GUI_Update+0x11e4>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <LCD_GUI_Update+0xfb4>
          {
        	 LCD_GUI_screen_number =  LCD_GUI_Tilt_Detection_Menu_B;
 8003886:	4b8e      	ldr	r3, [pc, #568]	; (8003ac0 <LCD_GUI_Update+0x11e8>)
 8003888:	221b      	movs	r2, #27
 800388a:	701a      	strb	r2, [r3, #0]
          }
          if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected)
 800388c:	4b8a      	ldr	r3, [pc, #552]	; (8003ab8 <LCD_GUI_Update+0x11e0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d006      	beq.n	80038a8 <LCD_GUI_Update+0xfd0>
 800389a:	4b88      	ldr	r3, [pc, #544]	; (8003abc <LCD_GUI_Update+0x11e4>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <LCD_GUI_Update+0xfd0>
          {
            LCD_GUI_screen_number = LCD_GUI_Tilt_Detection_Menu_A;
 80038a2:	4b87      	ldr	r3, [pc, #540]	; (8003ac0 <LCD_GUI_Update+0x11e8>)
 80038a4:	221a      	movs	r2, #26
 80038a6:	701a      	strb	r2, [r3, #0]
          }
          if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected)
 80038a8:	4b83      	ldr	r3, [pc, #524]	; (8003ab8 <LCD_GUI_Update+0x11e0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d028      	beq.n	8003908 <LCD_GUI_Update+0x1030>
 80038b6:	4b81      	ldr	r3, [pc, #516]	; (8003abc <LCD_GUI_Update+0x11e4>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d024      	beq.n	8003908 <LCD_GUI_Update+0x1030>
          {
        	 Motion_Processing.angle_threshold[0] += 0.1f;
 80038be:	4b81      	ldr	r3, [pc, #516]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 80038c0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80038c4:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8003ac8 <LCD_GUI_Update+0x11f0>
 80038c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038cc:	4b7d      	ldr	r3, [pc, #500]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 80038ce:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

        	 if(Motion_Processing.angle_threshold[0] > 90.0f)
 80038d2:	4b7c      	ldr	r3, [pc, #496]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 80038d4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80038d8:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003acc <LCD_GUI_Update+0x11f4>
 80038dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e4:	dd02      	ble.n	80038ec <LCD_GUI_Update+0x1014>
        	 {
        		 Motion_Processing.angle_threshold[0] = 90.0f;
 80038e6:	4b77      	ldr	r3, [pc, #476]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 80038e8:	4a79      	ldr	r2, [pc, #484]	; (8003ad0 <LCD_GUI_Update+0x11f8>)
 80038ea:	64da      	str	r2, [r3, #76]	; 0x4c
        	 }

             MDT_X_SMF.MDT_X_SMF_segments.angle_threshold =
             Motion_Processing.angle_threshold[0]/X_angle_threshold_FACTOR;
 80038ec:	4b75      	ldr	r3, [pc, #468]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 80038ee:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80038f2:	eddf 6a78 	vldr	s13, [pc, #480]	; 8003ad4 <LCD_GUI_Update+0x11fc>
 80038f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
             MDT_X_SMF.MDT_X_SMF_segments.angle_threshold =
 80038fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038fe:	ee17 3a90 	vmov	r3, s15
 8003902:	b29a      	uxth	r2, r3
 8003904:	4b74      	ldr	r3, [pc, #464]	; (8003ad8 <LCD_GUI_Update+0x1200>)
 8003906:	801a      	strh	r2, [r3, #0]
          }
          if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected)
 8003908:	4b6b      	ldr	r3, [pc, #428]	; (8003ab8 <LCD_GUI_Update+0x11e0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8575 	beq.w	8004402 <LCD_GUI_Update+0x1b2a>
 8003918:	4b68      	ldr	r3, [pc, #416]	; (8003abc <LCD_GUI_Update+0x11e4>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8570 	beq.w	8004402 <LCD_GUI_Update+0x1b2a>
          {
        	  Motion_Processing.angle_threshold[0] -= 0.1f;
 8003922:	4b68      	ldr	r3, [pc, #416]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 8003924:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003928:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003ac8 <LCD_GUI_Update+0x11f0>
 800392c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003930:	4b64      	ldr	r3, [pc, #400]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 8003932:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

        	  if(Motion_Processing.angle_threshold[0] < 0.0f )
 8003936:	4b63      	ldr	r3, [pc, #396]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 8003938:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800393c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003944:	d503      	bpl.n	800394e <LCD_GUI_Update+0x1076>
        	  {
        		  Motion_Processing.angle_threshold[0] = 0.0f;
 8003946:	4b5f      	ldr	r3, [pc, #380]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	64da      	str	r2, [r3, #76]	; 0x4c
        	  }

              MDT_X_SMF.MDT_X_SMF_segments.angle_threshold =
              Motion_Processing.angle_threshold[0]/X_angle_threshold_FACTOR;
 800394e:	4b5d      	ldr	r3, [pc, #372]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 8003950:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003954:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ad4 <LCD_GUI_Update+0x11fc>
 8003958:	eec7 7a26 	vdiv.f32	s15, s14, s13
              MDT_X_SMF.MDT_X_SMF_segments.angle_threshold =
 800395c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003960:	ee17 3a90 	vmov	r3, s15
 8003964:	b29a      	uxth	r2, r3
 8003966:	4b5c      	ldr	r3, [pc, #368]	; (8003ad8 <LCD_GUI_Update+0x1200>)
 8003968:	801a      	strh	r2, [r3, #0]
          }

    	}
        break;
 800396a:	f000 bd4a 	b.w	8004402 <LCD_GUI_Update+0x1b2a>

        case(LCD_GUI_Tilt_Detection_Menu_B):
    	{
          LCD_GUI_Config_Screen_Tilt_Detection_settings_B();
 800396e:	f7fe f80b 	bl	8001988 <LCD_GUI_Config_Screen_Tilt_Detection_settings_B>

          if( Rotary_Encoder.parameters.switch_state )
 8003972:	4b51      	ldr	r3, [pc, #324]	; (8003ab8 <LCD_GUI_Update+0x11e0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <LCD_GUI_Update+0x10be>
          {
            if( LCD_GUI_selected )
 8003980:	4b4e      	ldr	r3, [pc, #312]	; (8003abc <LCD_GUI_Update+0x11e4>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <LCD_GUI_Update+0x10b8>
            {
            	LCD_GUI_selected = 0;
 8003988:	4b4c      	ldr	r3, [pc, #304]	; (8003abc <LCD_GUI_Update+0x11e4>)
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	e002      	b.n	8003996 <LCD_GUI_Update+0x10be>
            }
            else
            {
            	LCD_GUI_selected = 1;
 8003990:	4b4a      	ldr	r3, [pc, #296]	; (8003abc <LCD_GUI_Update+0x11e4>)
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
            }
          }

          if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected)
 8003996:	4b48      	ldr	r3, [pc, #288]	; (8003ab8 <LCD_GUI_Update+0x11e0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d006      	beq.n	80039b2 <LCD_GUI_Update+0x10da>
 80039a4:	4b45      	ldr	r3, [pc, #276]	; (8003abc <LCD_GUI_Update+0x11e4>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <LCD_GUI_Update+0x10da>
          {
        	  LCD_GUI_screen_number =  LCD_GUI_Tilt_Detection_Menu_C;
 80039ac:	4b44      	ldr	r3, [pc, #272]	; (8003ac0 <LCD_GUI_Update+0x11e8>)
 80039ae:	221c      	movs	r2, #28
 80039b0:	701a      	strb	r2, [r3, #0]
          }
          if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected)
 80039b2:	4b41      	ldr	r3, [pc, #260]	; (8003ab8 <LCD_GUI_Update+0x11e0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d006      	beq.n	80039ce <LCD_GUI_Update+0x10f6>
 80039c0:	4b3e      	ldr	r3, [pc, #248]	; (8003abc <LCD_GUI_Update+0x11e4>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <LCD_GUI_Update+0x10f6>
          {
        	  LCD_GUI_screen_number = LCD_GUI_Tilt_Detection_Menu_A;
 80039c8:	4b3d      	ldr	r3, [pc, #244]	; (8003ac0 <LCD_GUI_Update+0x11e8>)
 80039ca:	221a      	movs	r2, #26
 80039cc:	701a      	strb	r2, [r3, #0]
          }

          if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected)
 80039ce:	4b3a      	ldr	r3, [pc, #232]	; (8003ab8 <LCD_GUI_Update+0x11e0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d028      	beq.n	8003a2e <LCD_GUI_Update+0x1156>
 80039dc:	4b37      	ldr	r3, [pc, #220]	; (8003abc <LCD_GUI_Update+0x11e4>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d024      	beq.n	8003a2e <LCD_GUI_Update+0x1156>
          {
        	 Motion_Processing.angle_threshold[1] += 0.1f;
 80039e4:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 80039e6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80039ea:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003ac8 <LCD_GUI_Update+0x11f0>
 80039ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039f2:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 80039f4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

        	 if(Motion_Processing.angle_threshold[1] > 90.0f)
 80039f8:	4b32      	ldr	r3, [pc, #200]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 80039fa:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80039fe:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003acc <LCD_GUI_Update+0x11f4>
 8003a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0a:	dd02      	ble.n	8003a12 <LCD_GUI_Update+0x113a>
        	 {
        		 Motion_Processing.angle_threshold[1] = 90.0f;
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 8003a0e:	4a30      	ldr	r2, [pc, #192]	; (8003ad0 <LCD_GUI_Update+0x11f8>)
 8003a10:	651a      	str	r2, [r3, #80]	; 0x50
        	 }

             MDT_Y_SMF.MDT_Y_SMF_segments.angle_threshold =
             Motion_Processing.angle_threshold[1]/Y_angle_threshold_FACTOR;
 8003a12:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 8003a14:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003a18:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8003ad4 <LCD_GUI_Update+0x11fc>
 8003a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
             MDT_Y_SMF.MDT_Y_SMF_segments.angle_threshold =
 8003a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a24:	ee17 3a90 	vmov	r3, s15
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <LCD_GUI_Update+0x1204>)
 8003a2c:	801a      	strh	r2, [r3, #0]
          }
          if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected)
 8003a2e:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <LCD_GUI_Update+0x11e0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 84e4 	beq.w	8004406 <LCD_GUI_Update+0x1b2e>
 8003a3e:	4b1f      	ldr	r3, [pc, #124]	; (8003abc <LCD_GUI_Update+0x11e4>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 84df 	beq.w	8004406 <LCD_GUI_Update+0x1b2e>
          {
        	  Motion_Processing.angle_threshold[1] -= 0.1f;
 8003a48:	4b1e      	ldr	r3, [pc, #120]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 8003a4a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003a4e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003ac8 <LCD_GUI_Update+0x11f0>
 8003a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a56:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 8003a58:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

        	  if(Motion_Processing.angle_threshold[1] < 0.0f )
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 8003a5e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003a62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6a:	d503      	bpl.n	8003a74 <LCD_GUI_Update+0x119c>
        	  {
        		  Motion_Processing.angle_threshold[1] = 0.0f;
 8003a6c:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	651a      	str	r2, [r3, #80]	; 0x50
        	  }

              MDT_Y_SMF.MDT_Y_SMF_segments.angle_threshold =
              Motion_Processing.angle_threshold[1]/Y_angle_threshold_FACTOR;
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <LCD_GUI_Update+0x11ec>)
 8003a76:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003a7a:	eddf 6a16 	vldr	s13, [pc, #88]	; 8003ad4 <LCD_GUI_Update+0x11fc>
 8003a7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
              MDT_Y_SMF.MDT_Y_SMF_segments.angle_threshold =
 8003a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a86:	ee17 3a90 	vmov	r3, s15
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <LCD_GUI_Update+0x1204>)
 8003a8e:	801a      	strh	r2, [r3, #0]
          }

    	}
        break;
 8003a90:	f000 bcb9 	b.w	8004406 <LCD_GUI_Update+0x1b2e>

        case(LCD_GUI_Tilt_Detection_Menu_C):
    	{
          LCD_GUI_Config_Screen_Tilt_Detection_settings_C();
 8003a94:	f7fd ffca 	bl	8001a2c <LCD_GUI_Config_Screen_Tilt_Detection_settings_C>

          if( Rotary_Encoder.parameters.switch_state )
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <LCD_GUI_Update+0x11e0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01f      	beq.n	8003ae6 <LCD_GUI_Update+0x120e>
          {
            if( LCD_GUI_selected )
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <LCD_GUI_Update+0x11e4>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d018      	beq.n	8003ae0 <LCD_GUI_Update+0x1208>
            {
            	LCD_GUI_selected = 0;
 8003aae:	4b03      	ldr	r3, [pc, #12]	; (8003abc <LCD_GUI_Update+0x11e4>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
 8003ab4:	e017      	b.n	8003ae6 <LCD_GUI_Update+0x120e>
 8003ab6:	bf00      	nop
 8003ab8:	200005a0 	.word	0x200005a0
 8003abc:	2000039c 	.word	0x2000039c
 8003ac0:	20000414 	.word	0x20000414
 8003ac4:	2000048c 	.word	0x2000048c
 8003ac8:	3dcccccd 	.word	0x3dcccccd
 8003acc:	42b40000 	.word	0x42b40000
 8003ad0:	42b40000 	.word	0x42b40000
 8003ad4:	3c23d70a 	.word	0x3c23d70a
 8003ad8:	2000041c 	.word	0x2000041c
 8003adc:	200003c4 	.word	0x200003c4
            }
            else
            {
            	LCD_GUI_selected = 1;
 8003ae0:	4b9f      	ldr	r3, [pc, #636]	; (8003d60 <LCD_GUI_Update+0x1488>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
            }
          }


          if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected)
 8003ae6:	4b9f      	ldr	r3, [pc, #636]	; (8003d64 <LCD_GUI_Update+0x148c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d006      	beq.n	8003b02 <LCD_GUI_Update+0x122a>
 8003af4:	4b9a      	ldr	r3, [pc, #616]	; (8003d60 <LCD_GUI_Update+0x1488>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <LCD_GUI_Update+0x122a>
          {
        	  LCD_GUI_screen_number =  LCD_GUI_Tilt_Detection_Menu_D;
 8003afc:	4b9a      	ldr	r3, [pc, #616]	; (8003d68 <LCD_GUI_Update+0x1490>)
 8003afe:	221d      	movs	r2, #29
 8003b00:	701a      	strb	r2, [r3, #0]
          }
          if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected)
 8003b02:	4b98      	ldr	r3, [pc, #608]	; (8003d64 <LCD_GUI_Update+0x148c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d006      	beq.n	8003b1e <LCD_GUI_Update+0x1246>
 8003b10:	4b93      	ldr	r3, [pc, #588]	; (8003d60 <LCD_GUI_Update+0x1488>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <LCD_GUI_Update+0x1246>
          {
        	  LCD_GUI_screen_number = LCD_GUI_Tilt_Detection_Menu_B;
 8003b18:	4b93      	ldr	r3, [pc, #588]	; (8003d68 <LCD_GUI_Update+0x1490>)
 8003b1a:	221b      	movs	r2, #27
 8003b1c:	701a      	strb	r2, [r3, #0]
          }

          if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected)
 8003b1e:	4b91      	ldr	r3, [pc, #580]	; (8003d64 <LCD_GUI_Update+0x148c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d028      	beq.n	8003b7e <LCD_GUI_Update+0x12a6>
 8003b2c:	4b8c      	ldr	r3, [pc, #560]	; (8003d60 <LCD_GUI_Update+0x1488>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d024      	beq.n	8003b7e <LCD_GUI_Update+0x12a6>
          {
        	 Motion_Processing.angle_threshold[2] += 0.1f;
 8003b34:	4b8d      	ldr	r3, [pc, #564]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003b36:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b3a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8003d70 <LCD_GUI_Update+0x1498>
 8003b3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b42:	4b8a      	ldr	r3, [pc, #552]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003b44:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

        	 if(Motion_Processing.angle_threshold[2] > 90.0f)
 8003b48:	4b88      	ldr	r3, [pc, #544]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003b4a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b4e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8003d74 <LCD_GUI_Update+0x149c>
 8003b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5a:	dd02      	ble.n	8003b62 <LCD_GUI_Update+0x128a>
        	 {
        		 Motion_Processing.angle_threshold[2] = 90.0f;
 8003b5c:	4b83      	ldr	r3, [pc, #524]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003b5e:	4a86      	ldr	r2, [pc, #536]	; (8003d78 <LCD_GUI_Update+0x14a0>)
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
        	 }

             MDT_Z_SMF.MDT_Z_SMF_segments.angle_threshold =
             Motion_Processing.angle_threshold[2]/Z_angle_threshold_FACTOR;
 8003b62:	4b82      	ldr	r3, [pc, #520]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003b64:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003b68:	eddf 6a84 	vldr	s13, [pc, #528]	; 8003d7c <LCD_GUI_Update+0x14a4>
 8003b6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
             MDT_Z_SMF.MDT_Z_SMF_segments.angle_threshold =
 8003b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b74:	ee17 3a90 	vmov	r3, s15
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	4b81      	ldr	r3, [pc, #516]	; (8003d80 <LCD_GUI_Update+0x14a8>)
 8003b7c:	801a      	strh	r2, [r3, #0]
          }
          if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected)
 8003b7e:	4b79      	ldr	r3, [pc, #484]	; (8003d64 <LCD_GUI_Update+0x148c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 843e 	beq.w	800440a <LCD_GUI_Update+0x1b32>
 8003b8e:	4b74      	ldr	r3, [pc, #464]	; (8003d60 <LCD_GUI_Update+0x1488>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 8439 	beq.w	800440a <LCD_GUI_Update+0x1b32>
          {
        	  Motion_Processing.angle_threshold[2] -= 0.1f;
 8003b98:	4b74      	ldr	r3, [pc, #464]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003b9a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b9e:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8003d70 <LCD_GUI_Update+0x1498>
 8003ba2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ba6:	4b71      	ldr	r3, [pc, #452]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003ba8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

        	  if(Motion_Processing.angle_threshold[2] < 0.0f )
 8003bac:	4b6f      	ldr	r3, [pc, #444]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003bae:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003bb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bba:	d503      	bpl.n	8003bc4 <LCD_GUI_Update+0x12ec>
        	  {
        		  Motion_Processing.angle_threshold[2] = 0.0f;
 8003bbc:	4b6b      	ldr	r3, [pc, #428]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54
        	  }

              MDT_Z_SMF.MDT_Z_SMF_segments.angle_threshold =
              Motion_Processing.angle_threshold[2]/Z_angle_threshold_FACTOR;
 8003bc4:	4b69      	ldr	r3, [pc, #420]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003bc6:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003bca:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8003d7c <LCD_GUI_Update+0x14a4>
 8003bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
              MDT_Z_SMF.MDT_Z_SMF_segments.angle_threshold =
 8003bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd6:	ee17 3a90 	vmov	r3, s15
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	4b68      	ldr	r3, [pc, #416]	; (8003d80 <LCD_GUI_Update+0x14a8>)
 8003bde:	801a      	strh	r2, [r3, #0]
          }

    	}
        break;
 8003be0:	f000 bc13 	b.w	800440a <LCD_GUI_Update+0x1b32>

        case(LCD_GUI_Tilt_Detection_Menu_D):
    	{
          LCD_GUI_Config_Screen_Tilt_Detection_settings_D();
 8003be4:	f7fd ff64 	bl	8001ab0 <LCD_GUI_Config_Screen_Tilt_Detection_settings_D>

          if( Rotary_Encoder.parameters.clockwise )
 8003be8:	4b5e      	ldr	r3, [pc, #376]	; (8003d64 <LCD_GUI_Update+0x148c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <LCD_GUI_Update+0x1324>
          {
        	  LCD_GUI_screen_number =  LCD_GUI_Tilt_Detection_Menu_D;
 8003bf6:	4b5c      	ldr	r3, [pc, #368]	; (8003d68 <LCD_GUI_Update+0x1490>)
 8003bf8:	221d      	movs	r2, #29
 8003bfa:	701a      	strb	r2, [r3, #0]
          }
          if( Rotary_Encoder.parameters.anticlockwise )
 8003bfc:	4b59      	ldr	r3, [pc, #356]	; (8003d64 <LCD_GUI_Update+0x148c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <LCD_GUI_Update+0x1338>
          {
        	  LCD_GUI_screen_number = LCD_GUI_Tilt_Detection_Menu_C;
 8003c0a:	4b57      	ldr	r3, [pc, #348]	; (8003d68 <LCD_GUI_Update+0x1490>)
 8003c0c:	221c      	movs	r2, #28
 8003c0e:	701a      	strb	r2, [r3, #0]
          }
          if( Rotary_Encoder.parameters.switch_state)
 8003c10:	4b54      	ldr	r3, [pc, #336]	; (8003d64 <LCD_GUI_Update+0x148c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 83f7 	beq.w	800440e <LCD_GUI_Update+0x1b36>
          {
            LCD_GUI_screen_number = LCD_GUI_Config_Menu_C;
 8003c20:	4b51      	ldr	r3, [pc, #324]	; (8003d68 <LCD_GUI_Update+0x1490>)
 8003c22:	220c      	movs	r2, #12
 8003c24:	701a      	strb	r2, [r3, #0]
          }
    	}
        break;
 8003c26:	e3f2      	b.n	800440e <LCD_GUI_Update+0x1b36>

        /***************	Configuration screen: Vibration threshold  ************/

          case(LCD_GUI_Vibration_Detection_Menu_A):
      	{
            LCD_GUI_Config_Screen_Vibration_Detection_settings_A();
 8003c28:	f7fd ff84 	bl	8001b34 <LCD_GUI_Config_Screen_Vibration_Detection_settings_A>

            if( Rotary_Encoder.parameters.switch_state )
 8003c2c:	4b4d      	ldr	r3, [pc, #308]	; (8003d64 <LCD_GUI_Update+0x148c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <LCD_GUI_Update+0x1378>
            {
              if( LCD_GUI_selected )
 8003c3a:	4b49      	ldr	r3, [pc, #292]	; (8003d60 <LCD_GUI_Update+0x1488>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <LCD_GUI_Update+0x1372>
              {
              	LCD_GUI_selected = 0;
 8003c42:	4b47      	ldr	r3, [pc, #284]	; (8003d60 <LCD_GUI_Update+0x1488>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	e002      	b.n	8003c50 <LCD_GUI_Update+0x1378>
              }
              else
              {
              	LCD_GUI_selected = 1;
 8003c4a:	4b45      	ldr	r3, [pc, #276]	; (8003d60 <LCD_GUI_Update+0x1488>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	701a      	strb	r2, [r3, #0]
              }
            }


            if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected)
 8003c50:	4b44      	ldr	r3, [pc, #272]	; (8003d64 <LCD_GUI_Update+0x148c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <LCD_GUI_Update+0x1394>
 8003c5e:	4b40      	ldr	r3, [pc, #256]	; (8003d60 <LCD_GUI_Update+0x1488>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d102      	bne.n	8003c6c <LCD_GUI_Update+0x1394>
            {
          	 LCD_GUI_screen_number =  LCD_GUI_Vibration_Detection_Menu_B;
 8003c66:	4b40      	ldr	r3, [pc, #256]	; (8003d68 <LCD_GUI_Update+0x1490>)
 8003c68:	221f      	movs	r2, #31
 8003c6a:	701a      	strb	r2, [r3, #0]
            }
            if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected)
 8003c6c:	4b3d      	ldr	r3, [pc, #244]	; (8003d64 <LCD_GUI_Update+0x148c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d006      	beq.n	8003c88 <LCD_GUI_Update+0x13b0>
 8003c7a:	4b39      	ldr	r3, [pc, #228]	; (8003d60 <LCD_GUI_Update+0x1488>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d102      	bne.n	8003c88 <LCD_GUI_Update+0x13b0>
            {
              LCD_GUI_screen_number = LCD_GUI_Vibration_Detection_Menu_A;
 8003c82:	4b39      	ldr	r3, [pc, #228]	; (8003d68 <LCD_GUI_Update+0x1490>)
 8003c84:	221e      	movs	r2, #30
 8003c86:	701a      	strb	r2, [r3, #0]
            }
            if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected)
 8003c88:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <LCD_GUI_Update+0x148c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d024      	beq.n	8003ce0 <LCD_GUI_Update+0x1408>
 8003c96:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <LCD_GUI_Update+0x1488>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d020      	beq.n	8003ce0 <LCD_GUI_Update+0x1408>
            {
          	 Motion_Processing.vibration_threshold[0] += 0.1f;
 8003c9e:	4b33      	ldr	r3, [pc, #204]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003ca0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003ca4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003d70 <LCD_GUI_Update+0x1498>
 8003ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cac:	4b2f      	ldr	r3, [pc, #188]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003cae:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

          	 if(Motion_Processing.vibration_threshold[0] > 90.0f)
 8003cb2:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003cb4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003cb8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003d74 <LCD_GUI_Update+0x149c>
 8003cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc4:	dd02      	ble.n	8003ccc <LCD_GUI_Update+0x13f4>
          	 {
          		 Motion_Processing.vibration_threshold[0] = 90.0f;
 8003cc6:	4b29      	ldr	r3, [pc, #164]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003cc8:	4a2b      	ldr	r2, [pc, #172]	; (8003d78 <LCD_GUI_Update+0x14a0>)
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40
          	 }

             MDT_X_SMF.MDT_X_SMF_segments.vibration_threshold =
             (uint32_t)Motion_Processing.vibration_threshold[0];
 8003ccc:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003cce:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
             MDT_X_SMF.MDT_X_SMF_segments.vibration_threshold =
 8003cd6:	ee17 3a90 	vmov	r3, s15
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <LCD_GUI_Update+0x14ac>)
 8003cde:	805a      	strh	r2, [r3, #2]
            }
            if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected)
 8003ce0:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <LCD_GUI_Update+0x148c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8391 	beq.w	8004412 <LCD_GUI_Update+0x1b3a>
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <LCD_GUI_Update+0x1488>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 838c 	beq.w	8004412 <LCD_GUI_Update+0x1b3a>
            {
          	  Motion_Processing.vibration_threshold[0] -= 0.1f;
 8003cfa:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003cfc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003d00:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003d70 <LCD_GUI_Update+0x1498>
 8003d04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d08:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003d0a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

          	  if(Motion_Processing.vibration_threshold[0] < 0.0f )
 8003d0e:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003d10:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003d14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1c:	d503      	bpl.n	8003d26 <LCD_GUI_Update+0x144e>
          	  {
          		  Motion_Processing.vibration_threshold[0] = 0.0f;
 8003d1e:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
          	  }

              MDT_X_SMF.MDT_X_SMF_segments.vibration_threshold =
              (uint32_t)Motion_Processing.vibration_threshold[0];
 8003d26:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <LCD_GUI_Update+0x1494>)
 8003d28:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
              MDT_X_SMF.MDT_X_SMF_segments.vibration_threshold =
 8003d30:	ee17 3a90 	vmov	r3, s15
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <LCD_GUI_Update+0x14ac>)
 8003d38:	805a      	strh	r2, [r3, #2]
            }


      	}
          break;
 8003d3a:	e36a      	b.n	8004412 <LCD_GUI_Update+0x1b3a>

          case(LCD_GUI_Vibration_Detection_Menu_B):
      	{
            LCD_GUI_Config_Screen_Vibration_Detection_settings_B();
 8003d3c:	f7fd ff4c 	bl	8001bd8 <LCD_GUI_Config_Screen_Vibration_Detection_settings_B>

            if( Rotary_Encoder.parameters.switch_state )
 8003d40:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <LCD_GUI_Update+0x148c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01f      	beq.n	8003d8e <LCD_GUI_Update+0x14b6>
            {
              if( LCD_GUI_selected )
 8003d4e:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <LCD_GUI_Update+0x1488>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d018      	beq.n	8003d88 <LCD_GUI_Update+0x14b0>
              {
              	LCD_GUI_selected = 0;
 8003d56:	4b02      	ldr	r3, [pc, #8]	; (8003d60 <LCD_GUI_Update+0x1488>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e017      	b.n	8003d8e <LCD_GUI_Update+0x14b6>
 8003d5e:	bf00      	nop
 8003d60:	2000039c 	.word	0x2000039c
 8003d64:	200005a0 	.word	0x200005a0
 8003d68:	20000414 	.word	0x20000414
 8003d6c:	2000048c 	.word	0x2000048c
 8003d70:	3dcccccd 	.word	0x3dcccccd
 8003d74:	42b40000 	.word	0x42b40000
 8003d78:	42b40000 	.word	0x42b40000
 8003d7c:	3c23d70a 	.word	0x3c23d70a
 8003d80:	200003a4 	.word	0x200003a4
 8003d84:	2000041c 	.word	0x2000041c
              }
              else
              {
              	LCD_GUI_selected = 1;
 8003d88:	4b9a      	ldr	r3, [pc, #616]	; (8003ff4 <LCD_GUI_Update+0x171c>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	701a      	strb	r2, [r3, #0]
              }
            }

            if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected)
 8003d8e:	4b9a      	ldr	r3, [pc, #616]	; (8003ff8 <LCD_GUI_Update+0x1720>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d006      	beq.n	8003daa <LCD_GUI_Update+0x14d2>
 8003d9c:	4b95      	ldr	r3, [pc, #596]	; (8003ff4 <LCD_GUI_Update+0x171c>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d102      	bne.n	8003daa <LCD_GUI_Update+0x14d2>
            {
          	  LCD_GUI_screen_number =  LCD_GUI_Vibration_Detection_Menu_C;
 8003da4:	4b95      	ldr	r3, [pc, #596]	; (8003ffc <LCD_GUI_Update+0x1724>)
 8003da6:	2220      	movs	r2, #32
 8003da8:	701a      	strb	r2, [r3, #0]
            }
            if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected)
 8003daa:	4b93      	ldr	r3, [pc, #588]	; (8003ff8 <LCD_GUI_Update+0x1720>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d006      	beq.n	8003dc6 <LCD_GUI_Update+0x14ee>
 8003db8:	4b8e      	ldr	r3, [pc, #568]	; (8003ff4 <LCD_GUI_Update+0x171c>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <LCD_GUI_Update+0x14ee>
            {
          	  LCD_GUI_screen_number = LCD_GUI_Vibration_Detection_Menu_A;
 8003dc0:	4b8e      	ldr	r3, [pc, #568]	; (8003ffc <LCD_GUI_Update+0x1724>)
 8003dc2:	221e      	movs	r2, #30
 8003dc4:	701a      	strb	r2, [r3, #0]
            }

            if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected)
 8003dc6:	4b8c      	ldr	r3, [pc, #560]	; (8003ff8 <LCD_GUI_Update+0x1720>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d024      	beq.n	8003e1e <LCD_GUI_Update+0x1546>
 8003dd4:	4b87      	ldr	r3, [pc, #540]	; (8003ff4 <LCD_GUI_Update+0x171c>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d020      	beq.n	8003e1e <LCD_GUI_Update+0x1546>
            {
          	 Motion_Processing.vibration_threshold[1] += 0.1f;
 8003ddc:	4b88      	ldr	r3, [pc, #544]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003dde:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003de2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8004004 <LCD_GUI_Update+0x172c>
 8003de6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dea:	4b85      	ldr	r3, [pc, #532]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003dec:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

          	 if(Motion_Processing.vibration_threshold[1] > 90.0f)
 8003df0:	4b83      	ldr	r3, [pc, #524]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003df2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003df6:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8004008 <LCD_GUI_Update+0x1730>
 8003dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e02:	dd02      	ble.n	8003e0a <LCD_GUI_Update+0x1532>
          	 {
          		 Motion_Processing.vibration_threshold[1] = 90.0f;
 8003e04:	4b7e      	ldr	r3, [pc, #504]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003e06:	4a81      	ldr	r2, [pc, #516]	; (800400c <LCD_GUI_Update+0x1734>)
 8003e08:	645a      	str	r2, [r3, #68]	; 0x44
          	 }

             MDT_Y_SMF.MDT_Y_SMF_segments.vibration_threshold =
             (uint32_t)Motion_Processing.vibration_threshold[1];
 8003e0a:	4b7d      	ldr	r3, [pc, #500]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003e0c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
             MDT_Y_SMF.MDT_Y_SMF_segments.vibration_threshold =
 8003e14:	ee17 3a90 	vmov	r3, s15
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	4b7d      	ldr	r3, [pc, #500]	; (8004010 <LCD_GUI_Update+0x1738>)
 8003e1c:	805a      	strh	r2, [r3, #2]

            }
            if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected)
 8003e1e:	4b76      	ldr	r3, [pc, #472]	; (8003ff8 <LCD_GUI_Update+0x1720>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 82f4 	beq.w	8004416 <LCD_GUI_Update+0x1b3e>
 8003e2e:	4b71      	ldr	r3, [pc, #452]	; (8003ff4 <LCD_GUI_Update+0x171c>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 82ef 	beq.w	8004416 <LCD_GUI_Update+0x1b3e>
            {
          	  Motion_Processing.vibration_threshold[1] -= 0.1f;
 8003e38:	4b71      	ldr	r3, [pc, #452]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003e3a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003e3e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8004004 <LCD_GUI_Update+0x172c>
 8003e42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e46:	4b6e      	ldr	r3, [pc, #440]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003e48:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

          	  if(Motion_Processing.vibration_threshold[1] < 0.0f )
 8003e4c:	4b6c      	ldr	r3, [pc, #432]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003e4e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003e52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5a:	d503      	bpl.n	8003e64 <LCD_GUI_Update+0x158c>
          	  {
          		  Motion_Processing.vibration_threshold[1] = 0.0f;
 8003e5c:	4b68      	ldr	r3, [pc, #416]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	645a      	str	r2, [r3, #68]	; 0x44
          	  }

              MDT_Y_SMF.MDT_Y_SMF_segments.vibration_threshold =
              (uint32_t)Motion_Processing.vibration_threshold[1];
 8003e64:	4b66      	ldr	r3, [pc, #408]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003e66:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
              MDT_Y_SMF.MDT_Y_SMF_segments.vibration_threshold =
 8003e6e:	ee17 3a90 	vmov	r3, s15
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	4b66      	ldr	r3, [pc, #408]	; (8004010 <LCD_GUI_Update+0x1738>)
 8003e76:	805a      	strh	r2, [r3, #2]
            }

      	}
          break;
 8003e78:	e2cd      	b.n	8004416 <LCD_GUI_Update+0x1b3e>

          case(LCD_GUI_Vibration_Detection_Menu_C):
      	{
            LCD_GUI_Config_Screen_Vibration_Detection_settings_C();
 8003e7a:	f7fd feff 	bl	8001c7c <LCD_GUI_Config_Screen_Vibration_Detection_settings_C>

            if( Rotary_Encoder.parameters.switch_state )
 8003e7e:	4b5e      	ldr	r3, [pc, #376]	; (8003ff8 <LCD_GUI_Update+0x1720>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <LCD_GUI_Update+0x15ca>
            {
              if( LCD_GUI_selected )
 8003e8c:	4b59      	ldr	r3, [pc, #356]	; (8003ff4 <LCD_GUI_Update+0x171c>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <LCD_GUI_Update+0x15c4>
              {
              	LCD_GUI_selected = 0;
 8003e94:	4b57      	ldr	r3, [pc, #348]	; (8003ff4 <LCD_GUI_Update+0x171c>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	e002      	b.n	8003ea2 <LCD_GUI_Update+0x15ca>
              }
              else
              {
              	LCD_GUI_selected = 1;
 8003e9c:	4b55      	ldr	r3, [pc, #340]	; (8003ff4 <LCD_GUI_Update+0x171c>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	701a      	strb	r2, [r3, #0]
              }
            }


            if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected)
 8003ea2:	4b55      	ldr	r3, [pc, #340]	; (8003ff8 <LCD_GUI_Update+0x1720>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d006      	beq.n	8003ebe <LCD_GUI_Update+0x15e6>
 8003eb0:	4b50      	ldr	r3, [pc, #320]	; (8003ff4 <LCD_GUI_Update+0x171c>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <LCD_GUI_Update+0x15e6>
            {
          	  LCD_GUI_screen_number =  LCD_GUI_Vibration_Detection_Menu_D;
 8003eb8:	4b50      	ldr	r3, [pc, #320]	; (8003ffc <LCD_GUI_Update+0x1724>)
 8003eba:	2221      	movs	r2, #33	; 0x21
 8003ebc:	701a      	strb	r2, [r3, #0]
            }
            if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected)
 8003ebe:	4b4e      	ldr	r3, [pc, #312]	; (8003ff8 <LCD_GUI_Update+0x1720>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d006      	beq.n	8003eda <LCD_GUI_Update+0x1602>
 8003ecc:	4b49      	ldr	r3, [pc, #292]	; (8003ff4 <LCD_GUI_Update+0x171c>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <LCD_GUI_Update+0x1602>
            {
          	  LCD_GUI_screen_number = LCD_GUI_Vibration_Detection_Menu_B;
 8003ed4:	4b49      	ldr	r3, [pc, #292]	; (8003ffc <LCD_GUI_Update+0x1724>)
 8003ed6:	221f      	movs	r2, #31
 8003ed8:	701a      	strb	r2, [r3, #0]
            }

            if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected)
 8003eda:	4b47      	ldr	r3, [pc, #284]	; (8003ff8 <LCD_GUI_Update+0x1720>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d024      	beq.n	8003f32 <LCD_GUI_Update+0x165a>
 8003ee8:	4b42      	ldr	r3, [pc, #264]	; (8003ff4 <LCD_GUI_Update+0x171c>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d020      	beq.n	8003f32 <LCD_GUI_Update+0x165a>
            {
          	 Motion_Processing.vibration_threshold[2] += 0.1f;
 8003ef0:	4b43      	ldr	r3, [pc, #268]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003ef2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003ef6:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8004004 <LCD_GUI_Update+0x172c>
 8003efa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003efe:	4b40      	ldr	r3, [pc, #256]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003f00:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

          	 if(Motion_Processing.vibration_threshold[2] > 90.0f)
 8003f04:	4b3e      	ldr	r3, [pc, #248]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003f06:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003f0a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004008 <LCD_GUI_Update+0x1730>
 8003f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f16:	dd02      	ble.n	8003f1e <LCD_GUI_Update+0x1646>
          	 {
          		 Motion_Processing.vibration_threshold[2] = 90.0f;
 8003f18:	4b39      	ldr	r3, [pc, #228]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003f1a:	4a3c      	ldr	r2, [pc, #240]	; (800400c <LCD_GUI_Update+0x1734>)
 8003f1c:	649a      	str	r2, [r3, #72]	; 0x48
          	 }

             MDT_Z_SMF.MDT_Z_SMF_segments.vibration_threshold =
             (uint32_t)Motion_Processing.vibration_threshold[2];
 8003f1e:	4b38      	ldr	r3, [pc, #224]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003f20:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
             MDT_Z_SMF.MDT_Z_SMF_segments.vibration_threshold =
 8003f28:	ee17 3a90 	vmov	r3, s15
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	4b39      	ldr	r3, [pc, #228]	; (8004014 <LCD_GUI_Update+0x173c>)
 8003f30:	805a      	strh	r2, [r3, #2]
            }
            if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected)
 8003f32:	4b31      	ldr	r3, [pc, #196]	; (8003ff8 <LCD_GUI_Update+0x1720>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 826c 	beq.w	800441a <LCD_GUI_Update+0x1b42>
 8003f42:	4b2c      	ldr	r3, [pc, #176]	; (8003ff4 <LCD_GUI_Update+0x171c>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8267 	beq.w	800441a <LCD_GUI_Update+0x1b42>
            {
          	  Motion_Processing.vibration_threshold[2] -= 0.1f;
 8003f4c:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003f4e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003f52:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004004 <LCD_GUI_Update+0x172c>
 8003f56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f5a:	4b29      	ldr	r3, [pc, #164]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003f5c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

          	  if(Motion_Processing.vibration_threshold[2] < 0.0f )
 8003f60:	4b27      	ldr	r3, [pc, #156]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003f62:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6e:	d503      	bpl.n	8003f78 <LCD_GUI_Update+0x16a0>
          	  {
          		  Motion_Processing.vibration_threshold[2] = 0.0f;
 8003f70:	4b23      	ldr	r3, [pc, #140]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	649a      	str	r2, [r3, #72]	; 0x48
          	  }

              MDT_Z_SMF.MDT_Z_SMF_segments.vibration_threshold =
              (uint32_t)Motion_Processing.vibration_threshold[2];
 8003f78:	4b21      	ldr	r3, [pc, #132]	; (8004000 <LCD_GUI_Update+0x1728>)
 8003f7a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
              MDT_Z_SMF.MDT_Z_SMF_segments.vibration_threshold =
 8003f82:	ee17 3a90 	vmov	r3, s15
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	4b22      	ldr	r3, [pc, #136]	; (8004014 <LCD_GUI_Update+0x173c>)
 8003f8a:	805a      	strh	r2, [r3, #2]
            }

      	}
          break;
 8003f8c:	e245      	b.n	800441a <LCD_GUI_Update+0x1b42>

          case(LCD_GUI_Vibration_Detection_Menu_D):
      	{
            LCD_GUI_Config_Screen_Vibration_Detection_settings_D();
 8003f8e:	f7fd feb7 	bl	8001d00 <LCD_GUI_Config_Screen_Vibration_Detection_settings_D>

            if( Rotary_Encoder.parameters.clockwise )
 8003f92:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <LCD_GUI_Update+0x1720>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <LCD_GUI_Update+0x16ce>
            {
          	  LCD_GUI_screen_number =  LCD_GUI_Vibration_Detection_Menu_D;
 8003fa0:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <LCD_GUI_Update+0x1724>)
 8003fa2:	2221      	movs	r2, #33	; 0x21
 8003fa4:	701a      	strb	r2, [r3, #0]
            }
            if( Rotary_Encoder.parameters.anticlockwise )
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <LCD_GUI_Update+0x1720>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <LCD_GUI_Update+0x16e2>
            {
          	  LCD_GUI_screen_number = LCD_GUI_Vibration_Detection_Menu_C;
 8003fb4:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <LCD_GUI_Update+0x1724>)
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	701a      	strb	r2, [r3, #0]
            }
            if( Rotary_Encoder.parameters.switch_state)
 8003fba:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <LCD_GUI_Update+0x1720>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 822a 	beq.w	800441e <LCD_GUI_Update+0x1b46>
            {
              LCD_GUI_screen_number = LCD_GUI_Config_Menu_C;
 8003fca:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <LCD_GUI_Update+0x1724>)
 8003fcc:	220c      	movs	r2, #12
 8003fce:	701a      	strb	r2, [r3, #0]
            }
      	}
          break;
 8003fd0:	e225      	b.n	800441e <LCD_GUI_Update+0x1b46>

          /***************	Configuration screen: LED configurations.  ************/

            case(LCD_GUI_LED_Config_Menu_A):
        	{
              LCD_GUI_Config_Screen_LED_settings_A();
 8003fd2:	f7fd fed7 	bl	8001d84 <LCD_GUI_Config_Screen_LED_settings_A>

              if( Rotary_Encoder.parameters.switch_state )
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <LCD_GUI_Update+0x1720>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01c      	beq.n	800401e <LCD_GUI_Update+0x1746>
              {
                if( LCD_GUI_selected )
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <LCD_GUI_Update+0x171c>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d015      	beq.n	8004018 <LCD_GUI_Update+0x1740>
                {
                	LCD_GUI_selected = 0;
 8003fec:	4b01      	ldr	r3, [pc, #4]	; (8003ff4 <LCD_GUI_Update+0x171c>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	e014      	b.n	800401e <LCD_GUI_Update+0x1746>
 8003ff4:	2000039c 	.word	0x2000039c
 8003ff8:	200005a0 	.word	0x200005a0
 8003ffc:	20000414 	.word	0x20000414
 8004000:	2000048c 	.word	0x2000048c
 8004004:	3dcccccd 	.word	0x3dcccccd
 8004008:	42b40000 	.word	0x42b40000
 800400c:	42b40000 	.word	0x42b40000
 8004010:	200003c4 	.word	0x200003c4
 8004014:	200003a4 	.word	0x200003a4
                }
                else
                {
                	LCD_GUI_selected = 1;
 8004018:	4b8c      	ldr	r3, [pc, #560]	; (800424c <LCD_GUI_Update+0x1974>)
 800401a:	2201      	movs	r2, #1
 800401c:	701a      	strb	r2, [r3, #0]
                }
              }


              if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected)
 800401e:	4b8c      	ldr	r3, [pc, #560]	; (8004250 <LCD_GUI_Update+0x1978>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d006      	beq.n	800403a <LCD_GUI_Update+0x1762>
 800402c:	4b87      	ldr	r3, [pc, #540]	; (800424c <LCD_GUI_Update+0x1974>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <LCD_GUI_Update+0x1762>
              {
            	 LCD_GUI_screen_number =  LCD_GUI_LED_Config_Menu_B;
 8004034:	4b87      	ldr	r3, [pc, #540]	; (8004254 <LCD_GUI_Update+0x197c>)
 8004036:	2223      	movs	r2, #35	; 0x23
 8004038:	701a      	strb	r2, [r3, #0]
              }
              if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected)
 800403a:	4b85      	ldr	r3, [pc, #532]	; (8004250 <LCD_GUI_Update+0x1978>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d006      	beq.n	8004056 <LCD_GUI_Update+0x177e>
 8004048:	4b80      	ldr	r3, [pc, #512]	; (800424c <LCD_GUI_Update+0x1974>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d102      	bne.n	8004056 <LCD_GUI_Update+0x177e>
              {
                LCD_GUI_screen_number = LCD_GUI_LED_Config_Menu_A;
 8004050:	4b80      	ldr	r3, [pc, #512]	; (8004254 <LCD_GUI_Update+0x197c>)
 8004052:	2222      	movs	r2, #34	; 0x22
 8004054:	701a      	strb	r2, [r3, #0]
              }
              if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected)
 8004056:	4b7e      	ldr	r3, [pc, #504]	; (8004250 <LCD_GUI_Update+0x1978>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d028      	beq.n	80040b6 <LCD_GUI_Update+0x17de>
 8004064:	4b79      	ldr	r3, [pc, #484]	; (800424c <LCD_GUI_Update+0x1974>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d024      	beq.n	80040b6 <LCD_GUI_Update+0x17de>
              {
            	 LED.LED_parameters.LED1_mode++;
 800406c:	4b7a      	ldr	r3, [pc, #488]	; (8004258 <LCD_GUI_Update+0x1980>)
 800406e:	789b      	ldrb	r3, [r3, #2]
 8004070:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8004074:	b2db      	uxtb	r3, r3
 8004076:	3301      	adds	r3, #1
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	b2d9      	uxtb	r1, r3
 800407e:	4a76      	ldr	r2, [pc, #472]	; (8004258 <LCD_GUI_Update+0x1980>)
 8004080:	7893      	ldrb	r3, [r2, #2]
 8004082:	f361 1347 	bfi	r3, r1, #5, #3
 8004086:	7093      	strb	r3, [r2, #2]

            	 if(LED.LED_parameters.LED1_mode > PWM_test)
 8004088:	4b73      	ldr	r3, [pc, #460]	; (8004258 <LCD_GUI_Update+0x1980>)
 800408a:	789b      	ldrb	r3, [r3, #2]
 800408c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b04      	cmp	r3, #4
 8004094:	d905      	bls.n	80040a2 <LCD_GUI_Update+0x17ca>
            	 {
            		 LED.LED_parameters.LED1_mode = PWM_test;
 8004096:	4a70      	ldr	r2, [pc, #448]	; (8004258 <LCD_GUI_Update+0x1980>)
 8004098:	7893      	ldrb	r3, [r2, #2]
 800409a:	2104      	movs	r1, #4
 800409c:	f361 1347 	bfi	r3, r1, #5, #3
 80040a0:	7093      	strb	r3, [r2, #2]
            	 }

            	 LED_CNTRL_SMF.LED_CNTRL_SMF_segments.XLED_mode =
            	 LED.LED_parameters.LED1_mode;
 80040a2:	4b6d      	ldr	r3, [pc, #436]	; (8004258 <LCD_GUI_Update+0x1980>)
 80040a4:	789b      	ldrb	r3, [r3, #2]
 80040a6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80040aa:	b2d9      	uxtb	r1, r3
            	 LED_CNTRL_SMF.LED_CNTRL_SMF_segments.XLED_mode =
 80040ac:	4a6b      	ldr	r2, [pc, #428]	; (800425c <LCD_GUI_Update+0x1984>)
 80040ae:	7813      	ldrb	r3, [r2, #0]
 80040b0:	f361 0343 	bfi	r3, r1, #1, #3
 80040b4:	7013      	strb	r3, [r2, #0]
              }
              if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected)
 80040b6:	4b66      	ldr	r3, [pc, #408]	; (8004250 <LCD_GUI_Update+0x1978>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 81ae 	beq.w	8004422 <LCD_GUI_Update+0x1b4a>
 80040c6:	4b61      	ldr	r3, [pc, #388]	; (800424c <LCD_GUI_Update+0x1974>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 81a9 	beq.w	8004422 <LCD_GUI_Update+0x1b4a>
              {
                if(LED.LED_parameters.LED1_mode)
 80040d0:	4b61      	ldr	r3, [pc, #388]	; (8004258 <LCD_GUI_Update+0x1980>)
 80040d2:	789b      	ldrb	r3, [r3, #2]
 80040d4:	f023 031f 	bic.w	r3, r3, #31
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00d      	beq.n	80040fa <LCD_GUI_Update+0x1822>
                {
                	LED.LED_parameters.LED1_mode--;
 80040de:	4b5e      	ldr	r3, [pc, #376]	; (8004258 <LCD_GUI_Update+0x1980>)
 80040e0:	789b      	ldrb	r3, [r3, #2]
 80040e2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	3307      	adds	r3, #7
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	b2d9      	uxtb	r1, r3
 80040f0:	4a59      	ldr	r2, [pc, #356]	; (8004258 <LCD_GUI_Update+0x1980>)
 80040f2:	7893      	ldrb	r3, [r2, #2]
 80040f4:	f361 1347 	bfi	r3, r1, #5, #3
 80040f8:	7093      	strb	r3, [r2, #2]
                }

           	    LED_CNTRL_SMF.LED_CNTRL_SMF_segments.XLED_mode =
           	    LED.LED_parameters.LED1_mode;
 80040fa:	4b57      	ldr	r3, [pc, #348]	; (8004258 <LCD_GUI_Update+0x1980>)
 80040fc:	789b      	ldrb	r3, [r3, #2]
 80040fe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8004102:	b2d9      	uxtb	r1, r3
           	    LED_CNTRL_SMF.LED_CNTRL_SMF_segments.XLED_mode =
 8004104:	4a55      	ldr	r2, [pc, #340]	; (800425c <LCD_GUI_Update+0x1984>)
 8004106:	7813      	ldrb	r3, [r2, #0]
 8004108:	f361 0343 	bfi	r3, r1, #1, #3
 800410c:	7013      	strb	r3, [r2, #0]
              }

        	}
            break;
 800410e:	e188      	b.n	8004422 <LCD_GUI_Update+0x1b4a>

            case(LCD_GUI_LED_Config_Menu_B):
        	{
              LCD_GUI_Config_Screen_LED_settings_B();
 8004110:	f7fd fec6 	bl	8001ea0 <LCD_GUI_Config_Screen_LED_settings_B>

              if( Rotary_Encoder.parameters.switch_state )
 8004114:	4b4e      	ldr	r3, [pc, #312]	; (8004250 <LCD_GUI_Update+0x1978>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <LCD_GUI_Update+0x1860>
              {
                if( LCD_GUI_selected )
 8004122:	4b4a      	ldr	r3, [pc, #296]	; (800424c <LCD_GUI_Update+0x1974>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <LCD_GUI_Update+0x185a>
                {
                	LCD_GUI_selected = 0;
 800412a:	4b48      	ldr	r3, [pc, #288]	; (800424c <LCD_GUI_Update+0x1974>)
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
 8004130:	e002      	b.n	8004138 <LCD_GUI_Update+0x1860>
                }
                else
                {
                	LCD_GUI_selected = 1;
 8004132:	4b46      	ldr	r3, [pc, #280]	; (800424c <LCD_GUI_Update+0x1974>)
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
                }
              }


              if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected)
 8004138:	4b45      	ldr	r3, [pc, #276]	; (8004250 <LCD_GUI_Update+0x1978>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d006      	beq.n	8004154 <LCD_GUI_Update+0x187c>
 8004146:	4b41      	ldr	r3, [pc, #260]	; (800424c <LCD_GUI_Update+0x1974>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d102      	bne.n	8004154 <LCD_GUI_Update+0x187c>
              {
            	  LCD_GUI_screen_number =  LCD_GUI_LED_Config_Menu_C;
 800414e:	4b41      	ldr	r3, [pc, #260]	; (8004254 <LCD_GUI_Update+0x197c>)
 8004150:	2224      	movs	r2, #36	; 0x24
 8004152:	701a      	strb	r2, [r3, #0]
              }
              if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected)
 8004154:	4b3e      	ldr	r3, [pc, #248]	; (8004250 <LCD_GUI_Update+0x1978>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d006      	beq.n	8004170 <LCD_GUI_Update+0x1898>
 8004162:	4b3a      	ldr	r3, [pc, #232]	; (800424c <LCD_GUI_Update+0x1974>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d102      	bne.n	8004170 <LCD_GUI_Update+0x1898>
              {
            	  LCD_GUI_screen_number = LCD_GUI_LED_Config_Menu_A;
 800416a:	4b3a      	ldr	r3, [pc, #232]	; (8004254 <LCD_GUI_Update+0x197c>)
 800416c:	2222      	movs	r2, #34	; 0x22
 800416e:	701a      	strb	r2, [r3, #0]
              }
              if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected)
 8004170:	4b37      	ldr	r3, [pc, #220]	; (8004250 <LCD_GUI_Update+0x1978>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d028      	beq.n	80041d0 <LCD_GUI_Update+0x18f8>
 800417e:	4b33      	ldr	r3, [pc, #204]	; (800424c <LCD_GUI_Update+0x1974>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d024      	beq.n	80041d0 <LCD_GUI_Update+0x18f8>
              {
            	 LED.LED_parameters.LED2_mode++;
 8004186:	4b34      	ldr	r3, [pc, #208]	; (8004258 <LCD_GUI_Update+0x1980>)
 8004188:	78db      	ldrb	r3, [r3, #3]
 800418a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	3301      	adds	r3, #1
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	b2d9      	uxtb	r1, r3
 8004198:	4a2f      	ldr	r2, [pc, #188]	; (8004258 <LCD_GUI_Update+0x1980>)
 800419a:	78d3      	ldrb	r3, [r2, #3]
 800419c:	f361 0302 	bfi	r3, r1, #0, #3
 80041a0:	70d3      	strb	r3, [r2, #3]

            	 if(LED.LED_parameters.LED2_mode > PWM_test)
 80041a2:	4b2d      	ldr	r3, [pc, #180]	; (8004258 <LCD_GUI_Update+0x1980>)
 80041a4:	78db      	ldrb	r3, [r3, #3]
 80041a6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d905      	bls.n	80041bc <LCD_GUI_Update+0x18e4>
            	 {
            		 LED.LED_parameters.LED2_mode = PWM_test;
 80041b0:	4a29      	ldr	r2, [pc, #164]	; (8004258 <LCD_GUI_Update+0x1980>)
 80041b2:	78d3      	ldrb	r3, [r2, #3]
 80041b4:	2104      	movs	r1, #4
 80041b6:	f361 0302 	bfi	r3, r1, #0, #3
 80041ba:	70d3      	strb	r3, [r2, #3]
            	 }

            	 LED_CNTRL_SMF.LED_CNTRL_SMF_segments.YLED_mode =
            	 LED.LED_parameters.LED2_mode;
 80041bc:	4b26      	ldr	r3, [pc, #152]	; (8004258 <LCD_GUI_Update+0x1980>)
 80041be:	78db      	ldrb	r3, [r3, #3]
 80041c0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80041c4:	b2d9      	uxtb	r1, r3
            	 LED_CNTRL_SMF.LED_CNTRL_SMF_segments.YLED_mode =
 80041c6:	4a25      	ldr	r2, [pc, #148]	; (800425c <LCD_GUI_Update+0x1984>)
 80041c8:	7813      	ldrb	r3, [r2, #0]
 80041ca:	f361 1306 	bfi	r3, r1, #4, #3
 80041ce:	7013      	strb	r3, [r2, #0]
              }
              if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected)
 80041d0:	4b1f      	ldr	r3, [pc, #124]	; (8004250 <LCD_GUI_Update+0x1978>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 8123 	beq.w	8004426 <LCD_GUI_Update+0x1b4e>
 80041e0:	4b1a      	ldr	r3, [pc, #104]	; (800424c <LCD_GUI_Update+0x1974>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 811e 	beq.w	8004426 <LCD_GUI_Update+0x1b4e>
              {
                if(LED.LED_parameters.LED2_mode)
 80041ea:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <LCD_GUI_Update+0x1980>)
 80041ec:	78db      	ldrb	r3, [r3, #3]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <LCD_GUI_Update+0x193c>
                {
                	LED.LED_parameters.LED2_mode--;
 80041f8:	4b17      	ldr	r3, [pc, #92]	; (8004258 <LCD_GUI_Update+0x1980>)
 80041fa:	78db      	ldrb	r3, [r3, #3]
 80041fc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8004200:	b2db      	uxtb	r3, r3
 8004202:	3307      	adds	r3, #7
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	b2d9      	uxtb	r1, r3
 800420a:	4a13      	ldr	r2, [pc, #76]	; (8004258 <LCD_GUI_Update+0x1980>)
 800420c:	78d3      	ldrb	r3, [r2, #3]
 800420e:	f361 0302 	bfi	r3, r1, #0, #3
 8004212:	70d3      	strb	r3, [r2, #3]
                }

           	    LED_CNTRL_SMF.LED_CNTRL_SMF_segments.YLED_mode =
           	    LED.LED_parameters.LED2_mode;
 8004214:	4b10      	ldr	r3, [pc, #64]	; (8004258 <LCD_GUI_Update+0x1980>)
 8004216:	78db      	ldrb	r3, [r3, #3]
 8004218:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800421c:	b2d9      	uxtb	r1, r3
           	    LED_CNTRL_SMF.LED_CNTRL_SMF_segments.YLED_mode =
 800421e:	4a0f      	ldr	r2, [pc, #60]	; (800425c <LCD_GUI_Update+0x1984>)
 8004220:	7813      	ldrb	r3, [r2, #0]
 8004222:	f361 1306 	bfi	r3, r1, #4, #3
 8004226:	7013      	strb	r3, [r2, #0]
              }

        	}
            break;
 8004228:	e0fd      	b.n	8004426 <LCD_GUI_Update+0x1b4e>

            case(LCD_GUI_LED_Config_Menu_C):
        	{
              LCD_GUI_Config_Screen_LED_settings_C();
 800422a:	f7fd fec7 	bl	8001fbc <LCD_GUI_Config_Screen_LED_settings_C>

              if( Rotary_Encoder.parameters.switch_state )
 800422e:	4b08      	ldr	r3, [pc, #32]	; (8004250 <LCD_GUI_Update+0x1978>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d014      	beq.n	8004266 <LCD_GUI_Update+0x198e>
              {
                if( LCD_GUI_selected )
 800423c:	4b03      	ldr	r3, [pc, #12]	; (800424c <LCD_GUI_Update+0x1974>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00d      	beq.n	8004260 <LCD_GUI_Update+0x1988>
                {
                	LCD_GUI_selected = 0;
 8004244:	4b01      	ldr	r3, [pc, #4]	; (800424c <LCD_GUI_Update+0x1974>)
 8004246:	2200      	movs	r2, #0
 8004248:	701a      	strb	r2, [r3, #0]
 800424a:	e00c      	b.n	8004266 <LCD_GUI_Update+0x198e>
 800424c:	2000039c 	.word	0x2000039c
 8004250:	200005a0 	.word	0x200005a0
 8004254:	20000414 	.word	0x20000414
 8004258:	200004fc 	.word	0x200004fc
 800425c:	2000045c 	.word	0x2000045c
                }
                else
                {
                	LCD_GUI_selected = 1;
 8004260:	4b80      	ldr	r3, [pc, #512]	; (8004464 <LCD_GUI_Update+0x1b8c>)
 8004262:	2201      	movs	r2, #1
 8004264:	701a      	strb	r2, [r3, #0]
                }
              }


              if( Rotary_Encoder.parameters.clockwise && !LCD_GUI_selected)
 8004266:	4b80      	ldr	r3, [pc, #512]	; (8004468 <LCD_GUI_Update+0x1b90>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d006      	beq.n	8004282 <LCD_GUI_Update+0x19aa>
 8004274:	4b7b      	ldr	r3, [pc, #492]	; (8004464 <LCD_GUI_Update+0x1b8c>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d102      	bne.n	8004282 <LCD_GUI_Update+0x19aa>
              {
            	  LCD_GUI_screen_number =  LCD_GUI_LED_Config_Menu_D;
 800427c:	4b7b      	ldr	r3, [pc, #492]	; (800446c <LCD_GUI_Update+0x1b94>)
 800427e:	2225      	movs	r2, #37	; 0x25
 8004280:	701a      	strb	r2, [r3, #0]
              }
              if( Rotary_Encoder.parameters.anticlockwise && !LCD_GUI_selected)
 8004282:	4b79      	ldr	r3, [pc, #484]	; (8004468 <LCD_GUI_Update+0x1b90>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d006      	beq.n	800429e <LCD_GUI_Update+0x19c6>
 8004290:	4b74      	ldr	r3, [pc, #464]	; (8004464 <LCD_GUI_Update+0x1b8c>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <LCD_GUI_Update+0x19c6>
              {
            	  LCD_GUI_screen_number = LCD_GUI_LED_Config_Menu_B;
 8004298:	4b74      	ldr	r3, [pc, #464]	; (800446c <LCD_GUI_Update+0x1b94>)
 800429a:	2223      	movs	r2, #35	; 0x23
 800429c:	701a      	strb	r2, [r3, #0]
              }

              if( Rotary_Encoder.parameters.clockwise && LCD_GUI_selected)
 800429e:	4b72      	ldr	r3, [pc, #456]	; (8004468 <LCD_GUI_Update+0x1b90>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d028      	beq.n	80042fe <LCD_GUI_Update+0x1a26>
 80042ac:	4b6d      	ldr	r3, [pc, #436]	; (8004464 <LCD_GUI_Update+0x1b8c>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d024      	beq.n	80042fe <LCD_GUI_Update+0x1a26>
              {
            	 LED.LED_parameters.LED3_mode++;
 80042b4:	4b6e      	ldr	r3, [pc, #440]	; (8004470 <LCD_GUI_Update+0x1b98>)
 80042b6:	78db      	ldrb	r3, [r3, #3]
 80042b8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	3301      	adds	r3, #1
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	b2d9      	uxtb	r1, r3
 80042c6:	4a6a      	ldr	r2, [pc, #424]	; (8004470 <LCD_GUI_Update+0x1b98>)
 80042c8:	78d3      	ldrb	r3, [r2, #3]
 80042ca:	f361 03c5 	bfi	r3, r1, #3, #3
 80042ce:	70d3      	strb	r3, [r2, #3]

            	 if(LED.LED_parameters.LED3_mode > PWM_test)
 80042d0:	4b67      	ldr	r3, [pc, #412]	; (8004470 <LCD_GUI_Update+0x1b98>)
 80042d2:	78db      	ldrb	r3, [r3, #3]
 80042d4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d905      	bls.n	80042ea <LCD_GUI_Update+0x1a12>
            	 {
            		 LED.LED_parameters.LED3_mode = PWM_test;
 80042de:	4a64      	ldr	r2, [pc, #400]	; (8004470 <LCD_GUI_Update+0x1b98>)
 80042e0:	78d3      	ldrb	r3, [r2, #3]
 80042e2:	2104      	movs	r1, #4
 80042e4:	f361 03c5 	bfi	r3, r1, #3, #3
 80042e8:	70d3      	strb	r3, [r2, #3]
            	 }

            	 LED_CNTRL_SMF.LED_CNTRL_SMF_segments.ZLED_mode =
            	 LED.LED_parameters.LED3_mode;
 80042ea:	4b61      	ldr	r3, [pc, #388]	; (8004470 <LCD_GUI_Update+0x1b98>)
 80042ec:	78db      	ldrb	r3, [r3, #3]
 80042ee:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80042f2:	b2d9      	uxtb	r1, r3
            	 LED_CNTRL_SMF.LED_CNTRL_SMF_segments.ZLED_mode =
 80042f4:	4a5f      	ldr	r2, [pc, #380]	; (8004474 <LCD_GUI_Update+0x1b9c>)
 80042f6:	8813      	ldrh	r3, [r2, #0]
 80042f8:	f361 13c9 	bfi	r3, r1, #7, #3
 80042fc:	8013      	strh	r3, [r2, #0]
              }
              if( Rotary_Encoder.parameters.anticlockwise && LCD_GUI_selected)
 80042fe:	4b5a      	ldr	r3, [pc, #360]	; (8004468 <LCD_GUI_Update+0x1b90>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 808e 	beq.w	800442a <LCD_GUI_Update+0x1b52>
 800430e:	4b55      	ldr	r3, [pc, #340]	; (8004464 <LCD_GUI_Update+0x1b8c>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8089 	beq.w	800442a <LCD_GUI_Update+0x1b52>
              {
                if(LED.LED_parameters.LED3_mode)
 8004318:	4b55      	ldr	r3, [pc, #340]	; (8004470 <LCD_GUI_Update+0x1b98>)
 800431a:	78db      	ldrb	r3, [r3, #3]
 800431c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00d      	beq.n	8004342 <LCD_GUI_Update+0x1a6a>
                {
                	LED.LED_parameters.LED3_mode--;
 8004326:	4b52      	ldr	r3, [pc, #328]	; (8004470 <LCD_GUI_Update+0x1b98>)
 8004328:	78db      	ldrb	r3, [r3, #3]
 800432a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800432e:	b2db      	uxtb	r3, r3
 8004330:	3307      	adds	r3, #7
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	b2d9      	uxtb	r1, r3
 8004338:	4a4d      	ldr	r2, [pc, #308]	; (8004470 <LCD_GUI_Update+0x1b98>)
 800433a:	78d3      	ldrb	r3, [r2, #3]
 800433c:	f361 03c5 	bfi	r3, r1, #3, #3
 8004340:	70d3      	strb	r3, [r2, #3]
                }

           	   LED_CNTRL_SMF.LED_CNTRL_SMF_segments.ZLED_mode =
           	   LED.LED_parameters.LED3_mode;
 8004342:	4b4b      	ldr	r3, [pc, #300]	; (8004470 <LCD_GUI_Update+0x1b98>)
 8004344:	78db      	ldrb	r3, [r3, #3]
 8004346:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800434a:	b2d9      	uxtb	r1, r3
           	   LED_CNTRL_SMF.LED_CNTRL_SMF_segments.ZLED_mode =
 800434c:	4a49      	ldr	r2, [pc, #292]	; (8004474 <LCD_GUI_Update+0x1b9c>)
 800434e:	8813      	ldrh	r3, [r2, #0]
 8004350:	f361 13c9 	bfi	r3, r1, #7, #3
 8004354:	8013      	strh	r3, [r2, #0]
              }

        	}
            break;
 8004356:	e068      	b.n	800442a <LCD_GUI_Update+0x1b52>

            case(LCD_GUI_LED_Config_Menu_D):
        	{
              LCD_GUI_Config_Screen_LED_settings_D();
 8004358:	f7fd fe94 	bl	8002084 <LCD_GUI_Config_Screen_LED_settings_D>

              if( Rotary_Encoder.parameters.clockwise )
 800435c:	4b42      	ldr	r3, [pc, #264]	; (8004468 <LCD_GUI_Update+0x1b90>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <LCD_GUI_Update+0x1a98>
              {
            	  LCD_GUI_screen_number =  LCD_GUI_LED_Config_Menu_D;
 800436a:	4b40      	ldr	r3, [pc, #256]	; (800446c <LCD_GUI_Update+0x1b94>)
 800436c:	2225      	movs	r2, #37	; 0x25
 800436e:	701a      	strb	r2, [r3, #0]
              }
              if( Rotary_Encoder.parameters.anticlockwise )
 8004370:	4b3d      	ldr	r3, [pc, #244]	; (8004468 <LCD_GUI_Update+0x1b90>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <LCD_GUI_Update+0x1aac>
              {
            	  LCD_GUI_screen_number = LCD_GUI_LED_Config_Menu_C;
 800437e:	4b3b      	ldr	r3, [pc, #236]	; (800446c <LCD_GUI_Update+0x1b94>)
 8004380:	2224      	movs	r2, #36	; 0x24
 8004382:	701a      	strb	r2, [r3, #0]
              }
              if( Rotary_Encoder.parameters.switch_state)
 8004384:	4b38      	ldr	r3, [pc, #224]	; (8004468 <LCD_GUI_Update+0x1b90>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d04d      	beq.n	800442e <LCD_GUI_Update+0x1b56>
              {
                LCD_GUI_screen_number = LCD_GUI_Config_Menu_D;
 8004392:	4b36      	ldr	r3, [pc, #216]	; (800446c <LCD_GUI_Update+0x1b94>)
 8004394:	220d      	movs	r2, #13
 8004396:	701a      	strb	r2, [r3, #0]
              }
        	}
            break;
 8004398:	e049      	b.n	800442e <LCD_GUI_Update+0x1b56>
	break;
 800439a:	bf00      	nop
 800439c:	e048      	b.n	8004430 <LCD_GUI_Update+0x1b58>
	break;
 800439e:	bf00      	nop
 80043a0:	e046      	b.n	8004430 <LCD_GUI_Update+0x1b58>
	break;
 80043a2:	bf00      	nop
 80043a4:	e044      	b.n	8004430 <LCD_GUI_Update+0x1b58>
	break;
 80043a6:	bf00      	nop
 80043a8:	e042      	b.n	8004430 <LCD_GUI_Update+0x1b58>
	break;
 80043aa:	bf00      	nop
 80043ac:	e040      	b.n	8004430 <LCD_GUI_Update+0x1b58>
	break;
 80043ae:	bf00      	nop
 80043b0:	e03e      	b.n	8004430 <LCD_GUI_Update+0x1b58>
	break;
 80043b2:	bf00      	nop
 80043b4:	e03c      	b.n	8004430 <LCD_GUI_Update+0x1b58>
	break;
 80043b6:	bf00      	nop
 80043b8:	e03a      	b.n	8004430 <LCD_GUI_Update+0x1b58>
	break;
 80043ba:	bf00      	nop
 80043bc:	e038      	b.n	8004430 <LCD_GUI_Update+0x1b58>
	break;
 80043be:	bf00      	nop
 80043c0:	e036      	b.n	8004430 <LCD_GUI_Update+0x1b58>
    break;
 80043c2:	bf00      	nop
 80043c4:	e034      	b.n	8004430 <LCD_GUI_Update+0x1b58>
    break;
 80043c6:	bf00      	nop
 80043c8:	e032      	b.n	8004430 <LCD_GUI_Update+0x1b58>
    break;
 80043ca:	bf00      	nop
 80043cc:	e030      	b.n	8004430 <LCD_GUI_Update+0x1b58>
    break;
 80043ce:	bf00      	nop
 80043d0:	e02e      	b.n	8004430 <LCD_GUI_Update+0x1b58>
    break;
 80043d2:	bf00      	nop
 80043d4:	e02c      	b.n	8004430 <LCD_GUI_Update+0x1b58>
    break;
 80043d6:	bf00      	nop
 80043d8:	e02a      	b.n	8004430 <LCD_GUI_Update+0x1b58>
    break;
 80043da:	bf00      	nop
 80043dc:	e028      	b.n	8004430 <LCD_GUI_Update+0x1b58>
    break;
 80043de:	bf00      	nop
 80043e0:	e026      	b.n	8004430 <LCD_GUI_Update+0x1b58>
    break;
 80043e2:	bf00      	nop
 80043e4:	e024      	b.n	8004430 <LCD_GUI_Update+0x1b58>
    break;
 80043e6:	bf00      	nop
 80043e8:	e022      	b.n	8004430 <LCD_GUI_Update+0x1b58>
    break;
 80043ea:	bf00      	nop
 80043ec:	e020      	b.n	8004430 <LCD_GUI_Update+0x1b58>
    break;
 80043ee:	bf00      	nop
 80043f0:	e01e      	b.n	8004430 <LCD_GUI_Update+0x1b58>
      break;
 80043f2:	bf00      	nop
 80043f4:	e01c      	b.n	8004430 <LCD_GUI_Update+0x1b58>
      break;
 80043f6:	bf00      	nop
 80043f8:	e01a      	b.n	8004430 <LCD_GUI_Update+0x1b58>
      break;
 80043fa:	bf00      	nop
 80043fc:	e018      	b.n	8004430 <LCD_GUI_Update+0x1b58>
      break;
 80043fe:	bf00      	nop
 8004400:	e016      	b.n	8004430 <LCD_GUI_Update+0x1b58>
        break;
 8004402:	bf00      	nop
 8004404:	e014      	b.n	8004430 <LCD_GUI_Update+0x1b58>
        break;
 8004406:	bf00      	nop
 8004408:	e012      	b.n	8004430 <LCD_GUI_Update+0x1b58>
        break;
 800440a:	bf00      	nop
 800440c:	e010      	b.n	8004430 <LCD_GUI_Update+0x1b58>
        break;
 800440e:	bf00      	nop
 8004410:	e00e      	b.n	8004430 <LCD_GUI_Update+0x1b58>
          break;
 8004412:	bf00      	nop
 8004414:	e00c      	b.n	8004430 <LCD_GUI_Update+0x1b58>
          break;
 8004416:	bf00      	nop
 8004418:	e00a      	b.n	8004430 <LCD_GUI_Update+0x1b58>
          break;
 800441a:	bf00      	nop
 800441c:	e008      	b.n	8004430 <LCD_GUI_Update+0x1b58>
          break;
 800441e:	bf00      	nop
 8004420:	e006      	b.n	8004430 <LCD_GUI_Update+0x1b58>
            break;
 8004422:	bf00      	nop
 8004424:	e004      	b.n	8004430 <LCD_GUI_Update+0x1b58>
            break;
 8004426:	bf00      	nop
 8004428:	e002      	b.n	8004430 <LCD_GUI_Update+0x1b58>
            break;
 800442a:	bf00      	nop
 800442c:	e000      	b.n	8004430 <LCD_GUI_Update+0x1b58>
            break;
 800442e:	bf00      	nop
  }

  /* Reset rotary encoder variables and update display. */


  Rotary_Encoder.parameters.anticlockwise = 0;
 8004430:	4a0d      	ldr	r2, [pc, #52]	; (8004468 <LCD_GUI_Update+0x1b90>)
 8004432:	6813      	ldr	r3, [r2, #0]
 8004434:	f36f 0341 	bfc	r3, #1, #1
 8004438:	6013      	str	r3, [r2, #0]
  Rotary_Encoder.parameters.clockwise = 0;
 800443a:	4a0b      	ldr	r2, [pc, #44]	; (8004468 <LCD_GUI_Update+0x1b90>)
 800443c:	6813      	ldr	r3, [r2, #0]
 800443e:	f36f 0300 	bfc	r3, #0, #1
 8004442:	6013      	str	r3, [r2, #0]
  Rotary_Encoder.parameters.switch_state = 0;
 8004444:	4a08      	ldr	r2, [pc, #32]	; (8004468 <LCD_GUI_Update+0x1b90>)
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	f36f 0382 	bfc	r3, #2, #1
 800444c:	6013      	str	r3, [r2, #0]

  if( Nokia5110.pending == 0 )
 800444e:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <LCD_GUI_Update+0x1ba0>)
 8004450:	f893 31fb 	ldrb.w	r3, [r3, #507]	; 0x1fb
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <LCD_GUI_Update+0x1b84>
  {
    Nokia5110_updateDisplay();
 8004458:	f000 fa34 	bl	80048c4 <Nokia5110_updateDisplay>
  }
}
 800445c:	bf00      	nop
 800445e:	3720      	adds	r7, #32
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	2000039c 	.word	0x2000039c
 8004468:	200005a0 	.word	0x200005a0
 800446c:	20000414 	.word	0x20000414
 8004470:	200004fc 	.word	0x200004fc
 8004474:	2000045c 	.word	0x2000045c
 8004478:	20000154 	.word	0x20000154

0800447c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448a:	2b00      	cmp	r3, #0
 800448c:	db0b      	blt.n	80044a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	f003 021f 	and.w	r2, r3, #31
 8004494:	4907      	ldr	r1, [pc, #28]	; (80044b4 <__NVIC_EnableIRQ+0x38>)
 8004496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	2001      	movs	r0, #1
 800449e:	fa00 f202 	lsl.w	r2, r0, r2
 80044a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	e000e100 	.word	0xe000e100

080044b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	6039      	str	r1, [r7, #0]
 80044c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	db0a      	blt.n	80044e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	490c      	ldr	r1, [pc, #48]	; (8004504 <__NVIC_SetPriority+0x4c>)
 80044d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d6:	0112      	lsls	r2, r2, #4
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	440b      	add	r3, r1
 80044dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044e0:	e00a      	b.n	80044f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	4908      	ldr	r1, [pc, #32]	; (8004508 <__NVIC_SetPriority+0x50>)
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	3b04      	subs	r3, #4
 80044f0:	0112      	lsls	r2, r2, #4
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	440b      	add	r3, r1
 80044f6:	761a      	strb	r2, [r3, #24]
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	e000e100 	.word	0xe000e100
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <Nokia5110_clear>:

#include "LCD_Nokia5110.h"

void Nokia5110_clear()
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
  Nokia5110.x_pos = 0;
 8004512:	4b0e      	ldr	r3, [pc, #56]	; (800454c <Nokia5110_clear+0x40>)
 8004514:	2200      	movs	r2, #0
 8004516:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 0;
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <Nokia5110_clear+0x40>)
 800451c:	2200      	movs	r2, #0
 800451e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

  for(int i = 0 ; i < 504; i++)
 8004522:	2300      	movs	r3, #0
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	e007      	b.n	8004538 <Nokia5110_clear+0x2c>
  {
    Nokia5110.byte[i] = 0x00;
 8004528:	4a08      	ldr	r2, [pc, #32]	; (800454c <Nokia5110_clear+0x40>)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4413      	add	r3, r2
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ; i < 504; i++)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3301      	adds	r3, #1
 8004536:	607b      	str	r3, [r7, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800453e:	dbf3      	blt.n	8004528 <Nokia5110_clear+0x1c>
  }
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	20000154 	.word	0x20000154

08004550 <Nokia5110_SysTick_delay_ms>:

static void Nokia5110_SysTick_delay_ms(uint16_t delay_ms)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	80fb      	strh	r3, [r7, #6]
	while( delay_ms )
 800455a:	e015      	b.n	8004588 <Nokia5110_SysTick_delay_ms+0x38>
	{
		/*	Disable SysTick timer. */

		SysTick->CTRL = 0;
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <Nokia5110_SysTick_delay_ms+0x4c>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]

		/*	Load value with 0. */

		SysTick->VAL = 0;
 8004562:	4b0e      	ldr	r3, [pc, #56]	; (800459c <Nokia5110_SysTick_delay_ms+0x4c>)
 8004564:	2200      	movs	r2, #0
 8004566:	609a      	str	r2, [r3, #8]

		/*	Load upper limit of SysTick timer. */

		SysTick->LOAD = (84000000UL / 1000UL) - 1;
 8004568:	4b0c      	ldr	r3, [pc, #48]	; (800459c <Nokia5110_SysTick_delay_ms+0x4c>)
 800456a:	4a0d      	ldr	r2, [pc, #52]	; (80045a0 <Nokia5110_SysTick_delay_ms+0x50>)
 800456c:	605a      	str	r2, [r3, #4]

		/*	Enable SysTick timer and select clock source as processor clock. */

		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <Nokia5110_SysTick_delay_ms+0x4c>)
 8004570:	2205      	movs	r2, #5
 8004572:	601a      	str	r2, [r3, #0]

		/*	Wait until SysTick timer reaches limit. */

		while( ( SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk ) == 0 );
 8004574:	bf00      	nop
 8004576:	4b09      	ldr	r3, [pc, #36]	; (800459c <Nokia5110_SysTick_delay_ms+0x4c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f9      	beq.n	8004576 <Nokia5110_SysTick_delay_ms+0x26>

		/*	Decrement counter variable. */

		delay_ms--;
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	3b01      	subs	r3, #1
 8004586:	80fb      	strh	r3, [r7, #6]
	while( delay_ms )
 8004588:	88fb      	ldrh	r3, [r7, #6]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e6      	bne.n	800455c <Nokia5110_SysTick_delay_ms+0xc>
	}
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	e000e010 	.word	0xe000e010
 80045a0:	0001481f 	.word	0x0001481f

080045a4 <Nokia5110_GPIO_Init>:



void Nokia5110_GPIO_Init()
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN_Msk
 80045a8:	4b31      	ldr	r3, [pc, #196]	; (8004670 <Nokia5110_GPIO_Init+0xcc>)
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	4a30      	ldr	r2, [pc, #192]	; (8004670 <Nokia5110_GPIO_Init+0xcc>)
 80045ae:	f043 0307 	orr.w	r3, r3, #7
 80045b2:	6313      	str	r3, [r2, #48]	; 0x30
			     |  RCC_AHB1ENR_GPIOBEN_Msk
				 |  RCC_AHB1ENR_GPIOCEN_Msk);

	GPIOA->MODER 	|= 		( 0x1 << ( 2 * 5 ) );	//	PA5: Test LED.
 80045b4:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <Nokia5110_GPIO_Init+0xd0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a2e      	ldr	r2, [pc, #184]	; (8004674 <Nokia5110_GPIO_Init+0xd0>)
 80045ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045be:	6013      	str	r3, [r2, #0]

	GPIOB->MODER 	|=		( 0x1 << ( 2 * 2 ) );	//	PB2: LCD Reset.
 80045c0:	4b2d      	ldr	r3, [pc, #180]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a2c      	ldr	r2, [pc, #176]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 80045c6:	f043 0310 	orr.w	r3, r3, #16
 80045ca:	6013      	str	r3, [r2, #0]

	GPIOB->MODER 	|=		( 0x2 << ( 2 * 12 ) );	//	PB12: LCD CS.
 80045cc:	4b2a      	ldr	r3, [pc, #168]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a29      	ldr	r2, [pc, #164]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 80045d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045d6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER 	|=		( 0x2 << ( 2 * 13 ) );	//	PB13: LCD Clock.
 80045d8:	4b27      	ldr	r3, [pc, #156]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a26      	ldr	r2, [pc, #152]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 80045de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045e2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER 	|=		( 0x2 << ( 2 * 15 ) );	//	PB15: LCD Data.
 80045e4:	4b24      	ldr	r3, [pc, #144]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a23      	ldr	r2, [pc, #140]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 80045ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045ee:	6013      	str	r3, [r2, #0]

	GPIOB->MODER 	|=		( 0x1 << ( 2 * 14 ) );	//	PB14: LCD Data/Command.
 80045f0:	4b21      	ldr	r3, [pc, #132]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a20      	ldr	r2, [pc, #128]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 80045f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fa:	6013      	str	r3, [r2, #0]

	/* Outputs configured as very high speed.*/

	GPIOB->OSPEEDR |= ( 0x3 << ( 2 * 2 ) );		//	PB2:	LCD Reset.
 80045fc:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	4a1d      	ldr	r2, [pc, #116]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 8004602:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004606:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= ( 0x3 << ( 2 *12 ) );		//	PB12:	LCD CS.
 8004608:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4a1a      	ldr	r2, [pc, #104]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 800460e:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004612:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= ( 0x3 << ( 2 * 13 ) );	//	PB13:	LCD Clock.
 8004614:	4b18      	ldr	r3, [pc, #96]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	4a17      	ldr	r2, [pc, #92]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 800461a:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 800461e:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= ( 0x3 << ( 2 * 14 ) );	//	PB14:	LCD Data/command.
 8004620:	4b15      	ldr	r3, [pc, #84]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	4a14      	ldr	r2, [pc, #80]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 8004626:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800462a:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= ( 0x3 << ( 2 * 15 ) );	//	PB15:	LCD Data.
 800462c:	4b12      	ldr	r3, [pc, #72]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4a11      	ldr	r2, [pc, #68]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 8004632:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004636:	6093      	str	r3, [r2, #8]

	/* Use for hardware SPI. */

	GPIOB->AFR[1] |= ( 0x5UL << ( ( 12 - 8 ) * 4 ) );
 8004638:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	4a0e      	ldr	r2, [pc, #56]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 800463e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8004642:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= ( 0x5UL << ( ( 13 - 8 ) * 4 ) );
 8004644:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	4a0b      	ldr	r2, [pc, #44]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 800464a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800464e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= ( 0x5UL << ( ( 15 - 8 ) * 4 ) );
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	4a08      	ldr	r2, [pc, #32]	; (8004678 <Nokia5110_GPIO_Init+0xd4>)
 8004656:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800465a:	6253      	str	r3, [r2, #36]	; 0x24

	Nokia5110.pending = 0;
 800465c:	4b07      	ldr	r3, [pc, #28]	; (800467c <Nokia5110_GPIO_Init+0xd8>)
 800465e:	2200      	movs	r2, #0
 8004660:	f883 21fb 	strb.w	r2, [r3, #507]	; 0x1fb
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800
 8004674:	40020000 	.word	0x40020000
 8004678:	40020400 	.word	0x40020400
 800467c:	20000154 	.word	0x20000154

08004680 <Nokia5110_SPI_Init>:

/* Function to initialize SPI interface of MCU. */

void Nokia5110_SPI_Init(){
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_SPI2EN_Msk;
 8004684:	4b21      	ldr	r3, [pc, #132]	; (800470c <Nokia5110_SPI_Init+0x8c>)
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	4a20      	ldr	r2, [pc, #128]	; (800470c <Nokia5110_SPI_Init+0x8c>)
 800468a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800468e:	6413      	str	r3, [r2, #64]	; 0x40

	/****	Initialize in SPI Master Mode. ****/

	/*	Set baud rate to F_PCLK / 256. */

	SPI2->CR1 = 0x5 << SPI_CR1_BR_Pos;
 8004690:	4b1f      	ldr	r3, [pc, #124]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 8004692:	2228      	movs	r2, #40	; 0x28
 8004694:	601a      	str	r2, [r3, #0]

	/*	Set CPOL = 0 and CPHA = 0. */

	SPI2->CR1 &= ~( SPI_CR1_CPOL_Msk | SPI_CR1_CPHA_Msk );
 8004696:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 800469c:	f023 0303 	bic.w	r3, r3, #3
 80046a0:	6013      	str	r3, [r2, #0]

	//SPI2->CR1 |= ( SPI_CR1_CPOL_Msk );

	/*	Set data frame length to 8 bits. */

	SPI2->CR1 &= ~SPI_CR1_DFF_Msk;
 80046a2:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1a      	ldr	r2, [pc, #104]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ac:	6013      	str	r3, [r2, #0]

	/*	Select MSB first mode. */

	SPI2->CR1 &= ~SPI_CR1_LSBFIRST_Msk;
 80046ae:	4b18      	ldr	r3, [pc, #96]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a17      	ldr	r2, [pc, #92]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b8:	6013      	str	r3, [r2, #0]

	/* Set SPI in Motorola mode. */

	SPI2->CR2 &= ~SPI_CR2_FRF_Msk;
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4a14      	ldr	r2, [pc, #80]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046c0:	f023 0310 	bic.w	r3, r3, #16
 80046c4:	6053      	str	r3, [r2, #4]

	/*	Set SPI to master mode. */

	SPI2->CR1 |= SPI_CR1_MSTR_Msk;
 80046c6:	4b12      	ldr	r3, [pc, #72]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a11      	ldr	r2, [pc, #68]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046cc:	f043 0304 	orr.w	r3, r3, #4
 80046d0:	6013      	str	r3, [r2, #0]

	/* Set SPI mode to unidirectional mode. */

	SPI2->CR1 &= ~SPI_CR1_BIDIMODE_Msk;
 80046d2:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a0e      	ldr	r2, [pc, #56]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046dc:	6013      	str	r3, [r2, #0]

	SPI2->CR2 |= SPI_CR2_SSOE;	//	Enable NSS output from SPI peripheral.
 80046de:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4a0b      	ldr	r2, [pc, #44]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046e4:	f043 0304 	orr.w	r3, r3, #4
 80046e8:	6053      	str	r3, [r2, #4]

	SPI2->CR1 &= ~SPI_CR1_SSM; //Software slave management disabled.
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a08      	ldr	r2, [pc, #32]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046f4:	6013      	str	r3, [r2, #0]

	/* Enable SPI Module. */

	SPI2->CR1 |= SPI_CR1_SPE_Msk;
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a05      	ldr	r2, [pc, #20]	; (8004710 <Nokia5110_SPI_Init+0x90>)
 80046fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004700:	6013      	str	r3, [r2, #0]
}
 8004702:	bf00      	nop
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	40023800 	.word	0x40023800
 8004710:	40003800 	.word	0x40003800

08004714 <Nokia5110_SPI_DMA_TransferByte>:

  (void)SPI2->DR;
  (void)SPI2->SR;
}

void Nokia5110_SPI_DMA_TransferByte(uint8_t byte,uint8_t type){
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	460a      	mov	r2, r1
 800471e:	71fb      	strb	r3, [r7, #7]
 8004720:	4613      	mov	r3, r2
 8004722:	71bb      	strb	r3, [r7, #6]

  /* If byte type is data (1), set Data/nCommand signal, else if byte type is
   * command(0), clear Data/nCommand signal.
   * */

  type ? ( GPIOC->ODR |= ( 1 << 8 ) ) : ( GPIOC->ODR &= ~( 1 << 8 ) );
 8004724:	79bb      	ldrb	r3, [r7, #6]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d006      	beq.n	8004738 <Nokia5110_SPI_DMA_TransferByte+0x24>
 800472a:	4b36      	ldr	r3, [pc, #216]	; (8004804 <Nokia5110_SPI_DMA_TransferByte+0xf0>)
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	4a35      	ldr	r2, [pc, #212]	; (8004804 <Nokia5110_SPI_DMA_TransferByte+0xf0>)
 8004730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004734:	6153      	str	r3, [r2, #20]
 8004736:	e005      	b.n	8004744 <Nokia5110_SPI_DMA_TransferByte+0x30>
 8004738:	4b32      	ldr	r3, [pc, #200]	; (8004804 <Nokia5110_SPI_DMA_TransferByte+0xf0>)
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	4a31      	ldr	r2, [pc, #196]	; (8004804 <Nokia5110_SPI_DMA_TransferByte+0xf0>)
 800473e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004742:	6153      	str	r3, [r2, #20]

  if(!(RCC->AHB1ENR & RCC_AHB1ENR_DMA1EN_Msk)){
 8004744:	4b30      	ldr	r3, [pc, #192]	; (8004808 <Nokia5110_SPI_DMA_TransferByte+0xf4>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d105      	bne.n	800475c <Nokia5110_SPI_DMA_TransferByte+0x48>
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN_Msk;
 8004750:	4b2d      	ldr	r3, [pc, #180]	; (8004808 <Nokia5110_SPI_DMA_TransferByte+0xf4>)
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	4a2c      	ldr	r2, [pc, #176]	; (8004808 <Nokia5110_SPI_DMA_TransferByte+0xf4>)
 8004756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800475a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*  Disable the DMA stream. */

  DMA1_Stream4->CR &= ~DMA_SxCR_EN_Msk;
 800475c:	4b2b      	ldr	r3, [pc, #172]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a2a      	ldr	r2, [pc, #168]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	6013      	str	r3, [r2, #0]

  /*  Wait until DMA stream disable request is acknowledged. */

  while( DMA1_Stream4->CR & DMA_SxCR_EN_Msk );
 8004768:	bf00      	nop
 800476a:	4b28      	ldr	r3, [pc, #160]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f9      	bne.n	800476a <Nokia5110_SPI_DMA_TransferByte+0x56>

  /*  Set peripheral address register to the USART data register. */

  DMA1_Stream4->PAR = (uint32_t)((volatile uint8_t*)(&(SPI2->DR)));
 8004776:	4b25      	ldr	r3, [pc, #148]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 8004778:	4a25      	ldr	r2, [pc, #148]	; (8004810 <Nokia5110_SPI_DMA_TransferByte+0xfc>)
 800477a:	609a      	str	r2, [r3, #8]

  /*  Set memory location to load the data into. */

  DMA1_Stream4->M0AR = (uint32_t)&byte;
 800477c:	4a23      	ldr	r2, [pc, #140]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 800477e:	1dfb      	adds	r3, r7, #7
 8004780:	60d3      	str	r3, [r2, #12]

  /*  Set number of data points per stream. */

  DMA1_Stream4->NDTR = 1;
 8004782:	4b22      	ldr	r3, [pc, #136]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 8004784:	2201      	movs	r2, #1
 8004786:	605a      	str	r2, [r3, #4]

  /*  Set DMA Stream channel. */

  DMA1_Stream4->CR |=  0x0U << DMA_SxCR_CHSEL_Pos;
 8004788:	4b20      	ldr	r3, [pc, #128]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 800478a:	4a20      	ldr	r2, [pc, #128]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6013      	str	r3, [r2, #0]

  /*  Set DMA transfer direction: peripheral to memory. */

  DMA1_Stream4->CR |= 0x1U << DMA_SxCR_DIR_Pos;
 8004790:	4b1e      	ldr	r3, [pc, #120]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1d      	ldr	r2, [pc, #116]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 8004796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800479a:	6013      	str	r3, [r2, #0]

  /*  Enable memory increment mode. */

  DMA1_Stream4->CR |= 0x0U << DMA_SxCR_MINC_Pos;
 800479c:	4b1b      	ldr	r3, [pc, #108]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 800479e:	4a1b      	ldr	r2, [pc, #108]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6013      	str	r3, [r2, #0]

  /*  Disable circular mode. */

  DMA1_Stream4->CR |= 0x0U << DMA_SxCR_CIRC_Pos;
 80047a4:	4b19      	ldr	r3, [pc, #100]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 80047a6:	4a19      	ldr	r2, [pc, #100]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6013      	str	r3, [r2, #0]

  /*  Enable DMA stream full transfer interrupt. */

  DMA1_Stream4->CR |=  DMA_SxCR_TCIE_Msk;
 80047ac:	4b17      	ldr	r3, [pc, #92]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a16      	ldr	r2, [pc, #88]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 80047b2:	f043 0310 	orr.w	r3, r3, #16
 80047b6:	6013      	str	r3, [r2, #0]

  /*	Enable DMA direct mode interrupt. */

  DMA1_Stream4->CR |= DMA_SxCR_DMEIE_Msk;
 80047b8:	4b14      	ldr	r3, [pc, #80]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a13      	ldr	r2, [pc, #76]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 80047be:	f043 0302 	orr.w	r3, r3, #2
 80047c2:	6013      	str	r3, [r2, #0]

  /*	Enable DMA Stream. */

  DMA1->HIFCR |= DMA_HIFCR_CTCIF4_Msk;
 80047c4:	4b13      	ldr	r3, [pc, #76]	; (8004814 <Nokia5110_SPI_DMA_TransferByte+0x100>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4a12      	ldr	r2, [pc, #72]	; (8004814 <Nokia5110_SPI_DMA_TransferByte+0x100>)
 80047ca:	f043 0320 	orr.w	r3, r3, #32
 80047ce:	60d3      	str	r3, [r2, #12]

  DMA1_Stream4->CR |= DMA_SxCR_EN_Msk;
 80047d0:	4b0e      	ldr	r3, [pc, #56]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a0d      	ldr	r2, [pc, #52]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	6013      	str	r3, [r2, #0]

  while( !( DMA1_Stream4->CR & DMA_SxCR_EN_Msk ) );
 80047dc:	bf00      	nop
 80047de:	4b0b      	ldr	r3, [pc, #44]	; (800480c <Nokia5110_SPI_DMA_TransferByte+0xf8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f9      	beq.n	80047de <Nokia5110_SPI_DMA_TransferByte+0xca>

  /* Enable DMA transfer for SPI Peripheral. */

  SPI2->CR2 |= SPI_CR2_TXDMAEN_Msk;
 80047ea:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <Nokia5110_SPI_DMA_TransferByte+0x104>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	4a0a      	ldr	r2, [pc, #40]	; (8004818 <Nokia5110_SPI_DMA_TransferByte+0x104>)
 80047f0:	f043 0302 	orr.w	r3, r3, #2
 80047f4:	6053      	str	r3, [r2, #4]

  /* Enable DMA1_Stream4 Interrupt. */

  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80047f6:	200f      	movs	r0, #15
 80047f8:	f7ff fe40 	bl	800447c <__NVIC_EnableIRQ>
}
 80047fc:	bf00      	nop
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40020800 	.word	0x40020800
 8004808:	40023800 	.word	0x40023800
 800480c:	40026070 	.word	0x40026070
 8004810:	4000380c 	.word	0x4000380c
 8004814:	40026000 	.word	0x40026000
 8004818:	40003800 	.word	0x40003800

0800481c <DMA1_Stream4_IRQHandler>:


/* SPI DMA Full transfer callback. */

void DMA1_Stream4_IRQHandler(void){
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0

  if(DMA1->HISR & DMA_HISR_TCIF4){
 8004820:	4b11      	ldr	r3, [pc, #68]	; (8004868 <DMA1_Stream4_IRQHandler+0x4c>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b00      	cmp	r3, #0
 800482a:	d017      	beq.n	800485c <DMA1_Stream4_IRQHandler+0x40>

	/* Set display updated flag. */

	Nokia5110.updated = 1;
 800482c:	4b0f      	ldr	r3, [pc, #60]	; (800486c <DMA1_Stream4_IRQHandler+0x50>)
 800482e:	2201      	movs	r2, #1
 8004830:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
	Nokia5110.pending = 0;
 8004834:	4b0d      	ldr	r3, [pc, #52]	; (800486c <DMA1_Stream4_IRQHandler+0x50>)
 8004836:	2200      	movs	r2, #0
 8004838:	f883 21fb 	strb.w	r2, [r3, #507]	; 0x1fb

	/* Clear SPI DMA Transmit mask. */

    SPI2->CR2 &= ~SPI_CR2_TXDMAEN_Msk;
 800483c:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <DMA1_Stream4_IRQHandler+0x54>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4a0b      	ldr	r2, [pc, #44]	; (8004870 <DMA1_Stream4_IRQHandler+0x54>)
 8004842:	f023 0302 	bic.w	r3, r3, #2
 8004846:	6053      	str	r3, [r2, #4]

    /* Read Data Register and Status register to clear over-run bit. */

    (void)SPI2->DR;
 8004848:	4b09      	ldr	r3, [pc, #36]	; (8004870 <DMA1_Stream4_IRQHandler+0x54>)
 800484a:	68db      	ldr	r3, [r3, #12]
    (void)SPI2->SR;
 800484c:	4b08      	ldr	r3, [pc, #32]	; (8004870 <DMA1_Stream4_IRQHandler+0x54>)
 800484e:	689b      	ldr	r3, [r3, #8]

    DMA1->HIFCR |= DMA_HIFCR_CTCIF4_Msk;
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <DMA1_Stream4_IRQHandler+0x4c>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a04      	ldr	r2, [pc, #16]	; (8004868 <DMA1_Stream4_IRQHandler+0x4c>)
 8004856:	f043 0320 	orr.w	r3, r3, #32
 800485a:	60d3      	str	r3, [r2, #12]
  }
}
 800485c:	bf00      	nop
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40026000 	.word	0x40026000
 800486c:	20000154 	.word	0x20000154
 8004870:	40003800 	.word	0x40003800

08004874 <Nokia5110_writeByte>:

/* Function to write a byte of data into the LCD. */

void Nokia5110_writeByte(uint8_t byte, uint8_t type){
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	460a      	mov	r2, r1
 800487e:	71fb      	strb	r3, [r7, #7]
 8004880:	4613      	mov	r3, r2
 8004882:	71bb      	strb	r3, [r7, #6]

  (type) ? ( GPIOB->ODR |= ( 1 << 14 ) ) : ( GPIOB->ODR &= ~( 1 << 14 ) );
 8004884:	79bb      	ldrb	r3, [r7, #6]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d006      	beq.n	8004898 <Nokia5110_writeByte+0x24>
 800488a:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <Nokia5110_writeByte+0x4c>)
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	4a0c      	ldr	r2, [pc, #48]	; (80048c0 <Nokia5110_writeByte+0x4c>)
 8004890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004894:	6153      	str	r3, [r2, #20]
 8004896:	e005      	b.n	80048a4 <Nokia5110_writeByte+0x30>
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <Nokia5110_writeByte+0x4c>)
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	4a08      	ldr	r2, [pc, #32]	; (80048c0 <Nokia5110_writeByte+0x4c>)
 800489e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048a2:	6153      	str	r3, [r2, #20]
  //Nokia5110_SPI_TxP(byte);
  Nokia5110_SPI_DMA_TransferByte(byte,type);
 80048a4:	79ba      	ldrb	r2, [r7, #6]
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	4611      	mov	r1, r2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff ff32 	bl	8004714 <Nokia5110_SPI_DMA_TransferByte>
  Nokia5110_SysTick_delay_ms(1);
 80048b0:	2001      	movs	r0, #1
 80048b2:	f7ff fe4d 	bl	8004550 <Nokia5110_SysTick_delay_ms>
}
 80048b6:	bf00      	nop
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40020400 	.word	0x40020400

080048c4 <Nokia5110_updateDisplay>:


void Nokia5110_updateDisplay(){
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0

  GPIOB->ODR |= ( 1 << 14 );
 80048c8:	4b39      	ldr	r3, [pc, #228]	; (80049b0 <Nokia5110_updateDisplay+0xec>)
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	4a38      	ldr	r2, [pc, #224]	; (80049b0 <Nokia5110_updateDisplay+0xec>)
 80048ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048d2:	6153      	str	r3, [r2, #20]

  if(!(RCC->AHB1ENR & RCC_AHB1ENR_DMA1EN_Msk)){
 80048d4:	4b37      	ldr	r3, [pc, #220]	; (80049b4 <Nokia5110_updateDisplay+0xf0>)
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d105      	bne.n	80048ec <Nokia5110_updateDisplay+0x28>
      RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN_Msk;
 80048e0:	4b34      	ldr	r3, [pc, #208]	; (80049b4 <Nokia5110_updateDisplay+0xf0>)
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	4a33      	ldr	r2, [pc, #204]	; (80049b4 <Nokia5110_updateDisplay+0xf0>)
 80048e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048ea:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Clear display update flag. */

  Nokia5110.updated = 0;
 80048ec:	4b32      	ldr	r3, [pc, #200]	; (80049b8 <Nokia5110_updateDisplay+0xf4>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
  Nokia5110.pending = 1;
 80048f4:	4b30      	ldr	r3, [pc, #192]	; (80049b8 <Nokia5110_updateDisplay+0xf4>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 21fb 	strb.w	r2, [r3, #507]	; 0x1fb

  /*  Disable the DMA stream. */

  DMA1_Stream4->CR &= ~DMA_SxCR_EN_Msk;
 80048fc:	4b2f      	ldr	r3, [pc, #188]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a2e      	ldr	r2, [pc, #184]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	6013      	str	r3, [r2, #0]

  /*  Wait until DMA stream disable request is acknowledged. */

  while( DMA1_Stream4->CR & DMA_SxCR_EN_Msk );
 8004908:	bf00      	nop
 800490a:	4b2c      	ldr	r3, [pc, #176]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f9      	bne.n	800490a <Nokia5110_updateDisplay+0x46>

  /*  Set peripheral address register to the SPI2 data register. */

  DMA1_Stream4->PAR = (uint32_t)((volatile uint8_t*)(&(SPI2->DR)));
 8004916:	4b29      	ldr	r3, [pc, #164]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 8004918:	4a29      	ldr	r2, [pc, #164]	; (80049c0 <Nokia5110_updateDisplay+0xfc>)
 800491a:	609a      	str	r2, [r3, #8]

  /*  Set memory location to load the data into. */

  DMA1_Stream4->M0AR = (uint32_t)Nokia5110.byte;
 800491c:	4b27      	ldr	r3, [pc, #156]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 800491e:	4a26      	ldr	r2, [pc, #152]	; (80049b8 <Nokia5110_updateDisplay+0xf4>)
 8004920:	60da      	str	r2, [r3, #12]

  /*  Set number of data points per stream. */

  DMA1_Stream4->NDTR = 504;
 8004922:	4b26      	ldr	r3, [pc, #152]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 8004924:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8004928:	605a      	str	r2, [r3, #4]

  /*  Set DMA Stream channel. */

  DMA1_Stream4->CR |=  0x0U << DMA_SxCR_CHSEL_Pos;
 800492a:	4b24      	ldr	r3, [pc, #144]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 800492c:	4a23      	ldr	r2, [pc, #140]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6013      	str	r3, [r2, #0]

  /*  Set DMA transfer direction: peripheral to memory. */

  DMA1_Stream4->CR |= 0x1U << DMA_SxCR_DIR_Pos;
 8004932:	4b22      	ldr	r3, [pc, #136]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a21      	ldr	r2, [pc, #132]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 8004938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800493c:	6013      	str	r3, [r2, #0]

  /*  Enable memory increment mode. */

  DMA1_Stream4->CR |= 0x1U << DMA_SxCR_MINC_Pos;
 800493e:	4b1f      	ldr	r3, [pc, #124]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1e      	ldr	r2, [pc, #120]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 8004944:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004948:	6013      	str	r3, [r2, #0]

  /*  Disable circular mode. */

  DMA1_Stream4->CR |= 0x0U << DMA_SxCR_CIRC_Pos;
 800494a:	4b1c      	ldr	r3, [pc, #112]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 800494c:	4a1b      	ldr	r2, [pc, #108]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6013      	str	r3, [r2, #0]

  /*  Enable DMA stream full transfer interrupt. */

  DMA1_Stream4->CR |=  DMA_SxCR_TCIE_Msk;
 8004952:	4b1a      	ldr	r3, [pc, #104]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a19      	ldr	r2, [pc, #100]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 8004958:	f043 0310 	orr.w	r3, r3, #16
 800495c:	6013      	str	r3, [r2, #0]

  /*  Enable DMA direct mode interrupt. */

  DMA1_Stream4->CR |= DMA_SxCR_DMEIE_Msk;
 800495e:	4b17      	ldr	r3, [pc, #92]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a16      	ldr	r2, [pc, #88]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 8004964:	f043 0302 	orr.w	r3, r3, #2
 8004968:	6013      	str	r3, [r2, #0]

  /*  Enable DMA Stream. */

  DMA1->HIFCR |= DMA_HIFCR_CTCIF4_Msk;
 800496a:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <Nokia5110_updateDisplay+0x100>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <Nokia5110_updateDisplay+0x100>)
 8004970:	f043 0320 	orr.w	r3, r3, #32
 8004974:	60d3      	str	r3, [r2, #12]

  DMA1_Stream4->CR |= DMA_SxCR_EN_Msk;
 8004976:	4b11      	ldr	r3, [pc, #68]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a10      	ldr	r2, [pc, #64]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6013      	str	r3, [r2, #0]

  while( !( DMA1_Stream4->CR & DMA_SxCR_EN_Msk ) );
 8004982:	bf00      	nop
 8004984:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <Nokia5110_updateDisplay+0xf8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f9      	beq.n	8004984 <Nokia5110_updateDisplay+0xc0>

  /* Enable DMA transfer for SPI Peripheral. */

  SPI2->CR2 |= SPI_CR2_TXDMAEN_Msk;
 8004990:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <Nokia5110_updateDisplay+0x104>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4a0c      	ldr	r2, [pc, #48]	; (80049c8 <Nokia5110_updateDisplay+0x104>)
 8004996:	f043 0302 	orr.w	r3, r3, #2
 800499a:	6053      	str	r3, [r2, #4]

  /* Enable DMA1_Stream4 Interrupt. */

  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800499c:	200f      	movs	r0, #15
 800499e:	f7ff fd6d 	bl	800447c <__NVIC_EnableIRQ>
  NVIC_SetPriority(DMA1_Stream4_IRQn,6);
 80049a2:	2106      	movs	r1, #6
 80049a4:	200f      	movs	r0, #15
 80049a6:	f7ff fd87 	bl	80044b8 <__NVIC_SetPriority>
}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40020400 	.word	0x40020400
 80049b4:	40023800 	.word	0x40023800
 80049b8:	20000154 	.word	0x20000154
 80049bc:	40026070 	.word	0x40026070
 80049c0:	4000380c 	.word	0x4000380c
 80049c4:	40026000 	.word	0x40026000
 80049c8:	40003800 	.word	0x40003800

080049cc <Nokia5110_Init>:

void Nokia5110_Init(){
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0

  Nokia5110_GPIO_Init();
 80049d2:	f7ff fde7 	bl	80045a4 <Nokia5110_GPIO_Init>

  /* Send reset signal. */

  Nokia5110_SysTick_delay_ms(150);
 80049d6:	2096      	movs	r0, #150	; 0x96
 80049d8:	f7ff fdba 	bl	8004550 <Nokia5110_SysTick_delay_ms>
  GPIOB->ODR &= ~( 1 << 2 );
 80049dc:	4b23      	ldr	r3, [pc, #140]	; (8004a6c <Nokia5110_Init+0xa0>)
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	4a22      	ldr	r2, [pc, #136]	; (8004a6c <Nokia5110_Init+0xa0>)
 80049e2:	f023 0304 	bic.w	r3, r3, #4
 80049e6:	6153      	str	r3, [r2, #20]
  Nokia5110_SysTick_delay_ms(200);
 80049e8:	20c8      	movs	r0, #200	; 0xc8
 80049ea:	f7ff fdb1 	bl	8004550 <Nokia5110_SysTick_delay_ms>
  GPIOB->ODR |= ( 1 << 2 );
 80049ee:	4b1f      	ldr	r3, [pc, #124]	; (8004a6c <Nokia5110_Init+0xa0>)
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	4a1e      	ldr	r2, [pc, #120]	; (8004a6c <Nokia5110_Init+0xa0>)
 80049f4:	f043 0304 	orr.w	r3, r3, #4
 80049f8:	6153      	str	r3, [r2, #20]
  Nokia5110_SysTick_delay_ms(200);
 80049fa:	20c8      	movs	r0, #200	; 0xc8
 80049fc:	f7ff fda8 	bl	8004550 <Nokia5110_SysTick_delay_ms>

  Nokia5110_SPI_Init();
 8004a00:	f7ff fe3e 	bl	8004680 <Nokia5110_SPI_Init>


  for(int i = 0 ; i < 15; i++){
 8004a04:	2300      	movs	r3, #0
 8004a06:	607b      	str	r3, [r7, #4]
 8004a08:	e006      	b.n	8004a18 <Nokia5110_Init+0x4c>
    Nokia5110_writeByte(0x00,0);
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f7ff ff31 	bl	8004874 <Nokia5110_writeByte>
  for(int i = 0 ; i < 15; i++){
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3301      	adds	r3, #1
 8004a16:	607b      	str	r3, [r7, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b0e      	cmp	r3, #14
 8004a1c:	ddf5      	ble.n	8004a0a <Nokia5110_Init+0x3e>
  }

  Nokia5110_writeByte(0x21,0);
 8004a1e:	2100      	movs	r1, #0
 8004a20:	2021      	movs	r0, #33	; 0x21
 8004a22:	f7ff ff27 	bl	8004874 <Nokia5110_writeByte>
  Nokia5110_writeByte(0xB5,0);
 8004a26:	2100      	movs	r1, #0
 8004a28:	20b5      	movs	r0, #181	; 0xb5
 8004a2a:	f7ff ff23 	bl	8004874 <Nokia5110_writeByte>
  Nokia5110_writeByte(0x04,0);
 8004a2e:	2100      	movs	r1, #0
 8004a30:	2004      	movs	r0, #4
 8004a32:	f7ff ff1f 	bl	8004874 <Nokia5110_writeByte>
  Nokia5110_writeByte(0x14,0);
 8004a36:	2100      	movs	r1, #0
 8004a38:	2014      	movs	r0, #20
 8004a3a:	f7ff ff1b 	bl	8004874 <Nokia5110_writeByte>
  Nokia5110_writeByte(0x20,0);
 8004a3e:	2100      	movs	r1, #0
 8004a40:	2020      	movs	r0, #32
 8004a42:	f7ff ff17 	bl	8004874 <Nokia5110_writeByte>
  Nokia5110_writeByte(0x0C,0);
 8004a46:	2100      	movs	r1, #0
 8004a48:	200c      	movs	r0, #12
 8004a4a:	f7ff ff13 	bl	8004874 <Nokia5110_writeByte>

  Nokia5110_SysTick_delay_ms(200);
 8004a4e:	20c8      	movs	r0, #200	; 0xc8
 8004a50:	f7ff fd7e 	bl	8004550 <Nokia5110_SysTick_delay_ms>

  Nokia5110.x_pos = 0;
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <Nokia5110_Init+0xa4>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  Nokia5110.y_pos = 0;
 8004a5c:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <Nokia5110_Init+0xa4>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
}
 8004a64:	bf00      	nop
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40020400 	.word	0x40020400
 8004a70:	20000154 	.word	0x20000154

08004a74 <Nokia5110_printASCII>:
   * for bit-wise addressing along y-axis. */

  Nokia5110_writeByte(0x40 + (y_position%48), 0 );
}

void Nokia5110_printASCII(char character){
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	71fb      	strb	r3, [r7, #7]

  uint8_t buffer[6];

  buffer[5] = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	747b      	strb	r3, [r7, #17]

  CBM_ascii5x8( (uint8_t)character, buffer );
 8004a82:	f107 020c 	add.w	r2, r7, #12
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	4611      	mov	r1, r2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fe96 	bl	80057bc <CBM_ascii5x8>

  if( !(Nokia5110.y_pos%8) ){
 8004a90:	4b4a      	ldr	r3, [pc, #296]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004a92:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d166      	bne.n	8004b6e <Nokia5110_printASCII+0xfa>

  Nokia5110.byte[ Nokia5110.x_pos + 0 + 84 * (Nokia5110.y_pos>>3) ] = buffer[0];
 8004aa0:	4b46      	ldr	r3, [pc, #280]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004aa2:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	4b44      	ldr	r3, [pc, #272]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004aaa:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8004aae:	08db      	lsrs	r3, r3, #3
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	2354      	movs	r3, #84	; 0x54
 8004ab6:	fb03 f301 	mul.w	r3, r3, r1
 8004aba:	4413      	add	r3, r2
 8004abc:	7b39      	ldrb	r1, [r7, #12]
 8004abe:	4a3f      	ldr	r2, [pc, #252]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004ac0:	54d1      	strb	r1, [r2, r3]
  Nokia5110.byte[ Nokia5110.x_pos + 1 + 84 * (Nokia5110.y_pos>>3) ] = buffer[1];
 8004ac2:	4b3e      	ldr	r3, [pc, #248]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004ac4:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	4b3c      	ldr	r3, [pc, #240]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004acc:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8004ad0:	08db      	lsrs	r3, r3, #3
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	2354      	movs	r3, #84	; 0x54
 8004ad8:	fb03 f301 	mul.w	r3, r3, r1
 8004adc:	4413      	add	r3, r2
 8004ade:	7b79      	ldrb	r1, [r7, #13]
 8004ae0:	4a36      	ldr	r2, [pc, #216]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004ae2:	54d1      	strb	r1, [r2, r3]
  Nokia5110.byte[ Nokia5110.x_pos + 2 + 84 * (Nokia5110.y_pos>>3) ] = buffer[2];
 8004ae4:	4b35      	ldr	r3, [pc, #212]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004ae6:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8004aea:	1c9a      	adds	r2, r3, #2
 8004aec:	4b33      	ldr	r3, [pc, #204]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004aee:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8004af2:	08db      	lsrs	r3, r3, #3
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	4619      	mov	r1, r3
 8004af8:	2354      	movs	r3, #84	; 0x54
 8004afa:	fb03 f301 	mul.w	r3, r3, r1
 8004afe:	4413      	add	r3, r2
 8004b00:	7bb9      	ldrb	r1, [r7, #14]
 8004b02:	4a2e      	ldr	r2, [pc, #184]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004b04:	54d1      	strb	r1, [r2, r3]
  Nokia5110.byte[ Nokia5110.x_pos + 3 + 84 * (Nokia5110.y_pos>>3) ] = buffer[3];
 8004b06:	4b2d      	ldr	r3, [pc, #180]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004b08:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8004b0c:	1cda      	adds	r2, r3, #3
 8004b0e:	4b2b      	ldr	r3, [pc, #172]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004b10:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8004b14:	08db      	lsrs	r3, r3, #3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	4619      	mov	r1, r3
 8004b1a:	2354      	movs	r3, #84	; 0x54
 8004b1c:	fb03 f301 	mul.w	r3, r3, r1
 8004b20:	4413      	add	r3, r2
 8004b22:	7bf9      	ldrb	r1, [r7, #15]
 8004b24:	4a25      	ldr	r2, [pc, #148]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004b26:	54d1      	strb	r1, [r2, r3]
  Nokia5110.byte[ Nokia5110.x_pos + 4 + 84 * (Nokia5110.y_pos>>3) ] = buffer[4];
 8004b28:	4b24      	ldr	r3, [pc, #144]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004b2a:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8004b2e:	1d1a      	adds	r2, r3, #4
 8004b30:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004b32:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8004b36:	08db      	lsrs	r3, r3, #3
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	2354      	movs	r3, #84	; 0x54
 8004b3e:	fb03 f301 	mul.w	r3, r3, r1
 8004b42:	4413      	add	r3, r2
 8004b44:	7c39      	ldrb	r1, [r7, #16]
 8004b46:	4a1d      	ldr	r2, [pc, #116]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004b48:	54d1      	strb	r1, [r2, r3]
  Nokia5110.byte[ Nokia5110.x_pos + 5 + 84 * (Nokia5110.y_pos>>3) ] = buffer[5];
 8004b4a:	4b1c      	ldr	r3, [pc, #112]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004b4c:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8004b50:	1d5a      	adds	r2, r3, #5
 8004b52:	4b1a      	ldr	r3, [pc, #104]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004b54:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8004b58:	08db      	lsrs	r3, r3, #3
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	2354      	movs	r3, #84	; 0x54
 8004b60:	fb03 f301 	mul.w	r3, r3, r1
 8004b64:	4413      	add	r3, r2
 8004b66:	7c79      	ldrb	r1, [r7, #17]
 8004b68:	4a14      	ldr	r2, [pc, #80]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004b6a:	54d1      	strb	r1, [r2, r3]
 8004b6c:	e102      	b.n	8004d74 <Nokia5110_printASCII+0x300>

  }
  else{

  uint8_t Pos = (Nokia5110.y_pos%8);
 8004b6e:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <Nokia5110_printASCII+0x148>)
 8004b70:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	75bb      	strb	r3, [r7, #22]
  uint8_t counter = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	75fb      	strb	r3, [r7, #23]
  uint8_t mskH = ( ( (0xFF & (( 1 << (8-Pos) ) - 1) ) ) << Pos );
 8004b7e:	7dbb      	ldrb	r3, [r7, #22]
 8004b80:	f1c3 0308 	rsb	r3, r3, #8
 8004b84:	2201      	movs	r2, #1
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	7dbb      	ldrb	r3, [r7, #22]
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	757b      	strb	r3, [r7, #21]
  uint8_t mskL = (( 0xFF >> (8-Pos) ) & (( 1 << Pos ) - 1));
 8004b96:	7dbb      	ldrb	r3, [r7, #22]
 8004b98:	f1c3 0308 	rsb	r3, r3, #8
 8004b9c:	22ff      	movs	r2, #255	; 0xff
 8004b9e:	fa42 f303 	asr.w	r3, r2, r3
 8004ba2:	b25a      	sxtb	r2, r3
 8004ba4:	7dbb      	ldrb	r3, [r7, #22]
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	b25b      	sxtb	r3, r3
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	b25b      	sxtb	r3, r3
 8004bb8:	753b      	strb	r3, [r7, #20]

  while(counter<6){
 8004bba:	e0d7      	b.n	8004d6c <Nokia5110_printASCII+0x2f8>
 8004bbc:	20000154 	.word	0x20000154

	Nokia5110.byte[ (Nokia5110.x_pos + counter) + ( 84 * ((Nokia5110.y_pos>>3) + 0) ) ] &= ~mskH;
 8004bc0:	4b83      	ldr	r3, [pc, #524]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004bc2:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
 8004bca:	441a      	add	r2, r3
 8004bcc:	4b80      	ldr	r3, [pc, #512]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004bce:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8004bd2:	08db      	lsrs	r3, r3, #3
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	2354      	movs	r3, #84	; 0x54
 8004bda:	fb03 f301 	mul.w	r3, r3, r1
 8004bde:	4413      	add	r3, r2
 8004be0:	4a7b      	ldr	r2, [pc, #492]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004be2:	5cd3      	ldrb	r3, [r2, r3]
 8004be4:	b25a      	sxtb	r2, r3
 8004be6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004bea:	43db      	mvns	r3, r3
 8004bec:	b25b      	sxtb	r3, r3
 8004bee:	4013      	ands	r3, r2
 8004bf0:	b259      	sxtb	r1, r3
 8004bf2:	4b77      	ldr	r3, [pc, #476]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004bf4:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
 8004bfc:	441a      	add	r2, r3
 8004bfe:	4b74      	ldr	r3, [pc, #464]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004c00:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8004c04:	08db      	lsrs	r3, r3, #3
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	4618      	mov	r0, r3
 8004c0a:	2354      	movs	r3, #84	; 0x54
 8004c0c:	fb03 f300 	mul.w	r3, r3, r0
 8004c10:	4413      	add	r3, r2
 8004c12:	b2c9      	uxtb	r1, r1
 8004c14:	4a6e      	ldr	r2, [pc, #440]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004c16:	54d1      	strb	r1, [r2, r3]
    Nokia5110.byte[ (Nokia5110.x_pos + counter) + ( 84 * ((Nokia5110.y_pos>>3) + 0) ) ]
 8004c18:	4b6d      	ldr	r3, [pc, #436]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004c1a:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
				  |= ( ( (buffer[counter] & (( 1 << (8-Pos) ) - 1) ) ) << Pos );
 8004c1e:	461a      	mov	r2, r3
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
 8004c22:	441a      	add	r2, r3
    Nokia5110.byte[ (Nokia5110.x_pos + counter) + ( 84 * ((Nokia5110.y_pos>>3) + 0) ) ]
 8004c24:	4b6a      	ldr	r3, [pc, #424]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004c26:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
				  |= ( ( (buffer[counter] & (( 1 << (8-Pos) ) - 1) ) ) << Pos );
 8004c2a:	08db      	lsrs	r3, r3, #3
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	4619      	mov	r1, r3
 8004c30:	2354      	movs	r3, #84	; 0x54
 8004c32:	fb03 f301 	mul.w	r3, r3, r1
 8004c36:	4413      	add	r3, r2
 8004c38:	4a65      	ldr	r2, [pc, #404]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004c3a:	5cd3      	ldrb	r3, [r2, r3]
 8004c3c:	b25a      	sxtb	r2, r3
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	f107 0118 	add.w	r1, r7, #24
 8004c44:	440b      	add	r3, r1
 8004c46:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	7dbb      	ldrb	r3, [r7, #22]
 8004c4e:	f1c3 0308 	rsb	r3, r3, #8
 8004c52:	2101      	movs	r1, #1
 8004c54:	fa01 f303 	lsl.w	r3, r1, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	ea00 0103 	and.w	r1, r0, r3
 8004c5e:	7dbb      	ldrb	r3, [r7, #22]
 8004c60:	fa01 f303 	lsl.w	r3, r1, r3
 8004c64:	b25b      	sxtb	r3, r3
 8004c66:	4313      	orrs	r3, r2
 8004c68:	b259      	sxtb	r1, r3
    Nokia5110.byte[ (Nokia5110.x_pos + counter) + ( 84 * ((Nokia5110.y_pos>>3) + 0) ) ]
 8004c6a:	4b59      	ldr	r3, [pc, #356]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004c6c:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
				  |= ( ( (buffer[counter] & (( 1 << (8-Pos) ) - 1) ) ) << Pos );
 8004c70:	461a      	mov	r2, r3
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
 8004c74:	441a      	add	r2, r3
    Nokia5110.byte[ (Nokia5110.x_pos + counter) + ( 84 * ((Nokia5110.y_pos>>3) + 0) ) ]
 8004c76:	4b56      	ldr	r3, [pc, #344]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004c78:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
				  |= ( ( (buffer[counter] & (( 1 << (8-Pos) ) - 1) ) ) << Pos );
 8004c7c:	08db      	lsrs	r3, r3, #3
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	4618      	mov	r0, r3
 8004c82:	2354      	movs	r3, #84	; 0x54
 8004c84:	fb03 f300 	mul.w	r3, r3, r0
 8004c88:	4413      	add	r3, r2
 8004c8a:	b2c9      	uxtb	r1, r1
 8004c8c:	4a50      	ldr	r2, [pc, #320]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004c8e:	54d1      	strb	r1, [r2, r3]
    Nokia5110.byte[ (Nokia5110.x_pos + counter) + ( 84 * ((Nokia5110.y_pos>>3) + 1) ) ] &= ~mskL;
 8004c90:	4b4f      	ldr	r3, [pc, #316]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004c92:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8004c96:	461a      	mov	r2, r3
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
 8004c9a:	441a      	add	r2, r3
 8004c9c:	4b4c      	ldr	r3, [pc, #304]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004c9e:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8004ca2:	08db      	lsrs	r3, r3, #3
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	2154      	movs	r1, #84	; 0x54
 8004caa:	fb01 f303 	mul.w	r3, r1, r3
 8004cae:	4413      	add	r3, r2
 8004cb0:	4a47      	ldr	r2, [pc, #284]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004cb2:	5cd3      	ldrb	r3, [r2, r3]
 8004cb4:	b25a      	sxtb	r2, r3
 8004cb6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	b25b      	sxtb	r3, r3
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	b258      	sxtb	r0, r3
 8004cc2:	4b43      	ldr	r3, [pc, #268]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004cc4:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8004cc8:	461a      	mov	r2, r3
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
 8004ccc:	441a      	add	r2, r3
 8004cce:	4b40      	ldr	r3, [pc, #256]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004cd0:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8004cd4:	08db      	lsrs	r3, r3, #3
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	3301      	adds	r3, #1
 8004cda:	2154      	movs	r1, #84	; 0x54
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	b2c1      	uxtb	r1, r0
 8004ce4:	4a3a      	ldr	r2, [pc, #232]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004ce6:	54d1      	strb	r1, [r2, r3]
    Nokia5110.byte[ (Nokia5110.x_pos + counter) + ( 84 * ((Nokia5110.y_pos>>3) + 1) ) ]
 8004ce8:	4b39      	ldr	r3, [pc, #228]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004cea:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
  				  |= (( buffer[counter] >> (8-Pos) ) & (( 1 << Pos ) - 1));
 8004cee:	461a      	mov	r2, r3
 8004cf0:	7dfb      	ldrb	r3, [r7, #23]
 8004cf2:	441a      	add	r2, r3
    Nokia5110.byte[ (Nokia5110.x_pos + counter) + ( 84 * ((Nokia5110.y_pos>>3) + 1) ) ]
 8004cf4:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004cf6:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
  				  |= (( buffer[counter] >> (8-Pos) ) & (( 1 << Pos ) - 1));
 8004cfa:	08db      	lsrs	r3, r3, #3
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	3301      	adds	r3, #1
 8004d00:	2154      	movs	r1, #84	; 0x54
 8004d02:	fb01 f303 	mul.w	r3, r1, r3
 8004d06:	4413      	add	r3, r2
 8004d08:	4a31      	ldr	r2, [pc, #196]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004d0a:	5cd3      	ldrb	r3, [r2, r3]
 8004d0c:	b25a      	sxtb	r2, r3
 8004d0e:	7dfb      	ldrb	r3, [r7, #23]
 8004d10:	f107 0118 	add.w	r1, r7, #24
 8004d14:	440b      	add	r3, r1
 8004d16:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	7dbb      	ldrb	r3, [r7, #22]
 8004d1e:	f1c3 0308 	rsb	r3, r3, #8
 8004d22:	fa41 f303 	asr.w	r3, r1, r3
 8004d26:	b259      	sxtb	r1, r3
 8004d28:	7dbb      	ldrb	r3, [r7, #22]
 8004d2a:	2001      	movs	r0, #1
 8004d2c:	fa00 f303 	lsl.w	r3, r0, r3
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	b25b      	sxtb	r3, r3
 8004d38:	400b      	ands	r3, r1
 8004d3a:	b25b      	sxtb	r3, r3
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	b258      	sxtb	r0, r3
    Nokia5110.byte[ (Nokia5110.x_pos + counter) + ( 84 * ((Nokia5110.y_pos>>3) + 1) ) ]
 8004d40:	4b23      	ldr	r3, [pc, #140]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004d42:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
  				  |= (( buffer[counter] >> (8-Pos) ) & (( 1 << Pos ) - 1));
 8004d46:	461a      	mov	r2, r3
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	441a      	add	r2, r3
    Nokia5110.byte[ (Nokia5110.x_pos + counter) + ( 84 * ((Nokia5110.y_pos>>3) + 1) ) ]
 8004d4c:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004d4e:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
  				  |= (( buffer[counter] >> (8-Pos) ) & (( 1 << Pos ) - 1));
 8004d52:	08db      	lsrs	r3, r3, #3
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	3301      	adds	r3, #1
 8004d58:	2154      	movs	r1, #84	; 0x54
 8004d5a:	fb01 f303 	mul.w	r3, r1, r3
 8004d5e:	4413      	add	r3, r2
 8004d60:	b2c1      	uxtb	r1, r0
 8004d62:	4a1b      	ldr	r2, [pc, #108]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004d64:	54d1      	strb	r1, [r2, r3]
    counter++;
 8004d66:	7dfb      	ldrb	r3, [r7, #23]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	75fb      	strb	r3, [r7, #23]
  while(counter<6){
 8004d6c:	7dfb      	ldrb	r3, [r7, #23]
 8004d6e:	2b05      	cmp	r3, #5
 8004d70:	f67f af26 	bls.w	8004bc0 <Nokia5110_printASCII+0x14c>
  }

  }

  Nokia5110.x_pos += 6;
 8004d74:	4b16      	ldr	r3, [pc, #88]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004d76:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8004d7a:	3306      	adds	r3, #6
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004d80:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

  if( Nokia5110.x_pos >= 84 ){
 8004d84:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004d86:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8004d8a:	2b53      	cmp	r3, #83	; 0x53
 8004d8c:	d90b      	bls.n	8004da6 <Nokia5110_printASCII+0x332>
    Nokia5110.x_pos = 0;
 8004d8e:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	Nokia5110.y_pos++;
 8004d96:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004d98:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004da2:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
  }

  Nokia5110.y_pos = (Nokia5110.y_pos % 48);
 8004da6:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004da8:	f893 21f9 	ldrb.w	r2, [r3, #505]	; 0x1f9
 8004dac:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <Nokia5110_printASCII+0x360>)
 8004dae:	fba3 1302 	umull	r1, r3, r3, r2
 8004db2:	0959      	lsrs	r1, r3, #5
 8004db4:	460b      	mov	r3, r1
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	440b      	add	r3, r1
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <Nokia5110_printASCII+0x35c>)
 8004dc2:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
}
 8004dc6:	bf00      	nop
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000154 	.word	0x20000154
 8004dd4:	aaaaaaab 	.word	0xaaaaaaab

08004dd8 <Nokia5110_printString>:

void Nokia5110_printString(char* str){
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

  while(*str != '\0'){
 8004de0:	e007      	b.n	8004df2 <Nokia5110_printString+0x1a>
    Nokia5110_printASCII((char)(*str));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fe44 	bl	8004a74 <Nokia5110_printASCII>
    str++;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3301      	adds	r3, #1
 8004df0:	607b      	str	r3, [r7, #4]
  while(*str != '\0'){
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f3      	bne.n	8004de2 <Nokia5110_printString+0xa>
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <Nokia5110_printU8>:

static uint32_t U8_previous = 0;

void Nokia5110_printU8(uint8_t n)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	71fb      	strb	r3, [r7, #7]
  if(n == 0){
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d122      	bne.n	8004e5a <Nokia5110_printU8+0x56>

	uint8_t counter = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	75fb      	strb	r3, [r7, #23]

	while(U8_previous){
 8004e18:	e00a      	b.n	8004e30 <Nokia5110_printU8+0x2c>
      counter++;
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	75fb      	strb	r3, [r7, #23]
      U8_previous /= 10;
 8004e20:	4b48      	ldr	r3, [pc, #288]	; (8004f44 <Nokia5110_printU8+0x140>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a48      	ldr	r2, [pc, #288]	; (8004f48 <Nokia5110_printU8+0x144>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	08db      	lsrs	r3, r3, #3
 8004e2c:	4a45      	ldr	r2, [pc, #276]	; (8004f44 <Nokia5110_printU8+0x140>)
 8004e2e:	6013      	str	r3, [r2, #0]
	while(U8_previous){
 8004e30:	4b44      	ldr	r3, [pc, #272]	; (8004f44 <Nokia5110_printU8+0x140>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1f0      	bne.n	8004e1a <Nokia5110_printU8+0x16>
	}

    Nokia5110_printASCII('0');
 8004e38:	2030      	movs	r0, #48	; 0x30
 8004e3a:	f7ff fe1b 	bl	8004a74 <Nokia5110_printASCII>

    while(counter){
 8004e3e:	e005      	b.n	8004e4c <Nokia5110_printU8+0x48>
      Nokia5110_printASCII(' ');
 8004e40:	2020      	movs	r0, #32
 8004e42:	f7ff fe17 	bl	8004a74 <Nokia5110_printASCII>
      counter--;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	75fb      	strb	r3, [r7, #23]
    while(counter){
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f6      	bne.n	8004e40 <Nokia5110_printU8+0x3c>
    }

    U8_previous = 0;
 8004e52:	4b3c      	ldr	r3, [pc, #240]	; (8004f44 <Nokia5110_printU8+0x140>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]

    return;
 8004e58:	e071      	b.n	8004f3e <Nokia5110_printU8+0x13a>
  }

  uint32_t tempU8 = n;
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	613b      	str	r3, [r7, #16]
  uint8_t buffer[4];
  uint8_t opBuffer[4];

  U8_previous = n;
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	4a38      	ldr	r2, [pc, #224]	; (8004f44 <Nokia5110_printU8+0x140>)
 8004e62:	6013      	str	r3, [r2, #0]

  buffer[2] = (uint8_t)'0' + (uint8_t)(tempU8 % 10);
 8004e64:	6939      	ldr	r1, [r7, #16]
 8004e66:	4b38      	ldr	r3, [pc, #224]	; (8004f48 <Nokia5110_printU8+0x144>)
 8004e68:	fba3 2301 	umull	r2, r3, r3, r1
 8004e6c:	08da      	lsrs	r2, r3, #3
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	1aca      	subs	r2, r1, r3
 8004e78:	b2d3      	uxtb	r3, r2
 8004e7a:	3330      	adds	r3, #48	; 0x30
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	73bb      	strb	r3, [r7, #14]
  tempU8 /= 10;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4a31      	ldr	r2, [pc, #196]	; (8004f48 <Nokia5110_printU8+0x144>)
 8004e84:	fba2 2303 	umull	r2, r3, r2, r3
 8004e88:	08db      	lsrs	r3, r3, #3
 8004e8a:	613b      	str	r3, [r7, #16]
  buffer[1] = (uint8_t)'0' + (uint8_t)(tempU8 % 10);
 8004e8c:	6939      	ldr	r1, [r7, #16]
 8004e8e:	4b2e      	ldr	r3, [pc, #184]	; (8004f48 <Nokia5110_printU8+0x144>)
 8004e90:	fba3 2301 	umull	r2, r3, r3, r1
 8004e94:	08da      	lsrs	r2, r3, #3
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	1aca      	subs	r2, r1, r3
 8004ea0:	b2d3      	uxtb	r3, r2
 8004ea2:	3330      	adds	r3, #48	; 0x30
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	737b      	strb	r3, [r7, #13]
  tempU8 /= 10;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	4a27      	ldr	r2, [pc, #156]	; (8004f48 <Nokia5110_printU8+0x144>)
 8004eac:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb0:	08db      	lsrs	r3, r3, #3
 8004eb2:	613b      	str	r3, [r7, #16]
  buffer[0] = (uint8_t)'0' + (uint8_t)(tempU8 % 10);
 8004eb4:	6939      	ldr	r1, [r7, #16]
 8004eb6:	4b24      	ldr	r3, [pc, #144]	; (8004f48 <Nokia5110_printU8+0x144>)
 8004eb8:	fba3 2301 	umull	r2, r3, r3, r1
 8004ebc:	08da      	lsrs	r2, r3, #3
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	1aca      	subs	r2, r1, r3
 8004ec8:	b2d3      	uxtb	r3, r2
 8004eca:	3330      	adds	r3, #48	; 0x30
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	733b      	strb	r3, [r7, #12]

  buffer[3] = '\0';
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	73fb      	strb	r3, [r7, #15]

  uint8_t startIndex = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	75bb      	strb	r3, [r7, #22]

  while( buffer[startIndex] == (uint8_t)'0' ){
 8004ed8:	e002      	b.n	8004ee0 <Nokia5110_printU8+0xdc>
    startIndex++;
 8004eda:	7dbb      	ldrb	r3, [r7, #22]
 8004edc:	3301      	adds	r3, #1
 8004ede:	75bb      	strb	r3, [r7, #22]
  while( buffer[startIndex] == (uint8_t)'0' ){
 8004ee0:	7dbb      	ldrb	r3, [r7, #22]
 8004ee2:	f107 0218 	add.w	r2, r7, #24
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004eec:	2b30      	cmp	r3, #48	; 0x30
 8004eee:	d0f4      	beq.n	8004eda <Nokia5110_printU8+0xd6>
  }

  uint8_t counter = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	757b      	strb	r3, [r7, #21]

  while( startIndex != 4 ){
 8004ef4:	e011      	b.n	8004f1a <Nokia5110_printU8+0x116>
	opBuffer[counter] = buffer[startIndex];
 8004ef6:	7dba      	ldrb	r2, [r7, #22]
 8004ef8:	7d7b      	ldrb	r3, [r7, #21]
 8004efa:	f107 0118 	add.w	r1, r7, #24
 8004efe:	440a      	add	r2, r1
 8004f00:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004f04:	f107 0118 	add.w	r1, r7, #24
 8004f08:	440b      	add	r3, r1
 8004f0a:	f803 2c10 	strb.w	r2, [r3, #-16]
	counter++;
 8004f0e:	7d7b      	ldrb	r3, [r7, #21]
 8004f10:	3301      	adds	r3, #1
 8004f12:	757b      	strb	r3, [r7, #21]
    startIndex++;
 8004f14:	7dbb      	ldrb	r3, [r7, #22]
 8004f16:	3301      	adds	r3, #1
 8004f18:	75bb      	strb	r3, [r7, #22]
  while( startIndex != 4 ){
 8004f1a:	7dbb      	ldrb	r3, [r7, #22]
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d1ea      	bne.n	8004ef6 <Nokia5110_printU8+0xf2>
  }

  opBuffer[counter] = (uint8_t)'\0';
 8004f20:	7d7b      	ldrb	r3, [r7, #21]
 8004f22:	f107 0218 	add.w	r2, r7, #24
 8004f26:	4413      	add	r3, r2
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f803 2c10 	strb.w	r2, [r3, #-16]

  Nokia5110_printString((char*)opBuffer);
 8004f2e:	f107 0308 	add.w	r3, r7, #8
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff ff50 	bl	8004dd8 <Nokia5110_printString>
  Nokia5110_printASCII(' ');
 8004f38:	2020      	movs	r0, #32
 8004f3a:	f7ff fd9b 	bl	8004a74 <Nokia5110_printASCII>
}
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000114 	.word	0x20000114
 8004f48:	cccccccd 	.word	0xcccccccd

08004f4c <Nokia5110_printU16>:

static uint16_t U16_previous = 0;

void Nokia5110_printU16(uint16_t n)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	4603      	mov	r3, r0
 8004f54:	80fb      	strh	r3, [r7, #6]

  if(n == 0){
 8004f56:	88fb      	ldrh	r3, [r7, #6]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d123      	bne.n	8004fa4 <Nokia5110_printU16+0x58>

    uint8_t counter = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	77fb      	strb	r3, [r7, #31]

    while(U16_previous){
 8004f60:	e00b      	b.n	8004f7a <Nokia5110_printU16+0x2e>
      counter++;
 8004f62:	7ffb      	ldrb	r3, [r7, #31]
 8004f64:	3301      	adds	r3, #1
 8004f66:	77fb      	strb	r3, [r7, #31]
	  U16_previous /= 10;
 8004f68:	4b5b      	ldr	r3, [pc, #364]	; (80050d8 <Nokia5110_printU16+0x18c>)
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	4a5b      	ldr	r2, [pc, #364]	; (80050dc <Nokia5110_printU16+0x190>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	08db      	lsrs	r3, r3, #3
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	4b58      	ldr	r3, [pc, #352]	; (80050d8 <Nokia5110_printU16+0x18c>)
 8004f78:	801a      	strh	r2, [r3, #0]
    while(U16_previous){
 8004f7a:	4b57      	ldr	r3, [pc, #348]	; (80050d8 <Nokia5110_printU16+0x18c>)
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1ef      	bne.n	8004f62 <Nokia5110_printU16+0x16>
	}

	Nokia5110_printASCII('0');
 8004f82:	2030      	movs	r0, #48	; 0x30
 8004f84:	f7ff fd76 	bl	8004a74 <Nokia5110_printASCII>

	while(counter){
 8004f88:	e005      	b.n	8004f96 <Nokia5110_printU16+0x4a>
      Nokia5110_printASCII(' ');
 8004f8a:	2020      	movs	r0, #32
 8004f8c:	f7ff fd72 	bl	8004a74 <Nokia5110_printASCII>
	  counter--;
 8004f90:	7ffb      	ldrb	r3, [r7, #31]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	77fb      	strb	r3, [r7, #31]
	while(counter){
 8004f96:	7ffb      	ldrb	r3, [r7, #31]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1f6      	bne.n	8004f8a <Nokia5110_printU16+0x3e>
	}

	U16_previous = 0;
 8004f9c:	4b4e      	ldr	r3, [pc, #312]	; (80050d8 <Nokia5110_printU16+0x18c>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	801a      	strh	r2, [r3, #0]

	return;
 8004fa2:	e096      	b.n	80050d2 <Nokia5110_printU16+0x186>
  }

  uint32_t tempU16 = n;
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	61bb      	str	r3, [r7, #24]
  uint8_t buffer[6];
  uint8_t opBuffer[6];

  buffer[4] = (uint8_t)'0' + (uint8_t)(tempU16 % 10);
 8004fa8:	69b9      	ldr	r1, [r7, #24]
 8004faa:	4b4c      	ldr	r3, [pc, #304]	; (80050dc <Nokia5110_printU16+0x190>)
 8004fac:	fba3 2301 	umull	r2, r3, r3, r1
 8004fb0:	08da      	lsrs	r2, r3, #3
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	1aca      	subs	r2, r1, r3
 8004fbc:	b2d3      	uxtb	r3, r2
 8004fbe:	3330      	adds	r3, #48	; 0x30
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	753b      	strb	r3, [r7, #20]
  tempU16 /= 10;
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	4a45      	ldr	r2, [pc, #276]	; (80050dc <Nokia5110_printU16+0x190>)
 8004fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fcc:	08db      	lsrs	r3, r3, #3
 8004fce:	61bb      	str	r3, [r7, #24]
  buffer[3] = (uint8_t)'0' + (uint8_t)(tempU16 % 10);
 8004fd0:	69b9      	ldr	r1, [r7, #24]
 8004fd2:	4b42      	ldr	r3, [pc, #264]	; (80050dc <Nokia5110_printU16+0x190>)
 8004fd4:	fba3 2301 	umull	r2, r3, r3, r1
 8004fd8:	08da      	lsrs	r2, r3, #3
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	1aca      	subs	r2, r1, r3
 8004fe4:	b2d3      	uxtb	r3, r2
 8004fe6:	3330      	adds	r3, #48	; 0x30
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	74fb      	strb	r3, [r7, #19]
  tempU16 /= 10;
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	4a3b      	ldr	r2, [pc, #236]	; (80050dc <Nokia5110_printU16+0x190>)
 8004ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff4:	08db      	lsrs	r3, r3, #3
 8004ff6:	61bb      	str	r3, [r7, #24]
  buffer[2] = (uint8_t)'0' + (uint8_t)(tempU16 % 10);
 8004ff8:	69b9      	ldr	r1, [r7, #24]
 8004ffa:	4b38      	ldr	r3, [pc, #224]	; (80050dc <Nokia5110_printU16+0x190>)
 8004ffc:	fba3 2301 	umull	r2, r3, r3, r1
 8005000:	08da      	lsrs	r2, r3, #3
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	1aca      	subs	r2, r1, r3
 800500c:	b2d3      	uxtb	r3, r2
 800500e:	3330      	adds	r3, #48	; 0x30
 8005010:	b2db      	uxtb	r3, r3
 8005012:	74bb      	strb	r3, [r7, #18]
  tempU16 /= 10;
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	4a31      	ldr	r2, [pc, #196]	; (80050dc <Nokia5110_printU16+0x190>)
 8005018:	fba2 2303 	umull	r2, r3, r2, r3
 800501c:	08db      	lsrs	r3, r3, #3
 800501e:	61bb      	str	r3, [r7, #24]
  buffer[1] = (uint8_t)'0' + (uint8_t)(tempU16 % 10);
 8005020:	69b9      	ldr	r1, [r7, #24]
 8005022:	4b2e      	ldr	r3, [pc, #184]	; (80050dc <Nokia5110_printU16+0x190>)
 8005024:	fba3 2301 	umull	r2, r3, r3, r1
 8005028:	08da      	lsrs	r2, r3, #3
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	1aca      	subs	r2, r1, r3
 8005034:	b2d3      	uxtb	r3, r2
 8005036:	3330      	adds	r3, #48	; 0x30
 8005038:	b2db      	uxtb	r3, r3
 800503a:	747b      	strb	r3, [r7, #17]
  tempU16 /= 10;
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	4a27      	ldr	r2, [pc, #156]	; (80050dc <Nokia5110_printU16+0x190>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	08db      	lsrs	r3, r3, #3
 8005046:	61bb      	str	r3, [r7, #24]
  buffer[0] = (uint8_t)'0' + (uint8_t)(tempU16 % 10);
 8005048:	69b9      	ldr	r1, [r7, #24]
 800504a:	4b24      	ldr	r3, [pc, #144]	; (80050dc <Nokia5110_printU16+0x190>)
 800504c:	fba3 2301 	umull	r2, r3, r3, r1
 8005050:	08da      	lsrs	r2, r3, #3
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	1aca      	subs	r2, r1, r3
 800505c:	b2d3      	uxtb	r3, r2
 800505e:	3330      	adds	r3, #48	; 0x30
 8005060:	b2db      	uxtb	r3, r3
 8005062:	743b      	strb	r3, [r7, #16]

  buffer[5] = '\0';
 8005064:	2300      	movs	r3, #0
 8005066:	757b      	strb	r3, [r7, #21]

  uint8_t startIndex = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	77bb      	strb	r3, [r7, #30]

  while( buffer[startIndex] == (uint8_t)'0' ){
 800506c:	e002      	b.n	8005074 <Nokia5110_printU16+0x128>
    startIndex++;
 800506e:	7fbb      	ldrb	r3, [r7, #30]
 8005070:	3301      	adds	r3, #1
 8005072:	77bb      	strb	r3, [r7, #30]
  while( buffer[startIndex] == (uint8_t)'0' ){
 8005074:	7fbb      	ldrb	r3, [r7, #30]
 8005076:	f107 0220 	add.w	r2, r7, #32
 800507a:	4413      	add	r3, r2
 800507c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005080:	2b30      	cmp	r3, #48	; 0x30
 8005082:	d0f4      	beq.n	800506e <Nokia5110_printU16+0x122>
  }

  uint8_t counter = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	777b      	strb	r3, [r7, #29]

  while( startIndex != 6 ){
 8005088:	e011      	b.n	80050ae <Nokia5110_printU16+0x162>
	opBuffer[counter] = buffer[startIndex];
 800508a:	7fba      	ldrb	r2, [r7, #30]
 800508c:	7f7b      	ldrb	r3, [r7, #29]
 800508e:	f107 0120 	add.w	r1, r7, #32
 8005092:	440a      	add	r2, r1
 8005094:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8005098:	f107 0120 	add.w	r1, r7, #32
 800509c:	440b      	add	r3, r1
 800509e:	f803 2c18 	strb.w	r2, [r3, #-24]
	counter++;
 80050a2:	7f7b      	ldrb	r3, [r7, #29]
 80050a4:	3301      	adds	r3, #1
 80050a6:	777b      	strb	r3, [r7, #29]
    startIndex++;
 80050a8:	7fbb      	ldrb	r3, [r7, #30]
 80050aa:	3301      	adds	r3, #1
 80050ac:	77bb      	strb	r3, [r7, #30]
  while( startIndex != 6 ){
 80050ae:	7fbb      	ldrb	r3, [r7, #30]
 80050b0:	2b06      	cmp	r3, #6
 80050b2:	d1ea      	bne.n	800508a <Nokia5110_printU16+0x13e>
  }

  opBuffer[counter] = (uint8_t)'\0';
 80050b4:	7f7b      	ldrb	r3, [r7, #29]
 80050b6:	f107 0220 	add.w	r2, r7, #32
 80050ba:	4413      	add	r3, r2
 80050bc:	2200      	movs	r2, #0
 80050be:	f803 2c18 	strb.w	r2, [r3, #-24]

  Nokia5110_printString((char*)opBuffer);
 80050c2:	f107 0308 	add.w	r3, r7, #8
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fe86 	bl	8004dd8 <Nokia5110_printString>
  Nokia5110_printASCII(' ');
 80050cc:	2020      	movs	r0, #32
 80050ce:	f7ff fcd1 	bl	8004a74 <Nokia5110_printASCII>
}
 80050d2:	3720      	adds	r7, #32
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20000118 	.word	0x20000118
 80050dc:	cccccccd 	.word	0xcccccccd

080050e0 <Nokia5110_printU32>:

static uint32_t U32_previous = 0;

void Nokia5110_printU32(uint32_t n)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08a      	sub	sp, #40	; 0x28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

  if(n == 0){
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d128      	bne.n	8005140 <Nokia5110_printU32+0x60>

    uint8_t counter = 0;
 80050ee:	2300      	movs	r3, #0
 80050f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while(U32_previous){
 80050f4:	e00c      	b.n	8005110 <Nokia5110_printU32+0x30>
	  counter++;
 80050f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050fa:	3301      	adds	r3, #1
 80050fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  U32_previous /= 10;
 8005100:	4b95      	ldr	r3, [pc, #596]	; (8005358 <Nokia5110_printU32+0x278>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a95      	ldr	r2, [pc, #596]	; (800535c <Nokia5110_printU32+0x27c>)
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	08db      	lsrs	r3, r3, #3
 800510c:	4a92      	ldr	r2, [pc, #584]	; (8005358 <Nokia5110_printU32+0x278>)
 800510e:	6013      	str	r3, [r2, #0]
    while(U32_previous){
 8005110:	4b91      	ldr	r3, [pc, #580]	; (8005358 <Nokia5110_printU32+0x278>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1ee      	bne.n	80050f6 <Nokia5110_printU32+0x16>
    }

	Nokia5110_printASCII('0');
 8005118:	2030      	movs	r0, #48	; 0x30
 800511a:	f7ff fcab 	bl	8004a74 <Nokia5110_printASCII>

    while(counter){
 800511e:	e007      	b.n	8005130 <Nokia5110_printU32+0x50>
      Nokia5110_printASCII(' ');
 8005120:	2020      	movs	r0, #32
 8005122:	f7ff fca7 	bl	8004a74 <Nokia5110_printASCII>
      counter--;
 8005126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800512a:	3b01      	subs	r3, #1
 800512c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(counter){
 8005130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f3      	bne.n	8005120 <Nokia5110_printU32+0x40>
    }

    U32_previous = 0;
 8005138:	4b87      	ldr	r3, [pc, #540]	; (8005358 <Nokia5110_printU32+0x278>)
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]

    return;
 800513e:	e107      	b.n	8005350 <Nokia5110_printU32+0x270>
  }

  uint32_t tempU32 = n;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	623b      	str	r3, [r7, #32]
  uint8_t buffer[11];
  uint8_t opBuffer[11];

  buffer[9] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 8005144:	6a39      	ldr	r1, [r7, #32]
 8005146:	4b85      	ldr	r3, [pc, #532]	; (800535c <Nokia5110_printU32+0x27c>)
 8005148:	fba3 2301 	umull	r2, r3, r3, r1
 800514c:	08da      	lsrs	r2, r3, #3
 800514e:	4613      	mov	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	1aca      	subs	r2, r1, r3
 8005158:	b2d3      	uxtb	r3, r2
 800515a:	3330      	adds	r3, #48	; 0x30
 800515c:	b2db      	uxtb	r3, r3
 800515e:	777b      	strb	r3, [r7, #29]
  tempU32 /= 10;
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	4a7e      	ldr	r2, [pc, #504]	; (800535c <Nokia5110_printU32+0x27c>)
 8005164:	fba2 2303 	umull	r2, r3, r2, r3
 8005168:	08db      	lsrs	r3, r3, #3
 800516a:	623b      	str	r3, [r7, #32]
  buffer[8] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 800516c:	6a39      	ldr	r1, [r7, #32]
 800516e:	4b7b      	ldr	r3, [pc, #492]	; (800535c <Nokia5110_printU32+0x27c>)
 8005170:	fba3 2301 	umull	r2, r3, r3, r1
 8005174:	08da      	lsrs	r2, r3, #3
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	1aca      	subs	r2, r1, r3
 8005180:	b2d3      	uxtb	r3, r2
 8005182:	3330      	adds	r3, #48	; 0x30
 8005184:	b2db      	uxtb	r3, r3
 8005186:	773b      	strb	r3, [r7, #28]
  tempU32 /= 10;
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	4a74      	ldr	r2, [pc, #464]	; (800535c <Nokia5110_printU32+0x27c>)
 800518c:	fba2 2303 	umull	r2, r3, r2, r3
 8005190:	08db      	lsrs	r3, r3, #3
 8005192:	623b      	str	r3, [r7, #32]
  buffer[7] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 8005194:	6a39      	ldr	r1, [r7, #32]
 8005196:	4b71      	ldr	r3, [pc, #452]	; (800535c <Nokia5110_printU32+0x27c>)
 8005198:	fba3 2301 	umull	r2, r3, r3, r1
 800519c:	08da      	lsrs	r2, r3, #3
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	1aca      	subs	r2, r1, r3
 80051a8:	b2d3      	uxtb	r3, r2
 80051aa:	3330      	adds	r3, #48	; 0x30
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	76fb      	strb	r3, [r7, #27]
  tempU32 /= 10;
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	4a6a      	ldr	r2, [pc, #424]	; (800535c <Nokia5110_printU32+0x27c>)
 80051b4:	fba2 2303 	umull	r2, r3, r2, r3
 80051b8:	08db      	lsrs	r3, r3, #3
 80051ba:	623b      	str	r3, [r7, #32]
  buffer[6] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 80051bc:	6a39      	ldr	r1, [r7, #32]
 80051be:	4b67      	ldr	r3, [pc, #412]	; (800535c <Nokia5110_printU32+0x27c>)
 80051c0:	fba3 2301 	umull	r2, r3, r3, r1
 80051c4:	08da      	lsrs	r2, r3, #3
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	1aca      	subs	r2, r1, r3
 80051d0:	b2d3      	uxtb	r3, r2
 80051d2:	3330      	adds	r3, #48	; 0x30
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	76bb      	strb	r3, [r7, #26]
  tempU32 /= 10;
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	4a60      	ldr	r2, [pc, #384]	; (800535c <Nokia5110_printU32+0x27c>)
 80051dc:	fba2 2303 	umull	r2, r3, r2, r3
 80051e0:	08db      	lsrs	r3, r3, #3
 80051e2:	623b      	str	r3, [r7, #32]
  buffer[5] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 80051e4:	6a39      	ldr	r1, [r7, #32]
 80051e6:	4b5d      	ldr	r3, [pc, #372]	; (800535c <Nokia5110_printU32+0x27c>)
 80051e8:	fba3 2301 	umull	r2, r3, r3, r1
 80051ec:	08da      	lsrs	r2, r3, #3
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	1aca      	subs	r2, r1, r3
 80051f8:	b2d3      	uxtb	r3, r2
 80051fa:	3330      	adds	r3, #48	; 0x30
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	767b      	strb	r3, [r7, #25]
  tempU32 /= 10;
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	4a56      	ldr	r2, [pc, #344]	; (800535c <Nokia5110_printU32+0x27c>)
 8005204:	fba2 2303 	umull	r2, r3, r2, r3
 8005208:	08db      	lsrs	r3, r3, #3
 800520a:	623b      	str	r3, [r7, #32]
  buffer[4] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 800520c:	6a39      	ldr	r1, [r7, #32]
 800520e:	4b53      	ldr	r3, [pc, #332]	; (800535c <Nokia5110_printU32+0x27c>)
 8005210:	fba3 2301 	umull	r2, r3, r3, r1
 8005214:	08da      	lsrs	r2, r3, #3
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	1aca      	subs	r2, r1, r3
 8005220:	b2d3      	uxtb	r3, r2
 8005222:	3330      	adds	r3, #48	; 0x30
 8005224:	b2db      	uxtb	r3, r3
 8005226:	763b      	strb	r3, [r7, #24]
  tempU32 /= 10;
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	4a4c      	ldr	r2, [pc, #304]	; (800535c <Nokia5110_printU32+0x27c>)
 800522c:	fba2 2303 	umull	r2, r3, r2, r3
 8005230:	08db      	lsrs	r3, r3, #3
 8005232:	623b      	str	r3, [r7, #32]
  buffer[3] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 8005234:	6a39      	ldr	r1, [r7, #32]
 8005236:	4b49      	ldr	r3, [pc, #292]	; (800535c <Nokia5110_printU32+0x27c>)
 8005238:	fba3 2301 	umull	r2, r3, r3, r1
 800523c:	08da      	lsrs	r2, r3, #3
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	1aca      	subs	r2, r1, r3
 8005248:	b2d3      	uxtb	r3, r2
 800524a:	3330      	adds	r3, #48	; 0x30
 800524c:	b2db      	uxtb	r3, r3
 800524e:	75fb      	strb	r3, [r7, #23]
  tempU32 /= 10;
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	4a42      	ldr	r2, [pc, #264]	; (800535c <Nokia5110_printU32+0x27c>)
 8005254:	fba2 2303 	umull	r2, r3, r2, r3
 8005258:	08db      	lsrs	r3, r3, #3
 800525a:	623b      	str	r3, [r7, #32]
  buffer[2] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 800525c:	6a39      	ldr	r1, [r7, #32]
 800525e:	4b3f      	ldr	r3, [pc, #252]	; (800535c <Nokia5110_printU32+0x27c>)
 8005260:	fba3 2301 	umull	r2, r3, r3, r1
 8005264:	08da      	lsrs	r2, r3, #3
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	1aca      	subs	r2, r1, r3
 8005270:	b2d3      	uxtb	r3, r2
 8005272:	3330      	adds	r3, #48	; 0x30
 8005274:	b2db      	uxtb	r3, r3
 8005276:	75bb      	strb	r3, [r7, #22]
  tempU32 /= 10;
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	4a38      	ldr	r2, [pc, #224]	; (800535c <Nokia5110_printU32+0x27c>)
 800527c:	fba2 2303 	umull	r2, r3, r2, r3
 8005280:	08db      	lsrs	r3, r3, #3
 8005282:	623b      	str	r3, [r7, #32]
  buffer[1] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 8005284:	6a39      	ldr	r1, [r7, #32]
 8005286:	4b35      	ldr	r3, [pc, #212]	; (800535c <Nokia5110_printU32+0x27c>)
 8005288:	fba3 2301 	umull	r2, r3, r3, r1
 800528c:	08da      	lsrs	r2, r3, #3
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	1aca      	subs	r2, r1, r3
 8005298:	b2d3      	uxtb	r3, r2
 800529a:	3330      	adds	r3, #48	; 0x30
 800529c:	b2db      	uxtb	r3, r3
 800529e:	757b      	strb	r3, [r7, #21]
  tempU32 /= 10;
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	4a2e      	ldr	r2, [pc, #184]	; (800535c <Nokia5110_printU32+0x27c>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	08db      	lsrs	r3, r3, #3
 80052aa:	623b      	str	r3, [r7, #32]
  buffer[0] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 80052ac:	6a39      	ldr	r1, [r7, #32]
 80052ae:	4b2b      	ldr	r3, [pc, #172]	; (800535c <Nokia5110_printU32+0x27c>)
 80052b0:	fba3 2301 	umull	r2, r3, r3, r1
 80052b4:	08da      	lsrs	r2, r3, #3
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	1aca      	subs	r2, r1, r3
 80052c0:	b2d3      	uxtb	r3, r2
 80052c2:	3330      	adds	r3, #48	; 0x30
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	753b      	strb	r3, [r7, #20]

  buffer[10] = '\0';
 80052c8:	2300      	movs	r3, #0
 80052ca:	77bb      	strb	r3, [r7, #30]

  uint8_t startIndex = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  while( buffer[startIndex] == (uint8_t)'0' ){
 80052d2:	e004      	b.n	80052de <Nokia5110_printU32+0x1fe>
    startIndex++;
 80052d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80052d8:	3301      	adds	r3, #1
 80052da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while( buffer[startIndex] == (uint8_t)'0' ){
 80052de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80052e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80052e6:	4413      	add	r3, r2
 80052e8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80052ec:	2b30      	cmp	r3, #48	; 0x30
 80052ee:	d0f1      	beq.n	80052d4 <Nokia5110_printU32+0x1f4>
  }

  uint8_t counter = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  while( startIndex != 11 ){
 80052f6:	e017      	b.n	8005328 <Nokia5110_printU32+0x248>
	opBuffer[counter] = buffer[startIndex];
 80052f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80052fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005300:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005304:	440a      	add	r2, r1
 8005306:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800530a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800530e:	440b      	add	r3, r1
 8005310:	f803 2c20 	strb.w	r2, [r3, #-32]
	counter++;
 8005314:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005318:	3301      	adds	r3, #1
 800531a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    startIndex++;
 800531e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005322:	3301      	adds	r3, #1
 8005324:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while( startIndex != 11 ){
 8005328:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800532c:	2b0b      	cmp	r3, #11
 800532e:	d1e3      	bne.n	80052f8 <Nokia5110_printU32+0x218>
  }

  opBuffer[counter] = (uint8_t)'\0';
 8005330:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005334:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005338:	4413      	add	r3, r2
 800533a:	2200      	movs	r2, #0
 800533c:	f803 2c20 	strb.w	r2, [r3, #-32]

  Nokia5110_printString((char*)opBuffer);
 8005340:	f107 0308 	add.w	r3, r7, #8
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fd47 	bl	8004dd8 <Nokia5110_printString>
  Nokia5110_printASCII(' ');
 800534a:	2020      	movs	r0, #32
 800534c:	f7ff fb92 	bl	8004a74 <Nokia5110_printASCII>
}
 8005350:	3728      	adds	r7, #40	; 0x28
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	2000011c 	.word	0x2000011c
 800535c:	cccccccd 	.word	0xcccccccd

08005360 <Nokia5110_printU32_NB>:

void Nokia5110_printU32_NB(uint32_t n,uint8_t d)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08c      	sub	sp, #48	; 0x30
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	70fb      	strb	r3, [r7, #3]
  uint32_t tempU32 = n;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t buffer[11];

  if(d!=0){
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d032      	beq.n	80053dc <Nokia5110_printU32_NB+0x7c>

  for( int i = 0 ; i < d ; i++ )
 8005376:	2300      	movs	r3, #0
 8005378:	62bb      	str	r3, [r7, #40]	; 0x28
 800537a:	e01e      	b.n	80053ba <Nokia5110_printU32_NB+0x5a>
  {
	buffer[d-1-i] = (uint32_t)'0' + (uint8_t)(tempU32%10);
 800537c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800537e:	4bb3      	ldr	r3, [pc, #716]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 8005380:	fba3 2301 	umull	r2, r3, r3, r1
 8005384:	08da      	lsrs	r2, r3, #3
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	1aca      	subs	r2, r1, r3
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	1e59      	subs	r1, r3, #1
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	1acb      	subs	r3, r1, r3
 800539a:	3230      	adds	r2, #48	; 0x30
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80053a2:	440b      	add	r3, r1
 80053a4:	f803 2c18 	strb.w	r2, [r3, #-24]
	tempU32 /= 10;
 80053a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053aa:	4aa8      	ldr	r2, [pc, #672]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 80053ac:	fba2 2303 	umull	r2, r3, r2, r3
 80053b0:	08db      	lsrs	r3, r3, #3
 80053b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  for( int i = 0 ; i < d ; i++ )
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	3301      	adds	r3, #1
 80053b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053be:	429a      	cmp	r2, r3
 80053c0:	dbdc      	blt.n	800537c <Nokia5110_printU32_NB+0x1c>
  }

  buffer[d] = (uint8_t)'\0';
 80053c2:	78fb      	ldrb	r3, [r7, #3]
 80053c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80053c8:	4413      	add	r3, r2
 80053ca:	2200      	movs	r2, #0
 80053cc:	f803 2c18 	strb.w	r2, [r3, #-24]

  Nokia5110_printString((char*)buffer);
 80053d0:	f107 0318 	add.w	r3, r7, #24
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff fcff 	bl	8004dd8 <Nokia5110_printString>

  return;
 80053da:	e133      	b.n	8005644 <Nokia5110_printU32_NB+0x2e4>
  }


  if(n == 0){
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d128      	bne.n	8005434 <Nokia5110_printU32_NB+0xd4>

    uint8_t counter = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while(U32_previous){
 80053e8:	e00c      	b.n	8005404 <Nokia5110_printU32_NB+0xa4>
	  counter++;
 80053ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053ee:	3301      	adds	r3, #1
 80053f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  U32_previous /= 10;
 80053f4:	4b96      	ldr	r3, [pc, #600]	; (8005650 <Nokia5110_printU32_NB+0x2f0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a94      	ldr	r2, [pc, #592]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	08db      	lsrs	r3, r3, #3
 8005400:	4a93      	ldr	r2, [pc, #588]	; (8005650 <Nokia5110_printU32_NB+0x2f0>)
 8005402:	6013      	str	r3, [r2, #0]
    while(U32_previous){
 8005404:	4b92      	ldr	r3, [pc, #584]	; (8005650 <Nokia5110_printU32_NB+0x2f0>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1ee      	bne.n	80053ea <Nokia5110_printU32_NB+0x8a>
    }

	Nokia5110_printASCII('0');
 800540c:	2030      	movs	r0, #48	; 0x30
 800540e:	f7ff fb31 	bl	8004a74 <Nokia5110_printASCII>

    while(counter){
 8005412:	e007      	b.n	8005424 <Nokia5110_printU32_NB+0xc4>
      Nokia5110_printASCII(' ');
 8005414:	2020      	movs	r0, #32
 8005416:	f7ff fb2d 	bl	8004a74 <Nokia5110_printASCII>
      counter--;
 800541a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800541e:	3b01      	subs	r3, #1
 8005420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(counter){
 8005424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f3      	bne.n	8005414 <Nokia5110_printU32_NB+0xb4>
    }

    U32_previous = 0;
 800542c:	4b88      	ldr	r3, [pc, #544]	; (8005650 <Nokia5110_printU32_NB+0x2f0>)
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]

    return;
 8005432:	e107      	b.n	8005644 <Nokia5110_printU32_NB+0x2e4>
  }

  tempU32 = n;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t opBuffer[11];

  buffer[9] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 8005438:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800543a:	4b84      	ldr	r3, [pc, #528]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 800543c:	fba3 2301 	umull	r2, r3, r3, r1
 8005440:	08da      	lsrs	r2, r3, #3
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	1aca      	subs	r2, r1, r3
 800544c:	b2d3      	uxtb	r3, r2
 800544e:	3330      	adds	r3, #48	; 0x30
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  tempU32 /= 10;
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	4a7c      	ldr	r2, [pc, #496]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	08db      	lsrs	r3, r3, #3
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
  buffer[8] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 8005462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005464:	4b79      	ldr	r3, [pc, #484]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 8005466:	fba3 2301 	umull	r2, r3, r3, r1
 800546a:	08da      	lsrs	r2, r3, #3
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	1aca      	subs	r2, r1, r3
 8005476:	b2d3      	uxtb	r3, r2
 8005478:	3330      	adds	r3, #48	; 0x30
 800547a:	b2db      	uxtb	r3, r3
 800547c:	f887 3020 	strb.w	r3, [r7, #32]
  tempU32 /= 10;
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	4a72      	ldr	r2, [pc, #456]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 8005484:	fba2 2303 	umull	r2, r3, r2, r3
 8005488:	08db      	lsrs	r3, r3, #3
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
  buffer[7] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 800548c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800548e:	4b6f      	ldr	r3, [pc, #444]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 8005490:	fba3 2301 	umull	r2, r3, r3, r1
 8005494:	08da      	lsrs	r2, r3, #3
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	1aca      	subs	r2, r1, r3
 80054a0:	b2d3      	uxtb	r3, r2
 80054a2:	3330      	adds	r3, #48	; 0x30
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	77fb      	strb	r3, [r7, #31]
  tempU32 /= 10;
 80054a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054aa:	4a68      	ldr	r2, [pc, #416]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 80054ac:	fba2 2303 	umull	r2, r3, r2, r3
 80054b0:	08db      	lsrs	r3, r3, #3
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  buffer[6] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 80054b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054b6:	4b65      	ldr	r3, [pc, #404]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 80054b8:	fba3 2301 	umull	r2, r3, r3, r1
 80054bc:	08da      	lsrs	r2, r3, #3
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	1aca      	subs	r2, r1, r3
 80054c8:	b2d3      	uxtb	r3, r2
 80054ca:	3330      	adds	r3, #48	; 0x30
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	77bb      	strb	r3, [r7, #30]
  tempU32 /= 10;
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	4a5e      	ldr	r2, [pc, #376]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 80054d4:	fba2 2303 	umull	r2, r3, r2, r3
 80054d8:	08db      	lsrs	r3, r3, #3
 80054da:	62fb      	str	r3, [r7, #44]	; 0x2c
  buffer[5] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 80054dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054de:	4b5b      	ldr	r3, [pc, #364]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 80054e0:	fba3 2301 	umull	r2, r3, r3, r1
 80054e4:	08da      	lsrs	r2, r3, #3
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	1aca      	subs	r2, r1, r3
 80054f0:	b2d3      	uxtb	r3, r2
 80054f2:	3330      	adds	r3, #48	; 0x30
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	777b      	strb	r3, [r7, #29]
  tempU32 /= 10;
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fa:	4a54      	ldr	r2, [pc, #336]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	08db      	lsrs	r3, r3, #3
 8005502:	62fb      	str	r3, [r7, #44]	; 0x2c
  buffer[4] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 8005504:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005506:	4b51      	ldr	r3, [pc, #324]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 8005508:	fba3 2301 	umull	r2, r3, r3, r1
 800550c:	08da      	lsrs	r2, r3, #3
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	1aca      	subs	r2, r1, r3
 8005518:	b2d3      	uxtb	r3, r2
 800551a:	3330      	adds	r3, #48	; 0x30
 800551c:	b2db      	uxtb	r3, r3
 800551e:	773b      	strb	r3, [r7, #28]
  tempU32 /= 10;
 8005520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005522:	4a4a      	ldr	r2, [pc, #296]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 8005524:	fba2 2303 	umull	r2, r3, r2, r3
 8005528:	08db      	lsrs	r3, r3, #3
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
  buffer[3] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 800552c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800552e:	4b47      	ldr	r3, [pc, #284]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 8005530:	fba3 2301 	umull	r2, r3, r3, r1
 8005534:	08da      	lsrs	r2, r3, #3
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	1aca      	subs	r2, r1, r3
 8005540:	b2d3      	uxtb	r3, r2
 8005542:	3330      	adds	r3, #48	; 0x30
 8005544:	b2db      	uxtb	r3, r3
 8005546:	76fb      	strb	r3, [r7, #27]
  tempU32 /= 10;
 8005548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554a:	4a40      	ldr	r2, [pc, #256]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 800554c:	fba2 2303 	umull	r2, r3, r2, r3
 8005550:	08db      	lsrs	r3, r3, #3
 8005552:	62fb      	str	r3, [r7, #44]	; 0x2c
  buffer[2] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 8005554:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005556:	4b3d      	ldr	r3, [pc, #244]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 8005558:	fba3 2301 	umull	r2, r3, r3, r1
 800555c:	08da      	lsrs	r2, r3, #3
 800555e:	4613      	mov	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	1aca      	subs	r2, r1, r3
 8005568:	b2d3      	uxtb	r3, r2
 800556a:	3330      	adds	r3, #48	; 0x30
 800556c:	b2db      	uxtb	r3, r3
 800556e:	76bb      	strb	r3, [r7, #26]
  tempU32 /= 10;
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	4a36      	ldr	r2, [pc, #216]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 8005574:	fba2 2303 	umull	r2, r3, r2, r3
 8005578:	08db      	lsrs	r3, r3, #3
 800557a:	62fb      	str	r3, [r7, #44]	; 0x2c
  buffer[1] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 800557c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800557e:	4b33      	ldr	r3, [pc, #204]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 8005580:	fba3 2301 	umull	r2, r3, r3, r1
 8005584:	08da      	lsrs	r2, r3, #3
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	1aca      	subs	r2, r1, r3
 8005590:	b2d3      	uxtb	r3, r2
 8005592:	3330      	adds	r3, #48	; 0x30
 8005594:	b2db      	uxtb	r3, r3
 8005596:	767b      	strb	r3, [r7, #25]
  tempU32 /= 10;
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	4a2c      	ldr	r2, [pc, #176]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	08db      	lsrs	r3, r3, #3
 80055a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  buffer[0] = (uint8_t)'0' + (uint8_t)(tempU32 % 10);
 80055a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055a6:	4b29      	ldr	r3, [pc, #164]	; (800564c <Nokia5110_printU32_NB+0x2ec>)
 80055a8:	fba3 2301 	umull	r2, r3, r3, r1
 80055ac:	08da      	lsrs	r2, r3, #3
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	1aca      	subs	r2, r1, r3
 80055b8:	b2d3      	uxtb	r3, r2
 80055ba:	3330      	adds	r3, #48	; 0x30
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	763b      	strb	r3, [r7, #24]

  buffer[10] = '\0';
 80055c0:	2300      	movs	r3, #0
 80055c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  uint8_t startIndex = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  while( buffer[startIndex] == (uint8_t)'0' ){
 80055cc:	e004      	b.n	80055d8 <Nokia5110_printU32_NB+0x278>
    startIndex++;
 80055ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80055d2:	3301      	adds	r3, #1
 80055d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while( buffer[startIndex] == (uint8_t)'0' ){
 80055d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80055dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80055e0:	4413      	add	r3, r2
 80055e2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80055e6:	2b30      	cmp	r3, #48	; 0x30
 80055e8:	d0f1      	beq.n	80055ce <Nokia5110_printU32_NB+0x26e>
  }

  uint8_t counter = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  while( startIndex != 11 ){
 80055f0:	e017      	b.n	8005622 <Nokia5110_printU32_NB+0x2c2>
	opBuffer[counter] = buffer[startIndex];
 80055f2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80055f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80055fa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80055fe:	440a      	add	r2, r1
 8005600:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8005604:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005608:	440b      	add	r3, r1
 800560a:	f803 2c24 	strb.w	r2, [r3, #-36]
	counter++;
 800560e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005612:	3301      	adds	r3, #1
 8005614:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    startIndex++;
 8005618:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800561c:	3301      	adds	r3, #1
 800561e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while( startIndex != 11 ){
 8005622:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005626:	2b0b      	cmp	r3, #11
 8005628:	d1e3      	bne.n	80055f2 <Nokia5110_printU32_NB+0x292>
  }

  opBuffer[counter] = (uint8_t)'\0';
 800562a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800562e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005632:	4413      	add	r3, r2
 8005634:	2200      	movs	r2, #0
 8005636:	f803 2c24 	strb.w	r2, [r3, #-36]

  Nokia5110_printString((char*)opBuffer);
 800563a:	f107 030c 	add.w	r3, r7, #12
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff fbca 	bl	8004dd8 <Nokia5110_printString>
}
 8005644:	3730      	adds	r7, #48	; 0x30
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	cccccccd 	.word	0xcccccccd
 8005650:	2000011c 	.word	0x2000011c

08005654 <Nokia5110_printI32>:
  }

  Nokia5110_printU16((uint16_t)n);
}

void Nokia5110_printI32(int32_t n){
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]

  if(n<0){
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	da05      	bge.n	800566e <Nokia5110_printI32+0x1a>
    n = -n;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	425b      	negs	r3, r3
 8005666:	607b      	str	r3, [r7, #4]
	Nokia5110_printASCII('-');
 8005668:	202d      	movs	r0, #45	; 0x2d
 800566a:	f7ff fa03 	bl	8004a74 <Nokia5110_printASCII>
  }

  Nokia5110_printU32((uint32_t)n);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff fd35 	bl	80050e0 <Nokia5110_printU32>
}
 8005676:	bf00      	nop
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <Nokia5110_printFloat>:

void Nokia5110_printFloat(float n, uint8_t p){
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	ed87 0a01 	vstr	s0, [r7, #4]
 800568a:	4603      	mov	r3, r0
 800568c:	70fb      	strb	r3, [r7, #3]

  if(n < 0.0f){
 800568e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005692:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569a:	d508      	bpl.n	80056ae <Nokia5110_printFloat+0x2e>
    Nokia5110_printASCII('-');
 800569c:	202d      	movs	r0, #45	; 0x2d
 800569e:	f7ff f9e9 	bl	8004a74 <Nokia5110_printASCII>
    n = -n;
 80056a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80056a6:	eef1 7a67 	vneg.f32	s15, s15
 80056aa:	edc7 7a01 	vstr	s15, [r7, #4]
  }

  uint32_t inp = (uint32_t)n;
 80056ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80056b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056b6:	ee17 3a90 	vmov	r3, s15
 80056ba:	60bb      	str	r3, [r7, #8]
  uint32_t frp;

  if( p == 1 ){ frp = (uint32_t)((10.0f*n) - (10.0f*(float)inp)); };
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d115      	bne.n	80056ee <Nokia5110_printFloat+0x6e>
 80056c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80056c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80056ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	ee07 3a90 	vmov	s15, r3
 80056d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80056dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80056e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056e8:	ee17 3a90 	vmov	r3, s15
 80056ec:	60fb      	str	r3, [r7, #12]
  if( p == 2 ){ frp = (uint32_t)((100.0f*n) - (100.0f*(float)inp)); };
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d115      	bne.n	8005720 <Nokia5110_printFloat+0xa0>
 80056f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80056f8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80057b0 <Nokia5110_printFloat+0x130>
 80056fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570a:	eddf 6a29 	vldr	s13, [pc, #164]	; 80057b0 <Nokia5110_printFloat+0x130>
 800570e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800571a:	ee17 3a90 	vmov	r3, s15
 800571e:	60fb      	str	r3, [r7, #12]
  if( p == 3 ){ frp = (uint32_t)((1000.0f*n) - (1000.0f*(float)inp)); };
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	2b03      	cmp	r3, #3
 8005724:	d115      	bne.n	8005752 <Nokia5110_printFloat+0xd2>
 8005726:	edd7 7a01 	vldr	s15, [r7, #4]
 800572a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80057b4 <Nokia5110_printFloat+0x134>
 800572e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	ee07 3a90 	vmov	s15, r3
 8005738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80057b4 <Nokia5110_printFloat+0x134>
 8005740:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800574c:	ee17 3a90 	vmov	r3, s15
 8005750:	60fb      	str	r3, [r7, #12]
  if( p == 4 ){ frp = (uint32_t)((10000.0f*n) - (10000.0f*(float)inp)); };
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	2b04      	cmp	r3, #4
 8005756:	d115      	bne.n	8005784 <Nokia5110_printFloat+0x104>
 8005758:	edd7 7a01 	vldr	s15, [r7, #4]
 800575c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80057b8 <Nokia5110_printFloat+0x138>
 8005760:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	ee07 3a90 	vmov	s15, r3
 800576a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576e:	eddf 6a12 	vldr	s13, [pc, #72]	; 80057b8 <Nokia5110_printFloat+0x138>
 8005772:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800577a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800577e:	ee17 3a90 	vmov	r3, s15
 8005782:	60fb      	str	r3, [r7, #12]

  Nokia5110_printU32_NB(inp,0);
 8005784:	2100      	movs	r1, #0
 8005786:	68b8      	ldr	r0, [r7, #8]
 8005788:	f7ff fdea 	bl	8005360 <Nokia5110_printU32_NB>

  if( p!= 0 ){
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <Nokia5110_printFloat+0x128>
    Nokia5110_printASCII('.');
 8005792:	202e      	movs	r0, #46	; 0x2e
 8005794:	f7ff f96e 	bl	8004a74 <Nokia5110_printASCII>
    Nokia5110_printU32_NB(frp,p);
 8005798:	78fb      	ldrb	r3, [r7, #3]
 800579a:	4619      	mov	r1, r3
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7ff fddf 	bl	8005360 <Nokia5110_printU32_NB>
    Nokia5110_printASCII(' ');
 80057a2:	2020      	movs	r0, #32
 80057a4:	f7ff f966 	bl	8004a74 <Nokia5110_printASCII>
  };
}
 80057a8:	bf00      	nop
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	42c80000 	.word	0x42c80000
 80057b4:	447a0000 	.word	0x447a0000
 80057b8:	461c4000 	.word	0x461c4000

080057bc <CBM_ascii5x8>:

#include "LCD_characterBitmaps.h"

void CBM_ascii5x8(uint8_t charID, uint8_t *buffer) {
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	6039      	str	r1, [r7, #0]
 80057c6:	71fb      	strb	r3, [r7, #7]

  switch (charID) {
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	3b20      	subs	r3, #32
 80057cc:	2b5d      	cmp	r3, #93	; 0x5d
 80057ce:	f201 8002 	bhi.w	80067d6 <CBM_ascii5x8+0x101a>
 80057d2:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <CBM_ascii5x8+0x1c>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	0800634f 	.word	0x0800634f
 80057dc:	08006377 	.word	0x08006377
 80057e0:	0800639f 	.word	0x0800639f
 80057e4:	080063c7 	.word	0x080063c7
 80057e8:	080063ef 	.word	0x080063ef
 80057ec:	08006417 	.word	0x08006417
 80057f0:	0800643f 	.word	0x0800643f
 80057f4:	08006467 	.word	0x08006467
 80057f8:	0800648f 	.word	0x0800648f
 80057fc:	080064b7 	.word	0x080064b7
 8005800:	080064df 	.word	0x080064df
 8005804:	08006507 	.word	0x08006507
 8005808:	0800652f 	.word	0x0800652f
 800580c:	08006557 	.word	0x08006557
 8005810:	0800657f 	.word	0x0800657f
 8005814:	080065a7 	.word	0x080065a7
 8005818:	080061bf 	.word	0x080061bf
 800581c:	080061e7 	.word	0x080061e7
 8005820:	0800620f 	.word	0x0800620f
 8005824:	08006237 	.word	0x08006237
 8005828:	0800625f 	.word	0x0800625f
 800582c:	08006287 	.word	0x08006287
 8005830:	080062af 	.word	0x080062af
 8005834:	080062d7 	.word	0x080062d7
 8005838:	080062ff 	.word	0x080062ff
 800583c:	08006327 	.word	0x08006327
 8005840:	080065cf 	.word	0x080065cf
 8005844:	080065f7 	.word	0x080065f7
 8005848:	0800661f 	.word	0x0800661f
 800584c:	08006647 	.word	0x08006647
 8005850:	0800666f 	.word	0x0800666f
 8005854:	08006697 	.word	0x08006697
 8005858:	080067d7 	.word	0x080067d7
 800585c:	08005d95 	.word	0x08005d95
 8005860:	08005dbf 	.word	0x08005dbf
 8005864:	08005de9 	.word	0x08005de9
 8005868:	08005e13 	.word	0x08005e13
 800586c:	08005e3d 	.word	0x08005e3d
 8005870:	08005e67 	.word	0x08005e67
 8005874:	08005e91 	.word	0x08005e91
 8005878:	08005ebb 	.word	0x08005ebb
 800587c:	08005ee5 	.word	0x08005ee5
 8005880:	08005f0f 	.word	0x08005f0f
 8005884:	08005f39 	.word	0x08005f39
 8005888:	08005f63 	.word	0x08005f63
 800588c:	08005f8d 	.word	0x08005f8d
 8005890:	08005fb7 	.word	0x08005fb7
 8005894:	08005fdf 	.word	0x08005fdf
 8005898:	08006007 	.word	0x08006007
 800589c:	0800602f 	.word	0x0800602f
 80058a0:	08006057 	.word	0x08006057
 80058a4:	0800607f 	.word	0x0800607f
 80058a8:	080060a7 	.word	0x080060a7
 80058ac:	080060cf 	.word	0x080060cf
 80058b0:	080060f7 	.word	0x080060f7
 80058b4:	0800611f 	.word	0x0800611f
 80058b8:	08006147 	.word	0x08006147
 80058bc:	0800616f 	.word	0x0800616f
 80058c0:	08006197 	.word	0x08006197
 80058c4:	080066bf 	.word	0x080066bf
 80058c8:	080067d7 	.word	0x080067d7
 80058cc:	080066e7 	.word	0x080066e7
 80058d0:	0800670f 	.word	0x0800670f
 80058d4:	08006737 	.word	0x08006737
 80058d8:	0800675f 	.word	0x0800675f
 80058dc:	08005951 	.word	0x08005951
 80058e0:	0800597b 	.word	0x0800597b
 80058e4:	080059a5 	.word	0x080059a5
 80058e8:	080059cf 	.word	0x080059cf
 80058ec:	080059f9 	.word	0x080059f9
 80058f0:	08005a23 	.word	0x08005a23
 80058f4:	08005a4d 	.word	0x08005a4d
 80058f8:	08005a77 	.word	0x08005a77
 80058fc:	08005aa1 	.word	0x08005aa1
 8005900:	08005acb 	.word	0x08005acb
 8005904:	08005af5 	.word	0x08005af5
 8005908:	08005b1f 	.word	0x08005b1f
 800590c:	08005b49 	.word	0x08005b49
 8005910:	08005b73 	.word	0x08005b73
 8005914:	08005b9d 	.word	0x08005b9d
 8005918:	08005bc7 	.word	0x08005bc7
 800591c:	08005bf1 	.word	0x08005bf1
 8005920:	08005c1b 	.word	0x08005c1b
 8005924:	08005c45 	.word	0x08005c45
 8005928:	08005c6f 	.word	0x08005c6f
 800592c:	08005c99 	.word	0x08005c99
 8005930:	08005cc3 	.word	0x08005cc3
 8005934:	08005ced 	.word	0x08005ced
 8005938:	08005d17 	.word	0x08005d17
 800593c:	08005d41 	.word	0x08005d41
 8005940:	08005d6b 	.word	0x08005d6b
 8005944:	08006787 	.word	0x08006787
 8005948:	080067d7 	.word	0x080067d7
 800594c:	080067af 	.word	0x080067af

  case ((uint8_t)'a'): {

    // 0x40, 0xa8, 0xa8, 0xf0, 0x00

    buffer[0] = 0x40;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2240      	movs	r2, #64	; 0x40
 8005954:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0xA8;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	3301      	adds	r3, #1
 800595a:	22a8      	movs	r2, #168	; 0xa8
 800595c:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0xA8;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	3302      	adds	r3, #2
 8005962:	22a8      	movs	r2, #168	; 0xa8
 8005964:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0xF0;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	3303      	adds	r3, #3
 800596a:	22f0      	movs	r2, #240	; 0xf0
 800596c:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x00;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	3304      	adds	r3, #4
 8005972:	2200      	movs	r2, #0
 8005974:	701a      	strb	r2, [r3, #0]
  } break;
 8005976:	f000 bf2e 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'b'): {

    // 0xfe, 0x90, 0x88, 0x88, 0x70

    buffer[0] = 0xFE;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	22fe      	movs	r2, #254	; 0xfe
 800597e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x90;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	2290      	movs	r2, #144	; 0x90
 8005986:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x88;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	3302      	adds	r3, #2
 800598c:	2288      	movs	r2, #136	; 0x88
 800598e:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x88;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	3303      	adds	r3, #3
 8005994:	2288      	movs	r2, #136	; 0x88
 8005996:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x70;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	3304      	adds	r3, #4
 800599c:	2270      	movs	r2, #112	; 0x70
 800599e:	701a      	strb	r2, [r3, #0]
  } break;
 80059a0:	f000 bf19 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'c'): {

    // 0x70, 0x88, 0x88, 0x88, 0x40

    buffer[0] = 0x70;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2270      	movs	r2, #112	; 0x70
 80059a8:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x88;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	3301      	adds	r3, #1
 80059ae:	2288      	movs	r2, #136	; 0x88
 80059b0:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x88;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	3302      	adds	r3, #2
 80059b6:	2288      	movs	r2, #136	; 0x88
 80059b8:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x88;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	3303      	adds	r3, #3
 80059be:	2288      	movs	r2, #136	; 0x88
 80059c0:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x40;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	3304      	adds	r3, #4
 80059c6:	2240      	movs	r2, #64	; 0x40
 80059c8:	701a      	strb	r2, [r3, #0]
  } break;
 80059ca:	f000 bf04 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'d'): {

    // 0x70, 0x88, 0x88, 0x90, 0x7e

    buffer[0] = 0x70;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2270      	movs	r2, #112	; 0x70
 80059d2:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x88;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	3301      	adds	r3, #1
 80059d8:	2288      	movs	r2, #136	; 0x88
 80059da:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x88;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	3302      	adds	r3, #2
 80059e0:	2288      	movs	r2, #136	; 0x88
 80059e2:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x90;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	3303      	adds	r3, #3
 80059e8:	2290      	movs	r2, #144	; 0x90
 80059ea:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x7e;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	3304      	adds	r3, #4
 80059f0:	227e      	movs	r2, #126	; 0x7e
 80059f2:	701a      	strb	r2, [r3, #0]
  } break;
 80059f4:	f000 beef 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'e'): {

    // 0x70, 0xa8, 0xa8, 0xa8, 0x30

    buffer[0] = 0x70;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2270      	movs	r2, #112	; 0x70
 80059fc:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0xa8;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	3301      	adds	r3, #1
 8005a02:	22a8      	movs	r2, #168	; 0xa8
 8005a04:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0xa8;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	3302      	adds	r3, #2
 8005a0a:	22a8      	movs	r2, #168	; 0xa8
 8005a0c:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0xa0;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	3303      	adds	r3, #3
 8005a12:	22a0      	movs	r2, #160	; 0xa0
 8005a14:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x30;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	2230      	movs	r2, #48	; 0x30
 8005a1c:	701a      	strb	r2, [r3, #0]
  } break;
 8005a1e:	f000 beda 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'f'): {

    // 0x10, 0xfc, 0x12, 0x02, 0x04

    buffer[0] = 0x10;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2210      	movs	r2, #16
 8005a26:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0xfc;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	22fc      	movs	r2, #252	; 0xfc
 8005a2e:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x12;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	3302      	adds	r3, #2
 8005a34:	2212      	movs	r2, #18
 8005a36:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x02;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	3303      	adds	r3, #3
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x04;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	3304      	adds	r3, #4
 8005a44:	2204      	movs	r2, #4
 8005a46:	701a      	strb	r2, [r3, #0]
  } break;
 8005a48:	f000 bec5 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'g'): {

    // 0x10, 0xa8, 0xa8, 0xa8, 0x78

    buffer[0] = 0x10;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2210      	movs	r2, #16
 8005a50:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0xa8;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	3301      	adds	r3, #1
 8005a56:	22a8      	movs	r2, #168	; 0xa8
 8005a58:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0xa8;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	3302      	adds	r3, #2
 8005a5e:	22a8      	movs	r2, #168	; 0xa8
 8005a60:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0xa8;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	3303      	adds	r3, #3
 8005a66:	22a8      	movs	r2, #168	; 0xa8
 8005a68:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x78;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	2278      	movs	r2, #120	; 0x78
 8005a70:	701a      	strb	r2, [r3, #0]
  } break;
 8005a72:	f000 beb0 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'h'): {

    // 0xfe, 0x10, 0x08, 0x08, 0xf0

    buffer[0] = 0xfe;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	22fe      	movs	r2, #254	; 0xfe
 8005a7a:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x10;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	2210      	movs	r2, #16
 8005a82:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x08;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	3302      	adds	r3, #2
 8005a88:	2208      	movs	r2, #8
 8005a8a:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x08;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	3303      	adds	r3, #3
 8005a90:	2208      	movs	r2, #8
 8005a92:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0xf0;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	3304      	adds	r3, #4
 8005a98:	22f0      	movs	r2, #240	; 0xf0
 8005a9a:	701a      	strb	r2, [r3, #0]

  } break;
 8005a9c:	f000 be9b 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'i'): {

    // 0x00, 0x90, 0xfa, 0x80, 0x00

    buffer[0] = 0x00;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x90;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	2290      	movs	r2, #144	; 0x90
 8005aac:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0xfa;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	3302      	adds	r3, #2
 8005ab2:	22fa      	movs	r2, #250	; 0xfa
 8005ab4:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x80;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	3303      	adds	r3, #3
 8005aba:	2280      	movs	r2, #128	; 0x80
 8005abc:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x00;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	701a      	strb	r2, [r3, #0]

  } break;
 8005ac6:	f000 be86 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'j'): {

    // 0x00, 0x40, 0x80, 0x88, 0x7a

    buffer[0] = 0x00;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2200      	movs	r2, #0
 8005ace:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x40;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	2240      	movs	r2, #64	; 0x40
 8005ad6:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x80;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	3302      	adds	r3, #2
 8005adc:	2280      	movs	r2, #128	; 0x80
 8005ade:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x88;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	3303      	adds	r3, #3
 8005ae4:	2288      	movs	r2, #136	; 0x88
 8005ae6:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x7a;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	3304      	adds	r3, #4
 8005aec:	227a      	movs	r2, #122	; 0x7a
 8005aee:	701a      	strb	r2, [r3, #0]

  } break;
 8005af0:	f000 be71 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'k'): {

    // 0xfe, 0x20, 0x50, 0x88, 0x00

    buffer[0] = 0xfe;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	22fe      	movs	r2, #254	; 0xfe
 8005af8:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x20;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	3301      	adds	r3, #1
 8005afe:	2220      	movs	r2, #32
 8005b00:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x50;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	3302      	adds	r3, #2
 8005b06:	2250      	movs	r2, #80	; 0x50
 8005b08:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x88;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	3303      	adds	r3, #3
 8005b0e:	2288      	movs	r2, #136	; 0x88
 8005b10:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x00;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	3304      	adds	r3, #4
 8005b16:	2200      	movs	r2, #0
 8005b18:	701a      	strb	r2, [r3, #0]

  } break;
 8005b1a:	f000 be5c 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'l'): {

    // 0x00, 0x82, 0xfe, 0x80, 0x00

    buffer[0] = 0x00;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2200      	movs	r2, #0
 8005b22:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x82;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	3301      	adds	r3, #1
 8005b28:	2282      	movs	r2, #130	; 0x82
 8005b2a:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0xfe;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	3302      	adds	r3, #2
 8005b30:	22fe      	movs	r2, #254	; 0xfe
 8005b32:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x80;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	3303      	adds	r3, #3
 8005b38:	2280      	movs	r2, #128	; 0x80
 8005b3a:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x00;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	2200      	movs	r2, #0
 8005b42:	701a      	strb	r2, [r3, #0]

  } break;
 8005b44:	f000 be47 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'m'): {

    // 0xf8, 0x08, 0xf0, 0x08, 0xf0

    buffer[0] = 0xf8;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	22f8      	movs	r2, #248	; 0xf8
 8005b4c:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x08;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	3301      	adds	r3, #1
 8005b52:	2208      	movs	r2, #8
 8005b54:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0xf0;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	3302      	adds	r3, #2
 8005b5a:	22f0      	movs	r2, #240	; 0xf0
 8005b5c:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x08;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	3303      	adds	r3, #3
 8005b62:	2208      	movs	r2, #8
 8005b64:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0xf0;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	22f0      	movs	r2, #240	; 0xf0
 8005b6c:	701a      	strb	r2, [r3, #0]

  } break;
 8005b6e:	f000 be32 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'n'): {

    // 0xf8, 0x10, 0x08, 0x08, 0xf0

    buffer[0] = 0xf8;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	22f8      	movs	r2, #248	; 0xf8
 8005b76:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x10;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	2210      	movs	r2, #16
 8005b7e:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x08;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	3302      	adds	r3, #2
 8005b84:	2208      	movs	r2, #8
 8005b86:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x08;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	3303      	adds	r3, #3
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0xf0;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	3304      	adds	r3, #4
 8005b94:	22f0      	movs	r2, #240	; 0xf0
 8005b96:	701a      	strb	r2, [r3, #0]

  } break;
 8005b98:	f000 be1d 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'o'): {

    // 0x70, 0x88, 0x88, 0x88, 0x70

    buffer[0] = 0x70;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2270      	movs	r2, #112	; 0x70
 8005ba0:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x88;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	2288      	movs	r2, #136	; 0x88
 8005ba8:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x88;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	3302      	adds	r3, #2
 8005bae:	2288      	movs	r2, #136	; 0x88
 8005bb0:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x88;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	3303      	adds	r3, #3
 8005bb6:	2288      	movs	r2, #136	; 0x88
 8005bb8:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x70;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	2270      	movs	r2, #112	; 0x70
 8005bc0:	701a      	strb	r2, [r3, #0]

  } break;
 8005bc2:	f000 be08 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'p'): {

    // 0xf8, 0x28, 0x28, 0x28, 0x10

    buffer[0] = 0xf8;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	22f8      	movs	r2, #248	; 0xf8
 8005bca:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x28;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	2228      	movs	r2, #40	; 0x28
 8005bd2:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x28;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	3302      	adds	r3, #2
 8005bd8:	2228      	movs	r2, #40	; 0x28
 8005bda:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x28;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	3303      	adds	r3, #3
 8005be0:	2228      	movs	r2, #40	; 0x28
 8005be2:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x10;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	3304      	adds	r3, #4
 8005be8:	2210      	movs	r2, #16
 8005bea:	701a      	strb	r2, [r3, #0]

  } break;
 8005bec:	f000 bdf3 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'q'): {

    // 0x10, 0x28, 0x28, 0x30, 0xf8

    buffer[0] = 0x10;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2210      	movs	r2, #16
 8005bf4:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x28;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	2228      	movs	r2, #40	; 0x28
 8005bfc:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x28;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	3302      	adds	r3, #2
 8005c02:	2228      	movs	r2, #40	; 0x28
 8005c04:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x30;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	3303      	adds	r3, #3
 8005c0a:	2230      	movs	r2, #48	; 0x30
 8005c0c:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0xf8;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	3304      	adds	r3, #4
 8005c12:	22f8      	movs	r2, #248	; 0xf8
 8005c14:	701a      	strb	r2, [r3, #0]

  } break;
 8005c16:	f000 bdde 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'r'): {

    // 0xf8, 0x10, 0x08, 0x08, 0x10

    buffer[0] = 0xf8;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	22f8      	movs	r2, #248	; 0xf8
 8005c1e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x10;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	3301      	adds	r3, #1
 8005c24:	2210      	movs	r2, #16
 8005c26:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x08;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	3302      	adds	r3, #2
 8005c2c:	2208      	movs	r2, #8
 8005c2e:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x08;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	3303      	adds	r3, #3
 8005c34:	2208      	movs	r2, #8
 8005c36:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x10;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	2210      	movs	r2, #16
 8005c3e:	701a      	strb	r2, [r3, #0]

  } break;
 8005c40:	f000 bdc9 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'s'): {

    // 0x90, 0xa8, 0xa8, 0xa8, 0x40

    buffer[0] = 0x90;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2290      	movs	r2, #144	; 0x90
 8005c48:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0xa8;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	22a8      	movs	r2, #168	; 0xa8
 8005c50:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0xa8;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	3302      	adds	r3, #2
 8005c56:	22a8      	movs	r2, #168	; 0xa8
 8005c58:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0xa8;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	3303      	adds	r3, #3
 8005c5e:	22a8      	movs	r2, #168	; 0xa8
 8005c60:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x40;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	3304      	adds	r3, #4
 8005c66:	2240      	movs	r2, #64	; 0x40
 8005c68:	701a      	strb	r2, [r3, #0]

  } break;
 8005c6a:	f000 bdb4 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'t'): {

    // 0x08, 0x7e, 0x88, 0x80, 0x40

    buffer[0] = 0x08;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2208      	movs	r2, #8
 8005c72:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x7e;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	3301      	adds	r3, #1
 8005c78:	227e      	movs	r2, #126	; 0x7e
 8005c7a:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x88;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	3302      	adds	r3, #2
 8005c80:	2288      	movs	r2, #136	; 0x88
 8005c82:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x80;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	3303      	adds	r3, #3
 8005c88:	2280      	movs	r2, #128	; 0x80
 8005c8a:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x40;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	2240      	movs	r2, #64	; 0x40
 8005c92:	701a      	strb	r2, [r3, #0]

  } break;
 8005c94:	f000 bd9f 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'u'): {

    // 0x78, 0x80, 0x80, 0x40, 0xf8

    buffer[0] = 0x78;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2278      	movs	r2, #120	; 0x78
 8005c9c:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x80;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	2280      	movs	r2, #128	; 0x80
 8005ca4:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x80;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	3302      	adds	r3, #2
 8005caa:	2280      	movs	r2, #128	; 0x80
 8005cac:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x40;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	3303      	adds	r3, #3
 8005cb2:	2240      	movs	r2, #64	; 0x40
 8005cb4:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0xf8;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	22f8      	movs	r2, #248	; 0xf8
 8005cbc:	701a      	strb	r2, [r3, #0]

  } break;
 8005cbe:	f000 bd8a 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'v'): {

    // 0x38, 0x40, 0x80, 0x40, 0x38

    buffer[0] = 0x38;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2238      	movs	r2, #56	; 0x38
 8005cc6:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x40;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	2240      	movs	r2, #64	; 0x40
 8005cce:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x80;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	3302      	adds	r3, #2
 8005cd4:	2280      	movs	r2, #128	; 0x80
 8005cd6:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x40;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	3303      	adds	r3, #3
 8005cdc:	2240      	movs	r2, #64	; 0x40
 8005cde:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x38;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	2238      	movs	r2, #56	; 0x38
 8005ce6:	701a      	strb	r2, [r3, #0]

  } break;
 8005ce8:	f000 bd75 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'w'): {

    // 0x78, 0x80, 0x60, 0x80, 0x78

    buffer[0] = 0x78;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2278      	movs	r2, #120	; 0x78
 8005cf0:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x80;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	2280      	movs	r2, #128	; 0x80
 8005cf8:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x60;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	3302      	adds	r3, #2
 8005cfe:	2260      	movs	r2, #96	; 0x60
 8005d00:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x80;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	3303      	adds	r3, #3
 8005d06:	2280      	movs	r2, #128	; 0x80
 8005d08:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x78;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	2278      	movs	r2, #120	; 0x78
 8005d10:	701a      	strb	r2, [r3, #0]

  } break;
 8005d12:	f000 bd60 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'x'): {

    // 0x88, 0x50, 0x20, 0x50, 0x88

    buffer[0] = 0x88;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2288      	movs	r2, #136	; 0x88
 8005d1a:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x50;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	2250      	movs	r2, #80	; 0x50
 8005d22:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x20;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	3302      	adds	r3, #2
 8005d28:	2220      	movs	r2, #32
 8005d2a:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x50;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	3303      	adds	r3, #3
 8005d30:	2250      	movs	r2, #80	; 0x50
 8005d32:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x88;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	3304      	adds	r3, #4
 8005d38:	2288      	movs	r2, #136	; 0x88
 8005d3a:	701a      	strb	r2, [r3, #0]

  } break;
 8005d3c:	f000 bd4b 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'y'): {

    // 0x18, 0xa0, 0xa0, 0xa0, 0x78

    buffer[0] = 0x18;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2218      	movs	r2, #24
 8005d44:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0xa0;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	22a0      	movs	r2, #160	; 0xa0
 8005d4c:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0xa0;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	3302      	adds	r3, #2
 8005d52:	22a0      	movs	r2, #160	; 0xa0
 8005d54:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0xa0;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	3303      	adds	r3, #3
 8005d5a:	22a0      	movs	r2, #160	; 0xa0
 8005d5c:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x78;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	3304      	adds	r3, #4
 8005d62:	2278      	movs	r2, #120	; 0x78
 8005d64:	701a      	strb	r2, [r3, #0]

  } break;
 8005d66:	f000 bd36 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case ((uint8_t)'z'): {

    // 0x88, 0xc8, 0xa8, 0x98, 0x88

    buffer[0] = 0x88;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2288      	movs	r2, #136	; 0x88
 8005d6e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0xc8;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	22c8      	movs	r2, #200	; 0xc8
 8005d76:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0xa8;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	3302      	adds	r3, #2
 8005d7c:	22a8      	movs	r2, #168	; 0xa8
 8005d7e:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x98;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	3303      	adds	r3, #3
 8005d84:	2298      	movs	r2, #152	; 0x98
 8005d86:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x88;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	2288      	movs	r2, #136	; 0x88
 8005d8e:	701a      	strb	r2, [r3, #0]

  } break;
 8005d90:	f000 bd21 	b.w	80067d6 <CBM_ascii5x8+0x101a>

  case((uint8_t)'A'):{
    buffer[0]=0xfc;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	22fc      	movs	r2, #252	; 0xfc
 8005d98:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x22;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	2222      	movs	r2, #34	; 0x22
 8005da0:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x22;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	3302      	adds	r3, #2
 8005da6:	2222      	movs	r2, #34	; 0x22
 8005da8:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x22;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	3303      	adds	r3, #3
 8005dae:	2222      	movs	r2, #34	; 0x22
 8005db0:	701a      	strb	r2, [r3, #0]
    buffer[4]=0xfc;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	3304      	adds	r3, #4
 8005db6:	22fc      	movs	r2, #252	; 0xfc
 8005db8:	701a      	strb	r2, [r3, #0]
  }break;
 8005dba:	f000 bd0c 	b.w	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'B'):{
    buffer[0]=0xfe;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	22fe      	movs	r2, #254	; 0xfe
 8005dc2:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x92;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	2292      	movs	r2, #146	; 0x92
 8005dca:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x92;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	3302      	adds	r3, #2
 8005dd0:	2292      	movs	r2, #146	; 0x92
 8005dd2:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x92;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	3303      	adds	r3, #3
 8005dd8:	2292      	movs	r2, #146	; 0x92
 8005dda:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x6c;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	3304      	adds	r3, #4
 8005de0:	226c      	movs	r2, #108	; 0x6c
 8005de2:	701a      	strb	r2, [r3, #0]
  }break;
 8005de4:	f000 bcf7 	b.w	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'C'):{
    buffer[0]=0x7c;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	227c      	movs	r2, #124	; 0x7c
 8005dec:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x82;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	2282      	movs	r2, #130	; 0x82
 8005df4:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x82;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	3302      	adds	r3, #2
 8005dfa:	2282      	movs	r2, #130	; 0x82
 8005dfc:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x82;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	3303      	adds	r3, #3
 8005e02:	2282      	movs	r2, #130	; 0x82
 8005e04:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x44;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	2244      	movs	r2, #68	; 0x44
 8005e0c:	701a      	strb	r2, [r3, #0]
  }break;
 8005e0e:	f000 bce2 	b.w	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'D'):{
    buffer[0]=0xfe;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	22fe      	movs	r2, #254	; 0xfe
 8005e16:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x82;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	2282      	movs	r2, #130	; 0x82
 8005e1e:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x82;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	3302      	adds	r3, #2
 8005e24:	2282      	movs	r2, #130	; 0x82
 8005e26:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x44;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	3303      	adds	r3, #3
 8005e2c:	2244      	movs	r2, #68	; 0x44
 8005e2e:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x38;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	3304      	adds	r3, #4
 8005e34:	2238      	movs	r2, #56	; 0x38
 8005e36:	701a      	strb	r2, [r3, #0]
  }break;
 8005e38:	f000 bccd 	b.w	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'E'):{
    buffer[0]=0xfe;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	22fe      	movs	r2, #254	; 0xfe
 8005e40:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x92;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	3301      	adds	r3, #1
 8005e46:	2292      	movs	r2, #146	; 0x92
 8005e48:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x92;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	3302      	adds	r3, #2
 8005e4e:	2292      	movs	r2, #146	; 0x92
 8005e50:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x92;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	3303      	adds	r3, #3
 8005e56:	2292      	movs	r2, #146	; 0x92
 8005e58:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x92;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	2292      	movs	r2, #146	; 0x92
 8005e60:	701a      	strb	r2, [r3, #0]
  }break;
 8005e62:	f000 bcb8 	b.w	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'F'):{
    buffer[0]=0xfe;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	22fe      	movs	r2, #254	; 0xfe
 8005e6a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x12;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	2212      	movs	r2, #18
 8005e72:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x12;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	3302      	adds	r3, #2
 8005e78:	2212      	movs	r2, #18
 8005e7a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x12;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	3303      	adds	r3, #3
 8005e80:	2212      	movs	r2, #18
 8005e82:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x02;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	3304      	adds	r3, #4
 8005e88:	2202      	movs	r2, #2
 8005e8a:	701a      	strb	r2, [r3, #0]
  }break;
 8005e8c:	f000 bca3 	b.w	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'G'):{
    buffer[0]=0x7c;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	227c      	movs	r2, #124	; 0x7c
 8005e94:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x82;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	2282      	movs	r2, #130	; 0x82
 8005e9c:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x92;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	3302      	adds	r3, #2
 8005ea2:	2292      	movs	r2, #146	; 0x92
 8005ea4:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x92;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	3303      	adds	r3, #3
 8005eaa:	2292      	movs	r2, #146	; 0x92
 8005eac:	701a      	strb	r2, [r3, #0]
    buffer[4]=0xf4;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	22f4      	movs	r2, #244	; 0xf4
 8005eb4:	701a      	strb	r2, [r3, #0]
  }break;
 8005eb6:	f000 bc8e 	b.w	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'H'):{
    buffer[0]=0xfe;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	22fe      	movs	r2, #254	; 0xfe
 8005ebe:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x10;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	2210      	movs	r2, #16
 8005ec6:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x10;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	3302      	adds	r3, #2
 8005ecc:	2210      	movs	r2, #16
 8005ece:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x10;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	3303      	adds	r3, #3
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	701a      	strb	r2, [r3, #0]
    buffer[4]=0xfe;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	3304      	adds	r3, #4
 8005edc:	22fe      	movs	r2, #254	; 0xfe
 8005ede:	701a      	strb	r2, [r3, #0]
  }break;
 8005ee0:	f000 bc79 	b.w	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'I'):{
    buffer[0]=0x00;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x82;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	3301      	adds	r3, #1
 8005eee:	2282      	movs	r2, #130	; 0x82
 8005ef0:	701a      	strb	r2, [r3, #0]
    buffer[2]=0xfe;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	3302      	adds	r3, #2
 8005ef6:	22fe      	movs	r2, #254	; 0xfe
 8005ef8:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x82;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	3303      	adds	r3, #3
 8005efe:	2282      	movs	r2, #130	; 0x82
 8005f00:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	3304      	adds	r3, #4
 8005f06:	2200      	movs	r2, #0
 8005f08:	701a      	strb	r2, [r3, #0]
  }break;
 8005f0a:	f000 bc64 	b.w	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'J'):{
    buffer[0]=0x40;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2240      	movs	r2, #64	; 0x40
 8005f12:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x80;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	3301      	adds	r3, #1
 8005f18:	2280      	movs	r2, #128	; 0x80
 8005f1a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x82;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	3302      	adds	r3, #2
 8005f20:	2282      	movs	r2, #130	; 0x82
 8005f22:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x7e;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	3303      	adds	r3, #3
 8005f28:	227e      	movs	r2, #126	; 0x7e
 8005f2a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x02;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	2202      	movs	r2, #2
 8005f32:	701a      	strb	r2, [r3, #0]
  }break;
 8005f34:	f000 bc4f 	b.w	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'K'):{
    buffer[0]=0xfe;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	22fe      	movs	r2, #254	; 0xfe
 8005f3c:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x10;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	3301      	adds	r3, #1
 8005f42:	2210      	movs	r2, #16
 8005f44:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x28;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	3302      	adds	r3, #2
 8005f4a:	2228      	movs	r2, #40	; 0x28
 8005f4c:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x44;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	3303      	adds	r3, #3
 8005f52:	2244      	movs	r2, #68	; 0x44
 8005f54:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x82;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	2282      	movs	r2, #130	; 0x82
 8005f5c:	701a      	strb	r2, [r3, #0]
  }break;
 8005f5e:	f000 bc3a 	b.w	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'L'):{
    buffer[0]=0xfe;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	22fe      	movs	r2, #254	; 0xfe
 8005f66:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x80;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	2280      	movs	r2, #128	; 0x80
 8005f6e:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x80;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	3302      	adds	r3, #2
 8005f74:	2280      	movs	r2, #128	; 0x80
 8005f76:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x80;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	3303      	adds	r3, #3
 8005f7c:	2280      	movs	r2, #128	; 0x80
 8005f7e:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x80;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	3304      	adds	r3, #4
 8005f84:	2280      	movs	r2, #128	; 0x80
 8005f86:	701a      	strb	r2, [r3, #0]
  }break;
 8005f88:	f000 bc25 	b.w	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'M'):{
    buffer[0]=0xfe;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	22fe      	movs	r2, #254	; 0xfe
 8005f90:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x04;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	3301      	adds	r3, #1
 8005f96:	2204      	movs	r2, #4
 8005f98:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x18;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	3302      	adds	r3, #2
 8005f9e:	2218      	movs	r2, #24
 8005fa0:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x04;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	3303      	adds	r3, #3
 8005fa6:	2204      	movs	r2, #4
 8005fa8:	701a      	strb	r2, [r3, #0]
    buffer[4]=0xfe;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	3304      	adds	r3, #4
 8005fae:	22fe      	movs	r2, #254	; 0xfe
 8005fb0:	701a      	strb	r2, [r3, #0]
  }break;
 8005fb2:	f000 bc10 	b.w	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'N'):{
    buffer[0]=0xfe;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	22fe      	movs	r2, #254	; 0xfe
 8005fba:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x08;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	2208      	movs	r2, #8
 8005fc2:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x10;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	3302      	adds	r3, #2
 8005fc8:	2210      	movs	r2, #16
 8005fca:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x20;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	3303      	adds	r3, #3
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	701a      	strb	r2, [r3, #0]
    buffer[4]=0xfe;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	22fe      	movs	r2, #254	; 0xfe
 8005fda:	701a      	strb	r2, [r3, #0]
  }break;
 8005fdc:	e3fb      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'O'):{
    buffer[0]=0x7c;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	227c      	movs	r2, #124	; 0x7c
 8005fe2:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x82;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	2282      	movs	r2, #130	; 0x82
 8005fea:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x82;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	3302      	adds	r3, #2
 8005ff0:	2282      	movs	r2, #130	; 0x82
 8005ff2:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x82;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	3303      	adds	r3, #3
 8005ff8:	2282      	movs	r2, #130	; 0x82
 8005ffa:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x7c;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	3304      	adds	r3, #4
 8006000:	227c      	movs	r2, #124	; 0x7c
 8006002:	701a      	strb	r2, [r3, #0]
  }break;
 8006004:	e3e7      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'P'):{
    buffer[0]=0xfe;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	22fe      	movs	r2, #254	; 0xfe
 800600a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x12;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	3301      	adds	r3, #1
 8006010:	2212      	movs	r2, #18
 8006012:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x12;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	3302      	adds	r3, #2
 8006018:	2212      	movs	r2, #18
 800601a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x12;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	3303      	adds	r3, #3
 8006020:	2212      	movs	r2, #18
 8006022:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x0c;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	3304      	adds	r3, #4
 8006028:	220c      	movs	r2, #12
 800602a:	701a      	strb	r2, [r3, #0]
  }break;
 800602c:	e3d3      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'Q'):{
    buffer[0]=0x7c;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	227c      	movs	r2, #124	; 0x7c
 8006032:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x82;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	3301      	adds	r3, #1
 8006038:	2282      	movs	r2, #130	; 0x82
 800603a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0xa2;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	3302      	adds	r3, #2
 8006040:	22a2      	movs	r2, #162	; 0xa2
 8006042:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x42;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	3303      	adds	r3, #3
 8006048:	2242      	movs	r2, #66	; 0x42
 800604a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0xbc;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	3304      	adds	r3, #4
 8006050:	22bc      	movs	r2, #188	; 0xbc
 8006052:	701a      	strb	r2, [r3, #0]
  }break;
 8006054:	e3bf      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'R'):{
    buffer[0]=0xfe;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	22fe      	movs	r2, #254	; 0xfe
 800605a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x12;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	3301      	adds	r3, #1
 8006060:	2212      	movs	r2, #18
 8006062:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x32;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	3302      	adds	r3, #2
 8006068:	2232      	movs	r2, #50	; 0x32
 800606a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x52;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	3303      	adds	r3, #3
 8006070:	2252      	movs	r2, #82	; 0x52
 8006072:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x8c;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	3304      	adds	r3, #4
 8006078:	228c      	movs	r2, #140	; 0x8c
 800607a:	701a      	strb	r2, [r3, #0]
  }break;
 800607c:	e3ab      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'S'):{
    buffer[0]=0x8c;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	228c      	movs	r2, #140	; 0x8c
 8006082:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x92;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	3301      	adds	r3, #1
 8006088:	2292      	movs	r2, #146	; 0x92
 800608a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x92;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	3302      	adds	r3, #2
 8006090:	2292      	movs	r2, #146	; 0x92
 8006092:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x92;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	3303      	adds	r3, #3
 8006098:	2292      	movs	r2, #146	; 0x92
 800609a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x62;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	3304      	adds	r3, #4
 80060a0:	2262      	movs	r2, #98	; 0x62
 80060a2:	701a      	strb	r2, [r3, #0]
  }break;
 80060a4:	e397      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'T'):{
    buffer[0]=0x02;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2202      	movs	r2, #2
 80060aa:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x02;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	3301      	adds	r3, #1
 80060b0:	2202      	movs	r2, #2
 80060b2:	701a      	strb	r2, [r3, #0]
    buffer[2]=0xfe;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	3302      	adds	r3, #2
 80060b8:	22fe      	movs	r2, #254	; 0xfe
 80060ba:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x02;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	3303      	adds	r3, #3
 80060c0:	2202      	movs	r2, #2
 80060c2:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x02;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	3304      	adds	r3, #4
 80060c8:	2202      	movs	r2, #2
 80060ca:	701a      	strb	r2, [r3, #0]
  }break;
 80060cc:	e383      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'U'):{
    buffer[0]=0x7e;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	227e      	movs	r2, #126	; 0x7e
 80060d2:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x80;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	3301      	adds	r3, #1
 80060d8:	2280      	movs	r2, #128	; 0x80
 80060da:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x80;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	3302      	adds	r3, #2
 80060e0:	2280      	movs	r2, #128	; 0x80
 80060e2:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x80;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	3303      	adds	r3, #3
 80060e8:	2280      	movs	r2, #128	; 0x80
 80060ea:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x7e;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	3304      	adds	r3, #4
 80060f0:	227e      	movs	r2, #126	; 0x7e
 80060f2:	701a      	strb	r2, [r3, #0]
  }break;
 80060f4:	e36f      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'V'):{
    buffer[0]=0x3e;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	223e      	movs	r2, #62	; 0x3e
 80060fa:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x40;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	3301      	adds	r3, #1
 8006100:	2240      	movs	r2, #64	; 0x40
 8006102:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x80;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	3302      	adds	r3, #2
 8006108:	2280      	movs	r2, #128	; 0x80
 800610a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x40;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	3303      	adds	r3, #3
 8006110:	2240      	movs	r2, #64	; 0x40
 8006112:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x3e;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	3304      	adds	r3, #4
 8006118:	223e      	movs	r2, #62	; 0x3e
 800611a:	701a      	strb	r2, [r3, #0]
  }break;
 800611c:	e35b      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'W'):{
    buffer[0]=0x7e;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	227e      	movs	r2, #126	; 0x7e
 8006122:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x80;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	3301      	adds	r3, #1
 8006128:	2280      	movs	r2, #128	; 0x80
 800612a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x70;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	3302      	adds	r3, #2
 8006130:	2270      	movs	r2, #112	; 0x70
 8006132:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x80;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	3303      	adds	r3, #3
 8006138:	2280      	movs	r2, #128	; 0x80
 800613a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x7e;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	3304      	adds	r3, #4
 8006140:	227e      	movs	r2, #126	; 0x7e
 8006142:	701a      	strb	r2, [r3, #0]
  }break;
 8006144:	e347      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'X'):{
    buffer[0]=0xc6;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	22c6      	movs	r2, #198	; 0xc6
 800614a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x28;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	3301      	adds	r3, #1
 8006150:	2228      	movs	r2, #40	; 0x28
 8006152:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x10;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	3302      	adds	r3, #2
 8006158:	2210      	movs	r2, #16
 800615a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x28;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	3303      	adds	r3, #3
 8006160:	2228      	movs	r2, #40	; 0x28
 8006162:	701a      	strb	r2, [r3, #0]
    buffer[4]=0xc6;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	3304      	adds	r3, #4
 8006168:	22c6      	movs	r2, #198	; 0xc6
 800616a:	701a      	strb	r2, [r3, #0]
  }break;
 800616c:	e333      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'Y'):{
    buffer[0]=0x0e;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	220e      	movs	r2, #14
 8006172:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x10;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	3301      	adds	r3, #1
 8006178:	2210      	movs	r2, #16
 800617a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0xe0;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	3302      	adds	r3, #2
 8006180:	22e0      	movs	r2, #224	; 0xe0
 8006182:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x10;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	3303      	adds	r3, #3
 8006188:	2210      	movs	r2, #16
 800618a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x0e;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	3304      	adds	r3, #4
 8006190:	220e      	movs	r2, #14
 8006192:	701a      	strb	r2, [r3, #0]
  }break;
 8006194:	e31f      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'Z'):{
    buffer[0]=0xc2;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	22c2      	movs	r2, #194	; 0xc2
 800619a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0xa2;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	3301      	adds	r3, #1
 80061a0:	22a2      	movs	r2, #162	; 0xa2
 80061a2:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x92;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	3302      	adds	r3, #2
 80061a8:	2292      	movs	r2, #146	; 0x92
 80061aa:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x8a;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	3303      	adds	r3, #3
 80061b0:	228a      	movs	r2, #138	; 0x8a
 80061b2:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x86;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	3304      	adds	r3, #4
 80061b8:	2286      	movs	r2, #134	; 0x86
 80061ba:	701a      	strb	r2, [r3, #0]
  }break;
 80061bc:	e30b      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'0'):{
    buffer[0]=0x7c;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	227c      	movs	r2, #124	; 0x7c
 80061c2:	701a      	strb	r2, [r3, #0]
    buffer[1]=0xa2;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	3301      	adds	r3, #1
 80061c8:	22a2      	movs	r2, #162	; 0xa2
 80061ca:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x92;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	3302      	adds	r3, #2
 80061d0:	2292      	movs	r2, #146	; 0x92
 80061d2:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x8a;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	3303      	adds	r3, #3
 80061d8:	228a      	movs	r2, #138	; 0x8a
 80061da:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x7c;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	3304      	adds	r3, #4
 80061e0:	227c      	movs	r2, #124	; 0x7c
 80061e2:	701a      	strb	r2, [r3, #0]
  }break;
 80061e4:	e2f7      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'1'):{
    buffer[0]=0x00;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x84;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	3301      	adds	r3, #1
 80061f0:	2284      	movs	r2, #132	; 0x84
 80061f2:	701a      	strb	r2, [r3, #0]
    buffer[2]=0xfe;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	3302      	adds	r3, #2
 80061f8:	22fe      	movs	r2, #254	; 0xfe
 80061fa:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x80;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	3303      	adds	r3, #3
 8006200:	2280      	movs	r2, #128	; 0x80
 8006202:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	3304      	adds	r3, #4
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]
  }break;
 800620c:	e2e3      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'2'):{
    buffer[0]=0x84;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2284      	movs	r2, #132	; 0x84
 8006212:	701a      	strb	r2, [r3, #0]
    buffer[1]=0xc2;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	3301      	adds	r3, #1
 8006218:	22c2      	movs	r2, #194	; 0xc2
 800621a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0xa2;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	3302      	adds	r3, #2
 8006220:	22a2      	movs	r2, #162	; 0xa2
 8006222:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x92;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	3303      	adds	r3, #3
 8006228:	2292      	movs	r2, #146	; 0x92
 800622a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x8c;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	3304      	adds	r3, #4
 8006230:	228c      	movs	r2, #140	; 0x8c
 8006232:	701a      	strb	r2, [r3, #0]
  }break;
 8006234:	e2cf      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'3'):{
    buffer[0]=0x42;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2242      	movs	r2, #66	; 0x42
 800623a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x82;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	3301      	adds	r3, #1
 8006240:	2282      	movs	r2, #130	; 0x82
 8006242:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x8a;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	3302      	adds	r3, #2
 8006248:	228a      	movs	r2, #138	; 0x8a
 800624a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x96;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	3303      	adds	r3, #3
 8006250:	2296      	movs	r2, #150	; 0x96
 8006252:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x62;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	3304      	adds	r3, #4
 8006258:	2262      	movs	r2, #98	; 0x62
 800625a:	701a      	strb	r2, [r3, #0]
  }break;
 800625c:	e2bb      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'4'):{
    buffer[0]=0x30;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2230      	movs	r2, #48	; 0x30
 8006262:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x28;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	2228      	movs	r2, #40	; 0x28
 800626a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x24;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	3302      	adds	r3, #2
 8006270:	2224      	movs	r2, #36	; 0x24
 8006272:	701a      	strb	r2, [r3, #0]
    buffer[3]=0xfe;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	3303      	adds	r3, #3
 8006278:	22fe      	movs	r2, #254	; 0xfe
 800627a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x20;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	3304      	adds	r3, #4
 8006280:	2220      	movs	r2, #32
 8006282:	701a      	strb	r2, [r3, #0]
  }break;
 8006284:	e2a7      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'5'):{
    buffer[0]=0x4e;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	224e      	movs	r2, #78	; 0x4e
 800628a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x8a;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	3301      	adds	r3, #1
 8006290:	228a      	movs	r2, #138	; 0x8a
 8006292:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x8a;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	3302      	adds	r3, #2
 8006298:	228a      	movs	r2, #138	; 0x8a
 800629a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x8a;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	3303      	adds	r3, #3
 80062a0:	228a      	movs	r2, #138	; 0x8a
 80062a2:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x72;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	3304      	adds	r3, #4
 80062a8:	2272      	movs	r2, #114	; 0x72
 80062aa:	701a      	strb	r2, [r3, #0]
  }break;
 80062ac:	e293      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'6'):{
    buffer[0]=0x78;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2278      	movs	r2, #120	; 0x78
 80062b2:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x94;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	3301      	adds	r3, #1
 80062b8:	2294      	movs	r2, #148	; 0x94
 80062ba:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x92;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	3302      	adds	r3, #2
 80062c0:	2292      	movs	r2, #146	; 0x92
 80062c2:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x92;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	3303      	adds	r3, #3
 80062c8:	2292      	movs	r2, #146	; 0x92
 80062ca:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x60;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	3304      	adds	r3, #4
 80062d0:	2260      	movs	r2, #96	; 0x60
 80062d2:	701a      	strb	r2, [r3, #0]
  }break;
 80062d4:	e27f      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'7'):{
    buffer[0]=0x06;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2206      	movs	r2, #6
 80062da:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x02;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	3301      	adds	r3, #1
 80062e0:	2202      	movs	r2, #2
 80062e2:	701a      	strb	r2, [r3, #0]
    buffer[2]=0xe2;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	3302      	adds	r3, #2
 80062e8:	22e2      	movs	r2, #226	; 0xe2
 80062ea:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x12;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	3303      	adds	r3, #3
 80062f0:	2212      	movs	r2, #18
 80062f2:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x0e;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	3304      	adds	r3, #4
 80062f8:	220e      	movs	r2, #14
 80062fa:	701a      	strb	r2, [r3, #0]
  }break;
 80062fc:	e26b      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'8'):{
    buffer[0]=0x6c;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	226c      	movs	r2, #108	; 0x6c
 8006302:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x92;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	3301      	adds	r3, #1
 8006308:	2292      	movs	r2, #146	; 0x92
 800630a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x92;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	3302      	adds	r3, #2
 8006310:	2292      	movs	r2, #146	; 0x92
 8006312:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x92;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	3303      	adds	r3, #3
 8006318:	2292      	movs	r2, #146	; 0x92
 800631a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x6c;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	3304      	adds	r3, #4
 8006320:	226c      	movs	r2, #108	; 0x6c
 8006322:	701a      	strb	r2, [r3, #0]
  }break;
 8006324:	e257      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'9'):{
    buffer[0]=0x0c;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	220c      	movs	r2, #12
 800632a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x12;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	3301      	adds	r3, #1
 8006330:	2212      	movs	r2, #18
 8006332:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x92;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	3302      	adds	r3, #2
 8006338:	2292      	movs	r2, #146	; 0x92
 800633a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x52;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	3303      	adds	r3, #3
 8006340:	2252      	movs	r2, #82	; 0x52
 8006342:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x3c;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	3304      	adds	r3, #4
 8006348:	223c      	movs	r2, #60	; 0x3c
 800634a:	701a      	strb	r2, [r3, #0]
  }break;
 800634c:	e243      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)' '):{
    buffer[0]=0x00;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2200      	movs	r2, #0
 8006352:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x00;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	3301      	adds	r3, #1
 8006358:	2200      	movs	r2, #0
 800635a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x00;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	3302      	adds	r3, #2
 8006360:	2200      	movs	r2, #0
 8006362:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x00;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	3303      	adds	r3, #3
 8006368:	2200      	movs	r2, #0
 800636a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	3304      	adds	r3, #4
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
  }break;
 8006374:	e22f      	b.n	80067d6 <CBM_ascii5x8+0x101a>


  case((uint8_t)'!'):{
    buffer[0]=0x00;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x00;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	3301      	adds	r3, #1
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x5e;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	3302      	adds	r3, #2
 8006388:	225e      	movs	r2, #94	; 0x5e
 800638a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x00;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	3303      	adds	r3, #3
 8006390:	2200      	movs	r2, #0
 8006392:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	3304      	adds	r3, #4
 8006398:	2200      	movs	r2, #0
 800639a:	701a      	strb	r2, [r3, #0]
  }break;
 800639c:	e21b      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'"'):{
    buffer[0]=0x00;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2200      	movs	r2, #0
 80063a2:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x0e;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	3301      	adds	r3, #1
 80063a8:	220e      	movs	r2, #14
 80063aa:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x00;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	3302      	adds	r3, #2
 80063b0:	2200      	movs	r2, #0
 80063b2:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x0e;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	3303      	adds	r3, #3
 80063b8:	220e      	movs	r2, #14
 80063ba:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	3304      	adds	r3, #4
 80063c0:	2200      	movs	r2, #0
 80063c2:	701a      	strb	r2, [r3, #0]
  }break;
 80063c4:	e207      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'#'):{
    buffer[0]=0x28;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2228      	movs	r2, #40	; 0x28
 80063ca:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x7e;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	3301      	adds	r3, #1
 80063d0:	227e      	movs	r2, #126	; 0x7e
 80063d2:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x28;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	3302      	adds	r3, #2
 80063d8:	2228      	movs	r2, #40	; 0x28
 80063da:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x7e;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	3303      	adds	r3, #3
 80063e0:	227e      	movs	r2, #126	; 0x7e
 80063e2:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x28;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	3304      	adds	r3, #4
 80063e8:	2228      	movs	r2, #40	; 0x28
 80063ea:	701a      	strb	r2, [r3, #0]
  }break;
 80063ec:	e1f3      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'$'):{
    buffer[0]=0x48;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2248      	movs	r2, #72	; 0x48
 80063f2:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x54;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	3301      	adds	r3, #1
 80063f8:	2254      	movs	r2, #84	; 0x54
 80063fa:	701a      	strb	r2, [r3, #0]
    buffer[2]=0xfe;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	3302      	adds	r3, #2
 8006400:	22fe      	movs	r2, #254	; 0xfe
 8006402:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x54;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	3303      	adds	r3, #3
 8006408:	2254      	movs	r2, #84	; 0x54
 800640a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x24;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	3304      	adds	r3, #4
 8006410:	2224      	movs	r2, #36	; 0x24
 8006412:	701a      	strb	r2, [r3, #0]
  }break;
 8006414:	e1df      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'%'):{
    buffer[0]=0x46;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2246      	movs	r2, #70	; 0x46
 800641a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x26;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	3301      	adds	r3, #1
 8006420:	2226      	movs	r2, #38	; 0x26
 8006422:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x10;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	3302      	adds	r3, #2
 8006428:	2210      	movs	r2, #16
 800642a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0xc8;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	3303      	adds	r3, #3
 8006430:	22c8      	movs	r2, #200	; 0xc8
 8006432:	701a      	strb	r2, [r3, #0]
    buffer[4]=0xc4;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	3304      	adds	r3, #4
 8006438:	22c4      	movs	r2, #196	; 0xc4
 800643a:	701a      	strb	r2, [r3, #0]
  }break;
 800643c:	e1cb      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'&'):{
    buffer[0]=0x6c;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	226c      	movs	r2, #108	; 0x6c
 8006442:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x92;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	3301      	adds	r3, #1
 8006448:	2292      	movs	r2, #146	; 0x92
 800644a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0xaa;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	3302      	adds	r3, #2
 8006450:	22aa      	movs	r2, #170	; 0xaa
 8006452:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x44;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	3303      	adds	r3, #3
 8006458:	2244      	movs	r2, #68	; 0x44
 800645a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0xa0;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	3304      	adds	r3, #4
 8006460:	22a0      	movs	r2, #160	; 0xa0
 8006462:	701a      	strb	r2, [r3, #0]
  }break;
 8006464:	e1b7      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'\''):{
    buffer[0]=0x00;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2200      	movs	r2, #0
 800646a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x00;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	3301      	adds	r3, #1
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x0a;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	3302      	adds	r3, #2
 8006478:	220a      	movs	r2, #10
 800647a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x06;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	3303      	adds	r3, #3
 8006480:	2206      	movs	r2, #6
 8006482:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	3304      	adds	r3, #4
 8006488:	2200      	movs	r2, #0
 800648a:	701a      	strb	r2, [r3, #0]
  }break;
 800648c:	e1a3      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'('):{
    buffer[0]=0x00;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2200      	movs	r2, #0
 8006492:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x38;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	3301      	adds	r3, #1
 8006498:	2238      	movs	r2, #56	; 0x38
 800649a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x44;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	3302      	adds	r3, #2
 80064a0:	2244      	movs	r2, #68	; 0x44
 80064a2:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x82;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	3303      	adds	r3, #3
 80064a8:	2282      	movs	r2, #130	; 0x82
 80064aa:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	3304      	adds	r3, #4
 80064b0:	2200      	movs	r2, #0
 80064b2:	701a      	strb	r2, [r3, #0]
  }break;
 80064b4:	e18f      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)')'):{
    buffer[0]=0x00;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x82;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	3301      	adds	r3, #1
 80064c0:	2282      	movs	r2, #130	; 0x82
 80064c2:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x44;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	3302      	adds	r3, #2
 80064c8:	2244      	movs	r2, #68	; 0x44
 80064ca:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x38;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	3303      	adds	r3, #3
 80064d0:	2238      	movs	r2, #56	; 0x38
 80064d2:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	3304      	adds	r3, #4
 80064d8:	2200      	movs	r2, #0
 80064da:	701a      	strb	r2, [r3, #0]
  }break;
 80064dc:	e17b      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'*'):{
    buffer[0]=0x28;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2228      	movs	r2, #40	; 0x28
 80064e2:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x10;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	3301      	adds	r3, #1
 80064e8:	2210      	movs	r2, #16
 80064ea:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x7c;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	3302      	adds	r3, #2
 80064f0:	227c      	movs	r2, #124	; 0x7c
 80064f2:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x10;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	3303      	adds	r3, #3
 80064f8:	2210      	movs	r2, #16
 80064fa:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x28;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	3304      	adds	r3, #4
 8006500:	2228      	movs	r2, #40	; 0x28
 8006502:	701a      	strb	r2, [r3, #0]
  }break;
 8006504:	e167      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'+'):{
    buffer[0]=0x10;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2210      	movs	r2, #16
 800650a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x10;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	3301      	adds	r3, #1
 8006510:	2210      	movs	r2, #16
 8006512:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x7c;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	3302      	adds	r3, #2
 8006518:	227c      	movs	r2, #124	; 0x7c
 800651a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x10;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	3303      	adds	r3, #3
 8006520:	2210      	movs	r2, #16
 8006522:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x10;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	3304      	adds	r3, #4
 8006528:	2210      	movs	r2, #16
 800652a:	701a      	strb	r2, [r3, #0]
  }break;
 800652c:	e153      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)','):{
    buffer[0]=0x00;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2200      	movs	r2, #0
 8006532:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x00;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	3301      	adds	r3, #1
 8006538:	2200      	movs	r2, #0
 800653a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0xa0;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	3302      	adds	r3, #2
 8006540:	22a0      	movs	r2, #160	; 0xa0
 8006542:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x60;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	3303      	adds	r3, #3
 8006548:	2260      	movs	r2, #96	; 0x60
 800654a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	3304      	adds	r3, #4
 8006550:	2200      	movs	r2, #0
 8006552:	701a      	strb	r2, [r3, #0]
  }break;
 8006554:	e13f      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'-'):{
    buffer[0]=0x10;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2210      	movs	r2, #16
 800655a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x10;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	3301      	adds	r3, #1
 8006560:	2210      	movs	r2, #16
 8006562:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x10;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	3302      	adds	r3, #2
 8006568:	2210      	movs	r2, #16
 800656a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x10;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	3303      	adds	r3, #3
 8006570:	2210      	movs	r2, #16
 8006572:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x10;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	3304      	adds	r3, #4
 8006578:	2210      	movs	r2, #16
 800657a:	701a      	strb	r2, [r3, #0]
  }break;
 800657c:	e12b      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'.'):{
    buffer[0]=0x00;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x00;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	3301      	adds	r3, #1
 8006588:	2200      	movs	r2, #0
 800658a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x60;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	3302      	adds	r3, #2
 8006590:	2260      	movs	r2, #96	; 0x60
 8006592:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x60;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	3303      	adds	r3, #3
 8006598:	2260      	movs	r2, #96	; 0x60
 800659a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	3304      	adds	r3, #4
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]
  }break;
 80065a4:	e117      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'/'):{
    buffer[0]=0x40;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2240      	movs	r2, #64	; 0x40
 80065aa:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x20;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	3301      	adds	r3, #1
 80065b0:	2220      	movs	r2, #32
 80065b2:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x10;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	3302      	adds	r3, #2
 80065b8:	2210      	movs	r2, #16
 80065ba:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x08;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	3303      	adds	r3, #3
 80065c0:	2208      	movs	r2, #8
 80065c2:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x04;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	3304      	adds	r3, #4
 80065c8:	2204      	movs	r2, #4
 80065ca:	701a      	strb	r2, [r3, #0]
  }break;
 80065cc:	e103      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)':'):{
    buffer[0]=0x00;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2200      	movs	r2, #0
 80065d2:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x6c;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	3301      	adds	r3, #1
 80065d8:	226c      	movs	r2, #108	; 0x6c
 80065da:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x6c;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	3302      	adds	r3, #2
 80065e0:	226c      	movs	r2, #108	; 0x6c
 80065e2:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x00;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	3303      	adds	r3, #3
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	3304      	adds	r3, #4
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
  }break;
 80065f4:	e0ef      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)';'):{
    buffer[0]=0x00;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2200      	movs	r2, #0
 80065fa:	701a      	strb	r2, [r3, #0]
    buffer[1]=0xac;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	3301      	adds	r3, #1
 8006600:	22ac      	movs	r2, #172	; 0xac
 8006602:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x6c;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	3302      	adds	r3, #2
 8006608:	226c      	movs	r2, #108	; 0x6c
 800660a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x00;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	3303      	adds	r3, #3
 8006610:	2200      	movs	r2, #0
 8006612:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	3304      	adds	r3, #4
 8006618:	2200      	movs	r2, #0
 800661a:	701a      	strb	r2, [r3, #0]
  }break;
 800661c:	e0db      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'<'):{
    buffer[0]=0x10;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2210      	movs	r2, #16
 8006622:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x28;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	3301      	adds	r3, #1
 8006628:	2228      	movs	r2, #40	; 0x28
 800662a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x44;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	3302      	adds	r3, #2
 8006630:	2244      	movs	r2, #68	; 0x44
 8006632:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x82;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	3303      	adds	r3, #3
 8006638:	2282      	movs	r2, #130	; 0x82
 800663a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	3304      	adds	r3, #4
 8006640:	2200      	movs	r2, #0
 8006642:	701a      	strb	r2, [r3, #0]
  }break;
 8006644:	e0c7      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'='):{
    buffer[0]=0x28;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2228      	movs	r2, #40	; 0x28
 800664a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x28;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	3301      	adds	r3, #1
 8006650:	2228      	movs	r2, #40	; 0x28
 8006652:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x28;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	3302      	adds	r3, #2
 8006658:	2228      	movs	r2, #40	; 0x28
 800665a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x28;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	3303      	adds	r3, #3
 8006660:	2228      	movs	r2, #40	; 0x28
 8006662:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x28;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	3304      	adds	r3, #4
 8006668:	2228      	movs	r2, #40	; 0x28
 800666a:	701a      	strb	r2, [r3, #0]
  }break;
 800666c:	e0b3      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'>'):{
    buffer[0]=0x00;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2200      	movs	r2, #0
 8006672:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x82;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	3301      	adds	r3, #1
 8006678:	2282      	movs	r2, #130	; 0x82
 800667a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x44;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	3302      	adds	r3, #2
 8006680:	2244      	movs	r2, #68	; 0x44
 8006682:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x28;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	3303      	adds	r3, #3
 8006688:	2228      	movs	r2, #40	; 0x28
 800668a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x10;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	3304      	adds	r3, #4
 8006690:	2210      	movs	r2, #16
 8006692:	701a      	strb	r2, [r3, #0]
  }break;
 8006694:	e09f      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'?'):{
    buffer[0]=0x04;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2204      	movs	r2, #4
 800669a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x02;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	3301      	adds	r3, #1
 80066a0:	2202      	movs	r2, #2
 80066a2:	701a      	strb	r2, [r3, #0]
    buffer[2]=0xa2;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	3302      	adds	r3, #2
 80066a8:	22a2      	movs	r2, #162	; 0xa2
 80066aa:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x12;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	3303      	adds	r3, #3
 80066b0:	2212      	movs	r2, #18
 80066b2:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x0c;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	3304      	adds	r3, #4
 80066b8:	220c      	movs	r2, #12
 80066ba:	701a      	strb	r2, [r3, #0]
  }break;
 80066bc:	e08b      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'['):{
    buffer[0]=0x00;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2200      	movs	r2, #0
 80066c2:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x7e;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	3301      	adds	r3, #1
 80066c8:	227e      	movs	r2, #126	; 0x7e
 80066ca:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x42;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	3302      	adds	r3, #2
 80066d0:	2242      	movs	r2, #66	; 0x42
 80066d2:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x42;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	3303      	adds	r3, #3
 80066d8:	2242      	movs	r2, #66	; 0x42
 80066da:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	3304      	adds	r3, #4
 80066e0:	2200      	movs	r2, #0
 80066e2:	701a      	strb	r2, [r3, #0]
  }break;
 80066e4:	e077      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)']'):{
    buffer[0]=0x00;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2200      	movs	r2, #0
 80066ea:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x42;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	3301      	adds	r3, #1
 80066f0:	2242      	movs	r2, #66	; 0x42
 80066f2:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x42;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	3302      	adds	r3, #2
 80066f8:	2242      	movs	r2, #66	; 0x42
 80066fa:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x7e;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	3303      	adds	r3, #3
 8006700:	227e      	movs	r2, #126	; 0x7e
 8006702:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	3304      	adds	r3, #4
 8006708:	2200      	movs	r2, #0
 800670a:	701a      	strb	r2, [r3, #0]
  }break;
 800670c:	e063      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'^'):{
    buffer[0]=0x00;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2200      	movs	r2, #0
 8006712:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x04;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	3301      	adds	r3, #1
 8006718:	2204      	movs	r2, #4
 800671a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x02;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	3302      	adds	r3, #2
 8006720:	2202      	movs	r2, #2
 8006722:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x04;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	3303      	adds	r3, #3
 8006728:	2204      	movs	r2, #4
 800672a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	3304      	adds	r3, #4
 8006730:	2200      	movs	r2, #0
 8006732:	701a      	strb	r2, [r3, #0]
  }break;
 8006734:	e04f      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'_'):{
    buffer[0]=0x80;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2280      	movs	r2, #128	; 0x80
 800673a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x80;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	3301      	adds	r3, #1
 8006740:	2280      	movs	r2, #128	; 0x80
 8006742:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x80;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	3302      	adds	r3, #2
 8006748:	2280      	movs	r2, #128	; 0x80
 800674a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x80;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	3303      	adds	r3, #3
 8006750:	2280      	movs	r2, #128	; 0x80
 8006752:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x80;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	3304      	adds	r3, #4
 8006758:	2280      	movs	r2, #128	; 0x80
 800675a:	701a      	strb	r2, [r3, #0]
  }break;
 800675c:	e03b      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'`'):{
    buffer[0]=0x00;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x02;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	3301      	adds	r3, #1
 8006768:	2202      	movs	r2, #2
 800676a:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x04;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	3302      	adds	r3, #2
 8006770:	2204      	movs	r2, #4
 8006772:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x00;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	3303      	adds	r3, #3
 8006778:	2200      	movs	r2, #0
 800677a:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	3304      	adds	r3, #4
 8006780:	2200      	movs	r2, #0
 8006782:	701a      	strb	r2, [r3, #0]
  }break;
 8006784:	e027      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'{'):{
    buffer[0]=0x00;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2200      	movs	r2, #0
 800678a:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x10;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	3301      	adds	r3, #1
 8006790:	2210      	movs	r2, #16
 8006792:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x6c;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	3302      	adds	r3, #2
 8006798:	226c      	movs	r2, #108	; 0x6c
 800679a:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x82;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	3303      	adds	r3, #3
 80067a0:	2282      	movs	r2, #130	; 0x82
 80067a2:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	3304      	adds	r3, #4
 80067a8:	2200      	movs	r2, #0
 80067aa:	701a      	strb	r2, [r3, #0]
  }break;
 80067ac:	e013      	b.n	80067d6 <CBM_ascii5x8+0x101a>
  case((uint8_t)'}'):{
    buffer[0]=0x00;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2200      	movs	r2, #0
 80067b2:	701a      	strb	r2, [r3, #0]
    buffer[1]=0x82;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	3301      	adds	r3, #1
 80067b8:	2282      	movs	r2, #130	; 0x82
 80067ba:	701a      	strb	r2, [r3, #0]
    buffer[2]=0x6c;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	3302      	adds	r3, #2
 80067c0:	226c      	movs	r2, #108	; 0x6c
 80067c2:	701a      	strb	r2, [r3, #0]
    buffer[3]=0x10;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	3303      	adds	r3, #3
 80067c8:	2210      	movs	r2, #16
 80067ca:	701a      	strb	r2, [r3, #0]
    buffer[4]=0x00;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	3304      	adds	r3, #4
 80067d0:	2200      	movs	r2, #0
 80067d2:	701a      	strb	r2, [r3, #0]
  }break;
 80067d4:	bf00      	nop
  }
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop

080067e4 <LED_Init>:

#include "LED.h"

void LED_Init()
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	af00      	add	r7, sp, #0
  LED.LED_parameters.LED1_mode = (uint32_t)Config.LED_config.LED_config_segments.LED1_mode;
 80067e8:	4b68      	ldr	r3, [pc, #416]	; (800698c <LED_Init+0x1a8>)
 80067ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067ee:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80067f2:	b2d9      	uxtb	r1, r3
 80067f4:	4a66      	ldr	r2, [pc, #408]	; (8006990 <LED_Init+0x1ac>)
 80067f6:	7893      	ldrb	r3, [r2, #2]
 80067f8:	f361 1347 	bfi	r3, r1, #5, #3
 80067fc:	7093      	strb	r3, [r2, #2]
  LED.LED_parameters.LED2_mode = (uint32_t)Config.LED_config.LED_config_segments.LED2_mode;
 80067fe:	4b63      	ldr	r3, [pc, #396]	; (800698c <LED_Init+0x1a8>)
 8006800:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006804:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8006808:	b2d9      	uxtb	r1, r3
 800680a:	4a61      	ldr	r2, [pc, #388]	; (8006990 <LED_Init+0x1ac>)
 800680c:	78d3      	ldrb	r3, [r2, #3]
 800680e:	f361 0302 	bfi	r3, r1, #0, #3
 8006812:	70d3      	strb	r3, [r2, #3]
  LED.LED_parameters.LED3_mode = (uint32_t)Config.LED_config.LED_config_segments.LED3_mode;
 8006814:	4b5d      	ldr	r3, [pc, #372]	; (800698c <LED_Init+0x1a8>)
 8006816:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800681a:	f3c3 1382 	ubfx	r3, r3, #6, #3
 800681e:	b2d9      	uxtb	r1, r3
 8006820:	4a5b      	ldr	r2, [pc, #364]	; (8006990 <LED_Init+0x1ac>)
 8006822:	78d3      	ldrb	r3, [r2, #3]
 8006824:	f361 03c5 	bfi	r3, r1, #3, #3
 8006828:	70d3      	strb	r3, [r2, #3]

  LED_CNTRL_SMF.LED_CNTRL_SMF_segments.XLED_mode = Config.LED_config.LED_config_segments.LED1_mode;
 800682a:	4b58      	ldr	r3, [pc, #352]	; (800698c <LED_Init+0x1a8>)
 800682c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006830:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8006834:	b2d9      	uxtb	r1, r3
 8006836:	4a57      	ldr	r2, [pc, #348]	; (8006994 <LED_Init+0x1b0>)
 8006838:	7813      	ldrb	r3, [r2, #0]
 800683a:	f361 0343 	bfi	r3, r1, #1, #3
 800683e:	7013      	strb	r3, [r2, #0]
  LED_CNTRL_SMF.LED_CNTRL_SMF_segments.YLED_mode = Config.LED_config.LED_config_segments.LED2_mode;
 8006840:	4b52      	ldr	r3, [pc, #328]	; (800698c <LED_Init+0x1a8>)
 8006842:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006846:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800684a:	b2d9      	uxtb	r1, r3
 800684c:	4a51      	ldr	r2, [pc, #324]	; (8006994 <LED_Init+0x1b0>)
 800684e:	7813      	ldrb	r3, [r2, #0]
 8006850:	f361 1306 	bfi	r3, r1, #4, #3
 8006854:	7013      	strb	r3, [r2, #0]
  LED_CNTRL_SMF.LED_CNTRL_SMF_segments.ZLED_mode = Config.LED_config.LED_config_segments.LED3_mode;
 8006856:	4b4d      	ldr	r3, [pc, #308]	; (800698c <LED_Init+0x1a8>)
 8006858:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800685c:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8006860:	b2d9      	uxtb	r1, r3
 8006862:	4a4c      	ldr	r2, [pc, #304]	; (8006994 <LED_Init+0x1b0>)
 8006864:	8813      	ldrh	r3, [r2, #0]
 8006866:	f361 13c9 	bfi	r3, r1, #7, #3
 800686a:	8013      	strh	r3, [r2, #0]

  LED.LED_parameters.LED1_state = 0;
 800686c:	4a48      	ldr	r2, [pc, #288]	; (8006990 <LED_Init+0x1ac>)
 800686e:	78d3      	ldrb	r3, [r2, #3]
 8006870:	f36f 1386 	bfc	r3, #6, #1
 8006874:	70d3      	strb	r3, [r2, #3]
  LED.LED_parameters.LED2_state = 0;
 8006876:	4a46      	ldr	r2, [pc, #280]	; (8006990 <LED_Init+0x1ac>)
 8006878:	78d3      	ldrb	r3, [r2, #3]
 800687a:	f36f 13c7 	bfc	r3, #7, #1
 800687e:	70d3      	strb	r3, [r2, #3]
  LED.LED_parameters.LED3_state = 0;
 8006880:	4a43      	ldr	r2, [pc, #268]	; (8006990 <LED_Init+0x1ac>)
 8006882:	7913      	ldrb	r3, [r2, #4]
 8006884:	f36f 0300 	bfc	r3, #0, #1
 8006888:	7113      	strb	r3, [r2, #4]

  LED.LED_parameters.LED1_duty = 0;
 800688a:	4a41      	ldr	r2, [pc, #260]	; (8006990 <LED_Init+0x1ac>)
 800688c:	7813      	ldrb	r3, [r2, #0]
 800688e:	f36f 0306 	bfc	r3, #0, #7
 8006892:	7013      	strb	r3, [r2, #0]
  LED.LED_parameters.LED2_duty = 0;
 8006894:	4a3e      	ldr	r2, [pc, #248]	; (8006990 <LED_Init+0x1ac>)
 8006896:	8813      	ldrh	r3, [r2, #0]
 8006898:	f36f 13cd 	bfc	r3, #7, #7
 800689c:	8013      	strh	r3, [r2, #0]
  LED.LED_parameters.LED3_duty = 0;
 800689e:	4a3c      	ldr	r2, [pc, #240]	; (8006990 <LED_Init+0x1ac>)
 80068a0:	6813      	ldr	r3, [r2, #0]
 80068a2:	f36f 3394 	bfc	r3, #14, #7
 80068a6:	6013      	str	r3, [r2, #0]

  LED.LED_parameters.Test_LED_state = 0;
 80068a8:	4a39      	ldr	r2, [pc, #228]	; (8006990 <LED_Init+0x1ac>)
 80068aa:	7913      	ldrb	r3, [r2, #4]
 80068ac:	f36f 0341 	bfc	r3, #1, #1
 80068b0:	7113      	strb	r3, [r2, #4]

  /* Test LED configuration. */

  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN_Msk;
 80068b2:	4b39      	ldr	r3, [pc, #228]	; (8006998 <LED_Init+0x1b4>)
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	4a38      	ldr	r2, [pc, #224]	; (8006998 <LED_Init+0x1b4>)
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	6313      	str	r3, [r2, #48]	; 0x30

  GPIOA->MODER |= ( 0x1UL << ( 5 << 1 ) );
 80068be:	4b37      	ldr	r3, [pc, #220]	; (800699c <LED_Init+0x1b8>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a36      	ldr	r2, [pc, #216]	; (800699c <LED_Init+0x1b8>)
 80068c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068c8:	6013      	str	r3, [r2, #0]

  /****************  Timer 3 initialization in PWM mode. ***********************/

  RCC->AHB1ENR |= ( RCC_AHB1ENR_GPIOBEN_Msk | RCC_AHB1ENR_GPIOCEN_Msk );
 80068ca:	4b33      	ldr	r3, [pc, #204]	; (8006998 <LED_Init+0x1b4>)
 80068cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ce:	4a32      	ldr	r2, [pc, #200]	; (8006998 <LED_Init+0x1b4>)
 80068d0:	f043 0306 	orr.w	r3, r3, #6
 80068d4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Initialize Timer 3 in PWM mode. */

  /*	Enable clock for Timer 3. */

  RCC->APB1ENR |= RCC_APB1ENR_TIM3EN_Msk;
 80068d6:	4b30      	ldr	r3, [pc, #192]	; (8006998 <LED_Init+0x1b4>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	4a2f      	ldr	r2, [pc, #188]	; (8006998 <LED_Init+0x1b4>)
 80068dc:	f043 0302 	orr.w	r3, r3, #2
 80068e0:	6413      	str	r3, [r2, #64]	; 0x40

  /*  Set CC1, CC2 and CC3 unit to output mode. */

  TIM3->CCMR1 |= ( 0x0UL << TIM_CCMR1_CC1S_Pos ) | ( 0x0UL << TIM_CCMR1_CC2S_Pos );
 80068e2:	4b2f      	ldr	r3, [pc, #188]	; (80069a0 <LED_Init+0x1bc>)
 80068e4:	4a2e      	ldr	r2, [pc, #184]	; (80069a0 <LED_Init+0x1bc>)
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	6193      	str	r3, [r2, #24]
  TIM3->CCMR2 |= ( 0x0UL << TIM_CCMR2_CC3S_Pos );
 80068ea:	4b2d      	ldr	r3, [pc, #180]	; (80069a0 <LED_Init+0x1bc>)
 80068ec:	4a2c      	ldr	r2, [pc, #176]	; (80069a0 <LED_Init+0x1bc>)
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	61d3      	str	r3, [r2, #28]

  /*  Set CC1, CC2 and CC3 unit output polarity to active high. */

  TIM3->CCER |= ( (0x0UL << TIM_CCER_CC1P_Pos)
 80068f2:	4b2b      	ldr	r3, [pc, #172]	; (80069a0 <LED_Init+0x1bc>)
 80068f4:	4a2a      	ldr	r2, [pc, #168]	; (80069a0 <LED_Init+0x1bc>)
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	6213      	str	r3, [r2, #32]
		        | (0x0UL << TIM_CCER_CC2P_Pos)
				| (0x0UL << TIM_CCER_CC3P_Pos) );

  /*  Set PWM mode for CC1 to PWM mode 1. */

  TIM3->CCMR1 |= ( (0x6UL << TIM_CCMR1_OC1M_Pos) | (0x6UL << TIM_CCMR1_OC2M_Pos) );
 80068fa:	4b29      	ldr	r3, [pc, #164]	; (80069a0 <LED_Init+0x1bc>)
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	4a28      	ldr	r2, [pc, #160]	; (80069a0 <LED_Init+0x1bc>)
 8006900:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8006904:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006908:	6193      	str	r3, [r2, #24]
  TIM3->CCMR2 |= ( 0X6ul << TIM_CCMR2_OC3M_Pos );
 800690a:	4b25      	ldr	r3, [pc, #148]	; (80069a0 <LED_Init+0x1bc>)
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	4a24      	ldr	r2, [pc, #144]	; (80069a0 <LED_Init+0x1bc>)
 8006910:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006914:	61d3      	str	r3, [r2, #28]

  /*	Set PWM period to 10 kHz. */

  TIM3->ARR = 419;
 8006916:	4b22      	ldr	r3, [pc, #136]	; (80069a0 <LED_Init+0x1bc>)
 8006918:	f240 12a3 	movw	r2, #419	; 0x1a3
 800691c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->PSC = 9;
 800691e:	4b20      	ldr	r3, [pc, #128]	; (80069a0 <LED_Init+0x1bc>)
 8006920:	2209      	movs	r2, #9
 8006922:	629a      	str	r2, [r3, #40]	; 0x28

  /*  Set Duty Cycle to 50% */

  TIM3->CCR1 = (TIM3->ARR >> 1);
 8006924:	4b1e      	ldr	r3, [pc, #120]	; (80069a0 <LED_Init+0x1bc>)
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	4a1d      	ldr	r2, [pc, #116]	; (80069a0 <LED_Init+0x1bc>)
 800692a:	085b      	lsrs	r3, r3, #1
 800692c:	6353      	str	r3, [r2, #52]	; 0x34

  /*	Set preload enable bit. */

  TIM3->CCMR1 |= ( TIM_CCMR1_OC1PE_Msk | TIM_CCMR1_OC2PE_Msk );
 800692e:	4b1c      	ldr	r3, [pc, #112]	; (80069a0 <LED_Init+0x1bc>)
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	4a1b      	ldr	r2, [pc, #108]	; (80069a0 <LED_Init+0x1bc>)
 8006934:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006938:	f043 0308 	orr.w	r3, r3, #8
 800693c:	6193      	str	r3, [r2, #24]
  TIM3->CCMR2 |= TIM_CCMR2_OC3PE_Msk;
 800693e:	4b18      	ldr	r3, [pc, #96]	; (80069a0 <LED_Init+0x1bc>)
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	4a17      	ldr	r2, [pc, #92]	; (80069a0 <LED_Init+0x1bc>)
 8006944:	f043 0308 	orr.w	r3, r3, #8
 8006948:	61d3      	str	r3, [r2, #28]

  /*	Set auto-preload enable bit. */

  TIM3->CR1 |= TIM_CR1_ARPE_Msk;
 800694a:	4b15      	ldr	r3, [pc, #84]	; (80069a0 <LED_Init+0x1bc>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a14      	ldr	r2, [pc, #80]	; (80069a0 <LED_Init+0x1bc>)
 8006950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006954:	6013      	str	r3, [r2, #0]

  /*	Set count direction to up. */

  TIM3->CR1 |= 0x0 << TIM_CR1_DIR_Pos;
 8006956:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <LED_Init+0x1bc>)
 8006958:	4a11      	ldr	r2, [pc, #68]	; (80069a0 <LED_Init+0x1bc>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6013      	str	r3, [r2, #0]

  /*	Set counting mode to edge aligned mode. */

  TIM3->CR1 |= 0x0 << TIM_CR1_CMS_Pos;
 800695e:	4b10      	ldr	r3, [pc, #64]	; (80069a0 <LED_Init+0x1bc>)
 8006960:	4a0f      	ldr	r2, [pc, #60]	; (80069a0 <LED_Init+0x1bc>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6013      	str	r3, [r2, #0]

  /*	Enable CC1, CC2 and CC3 output. */

  TIM3->CCER |= ( TIM_CCER_CC3E_Msk | TIM_CCER_CC2E_Msk | TIM_CCER_CC1E_Msk );
 8006966:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <LED_Init+0x1bc>)
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	4a0d      	ldr	r2, [pc, #52]	; (80069a0 <LED_Init+0x1bc>)
 800696c:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 8006970:	f043 0301 	orr.w	r3, r3, #1
 8006974:	6213      	str	r3, [r2, #32]

  /*	Enable counter. */

  TIM3->CR1 |= TIM_CR1_CEN_Msk;
 8006976:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <LED_Init+0x1bc>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <LED_Init+0x1bc>)
 800697c:	f043 0301 	orr.w	r3, r3, #1
 8006980:	6013      	str	r3, [r2, #0]

  /*Update state of LEDs.*/

  LED_Update();
 8006982:	f000 f80f 	bl	80069a4 <LED_Update>
}
 8006986:	bf00      	nop
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	200005b0 	.word	0x200005b0
 8006990:	200004fc 	.word	0x200004fc
 8006994:	2000045c 	.word	0x2000045c
 8006998:	40023800 	.word	0x40023800
 800699c:	40020000 	.word	0x40020000
 80069a0:	40000400 	.word	0x40000400

080069a4 <LED_Update>:


void LED_Update()
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	af00      	add	r7, sp, #0
	/* If LED over-riding is enabled, discard the values written via MCU
	 * and update from the communication stack. */

	if( LED_CNTRL_SMF.LED_CNTRL_SMF_segments.LED_OVRRD )
 80069a8:	4ba8      	ldr	r3, [pc, #672]	; (8006c4c <LED_Update+0x2a8>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d062      	beq.n	8006a7c <LED_Update+0xd8>
	{
		LED.LED_parameters.LED1_state = LED_CNTRL_SMF.LED_CNTRL_SMF_segments.XLED_state;
 80069b6:	4ba5      	ldr	r3, [pc, #660]	; (8006c4c <LED_Update+0x2a8>)
 80069b8:	785b      	ldrb	r3, [r3, #1]
 80069ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80069be:	b2d9      	uxtb	r1, r3
 80069c0:	4aa3      	ldr	r2, [pc, #652]	; (8006c50 <LED_Update+0x2ac>)
 80069c2:	78d3      	ldrb	r3, [r2, #3]
 80069c4:	f361 1386 	bfi	r3, r1, #6, #1
 80069c8:	70d3      	strb	r3, [r2, #3]
		LED.LED_parameters.LED2_state = LED_CNTRL_SMF.LED_CNTRL_SMF_segments.YLED_state;
 80069ca:	4ba0      	ldr	r3, [pc, #640]	; (8006c4c <LED_Update+0x2a8>)
 80069cc:	785b      	ldrb	r3, [r3, #1]
 80069ce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80069d2:	b2d9      	uxtb	r1, r3
 80069d4:	4a9e      	ldr	r2, [pc, #632]	; (8006c50 <LED_Update+0x2ac>)
 80069d6:	78d3      	ldrb	r3, [r2, #3]
 80069d8:	f361 13c7 	bfi	r3, r1, #7, #1
 80069dc:	70d3      	strb	r3, [r2, #3]
		LED.LED_parameters.LED3_state = LED_CNTRL_SMF.LED_CNTRL_SMF_segments.ZLED_state;
 80069de:	4b9b      	ldr	r3, [pc, #620]	; (8006c4c <LED_Update+0x2a8>)
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80069e6:	b2d9      	uxtb	r1, r3
 80069e8:	4a99      	ldr	r2, [pc, #612]	; (8006c50 <LED_Update+0x2ac>)
 80069ea:	7913      	ldrb	r3, [r2, #4]
 80069ec:	f361 0300 	bfi	r3, r1, #0, #1
 80069f0:	7113      	strb	r3, [r2, #4]
		LED.LED_parameters.LED1_mode = LED_CNTRL_SMF.LED_CNTRL_SMF_segments.XLED_mode;
 80069f2:	4b96      	ldr	r3, [pc, #600]	; (8006c4c <LED_Update+0x2a8>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80069fa:	b2d9      	uxtb	r1, r3
 80069fc:	4a94      	ldr	r2, [pc, #592]	; (8006c50 <LED_Update+0x2ac>)
 80069fe:	7893      	ldrb	r3, [r2, #2]
 8006a00:	f361 1347 	bfi	r3, r1, #5, #3
 8006a04:	7093      	strb	r3, [r2, #2]
		LED.LED_parameters.LED2_mode = LED_CNTRL_SMF.LED_CNTRL_SMF_segments.YLED_mode;
 8006a06:	4b91      	ldr	r3, [pc, #580]	; (8006c4c <LED_Update+0x2a8>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006a0e:	b2d9      	uxtb	r1, r3
 8006a10:	4a8f      	ldr	r2, [pc, #572]	; (8006c50 <LED_Update+0x2ac>)
 8006a12:	78d3      	ldrb	r3, [r2, #3]
 8006a14:	f361 0302 	bfi	r3, r1, #0, #3
 8006a18:	70d3      	strb	r3, [r2, #3]
		LED.LED_parameters.LED3_mode = LED_CNTRL_SMF.LED_CNTRL_SMF_segments.ZLED_mode;
 8006a1a:	4b8c      	ldr	r3, [pc, #560]	; (8006c4c <LED_Update+0x2a8>)
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8006a22:	b2d9      	uxtb	r1, r3
 8006a24:	4a8a      	ldr	r2, [pc, #552]	; (8006c50 <LED_Update+0x2ac>)
 8006a26:	78d3      	ldrb	r3, [r2, #3]
 8006a28:	f361 03c5 	bfi	r3, r1, #3, #3
 8006a2c:	70d3      	strb	r3, [r2, #3]
		LED.LED_parameters.LED1_duty = LED_CNTRL_SMF.LED_CNTRL_SMF_segments.XLED_Brightness;
 8006a2e:	4b87      	ldr	r3, [pc, #540]	; (8006c4c <LED_Update+0x2a8>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f3c3 33c4 	ubfx	r3, r3, #15, #5
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a3c:	b2d9      	uxtb	r1, r3
 8006a3e:	4a84      	ldr	r2, [pc, #528]	; (8006c50 <LED_Update+0x2ac>)
 8006a40:	7813      	ldrb	r3, [r2, #0]
 8006a42:	f361 0306 	bfi	r3, r1, #0, #7
 8006a46:	7013      	strb	r3, [r2, #0]
		LED.LED_parameters.LED2_duty = LED_CNTRL_SMF.LED_CNTRL_SMF_segments.YLED_Brightness;
 8006a48:	4b80      	ldr	r3, [pc, #512]	; (8006c4c <LED_Update+0x2a8>)
 8006a4a:	885b      	ldrh	r3, [r3, #2]
 8006a4c:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a56:	b2d9      	uxtb	r1, r3
 8006a58:	4a7d      	ldr	r2, [pc, #500]	; (8006c50 <LED_Update+0x2ac>)
 8006a5a:	8813      	ldrh	r3, [r2, #0]
 8006a5c:	f361 13cd 	bfi	r3, r1, #7, #7
 8006a60:	8013      	strh	r3, [r2, #0]
		LED.LED_parameters.LED3_duty = LED_CNTRL_SMF.LED_CNTRL_SMF_segments.ZLED_Brightness;
 8006a62:	4b7a      	ldr	r3, [pc, #488]	; (8006c4c <LED_Update+0x2a8>)
 8006a64:	78db      	ldrb	r3, [r3, #3]
 8006a66:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a70:	b2d9      	uxtb	r1, r3
 8006a72:	4a77      	ldr	r2, [pc, #476]	; (8006c50 <LED_Update+0x2ac>)
 8006a74:	6813      	ldr	r3, [r2, #0]
 8006a76:	f361 3394 	bfi	r3, r1, #14, #7
 8006a7a:	6013      	str	r3, [r2, #0]
	}

  /* Update the contents of the message frames. */

  LED_CNTRL_SMF.LED_CNTRL_SMF_segments.XLED_state = LED.LED_parameters.LED1_state;
 8006a7c:	4b74      	ldr	r3, [pc, #464]	; (8006c50 <LED_Update+0x2ac>)
 8006a7e:	78db      	ldrb	r3, [r3, #3]
 8006a80:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006a84:	b2d9      	uxtb	r1, r3
 8006a86:	4a71      	ldr	r2, [pc, #452]	; (8006c4c <LED_Update+0x2a8>)
 8006a88:	7853      	ldrb	r3, [r2, #1]
 8006a8a:	f361 0382 	bfi	r3, r1, #2, #1
 8006a8e:	7053      	strb	r3, [r2, #1]
  LED_CNTRL_SMF.LED_CNTRL_SMF_segments.YLED_state = LED.LED_parameters.LED2_state;
 8006a90:	4b6f      	ldr	r3, [pc, #444]	; (8006c50 <LED_Update+0x2ac>)
 8006a92:	78db      	ldrb	r3, [r3, #3]
 8006a94:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006a98:	b2d9      	uxtb	r1, r3
 8006a9a:	4a6c      	ldr	r2, [pc, #432]	; (8006c4c <LED_Update+0x2a8>)
 8006a9c:	7853      	ldrb	r3, [r2, #1]
 8006a9e:	f361 03c3 	bfi	r3, r1, #3, #1
 8006aa2:	7053      	strb	r3, [r2, #1]
  LED_CNTRL_SMF.LED_CNTRL_SMF_segments.ZLED_state = LED.LED_parameters.LED3_state;
 8006aa4:	4b6a      	ldr	r3, [pc, #424]	; (8006c50 <LED_Update+0x2ac>)
 8006aa6:	791b      	ldrb	r3, [r3, #4]
 8006aa8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006aac:	b2d9      	uxtb	r1, r3
 8006aae:	4a67      	ldr	r2, [pc, #412]	; (8006c4c <LED_Update+0x2a8>)
 8006ab0:	7853      	ldrb	r3, [r2, #1]
 8006ab2:	f361 1304 	bfi	r3, r1, #4, #1
 8006ab6:	7053      	strb	r3, [r2, #1]
  LED_CNTRL_SMF.LED_CNTRL_SMF_segments.XLED_Brightness = LED.LED_parameters.LED1_duty;
 8006ab8:	4b65      	ldr	r3, [pc, #404]	; (8006c50 <LED_Update+0x2ac>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	f003 031f 	and.w	r3, r3, #31
 8006ac6:	b2d9      	uxtb	r1, r3
 8006ac8:	4a60      	ldr	r2, [pc, #384]	; (8006c4c <LED_Update+0x2a8>)
 8006aca:	6813      	ldr	r3, [r2, #0]
 8006acc:	f361 33d3 	bfi	r3, r1, #15, #5
 8006ad0:	6013      	str	r3, [r2, #0]
  LED_CNTRL_SMF.LED_CNTRL_SMF_segments.YLED_Brightness = LED.LED_parameters.LED2_duty;
 8006ad2:	4b5f      	ldr	r3, [pc, #380]	; (8006c50 <LED_Update+0x2ac>)
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	f003 031f 	and.w	r3, r3, #31
 8006ae0:	b2d9      	uxtb	r1, r3
 8006ae2:	4a5a      	ldr	r2, [pc, #360]	; (8006c4c <LED_Update+0x2a8>)
 8006ae4:	8853      	ldrh	r3, [r2, #2]
 8006ae6:	f361 1308 	bfi	r3, r1, #4, #5
 8006aea:	8053      	strh	r3, [r2, #2]
  LED_CNTRL_SMF.LED_CNTRL_SMF_segments.ZLED_Brightness = LED.LED_parameters.LED3_duty;
 8006aec:	4b58      	ldr	r3, [pc, #352]	; (8006c50 <LED_Update+0x2ac>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f3c3 3386 	ubfx	r3, r3, #14, #7
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	f003 031f 	and.w	r3, r3, #31
 8006afa:	b2d9      	uxtb	r1, r3
 8006afc:	4a53      	ldr	r2, [pc, #332]	; (8006c4c <LED_Update+0x2a8>)
 8006afe:	78d3      	ldrb	r3, [r2, #3]
 8006b00:	f361 0345 	bfi	r3, r1, #1, #5
 8006b04:	70d3      	strb	r3, [r2, #3]
  LED_CNTRL_SMF.LED_CNTRL_SMF_segments.XLED_state = LED.LED_parameters.LED1_state;
 8006b06:	4b52      	ldr	r3, [pc, #328]	; (8006c50 <LED_Update+0x2ac>)
 8006b08:	78db      	ldrb	r3, [r3, #3]
 8006b0a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006b0e:	b2d9      	uxtb	r1, r3
 8006b10:	4a4e      	ldr	r2, [pc, #312]	; (8006c4c <LED_Update+0x2a8>)
 8006b12:	7853      	ldrb	r3, [r2, #1]
 8006b14:	f361 0382 	bfi	r3, r1, #2, #1
 8006b18:	7053      	strb	r3, [r2, #1]
  LED_CNTRL_SMF.LED_CNTRL_SMF_segments.YLED_state = LED.LED_parameters.LED2_state;
 8006b1a:	4b4d      	ldr	r3, [pc, #308]	; (8006c50 <LED_Update+0x2ac>)
 8006b1c:	78db      	ldrb	r3, [r3, #3]
 8006b1e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006b22:	b2d9      	uxtb	r1, r3
 8006b24:	4a49      	ldr	r2, [pc, #292]	; (8006c4c <LED_Update+0x2a8>)
 8006b26:	7853      	ldrb	r3, [r2, #1]
 8006b28:	f361 03c3 	bfi	r3, r1, #3, #1
 8006b2c:	7053      	strb	r3, [r2, #1]
  LED_CNTRL_SMF.LED_CNTRL_SMF_segments.ZLED_state = LED.LED_parameters.LED3_state;
 8006b2e:	4b48      	ldr	r3, [pc, #288]	; (8006c50 <LED_Update+0x2ac>)
 8006b30:	791b      	ldrb	r3, [r3, #4]
 8006b32:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006b36:	b2d9      	uxtb	r1, r3
 8006b38:	4a44      	ldr	r2, [pc, #272]	; (8006c4c <LED_Update+0x2a8>)
 8006b3a:	7853      	ldrb	r3, [r2, #1]
 8006b3c:	f361 1304 	bfi	r3, r1, #4, #1
 8006b40:	7053      	strb	r3, [r2, #1]
  LED_CNTRL_SMF.LED_CNTRL_SMF_segments.XLED_mode = LED.LED_parameters.LED1_mode;
 8006b42:	4b43      	ldr	r3, [pc, #268]	; (8006c50 <LED_Update+0x2ac>)
 8006b44:	789b      	ldrb	r3, [r3, #2]
 8006b46:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8006b4a:	b2d9      	uxtb	r1, r3
 8006b4c:	4a3f      	ldr	r2, [pc, #252]	; (8006c4c <LED_Update+0x2a8>)
 8006b4e:	7813      	ldrb	r3, [r2, #0]
 8006b50:	f361 0343 	bfi	r3, r1, #1, #3
 8006b54:	7013      	strb	r3, [r2, #0]
  LED_CNTRL_SMF.LED_CNTRL_SMF_segments.YLED_mode = LED.LED_parameters.LED2_mode;
 8006b56:	4b3e      	ldr	r3, [pc, #248]	; (8006c50 <LED_Update+0x2ac>)
 8006b58:	78db      	ldrb	r3, [r3, #3]
 8006b5a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8006b5e:	b2d9      	uxtb	r1, r3
 8006b60:	4a3a      	ldr	r2, [pc, #232]	; (8006c4c <LED_Update+0x2a8>)
 8006b62:	7813      	ldrb	r3, [r2, #0]
 8006b64:	f361 1306 	bfi	r3, r1, #4, #3
 8006b68:	7013      	strb	r3, [r2, #0]
  LED_CNTRL_SMF.LED_CNTRL_SMF_segments.ZLED_mode = LED.LED_parameters.LED3_mode;
 8006b6a:	4b39      	ldr	r3, [pc, #228]	; (8006c50 <LED_Update+0x2ac>)
 8006b6c:	78db      	ldrb	r3, [r3, #3]
 8006b6e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8006b72:	b2d9      	uxtb	r1, r3
 8006b74:	4a35      	ldr	r2, [pc, #212]	; (8006c4c <LED_Update+0x2a8>)
 8006b76:	8813      	ldrh	r3, [r2, #0]
 8006b78:	f361 13c9 	bfi	r3, r1, #7, #3
 8006b7c:	8013      	strh	r3, [r2, #0]

  if( ( LED.LED_parameters.LED1_mode == Accelerometer_measurement ) ||
 8006b7e:	4b34      	ldr	r3, [pc, #208]	; (8006c50 <LED_Update+0x2ac>)
 8006b80:	789b      	ldrb	r3, [r3, #2]
 8006b82:	f023 031f 	bic.w	r3, r3, #31
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b40      	cmp	r3, #64	; 0x40
 8006b8a:	d00d      	beq.n	8006ba8 <LED_Update+0x204>
	  ( LED.LED_parameters.LED1_mode == Gyroscope_measurement ) ||
 8006b8c:	4b30      	ldr	r3, [pc, #192]	; (8006c50 <LED_Update+0x2ac>)
 8006b8e:	789b      	ldrb	r3, [r3, #2]
 8006b90:	f023 031f 	bic.w	r3, r3, #31
 8006b94:	b2db      	uxtb	r3, r3
  if( ( LED.LED_parameters.LED1_mode == Accelerometer_measurement ) ||
 8006b96:	2b60      	cmp	r3, #96	; 0x60
 8006b98:	d006      	beq.n	8006ba8 <LED_Update+0x204>
	  ( LED.LED_parameters.LED1_mode == PWM_test )
 8006b9a:	4b2d      	ldr	r3, [pc, #180]	; (8006c50 <LED_Update+0x2ac>)
 8006b9c:	789b      	ldrb	r3, [r3, #2]
 8006b9e:	f023 031f 	bic.w	r3, r3, #31
 8006ba2:	b2db      	uxtb	r3, r3
	  ( LED.LED_parameters.LED1_mode == Gyroscope_measurement ) ||
 8006ba4:	2b80      	cmp	r3, #128	; 0x80
 8006ba6:	d118      	bne.n	8006bda <LED_Update+0x236>
  {
	/* LED1: PB4 / TIM3_CH1. */

	/* PB4 assigned alternate function. */

	GPIOB->MODER &= (~( 0x3UL << ( 4 << 1 ) ));
 8006ba8:	4b2a      	ldr	r3, [pc, #168]	; (8006c54 <LED_Update+0x2b0>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a29      	ldr	r2, [pc, #164]	; (8006c54 <LED_Update+0x2b0>)
 8006bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bb2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ( 0x2UL << ( 4 << 1 ) );
 8006bb4:	4b27      	ldr	r3, [pc, #156]	; (8006c54 <LED_Update+0x2b0>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a26      	ldr	r2, [pc, #152]	; (8006c54 <LED_Update+0x2b0>)
 8006bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bbe:	6013      	str	r3, [r2, #0]

    /* PB4 alternate function: TIM3_CH1. */

    GPIOB->AFR[0] &= (~( 0xFUL << ( 4 << 2 ) ));
 8006bc0:	4b24      	ldr	r3, [pc, #144]	; (8006c54 <LED_Update+0x2b0>)
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	4a23      	ldr	r2, [pc, #140]	; (8006c54 <LED_Update+0x2b0>)
 8006bc6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006bca:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= ( 0x2UL << ( 4 << 2 ) );
 8006bcc:	4b21      	ldr	r3, [pc, #132]	; (8006c54 <LED_Update+0x2b0>)
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	4a20      	ldr	r2, [pc, #128]	; (8006c54 <LED_Update+0x2b0>)
 8006bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bd6:	6213      	str	r3, [r2, #32]
 8006bd8:	e044      	b.n	8006c64 <LED_Update+0x2c0>
  }
  else if( ( LED.LED_parameters.LED1_mode == Angle_detection ) ||
 8006bda:	4b1d      	ldr	r3, [pc, #116]	; (8006c50 <LED_Update+0x2ac>)
 8006bdc:	789b      	ldrb	r3, [r3, #2]
 8006bde:	f023 031f 	bic.w	r3, r3, #31
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00d      	beq.n	8006c04 <LED_Update+0x260>
		  ( LED.LED_parameters.LED1_mode == Vibration_detection ) ||
 8006be8:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <LED_Update+0x2ac>)
 8006bea:	789b      	ldrb	r3, [r3, #2]
 8006bec:	f023 031f 	bic.w	r3, r3, #31
 8006bf0:	b2db      	uxtb	r3, r3
  else if( ( LED.LED_parameters.LED1_mode == Angle_detection ) ||
 8006bf2:	2b20      	cmp	r3, #32
 8006bf4:	d006      	beq.n	8006c04 <LED_Update+0x260>
		  ( LED.LED_parameters.LED1_mode == GPIO_test )
 8006bf6:	4b16      	ldr	r3, [pc, #88]	; (8006c50 <LED_Update+0x2ac>)
 8006bf8:	789b      	ldrb	r3, [r3, #2]
 8006bfa:	f023 031f 	bic.w	r3, r3, #31
 8006bfe:	b2db      	uxtb	r3, r3
		  ( LED.LED_parameters.LED1_mode == Vibration_detection ) ||
 8006c00:	2ba0      	cmp	r3, #160	; 0xa0
 8006c02:	d12f      	bne.n	8006c64 <LED_Update+0x2c0>
  )
  {
    GPIOB->MODER &= ~( 0x3UL << ( 4 << 1 ) );
 8006c04:	4b13      	ldr	r3, [pc, #76]	; (8006c54 <LED_Update+0x2b0>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a12      	ldr	r2, [pc, #72]	; (8006c54 <LED_Update+0x2b0>)
 8006c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ( 0x1UL << ( 4 << 1 ) );
 8006c10:	4b10      	ldr	r3, [pc, #64]	; (8006c54 <LED_Update+0x2b0>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a0f      	ldr	r2, [pc, #60]	; (8006c54 <LED_Update+0x2b0>)
 8006c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c1a:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[0] &= (~( 0xFUL << ( 4 << 2 ) ));
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <LED_Update+0x2b0>)
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	4a0c      	ldr	r2, [pc, #48]	; (8006c54 <LED_Update+0x2b0>)
 8006c22:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006c26:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= ( 0x0UL << ( 4 << 2 ) );
 8006c28:	4b0a      	ldr	r3, [pc, #40]	; (8006c54 <LED_Update+0x2b0>)
 8006c2a:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <LED_Update+0x2b0>)
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	6213      	str	r3, [r2, #32]

    if(LED.LED_parameters.LED1_state)
 8006c30:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <LED_Update+0x2ac>)
 8006c32:	78db      	ldrb	r3, [r3, #3]
 8006c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00c      	beq.n	8006c58 <LED_Update+0x2b4>
    {
      GPIOB->ODR |= ( 0x1UL << 4 );
 8006c3e:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <LED_Update+0x2b0>)
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	4a04      	ldr	r2, [pc, #16]	; (8006c54 <LED_Update+0x2b0>)
 8006c44:	f043 0310 	orr.w	r3, r3, #16
 8006c48:	6153      	str	r3, [r2, #20]
 8006c4a:	e00b      	b.n	8006c64 <LED_Update+0x2c0>
 8006c4c:	2000045c 	.word	0x2000045c
 8006c50:	200004fc 	.word	0x200004fc
 8006c54:	40020400 	.word	0x40020400
    }
    else
    {
      GPIOB->ODR &= (~( 0x1UL << 4 ));
 8006c58:	4b8c      	ldr	r3, [pc, #560]	; (8006e8c <LED_Update+0x4e8>)
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	4a8b      	ldr	r2, [pc, #556]	; (8006e8c <LED_Update+0x4e8>)
 8006c5e:	f023 0310 	bic.w	r3, r3, #16
 8006c62:	6153      	str	r3, [r2, #20]
    }
  }

  if(
      ( LED.LED_parameters.LED2_mode == Accelerometer_measurement ) ||
 8006c64:	4b8a      	ldr	r3, [pc, #552]	; (8006e90 <LED_Update+0x4ec>)
 8006c66:	78db      	ldrb	r3, [r3, #3]
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	b2db      	uxtb	r3, r3
  if(
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d00d      	beq.n	8006c8e <LED_Update+0x2ea>
	  ( LED.LED_parameters.LED2_mode == Gyroscope_measurement ) ||
 8006c72:	4b87      	ldr	r3, [pc, #540]	; (8006e90 <LED_Update+0x4ec>)
 8006c74:	78db      	ldrb	r3, [r3, #3]
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	b2db      	uxtb	r3, r3
      ( LED.LED_parameters.LED2_mode == Accelerometer_measurement ) ||
 8006c7c:	2b03      	cmp	r3, #3
 8006c7e:	d006      	beq.n	8006c8e <LED_Update+0x2ea>
	  ( LED.LED_parameters.LED2_mode == PWM_test )
 8006c80:	4b83      	ldr	r3, [pc, #524]	; (8006e90 <LED_Update+0x4ec>)
 8006c82:	78db      	ldrb	r3, [r3, #3]
 8006c84:	f003 0307 	and.w	r3, r3, #7
 8006c88:	b2db      	uxtb	r3, r3
	  ( LED.LED_parameters.LED2_mode == Gyroscope_measurement ) ||
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d118      	bne.n	8006cc0 <LED_Update+0x31c>
  {
	/* LED2: PB5 / TIM3_CH2. */

	/* PB5 assigned alternate function. */

	GPIOB->MODER &= (~( 0x3UL << ( 5 << 1 ) ));
 8006c8e:	4b7f      	ldr	r3, [pc, #508]	; (8006e8c <LED_Update+0x4e8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a7e      	ldr	r2, [pc, #504]	; (8006e8c <LED_Update+0x4e8>)
 8006c94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006c98:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ( 0x2UL << ( 5 << 1 ) );
 8006c9a:	4b7c      	ldr	r3, [pc, #496]	; (8006e8c <LED_Update+0x4e8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a7b      	ldr	r2, [pc, #492]	; (8006e8c <LED_Update+0x4e8>)
 8006ca0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ca4:	6013      	str	r3, [r2, #0]

    /* PB4 alternate function: TIM3_CH2. */

    GPIOB->AFR[0] &= (~( 0xFUL << ( 5 << 2 ) ));
 8006ca6:	4b79      	ldr	r3, [pc, #484]	; (8006e8c <LED_Update+0x4e8>)
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	4a78      	ldr	r2, [pc, #480]	; (8006e8c <LED_Update+0x4e8>)
 8006cac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006cb0:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= ( 0x2UL << ( 5 << 2 ) );
 8006cb2:	4b76      	ldr	r3, [pc, #472]	; (8006e8c <LED_Update+0x4e8>)
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	4a75      	ldr	r2, [pc, #468]	; (8006e8c <LED_Update+0x4e8>)
 8006cb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cbc:	6213      	str	r3, [r2, #32]
 8006cbe:	e03e      	b.n	8006d3e <LED_Update+0x39a>
  }
  else if(
    ( LED.LED_parameters.LED2_mode == Angle_detection ) ||
 8006cc0:	4b73      	ldr	r3, [pc, #460]	; (8006e90 <LED_Update+0x4ec>)
 8006cc2:	78db      	ldrb	r3, [r3, #3]
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	b2db      	uxtb	r3, r3
  else if(
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00d      	beq.n	8006cea <LED_Update+0x346>
	( LED.LED_parameters.LED2_mode == Vibration_detection ) ||
 8006cce:	4b70      	ldr	r3, [pc, #448]	; (8006e90 <LED_Update+0x4ec>)
 8006cd0:	78db      	ldrb	r3, [r3, #3]
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	b2db      	uxtb	r3, r3
    ( LED.LED_parameters.LED2_mode == Angle_detection ) ||
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d006      	beq.n	8006cea <LED_Update+0x346>
    ( LED.LED_parameters.LED2_mode == GPIO_test)
 8006cdc:	4b6c      	ldr	r3, [pc, #432]	; (8006e90 <LED_Update+0x4ec>)
 8006cde:	78db      	ldrb	r3, [r3, #3]
 8006ce0:	f003 0307 	and.w	r3, r3, #7
 8006ce4:	b2db      	uxtb	r3, r3
	( LED.LED_parameters.LED2_mode == Vibration_detection ) ||
 8006ce6:	2b05      	cmp	r3, #5
 8006ce8:	d129      	bne.n	8006d3e <LED_Update+0x39a>
  )
  {
    GPIOB->MODER &= ~( 0x3UL << ( 5 << 1 ) );
 8006cea:	4b68      	ldr	r3, [pc, #416]	; (8006e8c <LED_Update+0x4e8>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a67      	ldr	r2, [pc, #412]	; (8006e8c <LED_Update+0x4e8>)
 8006cf0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006cf4:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ( 0x1UL << ( 5 << 1 ) );
 8006cf6:	4b65      	ldr	r3, [pc, #404]	; (8006e8c <LED_Update+0x4e8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a64      	ldr	r2, [pc, #400]	; (8006e8c <LED_Update+0x4e8>)
 8006cfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d00:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[0] &= (~( 0xFUL << ( 5 << 2 ) ));
 8006d02:	4b62      	ldr	r3, [pc, #392]	; (8006e8c <LED_Update+0x4e8>)
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	4a61      	ldr	r2, [pc, #388]	; (8006e8c <LED_Update+0x4e8>)
 8006d08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d0c:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= ( 0x0UL << ( 5 << 2 ) );
 8006d0e:	4b5f      	ldr	r3, [pc, #380]	; (8006e8c <LED_Update+0x4e8>)
 8006d10:	4a5e      	ldr	r2, [pc, #376]	; (8006e8c <LED_Update+0x4e8>)
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	6213      	str	r3, [r2, #32]

    if(LED.LED_parameters.LED2_state)
 8006d16:	4b5e      	ldr	r3, [pc, #376]	; (8006e90 <LED_Update+0x4ec>)
 8006d18:	78db      	ldrb	r3, [r3, #3]
 8006d1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d006      	beq.n	8006d32 <LED_Update+0x38e>
    {
      GPIOB->ODR |= ( 0x1UL << 5 );
 8006d24:	4b59      	ldr	r3, [pc, #356]	; (8006e8c <LED_Update+0x4e8>)
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	4a58      	ldr	r2, [pc, #352]	; (8006e8c <LED_Update+0x4e8>)
 8006d2a:	f043 0320 	orr.w	r3, r3, #32
 8006d2e:	6153      	str	r3, [r2, #20]
 8006d30:	e005      	b.n	8006d3e <LED_Update+0x39a>
    }
    else
    {
      GPIOB->ODR &= (~( 0x1UL << 5 ));
 8006d32:	4b56      	ldr	r3, [pc, #344]	; (8006e8c <LED_Update+0x4e8>)
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	4a55      	ldr	r2, [pc, #340]	; (8006e8c <LED_Update+0x4e8>)
 8006d38:	f023 0320 	bic.w	r3, r3, #32
 8006d3c:	6153      	str	r3, [r2, #20]
    }
  }


  if(
	  ( LED.LED_parameters.LED3_mode == Accelerometer_measurement ) ||
 8006d3e:	4b54      	ldr	r3, [pc, #336]	; (8006e90 <LED_Update+0x4ec>)
 8006d40:	78db      	ldrb	r3, [r3, #3]
 8006d42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d46:	b2db      	uxtb	r3, r3
  if(
 8006d48:	2b10      	cmp	r3, #16
 8006d4a:	d00d      	beq.n	8006d68 <LED_Update+0x3c4>
	  ( LED.LED_parameters.LED3_mode == Gyroscope_measurement ) ||
 8006d4c:	4b50      	ldr	r3, [pc, #320]	; (8006e90 <LED_Update+0x4ec>)
 8006d4e:	78db      	ldrb	r3, [r3, #3]
 8006d50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d54:	b2db      	uxtb	r3, r3
	  ( LED.LED_parameters.LED3_mode == Accelerometer_measurement ) ||
 8006d56:	2b18      	cmp	r3, #24
 8006d58:	d006      	beq.n	8006d68 <LED_Update+0x3c4>
	  ( LED.LED_parameters.LED3_mode == PWM_test )
 8006d5a:	4b4d      	ldr	r3, [pc, #308]	; (8006e90 <LED_Update+0x4ec>)
 8006d5c:	78db      	ldrb	r3, [r3, #3]
 8006d5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d62:	b2db      	uxtb	r3, r3
	  ( LED.LED_parameters.LED3_mode == Gyroscope_measurement ) ||
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d118      	bne.n	8006d9a <LED_Update+0x3f6>
  {
	/* LED3: PC8 / TIM3_CH3. */

	/* PC8 assigned alternate function. */

	GPIOC->MODER &= (~( 0x3UL << ( 8 << 1 ) ));
 8006d68:	4b4a      	ldr	r3, [pc, #296]	; (8006e94 <LED_Update+0x4f0>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a49      	ldr	r2, [pc, #292]	; (8006e94 <LED_Update+0x4f0>)
 8006d6e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006d72:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= ( 0x2UL << ( 8 << 1 ) );
 8006d74:	4b47      	ldr	r3, [pc, #284]	; (8006e94 <LED_Update+0x4f0>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a46      	ldr	r2, [pc, #280]	; (8006e94 <LED_Update+0x4f0>)
 8006d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d7e:	6013      	str	r3, [r2, #0]

    /* PC8 alternate function: TIM3_CH3. */

    GPIOC->AFR[1] &= (~( 0xFUL << ( ( 8 - 8 ) << 2 ) ));
 8006d80:	4b44      	ldr	r3, [pc, #272]	; (8006e94 <LED_Update+0x4f0>)
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	4a43      	ldr	r2, [pc, #268]	; (8006e94 <LED_Update+0x4f0>)
 8006d86:	f023 030f 	bic.w	r3, r3, #15
 8006d8a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOC->AFR[1] |= ( 0x2UL << ( ( 8 - 8 ) << 2 ) );
 8006d8c:	4b41      	ldr	r3, [pc, #260]	; (8006e94 <LED_Update+0x4f0>)
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	4a40      	ldr	r2, [pc, #256]	; (8006e94 <LED_Update+0x4f0>)
 8006d92:	f043 0302 	orr.w	r3, r3, #2
 8006d96:	6253      	str	r3, [r2, #36]	; 0x24
 8006d98:	e03e      	b.n	8006e18 <LED_Update+0x474>
  }
  else if(
		  ( LED.LED_parameters.LED3_mode == Angle_detection ) ||
 8006d9a:	4b3d      	ldr	r3, [pc, #244]	; (8006e90 <LED_Update+0x4ec>)
 8006d9c:	78db      	ldrb	r3, [r3, #3]
 8006d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006da2:	b2db      	uxtb	r3, r3
  else if(
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00d      	beq.n	8006dc4 <LED_Update+0x420>
		  ( LED.LED_parameters.LED3_mode == Vibration_detection ) ||
 8006da8:	4b39      	ldr	r3, [pc, #228]	; (8006e90 <LED_Update+0x4ec>)
 8006daa:	78db      	ldrb	r3, [r3, #3]
 8006dac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006db0:	b2db      	uxtb	r3, r3
		  ( LED.LED_parameters.LED3_mode == Angle_detection ) ||
 8006db2:	2b08      	cmp	r3, #8
 8006db4:	d006      	beq.n	8006dc4 <LED_Update+0x420>
		  ( LED.LED_parameters.LED3_mode == GPIO_test )
 8006db6:	4b36      	ldr	r3, [pc, #216]	; (8006e90 <LED_Update+0x4ec>)
 8006db8:	78db      	ldrb	r3, [r3, #3]
 8006dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dbe:	b2db      	uxtb	r3, r3
		  ( LED.LED_parameters.LED3_mode == Vibration_detection ) ||
 8006dc0:	2b28      	cmp	r3, #40	; 0x28
 8006dc2:	d129      	bne.n	8006e18 <LED_Update+0x474>
  )
  {
    GPIOC->MODER &= ~( 0x3UL << ( 8 << 1 ) );
 8006dc4:	4b33      	ldr	r3, [pc, #204]	; (8006e94 <LED_Update+0x4f0>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a32      	ldr	r2, [pc, #200]	; (8006e94 <LED_Update+0x4f0>)
 8006dca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006dce:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= ( 0x1UL << ( 8 << 1 ) );
 8006dd0:	4b30      	ldr	r3, [pc, #192]	; (8006e94 <LED_Update+0x4f0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a2f      	ldr	r2, [pc, #188]	; (8006e94 <LED_Update+0x4f0>)
 8006dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dda:	6013      	str	r3, [r2, #0]

    GPIOC->AFR[1] &= (~( 0xFUL << ( ( 8 - 8 )<< 2 ) ));
 8006ddc:	4b2d      	ldr	r3, [pc, #180]	; (8006e94 <LED_Update+0x4f0>)
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	4a2c      	ldr	r2, [pc, #176]	; (8006e94 <LED_Update+0x4f0>)
 8006de2:	f023 030f 	bic.w	r3, r3, #15
 8006de6:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOC->AFR[1] |= ( 0x0UL << ( ( 8 - 8 ) << 2 ) );
 8006de8:	4b2a      	ldr	r3, [pc, #168]	; (8006e94 <LED_Update+0x4f0>)
 8006dea:	4a2a      	ldr	r2, [pc, #168]	; (8006e94 <LED_Update+0x4f0>)
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	6253      	str	r3, [r2, #36]	; 0x24

    if(LED.LED_parameters.LED3_state)
 8006df0:	4b27      	ldr	r3, [pc, #156]	; (8006e90 <LED_Update+0x4ec>)
 8006df2:	791b      	ldrb	r3, [r3, #4]
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d006      	beq.n	8006e0c <LED_Update+0x468>
    {
      GPIOC->ODR |= ( 0x1UL << 8 );
 8006dfe:	4b25      	ldr	r3, [pc, #148]	; (8006e94 <LED_Update+0x4f0>)
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	4a24      	ldr	r2, [pc, #144]	; (8006e94 <LED_Update+0x4f0>)
 8006e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e08:	6153      	str	r3, [r2, #20]
 8006e0a:	e005      	b.n	8006e18 <LED_Update+0x474>
    }
    else
    {
      GPIOC->ODR &= (~( 0x1UL << 8 ));
 8006e0c:	4b21      	ldr	r3, [pc, #132]	; (8006e94 <LED_Update+0x4f0>)
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	4a20      	ldr	r2, [pc, #128]	; (8006e94 <LED_Update+0x4f0>)
 8006e12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e16:	6153      	str	r3, [r2, #20]
    }
  }

  if( LED.LED_parameters.Test_LED_state )
 8006e18:	4b1d      	ldr	r3, [pc, #116]	; (8006e90 <LED_Update+0x4ec>)
 8006e1a:	791b      	ldrb	r3, [r3, #4]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d006      	beq.n	8006e34 <LED_Update+0x490>
  {
    GPIOA->ODR |= ( 0x1U << 5 );
 8006e26:	4b1c      	ldr	r3, [pc, #112]	; (8006e98 <LED_Update+0x4f4>)
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	4a1b      	ldr	r2, [pc, #108]	; (8006e98 <LED_Update+0x4f4>)
 8006e2c:	f043 0320 	orr.w	r3, r3, #32
 8006e30:	6153      	str	r3, [r2, #20]
 8006e32:	e005      	b.n	8006e40 <LED_Update+0x49c>
  }
  else
  {
    GPIOA->ODR &= ~( 0x1UL << 5 );
 8006e34:	4b18      	ldr	r3, [pc, #96]	; (8006e98 <LED_Update+0x4f4>)
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	4a17      	ldr	r2, [pc, #92]	; (8006e98 <LED_Update+0x4f4>)
 8006e3a:	f023 0320 	bic.w	r3, r3, #32
 8006e3e:	6153      	str	r3, [r2, #20]
  }

  /* Set LED duty cycles. */

  TIM3->CCR1 = LED_PWM_Map(LED.LED_parameters.LED1_duty);
 8006e40:	4b13      	ldr	r3, [pc, #76]	; (8006e90 <LED_Update+0x4ec>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 f828 	bl	8006ea0 <LED_PWM_Map>
 8006e50:	4603      	mov	r3, r0
 8006e52:	461a      	mov	r2, r3
 8006e54:	4b11      	ldr	r3, [pc, #68]	; (8006e9c <LED_Update+0x4f8>)
 8006e56:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = LED_PWM_Map(LED.LED_parameters.LED2_duty);
 8006e58:	4b0d      	ldr	r3, [pc, #52]	; (8006e90 <LED_Update+0x4ec>)
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 f81c 	bl	8006ea0 <LED_PWM_Map>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	4b0b      	ldr	r3, [pc, #44]	; (8006e9c <LED_Update+0x4f8>)
 8006e6e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = LED_PWM_Map(LED.LED_parameters.LED3_duty);
 8006e70:	4b07      	ldr	r3, [pc, #28]	; (8006e90 <LED_Update+0x4ec>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f3c3 3386 	ubfx	r3, r3, #14, #7
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f810 	bl	8006ea0 <LED_PWM_Map>
 8006e80:	4603      	mov	r3, r0
 8006e82:	461a      	mov	r2, r3
 8006e84:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <LED_Update+0x4f8>)
 8006e86:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006e88:	bf00      	nop
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	40020400 	.word	0x40020400
 8006e90:	200004fc 	.word	0x200004fc
 8006e94:	40020800 	.word	0x40020800
 8006e98:	40020000 	.word	0x40020000
 8006e9c:	40000400 	.word	0x40000400

08006ea0 <LED_PWM_Map>:

uint16_t LED_PWM_Map(uint8_t duty)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	71fb      	strb	r3, [r7, #7]
  uint32_t result = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60fb      	str	r3, [r7, #12]

  result = (uint32_t)duty * (uint32_t)TIM3->ARR;
 8006eae:	79fb      	ldrb	r3, [r7, #7]
 8006eb0:	4a09      	ldr	r2, [pc, #36]	; (8006ed8 <LED_PWM_Map+0x38>)
 8006eb2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006eb4:	fb02 f303 	mul.w	r3, r2, r3
 8006eb8:	60fb      	str	r3, [r7, #12]
  result = (5*result) >> 9;
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	0a5b      	lsrs	r3, r3, #9
 8006ec4:	60fb      	str	r3, [r7, #12]

  return( (uint16_t)result );
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	b29b      	uxth	r3, r3
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	40000400 	.word	0x40000400

08006edc <I2C1_Init>:
#include "Configurations.h"

#define I2C_TIMEOUT_MS		100

void I2C1_Init()
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
	/* I2C1 GPIO initializations. */

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN_Msk;
 8006ee0:	4b2d      	ldr	r3, [pc, #180]	; (8006f98 <I2C1_Init+0xbc>)
 8006ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee4:	4a2c      	ldr	r2, [pc, #176]	; (8006f98 <I2C1_Init+0xbc>)
 8006ee6:	f043 0302 	orr.w	r3, r3, #2
 8006eea:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER    |= ( 0x2 << ( 2 * 8 ) )			//	PB8 : (I2C1_SCL) AFR
 8006eec:	4b2b      	ldr	r3, [pc, #172]	; (8006f9c <I2C1_Init+0xc0>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a2a      	ldr	r2, [pc, #168]	; (8006f9c <I2C1_Init+0xc0>)
 8006ef2:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8006ef6:	6013      	str	r3, [r2, #0]
					|  ( 0x2 << ( 2 * 9 ) );		//	PB9 : (I2C1_SDA) AFR

	GPIOB->OTYPER	|=	( 1 << 8 ) | ( 1 << 9 );	//	Enable open drain configuration.
 8006ef8:	4b28      	ldr	r3, [pc, #160]	; (8006f9c <I2C1_Init+0xc0>)
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	4a27      	ldr	r2, [pc, #156]	; (8006f9c <I2C1_Init+0xc0>)
 8006efe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006f02:	6053      	str	r3, [r2, #4]

	GPIOB->OSPEEDR |= ( 0x3 << ( 2 * 8 ) ) | ( 0x3 << ( 2 * 9 ) );
 8006f04:	4b25      	ldr	r3, [pc, #148]	; (8006f9c <I2C1_Init+0xc0>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	4a24      	ldr	r2, [pc, #144]	; (8006f9c <I2C1_Init+0xc0>)
 8006f0a:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8006f0e:	6093      	str	r3, [r2, #8]

	GPIOB->AFR[1] 	|= ( 0x4 << ( 4 * 0 ) );		//	PB8 : I2C1_SCL.
 8006f10:	4b22      	ldr	r3, [pc, #136]	; (8006f9c <I2C1_Init+0xc0>)
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	4a21      	ldr	r2, [pc, #132]	; (8006f9c <I2C1_Init+0xc0>)
 8006f16:	f043 0304 	orr.w	r3, r3, #4
 8006f1a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] 	|= ( 0x4 << ( 4 * 1 ) );		//	PB9 : I2C1_SDA.
 8006f1c:	4b1f      	ldr	r3, [pc, #124]	; (8006f9c <I2C1_Init+0xc0>)
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	4a1e      	ldr	r2, [pc, #120]	; (8006f9c <I2C1_Init+0xc0>)
 8006f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f26:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOB->PUPDR |= ( 0x1 << ( 2 * 8 ) ) | ( 0x1 << ( 2 * 9 ) );	//	Enable pull-up resistors.
 8006f28:	4b1c      	ldr	r3, [pc, #112]	; (8006f9c <I2C1_Init+0xc0>)
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	4a1b      	ldr	r2, [pc, #108]	; (8006f9c <I2C1_Init+0xc0>)
 8006f2e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8006f32:	60d3      	str	r3, [r2, #12]

	/* I2C1 peripheral initializations. */

	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN_Msk;
 8006f34:	4b18      	ldr	r3, [pc, #96]	; (8006f98 <I2C1_Init+0xbc>)
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	4a17      	ldr	r2, [pc, #92]	; (8006f98 <I2C1_Init+0xbc>)
 8006f3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f3e:	6413      	str	r3, [r2, #64]	; 0x40

	/*	Reset I2C peripheral. */

	I2C1->CR1 |= I2C_CR1_SWRST_Msk;
 8006f40:	4b17      	ldr	r3, [pc, #92]	; (8006fa0 <I2C1_Init+0xc4>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a16      	ldr	r2, [pc, #88]	; (8006fa0 <I2C1_Init+0xc4>)
 8006f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f4a:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C_CR1_SWRST_Msk;
 8006f4c:	4b14      	ldr	r3, [pc, #80]	; (8006fa0 <I2C1_Init+0xc4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a13      	ldr	r2, [pc, #76]	; (8006fa0 <I2C1_Init+0xc4>)
 8006f52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f56:	6013      	str	r3, [r2, #0]

	/* Set peripheral clock frequency to 40 MHz. */

	I2C1->CR2 |= (40UL << I2C_CR2_FREQ_Pos);
 8006f58:	4b11      	ldr	r3, [pc, #68]	; (8006fa0 <I2C1_Init+0xc4>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	4a10      	ldr	r2, [pc, #64]	; (8006fa0 <I2C1_Init+0xc4>)
 8006f5e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006f62:	6053      	str	r3, [r2, #4]

	/* Set I2C peripheral in full speed mode and set duty cycle to 16:9 mode. */

	I2C1->CCR |= ( I2C_CCR_FS_Msk | I2C_CCR_DUTY_Msk );
 8006f64:	4b0e      	ldr	r3, [pc, #56]	; (8006fa0 <I2C1_Init+0xc4>)
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	4a0d      	ldr	r2, [pc, #52]	; (8006fa0 <I2C1_Init+0xc4>)
 8006f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f6e:	61d3      	str	r3, [r2, #28]
	 *
	 * It was observed that 320 kHz clock frequency caused issues with communication. With CCR = 6,
	 * the I2C clock frequency is 266.66 kHz.
	 * */

	I2C1->CCR |= (6UL << I2C_CCR_CCR_Pos);
 8006f70:	4b0b      	ldr	r3, [pc, #44]	; (8006fa0 <I2C1_Init+0xc4>)
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	4a0a      	ldr	r2, [pc, #40]	; (8006fa0 <I2C1_Init+0xc4>)
 8006f76:	f043 0306 	orr.w	r3, r3, #6
 8006f7a:	61d3      	str	r3, [r2, #28]

	/* Configure rise time to 1 us --> t_RISE = t_periperal * ( 1 + T_RISE ). */

	I2C1->TRISE = 40;
 8006f7c:	4b08      	ldr	r3, [pc, #32]	; (8006fa0 <I2C1_Init+0xc4>)
 8006f7e:	2228      	movs	r2, #40	; 0x28
 8006f80:	621a      	str	r2, [r3, #32]

	/*	Enable I2C peripheral. */

	I2C1->CR1 |= I2C_CR1_PE_Msk;
 8006f82:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <I2C1_Init+0xc4>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a06      	ldr	r2, [pc, #24]	; (8006fa0 <I2C1_Init+0xc4>)
 8006f88:	f043 0301 	orr.w	r3, r3, #1
 8006f8c:	6013      	str	r3, [r2, #0]
}
 8006f8e:	bf00      	nop
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	40023800 	.word	0x40023800
 8006f9c:	40020400 	.word	0x40020400
 8006fa0:	40005400 	.word	0x40005400

08006fa4 <MPU6050_read_register>:


uint8_t MPU6050_read_register( uint8_t device_address, uint8_t register_address )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	460a      	mov	r2, r1
 8006fae:	71fb      	strb	r3, [r7, #7]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73fb      	strb	r3, [r7, #15]

	temp = temp;				//	To avoid warning from compiler.

	uint8_t data = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	73bb      	strb	r3, [r7, #14]

	//I2C1->CR1 |= I2C_CR1_ACK_Msk;

	/* Start transmission. */

	I2C1->CR1 |= I2C_CR1_START_Msk;
 8006fbc:	4b3b      	ldr	r3, [pc, #236]	; (80070ac <MPU6050_read_register+0x108>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a3a      	ldr	r2, [pc, #232]	; (80070ac <MPU6050_read_register+0x108>)
 8006fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc6:	6013      	str	r3, [r2, #0]

	/*	Wait until transmission of the start bit is done. */

	while( ( I2C1->SR1 & I2C_SR1_SB_Msk ) == 0 );
 8006fc8:	bf00      	nop
 8006fca:	4b38      	ldr	r3, [pc, #224]	; (80070ac <MPU6050_read_register+0x108>)
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0f9      	beq.n	8006fca <MPU6050_read_register+0x26>

	/* Write data register with address. */

	I2C1->DR = device_address << 1;
 8006fd6:	79fb      	ldrb	r3, [r7, #7]
 8006fd8:	005a      	lsls	r2, r3, #1
 8006fda:	4b34      	ldr	r3, [pc, #208]	; (80070ac <MPU6050_read_register+0x108>)
 8006fdc:	611a      	str	r2, [r3, #16]

	/*	Wait until address is transmitted. */

	while( ( I2C1->SR1 & I2C_SR1_ADDR_Msk ) == 0 );
 8006fde:	bf00      	nop
 8006fe0:	4b32      	ldr	r3, [pc, #200]	; (80070ac <MPU6050_read_register+0x108>)
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0f9      	beq.n	8006fe0 <MPU6050_read_register+0x3c>

	temp = I2C1->SR1 | I2C1->SR2;
 8006fec:	4b2f      	ldr	r3, [pc, #188]	; (80070ac <MPU6050_read_register+0x108>)
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	4b2e      	ldr	r3, [pc, #184]	; (80070ac <MPU6050_read_register+0x108>)
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	73fb      	strb	r3, [r7, #15]

	/* Wait until data register is empty. */

	while( ( I2C1->SR1 & I2C_SR1_TXE_Msk ) == 0 );
 8006ffc:	bf00      	nop
 8006ffe:	4b2b      	ldr	r3, [pc, #172]	; (80070ac <MPU6050_read_register+0x108>)
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0f9      	beq.n	8006ffe <MPU6050_read_register+0x5a>

	/* Write register address. */

	I2C1->DR = register_address;
 800700a:	4a28      	ldr	r2, [pc, #160]	; (80070ac <MPU6050_read_register+0x108>)
 800700c:	79bb      	ldrb	r3, [r7, #6]
 800700e:	6113      	str	r3, [r2, #16]

	/* Wait until byte is transferred. */

	while( ( I2C1->SR1 & I2C_SR1_BTF_Msk ) == 0 );
 8007010:	bf00      	nop
 8007012:	4b26      	ldr	r3, [pc, #152]	; (80070ac <MPU6050_read_register+0x108>)
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	f003 0304 	and.w	r3, r3, #4
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0f9      	beq.n	8007012 <MPU6050_read_register+0x6e>

	/* Generate start condition. */

	I2C1->CR1 |= I2C_CR1_START_Msk;
 800701e:	4b23      	ldr	r3, [pc, #140]	; (80070ac <MPU6050_read_register+0x108>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a22      	ldr	r2, [pc, #136]	; (80070ac <MPU6050_read_register+0x108>)
 8007024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007028:	6013      	str	r3, [r2, #0]

	/*	Wait until transmission of the start bit is done. */

	while( ( I2C1->SR1 & I2C_SR1_SB_Msk ) == 0 );
 800702a:	bf00      	nop
 800702c:	4b1f      	ldr	r3, [pc, #124]	; (80070ac <MPU6050_read_register+0x108>)
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0f9      	beq.n	800702c <MPU6050_read_register+0x88>

	/* Write data register with address. */

	I2C1->DR = (device_address << 1) + 1;
 8007038:	79fb      	ldrb	r3, [r7, #7]
 800703a:	005b      	lsls	r3, r3, #1
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	4b1b      	ldr	r3, [pc, #108]	; (80070ac <MPU6050_read_register+0x108>)
 8007040:	611a      	str	r2, [r3, #16]

	/*	Wait until address is transmitted. */

	while( ( I2C1->SR1 & I2C_SR1_ADDR_Msk ) == 0 );
 8007042:	bf00      	nop
 8007044:	4b19      	ldr	r3, [pc, #100]	; (80070ac <MPU6050_read_register+0x108>)
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0f9      	beq.n	8007044 <MPU6050_read_register+0xa0>

	temp = I2C1->SR1 | I2C1->SR2;
 8007050:	4b16      	ldr	r3, [pc, #88]	; (80070ac <MPU6050_read_register+0x108>)
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	b2da      	uxtb	r2, r3
 8007056:	4b15      	ldr	r3, [pc, #84]	; (80070ac <MPU6050_read_register+0x108>)
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	4313      	orrs	r3, r2
 800705e:	73fb      	strb	r3, [r7, #15]

	/* Wait until data received. */

	while( ( I2C1->SR1 & I2C_SR1_RXNE_Msk ) == 0 );
 8007060:	bf00      	nop
 8007062:	4b12      	ldr	r3, [pc, #72]	; (80070ac <MPU6050_read_register+0x108>)
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0f9      	beq.n	8007062 <MPU6050_read_register+0xbe>

	//while( ( I2C1->SR1 & I2C_SR1_BTF_Msk ) == 0 );

	/* Read data. */

	data = I2C1->DR;
 800706e:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <MPU6050_read_register+0x108>)
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	73bb      	strb	r3, [r7, #14]

	/* Generate NACK condition. */

	I2C1->CR1 &= ~I2C_CR1_ACK_Msk;
 8007074:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <MPU6050_read_register+0x108>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a0c      	ldr	r2, [pc, #48]	; (80070ac <MPU6050_read_register+0x108>)
 800707a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800707e:	6013      	str	r3, [r2, #0]

	temp = I2C1->SR1 | I2C1->SR2;
 8007080:	4b0a      	ldr	r3, [pc, #40]	; (80070ac <MPU6050_read_register+0x108>)
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	b2da      	uxtb	r2, r3
 8007086:	4b09      	ldr	r3, [pc, #36]	; (80070ac <MPU6050_read_register+0x108>)
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	4313      	orrs	r3, r2
 800708e:	73fb      	strb	r3, [r7, #15]

	I2C1->CR1 |= I2C_CR1_STOP_Msk;
 8007090:	4b06      	ldr	r3, [pc, #24]	; (80070ac <MPU6050_read_register+0x108>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a05      	ldr	r2, [pc, #20]	; (80070ac <MPU6050_read_register+0x108>)
 8007096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800709a:	6013      	str	r3, [r2, #0]

	return(data);
 800709c:	7bbb      	ldrb	r3, [r7, #14]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	40005400 	.word	0x40005400

080070b0 <I2C1_Start>:


uint8_t I2C1_Start()
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
  uint32_t startTime = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	607b      	str	r3, [r7, #4]
  uint32_t currentTime = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
  uint8_t timeoutStatus = 0;
 80070be:	2300      	movs	r3, #0
 80070c0:	72fb      	strb	r3, [r7, #11]

  //Ticks_setTicks(Ticks_1ms);

  /* Enable acknowledgement bit. */

  I2C1->CR1 |= I2C_CR1_ACK_Msk;
 80070c2:	4b1a      	ldr	r3, [pc, #104]	; (800712c <I2C1_Start+0x7c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a19      	ldr	r2, [pc, #100]	; (800712c <I2C1_Start+0x7c>)
 80070c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070cc:	6013      	str	r3, [r2, #0]

  /* Generate start condition. */

  I2C1->CR1 |= I2C_CR1_START_Msk;
 80070ce:	4b17      	ldr	r3, [pc, #92]	; (800712c <I2C1_Start+0x7c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a16      	ldr	r2, [pc, #88]	; (800712c <I2C1_Start+0x7c>)
 80070d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070d8:	6013      	str	r3, [r2, #0]

  /* Wait until start bit is transferred. */

  startTime = Ticks_TicksToUs(TIM5->CNT);
 80070da:	4b15      	ldr	r3, [pc, #84]	; (8007130 <I2C1_Start+0x80>)
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	4618      	mov	r0, r3
 80070e0:	f004 fc00 	bl	800b8e4 <Ticks_TicksToUs>
 80070e4:	6078      	str	r0, [r7, #4]

  /* Wait until SB flag is set. */

  while( !(I2C1->SR1 & I2C_SR1_SB_Msk) && ( currentTime < (1000 * I2C_TIMEOUT_MS) ) )
 80070e6:	e008      	b.n	80070fa <I2C1_Start+0x4a>
  {
    currentTime = ( Ticks_TicksToUs(TIM5->CNT) - startTime );
 80070e8:	4b11      	ldr	r3, [pc, #68]	; (8007130 <I2C1_Start+0x80>)
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	4618      	mov	r0, r3
 80070ee:	f004 fbf9 	bl	800b8e4 <Ticks_TicksToUs>
 80070f2:	4602      	mov	r2, r0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	60fb      	str	r3, [r7, #12]
  while( !(I2C1->SR1 & I2C_SR1_SB_Msk) && ( currentTime < (1000 * I2C_TIMEOUT_MS) ) )
 80070fa:	4b0c      	ldr	r3, [pc, #48]	; (800712c <I2C1_Start+0x7c>)
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d103      	bne.n	800710e <I2C1_Start+0x5e>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	4a0a      	ldr	r2, [pc, #40]	; (8007134 <I2C1_Start+0x84>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d9ec      	bls.n	80070e8 <I2C1_Start+0x38>
  }

  if( currentTime >= ( 1000 * I2C_TIMEOUT_MS ) )
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4a08      	ldr	r2, [pc, #32]	; (8007134 <I2C1_Start+0x84>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d902      	bls.n	800711c <I2C1_Start+0x6c>
  {
    timeoutStatus = 1;
 8007116:	2301      	movs	r3, #1
 8007118:	72fb      	strb	r3, [r7, #11]
 800711a:	e001      	b.n	8007120 <I2C1_Start+0x70>
  }
  else
  {
    timeoutStatus = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	72fb      	strb	r3, [r7, #11]
  }

  return(timeoutStatus);
 8007120:	7afb      	ldrb	r3, [r7, #11]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	40005400 	.word	0x40005400
 8007130:	40000c00 	.word	0x40000c00
 8007134:	0001869f 	.word	0x0001869f

08007138 <I2C1_MasterReadRequest>:

uint8_t I2C1_MasterReadRequest(uint8_t slaveID)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	71fb      	strb	r3, [r7, #7]
  uint32_t startTime = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	613b      	str	r3, [r7, #16]
  uint32_t currentTime = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	617b      	str	r3, [r7, #20]
  uint8_t timeoutStatus = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
  uint8_t tempU8 = 0;
 800714e:	2300      	movs	r3, #0
 8007150:	73bb      	strb	r3, [r7, #14]

  /* Generate I2C start condition. */

  I2C1_Start();
 8007152:	f7ff ffad 	bl	80070b0 <I2C1_Start>

  /* Load 7-bit address. */

  I2C1->DR = ( (slaveID << 1 ) | 0x01 );
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	f043 0201 	orr.w	r2, r3, #1
 800715e:	4b13      	ldr	r3, [pc, #76]	; (80071ac <I2C1_MasterReadRequest+0x74>)
 8007160:	611a      	str	r2, [r3, #16]

  /* Wait until the address bit is set. */

  startTime = Ticks_TicksToUs(TIM5->CNT);
 8007162:	4b13      	ldr	r3, [pc, #76]	; (80071b0 <I2C1_MasterReadRequest+0x78>)
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	4618      	mov	r0, r3
 8007168:	f004 fbbc 	bl	800b8e4 <Ticks_TicksToUs>
 800716c:	6138      	str	r0, [r7, #16]

  while( !(I2C1->SR1 & I2C_SR1_ADDR_Msk) && ( currentTime < (I2C_TIMEOUT_MS*1000) ) )
 800716e:	e008      	b.n	8007182 <I2C1_MasterReadRequest+0x4a>
  {
    currentTime = ( Ticks_TicksToUs(TIM5->CNT) - startTime );
 8007170:	4b0f      	ldr	r3, [pc, #60]	; (80071b0 <I2C1_MasterReadRequest+0x78>)
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	4618      	mov	r0, r3
 8007176:	f004 fbb5 	bl	800b8e4 <Ticks_TicksToUs>
 800717a:	4602      	mov	r2, r0
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	617b      	str	r3, [r7, #20]
  while( !(I2C1->SR1 & I2C_SR1_ADDR_Msk) && ( currentTime < (I2C_TIMEOUT_MS*1000) ) )
 8007182:	4b0a      	ldr	r3, [pc, #40]	; (80071ac <I2C1_MasterReadRequest+0x74>)
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	d103      	bne.n	8007196 <I2C1_MasterReadRequest+0x5e>
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	4a08      	ldr	r2, [pc, #32]	; (80071b4 <I2C1_MasterReadRequest+0x7c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d9ec      	bls.n	8007170 <I2C1_MasterReadRequest+0x38>

  /* Clear address bit by reading SR1 and SR2 registers. */

  //tempU8 = ( I2C1->SR1 | I2C1->SR2 );

  if( currentTime >= (I2C_TIMEOUT_MS*1000) )
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	4a06      	ldr	r2, [pc, #24]	; (80071b4 <I2C1_MasterReadRequest+0x7c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d901      	bls.n	80071a2 <I2C1_MasterReadRequest+0x6a>
  {
    return(1);
 800719e:	2301      	movs	r3, #1
 80071a0:	e000      	b.n	80071a4 <I2C1_MasterReadRequest+0x6c>
  }

  return(0);
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	40005400 	.word	0x40005400
 80071b0:	40000c00 	.word	0x40000c00
 80071b4:	0001869f 	.word	0x0001869f

080071b8 <I2C1_Poll_RxNE>:


uint8_t I2C1_Poll_RxNE()
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
  uint32_t startTime = Ticks_TicksToUs(TIM5->CNT);
 80071be:	4b13      	ldr	r3, [pc, #76]	; (800720c <I2C1_Poll_RxNE+0x54>)
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	4618      	mov	r0, r3
 80071c4:	f004 fb8e 	bl	800b8e4 <Ticks_TicksToUs>
 80071c8:	6038      	str	r0, [r7, #0]
  uint32_t currentTime = 0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	607b      	str	r3, [r7, #4]

  while( !( I2C1->SR1 & I2C_SR1_RXNE_Msk ) && ( currentTime < ( 1000 * I2C_TIMEOUT_MS ) ) )
 80071ce:	e008      	b.n	80071e2 <I2C1_Poll_RxNE+0x2a>
  {
    currentTime = ( Ticks_TicksToUs(TIM5->CNT) - startTime );
 80071d0:	4b0e      	ldr	r3, [pc, #56]	; (800720c <I2C1_Poll_RxNE+0x54>)
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	4618      	mov	r0, r3
 80071d6:	f004 fb85 	bl	800b8e4 <Ticks_TicksToUs>
 80071da:	4602      	mov	r2, r0
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	607b      	str	r3, [r7, #4]
  while( !( I2C1->SR1 & I2C_SR1_RXNE_Msk ) && ( currentTime < ( 1000 * I2C_TIMEOUT_MS ) ) )
 80071e2:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <I2C1_Poll_RxNE+0x58>)
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d103      	bne.n	80071f6 <I2C1_Poll_RxNE+0x3e>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a08      	ldr	r2, [pc, #32]	; (8007214 <I2C1_Poll_RxNE+0x5c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d9ec      	bls.n	80071d0 <I2C1_Poll_RxNE+0x18>
  }

  if( currentTime >= ( 1000 * I2C_TIMEOUT_MS ) )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a06      	ldr	r2, [pc, #24]	; (8007214 <I2C1_Poll_RxNE+0x5c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d901      	bls.n	8007202 <I2C1_Poll_RxNE+0x4a>
  {
    return(0x01);
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <I2C1_Poll_RxNE+0x4c>
  }

  return(0x00);
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	40000c00 	.word	0x40000c00
 8007210:	40005400 	.word	0x40005400
 8007214:	0001869f 	.word	0x0001869f

08007218 <I2C1_Poll_BTF>:


uint8_t I2C1_Poll_BTF()
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
  uint32_t startTime = Ticks_TicksToUs(TIM5->CNT);
 800721e:	4b13      	ldr	r3, [pc, #76]	; (800726c <I2C1_Poll_BTF+0x54>)
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	4618      	mov	r0, r3
 8007224:	f004 fb5e 	bl	800b8e4 <Ticks_TicksToUs>
 8007228:	6038      	str	r0, [r7, #0]
  uint32_t currentTime = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	607b      	str	r3, [r7, #4]

  while( !( I2C1->SR1 & I2C_SR1_BTF_Msk ) && ( currentTime < ( 1000 * I2C_TIMEOUT_MS ) ) )
 800722e:	e008      	b.n	8007242 <I2C1_Poll_BTF+0x2a>
  {
    currentTime = ( Ticks_TicksToUs(TIM5->CNT) - startTime );
 8007230:	4b0e      	ldr	r3, [pc, #56]	; (800726c <I2C1_Poll_BTF+0x54>)
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	4618      	mov	r0, r3
 8007236:	f004 fb55 	bl	800b8e4 <Ticks_TicksToUs>
 800723a:	4602      	mov	r2, r0
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	607b      	str	r3, [r7, #4]
  while( !( I2C1->SR1 & I2C_SR1_BTF_Msk ) && ( currentTime < ( 1000 * I2C_TIMEOUT_MS ) ) )
 8007242:	4b0b      	ldr	r3, [pc, #44]	; (8007270 <I2C1_Poll_BTF+0x58>)
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	f003 0304 	and.w	r3, r3, #4
 800724a:	2b00      	cmp	r3, #0
 800724c:	d103      	bne.n	8007256 <I2C1_Poll_BTF+0x3e>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a08      	ldr	r2, [pc, #32]	; (8007274 <I2C1_Poll_BTF+0x5c>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d9ec      	bls.n	8007230 <I2C1_Poll_BTF+0x18>
  }

  if( currentTime >= ( 1000 * I2C_TIMEOUT_MS ) )
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a06      	ldr	r2, [pc, #24]	; (8007274 <I2C1_Poll_BTF+0x5c>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d901      	bls.n	8007262 <I2C1_Poll_BTF+0x4a>
  {
    return(0x01);
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <I2C1_Poll_BTF+0x4c>
  }

  return(0x00);
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	40000c00 	.word	0x40000c00
 8007270:	40005400 	.word	0x40005400
 8007274:	0001869f 	.word	0x0001869f

08007278 <I2C1_Read>:

uint8_t I2C1_Read(uint8_t slaveID, uint8_t nBytes, uint8_t* buffer)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	4603      	mov	r3, r0
 8007280:	603a      	str	r2, [r7, #0]
 8007282:	71fb      	strb	r3, [r7, #7]
 8007284:	460b      	mov	r3, r1
 8007286:	71bb      	strb	r3, [r7, #6]
  uint8_t tempU8 = 0;
 8007288:	2300      	movs	r3, #0
 800728a:	73bb      	strb	r3, [r7, #14]

  /* Check if the peripheral is enabled. */

  if( I2C1->CR1 & I2C_CR1_PE_Msk )
 800728c:	4b9c      	ldr	r3, [pc, #624]	; (8007500 <I2C1_Read+0x288>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	d105      	bne.n	80072a4 <I2C1_Read+0x2c>
  {

  }
  else
  {
    I2C1->CR1 |= I2C_CR1_PE_Msk;
 8007298:	4b99      	ldr	r3, [pc, #612]	; (8007500 <I2C1_Read+0x288>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a98      	ldr	r2, [pc, #608]	; (8007500 <I2C1_Read+0x288>)
 800729e:	f043 0301 	orr.w	r3, r3, #1
 80072a2:	6013      	str	r3, [r2, #0]
  }

  /* Clear POS bit in CR1 register. */

  I2C1->CR1 &= (~I2C_CR1_POS_Msk);
 80072a4:	4b96      	ldr	r3, [pc, #600]	; (8007500 <I2C1_Read+0x288>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a95      	ldr	r2, [pc, #596]	; (8007500 <I2C1_Read+0x288>)
 80072aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072ae:	6013      	str	r3, [r2, #0]

  /* Request master read request. */

  if( I2C1_MasterReadRequest(slaveID) )
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff ff40 	bl	8007138 <I2C1_MasterReadRequest>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <I2C1_Read+0x4a>
  {
    return(0x01);  /* Timeout event for I2C master read request. */
 80072be:	2301      	movs	r3, #1
 80072c0:	e119      	b.n	80074f6 <I2C1_Read+0x27e>
  }

  /* If number of bytes is zero, immediately generate stop condition. */

  if( nBytes == 0 )
 80072c2:	79bb      	ldrb	r3, [r7, #6]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10e      	bne.n	80072e6 <I2C1_Read+0x6e>
  {
	/* Clear address bit by reading SR1 followed by SR2. */

	tempU8 = ( I2C1->SR1 | I2C1->SR2 );
 80072c8:	4b8d      	ldr	r3, [pc, #564]	; (8007500 <I2C1_Read+0x288>)
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	4b8c      	ldr	r3, [pc, #560]	; (8007500 <I2C1_Read+0x288>)
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	4313      	orrs	r3, r2
 80072d6:	73bb      	strb	r3, [r7, #14]

    I2C1->CR1 |= I2C_CR1_STOP_Msk;
 80072d8:	4b89      	ldr	r3, [pc, #548]	; (8007500 <I2C1_Read+0x288>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a88      	ldr	r2, [pc, #544]	; (8007500 <I2C1_Read+0x288>)
 80072de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072e2:	6013      	str	r3, [r2, #0]
 80072e4:	e040      	b.n	8007368 <I2C1_Read+0xf0>
  }
  else if( nBytes == 1 )
 80072e6:	79bb      	ldrb	r3, [r7, #6]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d114      	bne.n	8007316 <I2C1_Read+0x9e>
  {
	/* Clear acknowlegment bit. */

	I2C1->CR1 &= (~I2C_CR1_ACK_Msk);
 80072ec:	4b84      	ldr	r3, [pc, #528]	; (8007500 <I2C1_Read+0x288>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a83      	ldr	r2, [pc, #524]	; (8007500 <I2C1_Read+0x288>)
 80072f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072f6:	6013      	str	r3, [r2, #0]

	/* Clear address flag by reading SR2 register followed by SR1 register. */

	tempU8 = ( I2C1->SR1 | I2C1->SR2 );
 80072f8:	4b81      	ldr	r3, [pc, #516]	; (8007500 <I2C1_Read+0x288>)
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	4b80      	ldr	r3, [pc, #512]	; (8007500 <I2C1_Read+0x288>)
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	4313      	orrs	r3, r2
 8007306:	73bb      	strb	r3, [r7, #14]

	/* Generate stop condition. */

	I2C1->CR1 |= I2C_CR1_STOP_Msk;
 8007308:	4b7d      	ldr	r3, [pc, #500]	; (8007500 <I2C1_Read+0x288>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a7c      	ldr	r2, [pc, #496]	; (8007500 <I2C1_Read+0x288>)
 800730e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007312:	6013      	str	r3, [r2, #0]
 8007314:	e028      	b.n	8007368 <I2C1_Read+0xf0>
  }
  else if( nBytes == 2 )
 8007316:	79bb      	ldrb	r3, [r7, #6]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d114      	bne.n	8007346 <I2C1_Read+0xce>
  {
    /* Clear acknowlegment bit. */

	I2C1->CR1 &= (~I2C_CR1_ACK_Msk);
 800731c:	4b78      	ldr	r3, [pc, #480]	; (8007500 <I2C1_Read+0x288>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a77      	ldr	r2, [pc, #476]	; (8007500 <I2C1_Read+0x288>)
 8007322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007326:	6013      	str	r3, [r2, #0]

	/* Enable POS bit. */

	I2C1->CR1 |= I2C_CR1_POS_Msk;
 8007328:	4b75      	ldr	r3, [pc, #468]	; (8007500 <I2C1_Read+0x288>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a74      	ldr	r2, [pc, #464]	; (8007500 <I2C1_Read+0x288>)
 800732e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007332:	6013      	str	r3, [r2, #0]

	/* Clear address bit. */

	tempU8 = ( I2C1->SR1 | I2C1->SR2 );
 8007334:	4b72      	ldr	r3, [pc, #456]	; (8007500 <I2C1_Read+0x288>)
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	b2da      	uxtb	r2, r3
 800733a:	4b71      	ldr	r3, [pc, #452]	; (8007500 <I2C1_Read+0x288>)
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	4313      	orrs	r3, r2
 8007342:	73bb      	strb	r3, [r7, #14]
 8007344:	e010      	b.n	8007368 <I2C1_Read+0xf0>
  }
  else if( nBytes > 2 )
 8007346:	79bb      	ldrb	r3, [r7, #6]
 8007348:	2b02      	cmp	r3, #2
 800734a:	d90d      	bls.n	8007368 <I2C1_Read+0xf0>
  {
	/* Enable acknowledgement bit. */

    I2C1->CR1 |= I2C_CR1_ACK_Msk;
 800734c:	4b6c      	ldr	r3, [pc, #432]	; (8007500 <I2C1_Read+0x288>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a6b      	ldr	r2, [pc, #428]	; (8007500 <I2C1_Read+0x288>)
 8007352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007356:	6013      	str	r3, [r2, #0]

    /* Clear address bit. */

    tempU8 = ( I2C1->SR1 | I2C1->SR2 );
 8007358:	4b69      	ldr	r3, [pc, #420]	; (8007500 <I2C1_Read+0x288>)
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	b2da      	uxtb	r2, r3
 800735e:	4b68      	ldr	r3, [pc, #416]	; (8007500 <I2C1_Read+0x288>)
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	4313      	orrs	r3, r2
 8007366:	73bb      	strb	r3, [r7, #14]
  }


  uint8_t position = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]

  while( nBytes )
 800736c:	e0be      	b.n	80074ec <I2C1_Read+0x274>
  {
    /* Case 1: Number of bytes to be received is lesser than or equal to 3. */

	if( nBytes <= 3 )
 800736e:	79bb      	ldrb	r3, [r7, #6]
 8007370:	2b03      	cmp	r3, #3
 8007372:	f200 8088 	bhi.w	8007486 <I2C1_Read+0x20e>
	{
	  /* Case 1(a): Number of bytes to be received equals 1. */

      if( nBytes == 1 )
 8007376:	79bb      	ldrb	r3, [r7, #6]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d114      	bne.n	80073a6 <I2C1_Read+0x12e>
      {
    	/* Check if receive buffer is not empty. Check for timeout also. */

        if( I2C1_Poll_RxNE() )
 800737c:	f7ff ff1c 	bl	80071b8 <I2C1_Poll_RxNE>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <I2C1_Read+0x112>
        {
          return(0x01);
 8007386:	2301      	movs	r3, #1
 8007388:	e0b5      	b.n	80074f6 <I2C1_Read+0x27e>
        }

        /* Read byte from the data register. */

        buffer[position] = (I2C1->DR);
 800738a:	4b5d      	ldr	r3, [pc, #372]	; (8007500 <I2C1_Read+0x288>)
 800738c:	6919      	ldr	r1, [r3, #16]
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	4413      	add	r3, r2
 8007394:	b2ca      	uxtb	r2, r1
 8007396:	701a      	strb	r2, [r3, #0]

        /* Increment buffer position and decrement the number of bytes to be read. */

        position++;
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	3301      	adds	r3, #1
 800739c:	73fb      	strb	r3, [r7, #15]
        nBytes--;
 800739e:	79bb      	ldrb	r3, [r7, #6]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	71bb      	strb	r3, [r7, #6]
 80073a4:	e0a2      	b.n	80074ec <I2C1_Read+0x274>

      }/* End of case 1(a). */
      else if( nBytes == 2 )   /* Case 1(b): Number of bytes to be received equals 2. */
 80073a6:	79bb      	ldrb	r3, [r7, #6]
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d127      	bne.n	80073fc <I2C1_Read+0x184>
      {
        /* Poll the byte transfer complete bit. */

        if( I2C1_Poll_BTF() )
 80073ac:	f7ff ff34 	bl	8007218 <I2C1_Poll_BTF>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <I2C1_Read+0x142>
        {
          return(0x01);  // Timeout.
 80073b6:	2301      	movs	r3, #1
 80073b8:	e09d      	b.n	80074f6 <I2C1_Read+0x27e>
        }

        /* Generate stop condition. */

        I2C1->CR1 |= I2C_CR1_STOP_Msk;
 80073ba:	4b51      	ldr	r3, [pc, #324]	; (8007500 <I2C1_Read+0x288>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a50      	ldr	r2, [pc, #320]	; (8007500 <I2C1_Read+0x288>)
 80073c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073c4:	6013      	str	r3, [r2, #0]

        /* Read data from buffer. */

        buffer[position] = (I2C1->DR);
 80073c6:	4b4e      	ldr	r3, [pc, #312]	; (8007500 <I2C1_Read+0x288>)
 80073c8:	6919      	ldr	r1, [r3, #16]
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	4413      	add	r3, r2
 80073d0:	b2ca      	uxtb	r2, r1
 80073d2:	701a      	strb	r2, [r3, #0]

        /* Increase buffer position and decrement number of bytes to receive. */

        position++;
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	3301      	adds	r3, #1
 80073d8:	73fb      	strb	r3, [r7, #15]
        nBytes--;
 80073da:	79bb      	ldrb	r3, [r7, #6]
 80073dc:	3b01      	subs	r3, #1
 80073de:	71bb      	strb	r3, [r7, #6]

        /* Read once more from the data register. */

        buffer[position] = (I2C1->DR);
 80073e0:	4b47      	ldr	r3, [pc, #284]	; (8007500 <I2C1_Read+0x288>)
 80073e2:	6919      	ldr	r1, [r3, #16]
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	4413      	add	r3, r2
 80073ea:	b2ca      	uxtb	r2, r1
 80073ec:	701a      	strb	r2, [r3, #0]

        /* Increment position counter and decrement number of bytes to be received. */

        position++;
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	3301      	adds	r3, #1
 80073f2:	73fb      	strb	r3, [r7, #15]
        nBytes--;
 80073f4:	79bb      	ldrb	r3, [r7, #6]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	71bb      	strb	r3, [r7, #6]
 80073fa:	e077      	b.n	80074ec <I2C1_Read+0x274>

      }/* End of case 1(b). */
      else if( nBytes == 3 )     /* If number of pending bytes to be read is 3. */
 80073fc:	79bb      	ldrb	r3, [r7, #6]
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d174      	bne.n	80074ec <I2C1_Read+0x274>
      {
        /* Poll the byte transfer complete flag. */

    	if( I2C1_Poll_BTF() )
 8007402:	f7ff ff09 	bl	8007218 <I2C1_Poll_BTF>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <I2C1_Read+0x198>
    	{
    	  return(0x01);
 800740c:	2301      	movs	r3, #1
 800740e:	e072      	b.n	80074f6 <I2C1_Read+0x27e>
    	}

    	/* Disable acknowledgement bit. */

    	I2C1->CR1 &= (~I2C_CR1_ACK_Msk);
 8007410:	4b3b      	ldr	r3, [pc, #236]	; (8007500 <I2C1_Read+0x288>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a3a      	ldr	r2, [pc, #232]	; (8007500 <I2C1_Read+0x288>)
 8007416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800741a:	6013      	str	r3, [r2, #0]

    	/* Read data register and update position and counter. */

    	buffer[position] = (I2C1->DR);
 800741c:	4b38      	ldr	r3, [pc, #224]	; (8007500 <I2C1_Read+0x288>)
 800741e:	6919      	ldr	r1, [r3, #16]
 8007420:	7bfb      	ldrb	r3, [r7, #15]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	4413      	add	r3, r2
 8007426:	b2ca      	uxtb	r2, r1
 8007428:	701a      	strb	r2, [r3, #0]

    	position++;
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	3301      	adds	r3, #1
 800742e:	73fb      	strb	r3, [r7, #15]
    	nBytes--;
 8007430:	79bb      	ldrb	r3, [r7, #6]
 8007432:	3b01      	subs	r3, #1
 8007434:	71bb      	strb	r3, [r7, #6]

    	/* Poll byte transfer complete bit. */

    	if( I2C1_Poll_BTF() )
 8007436:	f7ff feef 	bl	8007218 <I2C1_Poll_BTF>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <I2C1_Read+0x1cc>
    	{
    	  return(0x01);
 8007440:	2301      	movs	r3, #1
 8007442:	e058      	b.n	80074f6 <I2C1_Read+0x27e>
    	}

    	/* Generate stop condition. */

    	I2C1->CR1 |= I2C_CR1_STOP_Msk;
 8007444:	4b2e      	ldr	r3, [pc, #184]	; (8007500 <I2C1_Read+0x288>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a2d      	ldr	r2, [pc, #180]	; (8007500 <I2C1_Read+0x288>)
 800744a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800744e:	6013      	str	r3, [r2, #0]

    	/* Read the data register twice. */

    	buffer[position] = (I2C1->DR);  position++; nBytes--;
 8007450:	4b2b      	ldr	r3, [pc, #172]	; (8007500 <I2C1_Read+0x288>)
 8007452:	6919      	ldr	r1, [r3, #16]
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	4413      	add	r3, r2
 800745a:	b2ca      	uxtb	r2, r1
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	3301      	adds	r3, #1
 8007462:	73fb      	strb	r3, [r7, #15]
 8007464:	79bb      	ldrb	r3, [r7, #6]
 8007466:	3b01      	subs	r3, #1
 8007468:	71bb      	strb	r3, [r7, #6]
    	buffer[position] = (I2C1->DR);  position++; nBytes--;
 800746a:	4b25      	ldr	r3, [pc, #148]	; (8007500 <I2C1_Read+0x288>)
 800746c:	6919      	ldr	r1, [r3, #16]
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	4413      	add	r3, r2
 8007474:	b2ca      	uxtb	r2, r1
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	3301      	adds	r3, #1
 800747c:	73fb      	strb	r3, [r7, #15]
 800747e:	79bb      	ldrb	r3, [r7, #6]
 8007480:	3b01      	subs	r3, #1
 8007482:	71bb      	strb	r3, [r7, #6]
 8007484:	e032      	b.n	80074ec <I2C1_Read+0x274>
      }/* End of case 1(b).*/

	}/* End of case 1. */
	else if( nBytes > 3 )  /* Case 2: Number of bytes to be received > 3. */
 8007486:	79bb      	ldrb	r3, [r7, #6]
 8007488:	2b03      	cmp	r3, #3
 800748a:	d92f      	bls.n	80074ec <I2C1_Read+0x274>
	{
	  /* Poll RxNE bit */

      if( I2C1_Poll_RxNE() )
 800748c:	f7ff fe94 	bl	80071b8 <I2C1_Poll_RxNE>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <I2C1_Read+0x222>
      {
        return(0x01);
 8007496:	2301      	movs	r3, #1
 8007498:	e02d      	b.n	80074f6 <I2C1_Read+0x27e>
      }

      /* Read data register. */

      buffer[position] = (I2C1->DR); position++; nBytes--;
 800749a:	4b19      	ldr	r3, [pc, #100]	; (8007500 <I2C1_Read+0x288>)
 800749c:	6919      	ldr	r1, [r3, #16]
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	4413      	add	r3, r2
 80074a4:	b2ca      	uxtb	r2, r1
 80074a6:	701a      	strb	r2, [r3, #0]
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	3301      	adds	r3, #1
 80074ac:	73fb      	strb	r3, [r7, #15]
 80074ae:	79bb      	ldrb	r3, [r7, #6]
 80074b0:	3b01      	subs	r3, #1
 80074b2:	71bb      	strb	r3, [r7, #6]

      /* Check if byte transfer complete bit is set. */

      if( I2C1->SR1 & I2C_SR1_BTF_Msk )
 80074b4:	4b12      	ldr	r3, [pc, #72]	; (8007500 <I2C1_Read+0x288>)
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	f003 0304 	and.w	r3, r3, #4
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d015      	beq.n	80074ec <I2C1_Read+0x274>
      {
    	/* If number of pending bytes to be received is 3, generate NACK. */

    	if( nBytes == 3 )
 80074c0:	79bb      	ldrb	r3, [r7, #6]
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d105      	bne.n	80074d2 <I2C1_Read+0x25a>
    	{
    	  I2C1->CR1 &= (~I2C_CR1_ACK_Msk);
 80074c6:	4b0e      	ldr	r3, [pc, #56]	; (8007500 <I2C1_Read+0x288>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a0d      	ldr	r2, [pc, #52]	; (8007500 <I2C1_Read+0x288>)
 80074cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074d0:	6013      	str	r3, [r2, #0]
    	}

    	/* Read data register. */

    	buffer[position] = (I2C1->DR); position++; nBytes--;
 80074d2:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <I2C1_Read+0x288>)
 80074d4:	6919      	ldr	r1, [r3, #16]
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	4413      	add	r3, r2
 80074dc:	b2ca      	uxtb	r2, r1
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	3301      	adds	r3, #1
 80074e4:	73fb      	strb	r3, [r7, #15]
 80074e6:	79bb      	ldrb	r3, [r7, #6]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	71bb      	strb	r3, [r7, #6]
  while( nBytes )
 80074ec:	79bb      	ldrb	r3, [r7, #6]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f47f af3d 	bne.w	800736e <I2C1_Read+0xf6>
      }
	}

  }/* End of I2C data reading. */

  return(0x00);
 80074f4:	2300      	movs	r3, #0

}/* End of function. */
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	40005400 	.word	0x40005400

08007504 <I2C1_writeByte>:


uint8_t I2C1_writeByte(uint8_t slaveID, uint8_t data)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	460a      	mov	r2, r1
 800750e:	71fb      	strb	r3, [r7, #7]
 8007510:	4613      	mov	r3, r2
 8007512:	71bb      	strb	r3, [r7, #6]
	uint32_t startTime = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	60fb      	str	r3, [r7, #12]
	uint32_t currentTime = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	617b      	str	r3, [r7, #20]
    uint8_t timeoutStatus = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	74fb      	strb	r3, [r7, #19]


	/**** Start transmission. ****/

	uint8_t temp = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	72fb      	strb	r3, [r7, #11]

	temp = temp;		//	to avoid warning from compiler.

	/*	Enable ACK bit. */

	I2C1->CR1 |= I2C_CR1_ACK_Msk;
 8007524:	4b59      	ldr	r3, [pc, #356]	; (800768c <I2C1_writeByte+0x188>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a58      	ldr	r2, [pc, #352]	; (800768c <I2C1_writeByte+0x188>)
 800752a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800752e:	6013      	str	r3, [r2, #0]

	/* Start transmission. */

	I2C1->CR1 |= I2C_CR1_START_Msk;
 8007530:	4b56      	ldr	r3, [pc, #344]	; (800768c <I2C1_writeByte+0x188>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a55      	ldr	r2, [pc, #340]	; (800768c <I2C1_writeByte+0x188>)
 8007536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800753a:	6013      	str	r3, [r2, #0]


	startTime = Ticks_TicksToUs(TIM5->CNT);
 800753c:	4b54      	ldr	r3, [pc, #336]	; (8007690 <I2C1_writeByte+0x18c>)
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	4618      	mov	r0, r3
 8007542:	f004 f9cf 	bl	800b8e4 <Ticks_TicksToUs>
 8007546:	60f8      	str	r0, [r7, #12]

	/*	Wait until transmission of the start bit is done. */

	while( ( ( I2C1->SR1 & I2C_SR1_SB_Msk ) == 0 ) && ( currentTime < ( 1000 * I2C_TIMEOUT_MS ) ) )
 8007548:	e008      	b.n	800755c <I2C1_writeByte+0x58>
	{
	  currentTime = ( Ticks_TicksToUs(TIM5->CNT) - startTime );
 800754a:	4b51      	ldr	r3, [pc, #324]	; (8007690 <I2C1_writeByte+0x18c>)
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	4618      	mov	r0, r3
 8007550:	f004 f9c8 	bl	800b8e4 <Ticks_TicksToUs>
 8007554:	4602      	mov	r2, r0
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	617b      	str	r3, [r7, #20]
	while( ( ( I2C1->SR1 & I2C_SR1_SB_Msk ) == 0 ) && ( currentTime < ( 1000 * I2C_TIMEOUT_MS ) ) )
 800755c:	4b4b      	ldr	r3, [pc, #300]	; (800768c <I2C1_writeByte+0x188>)
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d103      	bne.n	8007570 <I2C1_writeByte+0x6c>
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	4a4a      	ldr	r2, [pc, #296]	; (8007694 <I2C1_writeByte+0x190>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d9ec      	bls.n	800754a <I2C1_writeByte+0x46>
	}

	if( currentTime >= ( 1000 * I2C_TIMEOUT_MS ) )
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	4a48      	ldr	r2, [pc, #288]	; (8007694 <I2C1_writeByte+0x190>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d901      	bls.n	800757c <I2C1_writeByte+0x78>
	{
	  timeoutStatus = 1;
 8007578:	2301      	movs	r3, #1
 800757a:	74fb      	strb	r3, [r7, #19]

	/**** Connect to device. ****/

	/* Write data register with address. */

	I2C1->DR = (slaveID << 1);
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	005a      	lsls	r2, r3, #1
 8007580:	4b42      	ldr	r3, [pc, #264]	; (800768c <I2C1_writeByte+0x188>)
 8007582:	611a      	str	r2, [r3, #16]

	/*	Wait until address is transmitted. */

	//while( ( I2C1->SR1 & I2C_SR1_ADDR_Msk ) == 0 );

	while( ( ( I2C1->SR1 & I2C_SR1_ADDR_Msk ) == 0 ) && ( currentTime < ( 1000 * I2C_TIMEOUT_MS ) ) )
 8007584:	e008      	b.n	8007598 <I2C1_writeByte+0x94>
	{
	  currentTime = ( Ticks_TicksToUs(TIM5->CNT) - startTime );
 8007586:	4b42      	ldr	r3, [pc, #264]	; (8007690 <I2C1_writeByte+0x18c>)
 8007588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758a:	4618      	mov	r0, r3
 800758c:	f004 f9aa 	bl	800b8e4 <Ticks_TicksToUs>
 8007590:	4602      	mov	r2, r0
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	617b      	str	r3, [r7, #20]
	while( ( ( I2C1->SR1 & I2C_SR1_ADDR_Msk ) == 0 ) && ( currentTime < ( 1000 * I2C_TIMEOUT_MS ) ) )
 8007598:	4b3c      	ldr	r3, [pc, #240]	; (800768c <I2C1_writeByte+0x188>)
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d103      	bne.n	80075ac <I2C1_writeByte+0xa8>
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	4a3b      	ldr	r2, [pc, #236]	; (8007694 <I2C1_writeByte+0x190>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d9ec      	bls.n	8007586 <I2C1_writeByte+0x82>
	}

	if( currentTime >= ( 1000 * I2C_TIMEOUT_MS ) )
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	4a39      	ldr	r2, [pc, #228]	; (8007694 <I2C1_writeByte+0x190>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d901      	bls.n	80075b8 <I2C1_writeByte+0xb4>
	{
	  timeoutStatus = 1;
 80075b4:	2301      	movs	r3, #1
 80075b6:	74fb      	strb	r3, [r7, #19]
	}


	temp = I2C1->SR1 | I2C1->SR2;
 80075b8:	4b34      	ldr	r3, [pc, #208]	; (800768c <I2C1_writeByte+0x188>)
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	4b33      	ldr	r3, [pc, #204]	; (800768c <I2C1_writeByte+0x188>)
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	4313      	orrs	r3, r2
 80075c6:	72fb      	strb	r3, [r7, #11]

	/**** Send register address. ****/

	//while( ( I2C1->SR1 & I2C_SR1_TXE_Msk ) == 0 );

	while( ( ( I2C1->SR1 & I2C_SR1_TXE_Msk ) == 0 ) && ( currentTime < ( 1000 * I2C_TIMEOUT_MS ) ) )
 80075c8:	e008      	b.n	80075dc <I2C1_writeByte+0xd8>
	{
	  currentTime = ( Ticks_TicksToUs(TIM5->CNT) - startTime );
 80075ca:	4b31      	ldr	r3, [pc, #196]	; (8007690 <I2C1_writeByte+0x18c>)
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	4618      	mov	r0, r3
 80075d0:	f004 f988 	bl	800b8e4 <Ticks_TicksToUs>
 80075d4:	4602      	mov	r2, r0
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	617b      	str	r3, [r7, #20]
	while( ( ( I2C1->SR1 & I2C_SR1_TXE_Msk ) == 0 ) && ( currentTime < ( 1000 * I2C_TIMEOUT_MS ) ) )
 80075dc:	4b2b      	ldr	r3, [pc, #172]	; (800768c <I2C1_writeByte+0x188>)
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d103      	bne.n	80075f0 <I2C1_writeByte+0xec>
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	4a2a      	ldr	r2, [pc, #168]	; (8007694 <I2C1_writeByte+0x190>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d9ec      	bls.n	80075ca <I2C1_writeByte+0xc6>
	}

	if( currentTime >= ( 1000 * I2C_TIMEOUT_MS ) )
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	4a28      	ldr	r2, [pc, #160]	; (8007694 <I2C1_writeByte+0x190>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d901      	bls.n	80075fc <I2C1_writeByte+0xf8>
	{
	  timeoutStatus = 1;
 80075f8:	2301      	movs	r3, #1
 80075fa:	74fb      	strb	r3, [r7, #19]
	}


	/* Write data. */

	I2C1->DR = data;
 80075fc:	4a23      	ldr	r2, [pc, #140]	; (800768c <I2C1_writeByte+0x188>)
 80075fe:	79bb      	ldrb	r3, [r7, #6]
 8007600:	6113      	str	r3, [r2, #16]

	/* Wait until data register is empty. */

	//while( ( I2C1->SR1 & I2C_SR1_BTF_Msk ) == 0 );

	while( ( ( I2C1->SR1 & I2C_SR1_BTF_Msk ) == 0 ) && ( currentTime < ( 1000 * I2C_TIMEOUT_MS ) ) )
 8007602:	e008      	b.n	8007616 <I2C1_writeByte+0x112>
	{
	  currentTime = ( Ticks_TicksToUs(TIM5->CNT) - startTime );
 8007604:	4b22      	ldr	r3, [pc, #136]	; (8007690 <I2C1_writeByte+0x18c>)
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	4618      	mov	r0, r3
 800760a:	f004 f96b 	bl	800b8e4 <Ticks_TicksToUs>
 800760e:	4602      	mov	r2, r0
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	617b      	str	r3, [r7, #20]
	while( ( ( I2C1->SR1 & I2C_SR1_BTF_Msk ) == 0 ) && ( currentTime < ( 1000 * I2C_TIMEOUT_MS ) ) )
 8007616:	4b1d      	ldr	r3, [pc, #116]	; (800768c <I2C1_writeByte+0x188>)
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b00      	cmp	r3, #0
 8007620:	d103      	bne.n	800762a <I2C1_writeByte+0x126>
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	4a1b      	ldr	r2, [pc, #108]	; (8007694 <I2C1_writeByte+0x190>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d9ec      	bls.n	8007604 <I2C1_writeByte+0x100>
	}

	if( currentTime >= ( 1000 * I2C_TIMEOUT_MS ) )
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	4a19      	ldr	r2, [pc, #100]	; (8007694 <I2C1_writeByte+0x190>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d90b      	bls.n	800764a <I2C1_writeByte+0x146>
	{
	  timeoutStatus = 1;
 8007632:	2301      	movs	r3, #1
 8007634:	74fb      	strb	r3, [r7, #19]

	/*	Wait for acknowledgement from slave. */

	//while( ( I2C1->CR1 & I2C_CR1_ACK_Msk ) == 0 );

	while( ( ( I2C1->CR1 & I2C_CR1_ACK_Msk ) == 0 ) && ( currentTime < ( 1000 * I2C_TIMEOUT_MS ) ) )
 8007636:	e008      	b.n	800764a <I2C1_writeByte+0x146>
	{
	  currentTime = ( Ticks_TicksToUs(TIM5->CNT) - startTime );
 8007638:	4b15      	ldr	r3, [pc, #84]	; (8007690 <I2C1_writeByte+0x18c>)
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	4618      	mov	r0, r3
 800763e:	f004 f951 	bl	800b8e4 <Ticks_TicksToUs>
 8007642:	4602      	mov	r2, r0
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	617b      	str	r3, [r7, #20]
	while( ( ( I2C1->CR1 & I2C_CR1_ACK_Msk ) == 0 ) && ( currentTime < ( 1000 * I2C_TIMEOUT_MS ) ) )
 800764a:	4b10      	ldr	r3, [pc, #64]	; (800768c <I2C1_writeByte+0x188>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007652:	2b00      	cmp	r3, #0
 8007654:	d103      	bne.n	800765e <I2C1_writeByte+0x15a>
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	4a0e      	ldr	r2, [pc, #56]	; (8007694 <I2C1_writeByte+0x190>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d9ec      	bls.n	8007638 <I2C1_writeByte+0x134>
	}

	if( currentTime >= ( 1000 * I2C_TIMEOUT_MS ) )
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	4a0c      	ldr	r2, [pc, #48]	; (8007694 <I2C1_writeByte+0x190>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d901      	bls.n	800766a <I2C1_writeByte+0x166>
	{
	  timeoutStatus = 1;
 8007666:	2301      	movs	r3, #1
 8007668:	74fb      	strb	r3, [r7, #19]
	}


	/* Clear the ACK bit. */

	I2C1->CR1 &= (~I2C_CR1_ACK_Msk);
 800766a:	4b08      	ldr	r3, [pc, #32]	; (800768c <I2C1_writeByte+0x188>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a07      	ldr	r2, [pc, #28]	; (800768c <I2C1_writeByte+0x188>)
 8007670:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007674:	6013      	str	r3, [r2, #0]

	/* Generate STOP condition. */

	I2C1->CR1 |= I2C_CR1_STOP_Msk;
 8007676:	4b05      	ldr	r3, [pc, #20]	; (800768c <I2C1_writeByte+0x188>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a04      	ldr	r2, [pc, #16]	; (800768c <I2C1_writeByte+0x188>)
 800767c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007680:	6013      	str	r3, [r2, #0]

	return(timeoutStatus);
 8007682:	7cfb      	ldrb	r3, [r7, #19]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	40005400 	.word	0x40005400
 8007690:	40000c00 	.word	0x40000c00
 8007694:	0001869f 	.word	0x0001869f

08007698 <MPU6050_write_register>:

	return(data);
}

uint8_t MPU6050_write_register( uint8_t device_address, uint8_t register_address, uint8_t data )
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	71fb      	strb	r3, [r7, #7]
 80076a2:	460b      	mov	r3, r1
 80076a4:	71bb      	strb	r3, [r7, #6]
 80076a6:	4613      	mov	r3, r2
 80076a8:	717b      	strb	r3, [r7, #5]
	/**** Start transmission. ****/

	uint8_t temp = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]

	temp = temp;		//	to avoid warning from compiler.

	/*	Enable ACK bit. */

	I2C1->CR1 |= I2C_CR1_ACK_Msk;
 80076ae:	4b2e      	ldr	r3, [pc, #184]	; (8007768 <MPU6050_write_register+0xd0>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a2d      	ldr	r2, [pc, #180]	; (8007768 <MPU6050_write_register+0xd0>)
 80076b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076b8:	6013      	str	r3, [r2, #0]

	/* Start transmission. */

	I2C1->CR1 |= I2C_CR1_START_Msk;
 80076ba:	4b2b      	ldr	r3, [pc, #172]	; (8007768 <MPU6050_write_register+0xd0>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a2a      	ldr	r2, [pc, #168]	; (8007768 <MPU6050_write_register+0xd0>)
 80076c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076c4:	6013      	str	r3, [r2, #0]

	/*	Wait until transmission of the start bit is done. */

	while( ( I2C1->SR1 & I2C_SR1_SB_Msk ) == 0 );
 80076c6:	bf00      	nop
 80076c8:	4b27      	ldr	r3, [pc, #156]	; (8007768 <MPU6050_write_register+0xd0>)
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0f9      	beq.n	80076c8 <MPU6050_write_register+0x30>

	/**** Connect to device. ****/

	/* Write data register with address. */

	I2C1->DR = device_address << 1;
 80076d4:	79fb      	ldrb	r3, [r7, #7]
 80076d6:	005a      	lsls	r2, r3, #1
 80076d8:	4b23      	ldr	r3, [pc, #140]	; (8007768 <MPU6050_write_register+0xd0>)
 80076da:	611a      	str	r2, [r3, #16]

	/*	Wait until address is transmitted. */

	while( ( I2C1->SR1 & I2C_SR1_ADDR_Msk ) == 0 );
 80076dc:	bf00      	nop
 80076de:	4b22      	ldr	r3, [pc, #136]	; (8007768 <MPU6050_write_register+0xd0>)
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0f9      	beq.n	80076de <MPU6050_write_register+0x46>

	temp = I2C1->SR1 | I2C1->SR2;
 80076ea:	4b1f      	ldr	r3, [pc, #124]	; (8007768 <MPU6050_write_register+0xd0>)
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	4b1d      	ldr	r3, [pc, #116]	; (8007768 <MPU6050_write_register+0xd0>)
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	4313      	orrs	r3, r2
 80076f8:	73fb      	strb	r3, [r7, #15]


	/**** Send register address. ****/

	while( ( I2C1->SR1 & I2C_SR1_TXE_Msk ) == 0 );
 80076fa:	bf00      	nop
 80076fc:	4b1a      	ldr	r3, [pc, #104]	; (8007768 <MPU6050_write_register+0xd0>)
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0f9      	beq.n	80076fc <MPU6050_write_register+0x64>

	/* Write register address. */

	I2C1->DR = register_address;
 8007708:	4a17      	ldr	r2, [pc, #92]	; (8007768 <MPU6050_write_register+0xd0>)
 800770a:	79bb      	ldrb	r3, [r7, #6]
 800770c:	6113      	str	r3, [r2, #16]

	/* Wait until data register is empty. */

	while( ( I2C1->SR1 & I2C_SR1_BTF_Msk ) == 0 );
 800770e:	bf00      	nop
 8007710:	4b15      	ldr	r3, [pc, #84]	; (8007768 <MPU6050_write_register+0xd0>)
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	2b00      	cmp	r3, #0
 800771a:	d0f9      	beq.n	8007710 <MPU6050_write_register+0x78>

	/**** Send data ****/

	while( ( I2C1->SR1 & I2C_SR1_TXE_Msk ) == 0 );
 800771c:	bf00      	nop
 800771e:	4b12      	ldr	r3, [pc, #72]	; (8007768 <MPU6050_write_register+0xd0>)
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007726:	2b00      	cmp	r3, #0
 8007728:	d0f9      	beq.n	800771e <MPU6050_write_register+0x86>

	/* Write data into register. */

	I2C1->DR = data;
 800772a:	4a0f      	ldr	r2, [pc, #60]	; (8007768 <MPU6050_write_register+0xd0>)
 800772c:	797b      	ldrb	r3, [r7, #5]
 800772e:	6113      	str	r3, [r2, #16]

	/* Wait until data register is empty. */

	while( ( I2C1->SR1 & I2C_SR1_BTF_Msk ) == 0 );
 8007730:	bf00      	nop
 8007732:	4b0d      	ldr	r3, [pc, #52]	; (8007768 <MPU6050_write_register+0xd0>)
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	f003 0304 	and.w	r3, r3, #4
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0f9      	beq.n	8007732 <MPU6050_write_register+0x9a>

	/*	Wait for acknowledgement from slave. */

	while( ( I2C1->CR1 & I2C_CR1_ACK_Msk ) == 0 );
 800773e:	bf00      	nop
 8007740:	4b09      	ldr	r3, [pc, #36]	; (8007768 <MPU6050_write_register+0xd0>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007748:	2b00      	cmp	r3, #0
 800774a:	d0f9      	beq.n	8007740 <MPU6050_write_register+0xa8>

	/* Generate STOP condition. */

	I2C1->CR1 |= I2C_CR1_STOP_Msk;
 800774c:	4b06      	ldr	r3, [pc, #24]	; (8007768 <MPU6050_write_register+0xd0>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a05      	ldr	r2, [pc, #20]	; (8007768 <MPU6050_write_register+0xd0>)
 8007752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007756:	6013      	str	r3, [r2, #0]

	return(data);
 8007758:	797b      	ldrb	r3, [r7, #5]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	40005400 	.word	0x40005400

0800776c <MPU6050_updateConfig>:


void MPU6050_updateConfig()
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
  /* If any one of the accelerometers are configured, set the full scale range. */

  if( (!imu.disable.sensors.x_accel) || (!imu.disable.sensors.y_accel) || (!imu.disable.sensors.z_accel)  )
 8007772:	4b41      	ldr	r3, [pc, #260]	; (8007878 <MPU6050_updateConfig+0x10c>)
 8007774:	791b      	ldrb	r3, [r3, #4]
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00d      	beq.n	800779c <MPU6050_updateConfig+0x30>
 8007780:	4b3d      	ldr	r3, [pc, #244]	; (8007878 <MPU6050_updateConfig+0x10c>)
 8007782:	791b      	ldrb	r3, [r3, #4]
 8007784:	f003 0310 	and.w	r3, r3, #16
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d006      	beq.n	800779c <MPU6050_updateConfig+0x30>
 800778e:	4b3a      	ldr	r3, [pc, #232]	; (8007878 <MPU6050_updateConfig+0x10c>)
 8007790:	791b      	ldrb	r3, [r3, #4]
 8007792:	f003 0308 	and.w	r3, r3, #8
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10d      	bne.n	80077b8 <MPU6050_updateConfig+0x4c>
  {
    MPU6050_write_register( imu.device_address, ACCEL_CONFIG,
 800779c:	4b36      	ldr	r3, [pc, #216]	; (8007878 <MPU6050_updateConfig+0x10c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	b2d8      	uxtb	r0, r3
	((uint8_t)imu.sensor_configurations.sensor_configuration_segments.accel_fs_config) << AFS_SEL_Pos );
 80077a2:	4b35      	ldr	r3, [pc, #212]	; (8007878 <MPU6050_updateConfig+0x10c>)
 80077a4:	7a1b      	ldrb	r3, [r3, #8]
 80077a6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80077aa:	b2db      	uxtb	r3, r3
    MPU6050_write_register( imu.device_address, ACCEL_CONFIG,
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	461a      	mov	r2, r3
 80077b2:	211c      	movs	r1, #28
 80077b4:	f7ff ff70 	bl	8007698 <MPU6050_write_register>
  }

  /* If any one of the gyroscopes are configured, set the full scale range. */

  if( (!imu.disable.sensors.x_gyro) || (!imu.disable.sensors.y_gyro) || (!imu.disable.sensors.z_gyro) )
 80077b8:	4b2f      	ldr	r3, [pc, #188]	; (8007878 <MPU6050_updateConfig+0x10c>)
 80077ba:	791b      	ldrb	r3, [r3, #4]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00d      	beq.n	80077e2 <MPU6050_updateConfig+0x76>
 80077c6:	4b2c      	ldr	r3, [pc, #176]	; (8007878 <MPU6050_updateConfig+0x10c>)
 80077c8:	791b      	ldrb	r3, [r3, #4]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d006      	beq.n	80077e2 <MPU6050_updateConfig+0x76>
 80077d4:	4b28      	ldr	r3, [pc, #160]	; (8007878 <MPU6050_updateConfig+0x10c>)
 80077d6:	791b      	ldrb	r3, [r3, #4]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10d      	bne.n	80077fe <MPU6050_updateConfig+0x92>
  {
    MPU6050_write_register( imu.device_address, GYRO_CONFIG,
 80077e2:	4b25      	ldr	r3, [pc, #148]	; (8007878 <MPU6050_updateConfig+0x10c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	b2d8      	uxtb	r0, r3
    ((uint8_t)imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config) << FS_SEL_Pos );
 80077e8:	4b23      	ldr	r3, [pc, #140]	; (8007878 <MPU6050_updateConfig+0x10c>)
 80077ea:	7a1b      	ldrb	r3, [r3, #8]
 80077ec:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80077f0:	b2db      	uxtb	r3, r3
    MPU6050_write_register( imu.device_address, GYRO_CONFIG,
 80077f2:	00db      	lsls	r3, r3, #3
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	211b      	movs	r1, #27
 80077fa:	f7ff ff4d 	bl	8007698 <MPU6050_write_register>
  }

  uint16_t tempU16 = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	80fb      	strh	r3, [r7, #6]

  /* Avoid zero sampling rate and set it to minimum sampling rate. */

  if( imu.sensor_configurations.sensor_configuration_segments.sampling_rate == 0 )
 8007802:	4b1d      	ldr	r3, [pc, #116]	; (8007878 <MPU6050_updateConfig+0x10c>)
 8007804:	689a      	ldr	r2, [r3, #8]
 8007806:	4b1d      	ldr	r3, [pc, #116]	; (800787c <MPU6050_updateConfig+0x110>)
 8007808:	4013      	ands	r3, r2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d105      	bne.n	800781a <MPU6050_updateConfig+0xae>
  {
    imu.sensor_configurations.sensor_configuration_segments.sampling_rate = 10;
 800780e:	4a1a      	ldr	r2, [pc, #104]	; (8007878 <MPU6050_updateConfig+0x10c>)
 8007810:	6893      	ldr	r3, [r2, #8]
 8007812:	210a      	movs	r1, #10
 8007814:	f361 13d6 	bfi	r3, r1, #7, #16
 8007818:	6093      	str	r3, [r2, #8]
  }

  /* If DLPF is enabled, the sampling rate will be reduced to 1000 Hz from 8000 Hz. */

  if( imu.sensor_configurations.sensor_configuration_segments.enable_DLPF )
 800781a:	4b17      	ldr	r3, [pc, #92]	; (8007878 <MPU6050_updateConfig+0x10c>)
 800781c:	7a1b      	ldrb	r3, [r3, #8]
 800781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00d      	beq.n	8007844 <MPU6050_updateConfig+0xd8>
  {
    tempU16 = (1000/(uint16_t)imu.sensor_configurations.sensor_configuration_segments.sampling_rate) - 1;
 8007828:	4b13      	ldr	r3, [pc, #76]	; (8007878 <MPU6050_updateConfig+0x10c>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8007830:	b29b      	uxth	r3, r3
 8007832:	461a      	mov	r2, r3
 8007834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007838:	fb93 f3f2 	sdiv	r3, r3, r2
 800783c:	b29b      	uxth	r3, r3
 800783e:	3b01      	subs	r3, #1
 8007840:	80fb      	strh	r3, [r7, #6]
 8007842:	e00c      	b.n	800785e <MPU6050_updateConfig+0xf2>
  }
  else
  {
    tempU16 = (8000/(uint16_t)imu.sensor_configurations.sensor_configuration_segments.sampling_rate) - 1;
 8007844:	4b0c      	ldr	r3, [pc, #48]	; (8007878 <MPU6050_updateConfig+0x10c>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800784c:	b29b      	uxth	r3, r3
 800784e:	461a      	mov	r2, r3
 8007850:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8007854:	fb93 f3f2 	sdiv	r3, r3, r2
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	80fb      	strh	r3, [r7, #6]
  }

  MPU6050_write_register( imu.device_address, SMPLRT_DIV, tempU16 );
 800785e:	4b06      	ldr	r3, [pc, #24]	; (8007878 <MPU6050_updateConfig+0x10c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	88fa      	ldrh	r2, [r7, #6]
 8007866:	b2d2      	uxtb	r2, r2
 8007868:	2119      	movs	r1, #25
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff ff14 	bl	8007698 <MPU6050_write_register>
}
 8007870:	bf00      	nop
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	20000350 	.word	0x20000350
 800787c:	007fff80 	.word	0x007fff80

08007880 <MPU6050_Init>:

void MPU6050_Init()
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
  uint8_t __temp = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	71fb      	strb	r3, [r7, #7]

  I2C1_Init();
 800788a:	f7ff fb27 	bl	8006edc <I2C1_Init>

  /* Set I2C device address to 0x68. */

  imu.device_address = 0x68;
 800788e:	4b57      	ldr	r3, [pc, #348]	; (80079ec <MPU6050_Init+0x16c>)
 8007890:	2268      	movs	r2, #104	; 0x68
 8007892:	601a      	str	r2, [r3, #0]

  /* Keep all sensors enabled. */

  imu.disable.sensors.x_accel = 0;
 8007894:	4a55      	ldr	r2, [pc, #340]	; (80079ec <MPU6050_Init+0x16c>)
 8007896:	7913      	ldrb	r3, [r2, #4]
 8007898:	f36f 1345 	bfc	r3, #5, #1
 800789c:	7113      	strb	r3, [r2, #4]
  imu.disable.sensors.y_accel = 0;
 800789e:	4a53      	ldr	r2, [pc, #332]	; (80079ec <MPU6050_Init+0x16c>)
 80078a0:	7913      	ldrb	r3, [r2, #4]
 80078a2:	f36f 1304 	bfc	r3, #4, #1
 80078a6:	7113      	strb	r3, [r2, #4]
  imu.disable.sensors.z_accel = 0;
 80078a8:	4a50      	ldr	r2, [pc, #320]	; (80079ec <MPU6050_Init+0x16c>)
 80078aa:	7913      	ldrb	r3, [r2, #4]
 80078ac:	f36f 03c3 	bfc	r3, #3, #1
 80078b0:	7113      	strb	r3, [r2, #4]
  imu.disable.sensors.x_gyro = 0;
 80078b2:	4a4e      	ldr	r2, [pc, #312]	; (80079ec <MPU6050_Init+0x16c>)
 80078b4:	7913      	ldrb	r3, [r2, #4]
 80078b6:	f36f 0382 	bfc	r3, #2, #1
 80078ba:	7113      	strb	r3, [r2, #4]
  imu.disable.sensors.y_gyro = 0;
 80078bc:	4a4b      	ldr	r2, [pc, #300]	; (80079ec <MPU6050_Init+0x16c>)
 80078be:	7913      	ldrb	r3, [r2, #4]
 80078c0:	f36f 0341 	bfc	r3, #1, #1
 80078c4:	7113      	strb	r3, [r2, #4]
  imu.disable.sensors.z_gyro = 0;
 80078c6:	4a49      	ldr	r2, [pc, #292]	; (80079ec <MPU6050_Init+0x16c>)
 80078c8:	7913      	ldrb	r3, [r2, #4]
 80078ca:	f36f 0300 	bfc	r3, #0, #1
 80078ce:	7113      	strb	r3, [r2, #4]

  /* Mention sensor full-scale values. */

  imu.sensor_configurations.sensor_configuration_segments.accel_fs_config =
  Config.IMU_settings.IMU_settings_parameters.accel_fs;
 80078d0:	4b47      	ldr	r3, [pc, #284]	; (80079f0 <MPU6050_Init+0x170>)
 80078d2:	7b1b      	ldrb	r3, [r3, #12]
 80078d4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80078d8:	b2d9      	uxtb	r1, r3
  imu.sensor_configurations.sensor_configuration_segments.accel_fs_config =
 80078da:	4a44      	ldr	r2, [pc, #272]	; (80079ec <MPU6050_Init+0x16c>)
 80078dc:	7a13      	ldrb	r3, [r2, #8]
 80078de:	f361 0302 	bfi	r3, r1, #0, #3
 80078e2:	7213      	strb	r3, [r2, #8]
  imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config =
  Config.IMU_settings.IMU_settings_parameters.gyro_fs;
 80078e4:	4b42      	ldr	r3, [pc, #264]	; (80079f0 <MPU6050_Init+0x170>)
 80078e6:	899b      	ldrh	r3, [r3, #12]
 80078e8:	f3c3 1382 	ubfx	r3, r3, #6, #3
 80078ec:	b2d9      	uxtb	r1, r3
  imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config =
 80078ee:	4a3f      	ldr	r2, [pc, #252]	; (80079ec <MPU6050_Init+0x16c>)
 80078f0:	7a13      	ldrb	r3, [r2, #8]
 80078f2:	f361 03c5 	bfi	r3, r1, #3, #3
 80078f6:	7213      	strb	r3, [r2, #8]

  imu.N_calibration_points = Config.IMU_calibration.IMU_calibration_parameters.points;
 80078f8:	4b3d      	ldr	r3, [pc, #244]	; (80079f0 <MPU6050_Init+0x170>)
 80078fa:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80078fe:	4b3b      	ldr	r3, [pc, #236]	; (80079ec <MPU6050_Init+0x16c>)
 8007900:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  imu.calibration_interval_ms = Config.IMU_calibration.IMU_calibration_parameters.interval;
 8007904:	4b3a      	ldr	r3, [pc, #232]	; (80079f0 <MPU6050_Init+0x170>)
 8007906:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 800790a:	4b38      	ldr	r3, [pc, #224]	; (80079ec <MPU6050_Init+0x16c>)
 800790c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  imu.calibration_axis = Config.IMU_calibration.IMU_calibration_parameters.axis;
 8007910:	4b37      	ldr	r3, [pc, #220]	; (80079f0 <MPU6050_Init+0x170>)
 8007912:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8007916:	4b35      	ldr	r3, [pc, #212]	; (80079ec <MPU6050_Init+0x16c>)
 8007918:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  IMU_settings_SMF.IMU_settings_SMF_segments.ACCEL_FS =
  Config.IMU_settings.IMU_settings_parameters.accel_fs;
 800791c:	4b34      	ldr	r3, [pc, #208]	; (80079f0 <MPU6050_Init+0x170>)
 800791e:	7b1b      	ldrb	r3, [r3, #12]
 8007920:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8007924:	b2d9      	uxtb	r1, r3
  IMU_settings_SMF.IMU_settings_SMF_segments.ACCEL_FS =
 8007926:	4a33      	ldr	r2, [pc, #204]	; (80079f4 <MPU6050_Init+0x174>)
 8007928:	8813      	ldrh	r3, [r2, #0]
 800792a:	f361 13c9 	bfi	r3, r1, #7, #3
 800792e:	8013      	strh	r3, [r2, #0]

  IMU_settings_SMF.IMU_settings_SMF_segments.GYRO_FS =
  Config.IMU_settings.IMU_settings_parameters.gyro_fs;
 8007930:	4b2f      	ldr	r3, [pc, #188]	; (80079f0 <MPU6050_Init+0x170>)
 8007932:	899b      	ldrh	r3, [r3, #12]
 8007934:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8007938:	b2d9      	uxtb	r1, r3
  IMU_settings_SMF.IMU_settings_SMF_segments.GYRO_FS =
 800793a:	4a2e      	ldr	r2, [pc, #184]	; (80079f4 <MPU6050_Init+0x174>)
 800793c:	7813      	ldrb	r3, [r2, #0]
 800793e:	f361 1306 	bfi	r3, r1, #4, #3
 8007942:	7013      	strb	r3, [r2, #0]

  IMU_calibration_SMF.IMU_calibration_SMF_segments.axis = imu.calibration_axis;
 8007944:	4b29      	ldr	r3, [pc, #164]	; (80079ec <MPU6050_Init+0x16c>)
 8007946:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800794a:	f003 0307 	and.w	r3, r3, #7
 800794e:	b2d9      	uxtb	r1, r3
 8007950:	4a29      	ldr	r2, [pc, #164]	; (80079f8 <MPU6050_Init+0x178>)
 8007952:	7893      	ldrb	r3, [r2, #2]
 8007954:	f361 0302 	bfi	r3, r1, #0, #3
 8007958:	7093      	strb	r3, [r2, #2]
  IMU_calibration_SMF.IMU_calibration_SMF_segments.interval = imu.calibration_interval_ms;
 800795a:	4b24      	ldr	r3, [pc, #144]	; (80079ec <MPU6050_Init+0x16c>)
 800795c:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8007960:	4b25      	ldr	r3, [pc, #148]	; (80079f8 <MPU6050_Init+0x178>)
 8007962:	701a      	strb	r2, [r3, #0]
  IMU_calibration_SMF.IMU_calibration_SMF_segments.points = imu.N_calibration_points;
 8007964:	4b21      	ldr	r3, [pc, #132]	; (80079ec <MPU6050_Init+0x16c>)
 8007966:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800796a:	4b23      	ldr	r3, [pc, #140]	; (80079f8 <MPU6050_Init+0x178>)
 800796c:	705a      	strb	r2, [r3, #1]

  /* Enable DLPF. */

  imu.sensor_configurations.sensor_configuration_segments.enable_DLPF = 1;
 800796e:	4a1f      	ldr	r2, [pc, #124]	; (80079ec <MPU6050_Init+0x16c>)
 8007970:	7a13      	ldrb	r3, [r2, #8]
 8007972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007976:	7213      	strb	r3, [r2, #8]

  /* Set sensor offset values to zero. */

  imu.accelerometer_offset[X] = 0;
 8007978:	4b1c      	ldr	r3, [pc, #112]	; (80079ec <MPU6050_Init+0x16c>)
 800797a:	2200      	movs	r2, #0
 800797c:	631a      	str	r2, [r3, #48]	; 0x30
  imu.accelerometer_offset[Y] = 0;
 800797e:	4b1b      	ldr	r3, [pc, #108]	; (80079ec <MPU6050_Init+0x16c>)
 8007980:	2200      	movs	r2, #0
 8007982:	635a      	str	r2, [r3, #52]	; 0x34
  imu.accelerometer_offset[Z] = 0;
 8007984:	4b19      	ldr	r3, [pc, #100]	; (80079ec <MPU6050_Init+0x16c>)
 8007986:	2200      	movs	r2, #0
 8007988:	639a      	str	r2, [r3, #56]	; 0x38
  imu.gyroscope_offset[X] = 0;
 800798a:	4b18      	ldr	r3, [pc, #96]	; (80079ec <MPU6050_Init+0x16c>)
 800798c:	2200      	movs	r2, #0
 800798e:	63da      	str	r2, [r3, #60]	; 0x3c
  imu.gyroscope_offset[Y] = 0;
 8007990:	4b16      	ldr	r3, [pc, #88]	; (80079ec <MPU6050_Init+0x16c>)
 8007992:	2200      	movs	r2, #0
 8007994:	641a      	str	r2, [r3, #64]	; 0x40
  imu.gyroscope_offset[Z] = 0;
 8007996:	4b15      	ldr	r3, [pc, #84]	; (80079ec <MPU6050_Init+0x16c>)
 8007998:	2200      	movs	r2, #0
 800799a:	645a      	str	r2, [r3, #68]	; 0x44

  /************	Write initial configurations into device.    ******************/

  /* Wake device from sleep mode. */

  MPU6050_write_register( imu.device_address, PWR_MGMT_1 , 0 );
 800799c:	4b13      	ldr	r3, [pc, #76]	; (80079ec <MPU6050_Init+0x16c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2200      	movs	r2, #0
 80079a4:	216b      	movs	r1, #107	; 0x6b
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff fe76 	bl	8007698 <MPU6050_write_register>

  /* Write sensor enable and disable configurations. */

  __temp = imu.disable.all;
 80079ac:	4b0f      	ldr	r3, [pc, #60]	; (80079ec <MPU6050_Init+0x16c>)
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	71fb      	strb	r3, [r7, #7]

  //System_SysTick_delay_ms(100);

  MPU6050_write_register( imu.device_address, PWR_MGMT_2, __temp );
 80079b2:	4b0e      	ldr	r3, [pc, #56]	; (80079ec <MPU6050_Init+0x16c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	79fa      	ldrb	r2, [r7, #7]
 80079ba:	216c      	movs	r1, #108	; 0x6c
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff fe6b 	bl	8007698 <MPU6050_write_register>

  System_SysTick_delay_ms(100);
 80079c2:	2064      	movs	r0, #100	; 0x64
 80079c4:	f003 fda6 	bl	800b514 <System_SysTick_delay_ms>

  //MPU6050_updateConfig();

  MPU6050_calibrate(imu.calibration_axis,imu.N_calibration_points);
 80079c8:	4b08      	ldr	r3, [pc, #32]	; (80079ec <MPU6050_Init+0x16c>)
 80079ca:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 80079ce:	4b07      	ldr	r3, [pc, #28]	; (80079ec <MPU6050_Init+0x16c>)
 80079d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80079d4:	4619      	mov	r1, r3
 80079d6:	4610      	mov	r0, r2
 80079d8:	f000 fb8c 	bl	80080f4 <MPU6050_calibrate>

  System_SysTick_delay_ms(100);
 80079dc:	2064      	movs	r0, #100	; 0x64
 80079de:	f003 fd99 	bl	800b514 <System_SysTick_delay_ms>

  #ifdef GYRO_HPF_EN
    Gyro_HPF_Init();
  #endif
}
 80079e2:	bf00      	nop
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	20000350 	.word	0x20000350
 80079f0:	200005b0 	.word	0x200005b0
 80079f4:	20000484 	.word	0x20000484
 80079f8:	200004f8 	.word	0x200004f8

080079fc <MPU6050_readSensorData>:


void MPU6050_readSensorData()
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
  uint16_t tempU16 = 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	81fb      	strh	r3, [r7, #14]
  int32_t temp_I32 = 0;
 8007a06:	2300      	movs	r3, #0
 8007a08:	60bb      	str	r3, [r7, #8]
  uint8_t reg_H = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	71fb      	strb	r3, [r7, #7]
  uint8_t reg_L = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	71bb      	strb	r3, [r7, #6]
  int32_t gyro_fs_value = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	617b      	str	r3, [r7, #20]
  int32_t accel_fs_value = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	613b      	str	r3, [r7, #16]

  /* Get accelerometer full scale value. */

  if(imu.sensor_configurations.sensor_configuration_segments.accel_fs_config == ACCEL_FS_2G)
 8007a1a:	4baa      	ldr	r3, [pc, #680]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007a1c:	7a1b      	ldrb	r3, [r3, #8]
 8007a1e:	f003 0307 	and.w	r3, r3, #7
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d102      	bne.n	8007a2e <MPU6050_readSensorData+0x32>
  {
    accel_fs_value = 2000;
 8007a28:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007a2c:	613b      	str	r3, [r7, #16]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.accel_fs_config == ACCEL_FS_4G)
 8007a2e:	4ba5      	ldr	r3, [pc, #660]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007a30:	7a1b      	ldrb	r3, [r3, #8]
 8007a32:	f003 0307 	and.w	r3, r3, #7
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d102      	bne.n	8007a42 <MPU6050_readSensorData+0x46>
  {
    accel_fs_value = 4000;
 8007a3c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8007a40:	613b      	str	r3, [r7, #16]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.accel_fs_config == ACCEL_FS_8G)
 8007a42:	4ba0      	ldr	r3, [pc, #640]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007a44:	7a1b      	ldrb	r3, [r3, #8]
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d102      	bne.n	8007a56 <MPU6050_readSensorData+0x5a>
  {
    accel_fs_value = 8000;
 8007a50:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8007a54:	613b      	str	r3, [r7, #16]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.accel_fs_config == ACCEL_FS_16G)
 8007a56:	4b9b      	ldr	r3, [pc, #620]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007a58:	7a1b      	ldrb	r3, [r3, #8]
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d102      	bne.n	8007a6a <MPU6050_readSensorData+0x6e>
  {
    accel_fs_value = 16000;
 8007a64:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8007a68:	613b      	str	r3, [r7, #16]
  }

  /* Get gyroscope full scale value. */

  if(imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config == GYRO_FS_250DPS)
 8007a6a:	4b96      	ldr	r3, [pc, #600]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007a6c:	7a1b      	ldrb	r3, [r3, #8]
 8007a6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <MPU6050_readSensorData+0x80>
  {
    gyro_fs_value = 250000;
 8007a78:	4b93      	ldr	r3, [pc, #588]	; (8007cc8 <MPU6050_readSensorData+0x2cc>)
 8007a7a:	617b      	str	r3, [r7, #20]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config == GYRO_FS_500DPS)
 8007a7c:	4b91      	ldr	r3, [pc, #580]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007a7e:	7a1b      	ldrb	r3, [r3, #8]
 8007a80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b08      	cmp	r3, #8
 8007a88:	d101      	bne.n	8007a8e <MPU6050_readSensorData+0x92>
  {
    gyro_fs_value = 500000;
 8007a8a:	4b90      	ldr	r3, [pc, #576]	; (8007ccc <MPU6050_readSensorData+0x2d0>)
 8007a8c:	617b      	str	r3, [r7, #20]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config == GYRO_FS_1000DPS)
 8007a8e:	4b8d      	ldr	r3, [pc, #564]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007a90:	7a1b      	ldrb	r3, [r3, #8]
 8007a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b10      	cmp	r3, #16
 8007a9a:	d101      	bne.n	8007aa0 <MPU6050_readSensorData+0xa4>
  {
    gyro_fs_value = 1000000;
 8007a9c:	4b8c      	ldr	r3, [pc, #560]	; (8007cd0 <MPU6050_readSensorData+0x2d4>)
 8007a9e:	617b      	str	r3, [r7, #20]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config == GYRO_FS_2000DPS)
 8007aa0:	4b88      	ldr	r3, [pc, #544]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007aa2:	7a1b      	ldrb	r3, [r3, #8]
 8007aa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b18      	cmp	r3, #24
 8007aac:	d101      	bne.n	8007ab2 <MPU6050_readSensorData+0xb6>
  {
    gyro_fs_value = 2000000;
 8007aae:	4b89      	ldr	r3, [pc, #548]	; (8007cd4 <MPU6050_readSensorData+0x2d8>)
 8007ab0:	617b      	str	r3, [r7, #20]
  }

  /* Process data only for the enabled sensors. */

  if( !imu.disable.sensors.x_accel )
 8007ab2:	4b84      	ldr	r3, [pc, #528]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007ab4:	791b      	ldrb	r3, [r3, #4]
 8007ab6:	f003 0320 	and.w	r3, r3, #32
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d12e      	bne.n	8007b1e <MPU6050_readSensorData+0x122>
  {
    reg_H = MPU6050_read_register( imu.device_address, ACCEL_XOUT_H );
 8007ac0:	4b80      	ldr	r3, [pc, #512]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	213b      	movs	r1, #59	; 0x3b
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7ff fa6b 	bl	8006fa4 <MPU6050_read_register>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	71fb      	strb	r3, [r7, #7]
    reg_L = MPU6050_read_register( imu.device_address, ACCEL_XOUT_L );
 8007ad2:	4b7c      	ldr	r3, [pc, #496]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	213c      	movs	r1, #60	; 0x3c
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7ff fa62 	bl	8006fa4 <MPU6050_read_register>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	71bb      	strb	r3, [r7, #6]

    tempU16 = ( (uint16_t)reg_L | ( ((uint16_t)reg_H) << 8 ) );
 8007ae4:	79bb      	ldrb	r3, [r7, #6]
 8007ae6:	b21a      	sxth	r2, r3
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	021b      	lsls	r3, r3, #8
 8007aec:	b21b      	sxth	r3, r3
 8007aee:	4313      	orrs	r3, r2
 8007af0:	b21b      	sxth	r3, r3
 8007af2:	81fb      	strh	r3, [r7, #14]

    temp_I32 = ( ((int32_t)((int16_t)tempU16)) );
 8007af4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007af8:	60bb      	str	r3, [r7, #8]
    temp_I32 = (( temp_I32 * accel_fs_value ) / 32767);
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	fb02 f303 	mul.w	r3, r2, r3
 8007b02:	4a75      	ldr	r2, [pc, #468]	; (8007cd8 <MPU6050_readSensorData+0x2dc>)
 8007b04:	fb82 1203 	smull	r1, r2, r2, r3
 8007b08:	441a      	add	r2, r3
 8007b0a:	1392      	asrs	r2, r2, #14
 8007b0c:	17db      	asrs	r3, r3, #31
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	60bb      	str	r3, [r7, #8]

    imu.accelerometer[X] = ( temp_I32 - (int32_t)imu.accelerometer_offset[X] );
 8007b12:	4b6c      	ldr	r3, [pc, #432]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	4a6a      	ldr	r2, [pc, #424]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007b1c:	6193      	str	r3, [r2, #24]
  }
  if( !imu.disable.sensors.y_accel )
 8007b1e:	4b69      	ldr	r3, [pc, #420]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007b20:	791b      	ldrb	r3, [r3, #4]
 8007b22:	f003 0310 	and.w	r3, r3, #16
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d12e      	bne.n	8007b8a <MPU6050_readSensorData+0x18e>
  {
    reg_H = MPU6050_read_register( imu.device_address, ACCEL_YOUT_H );
 8007b2c:	4b65      	ldr	r3, [pc, #404]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	213d      	movs	r1, #61	; 0x3d
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7ff fa35 	bl	8006fa4 <MPU6050_read_register>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	71fb      	strb	r3, [r7, #7]
    reg_L = MPU6050_read_register( imu.device_address, ACCEL_YOUT_L );
 8007b3e:	4b61      	ldr	r3, [pc, #388]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	213e      	movs	r1, #62	; 0x3e
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff fa2c 	bl	8006fa4 <MPU6050_read_register>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	71bb      	strb	r3, [r7, #6]

    tempU16 = ( (uint16_t)reg_L | ( ((uint16_t)reg_H) << 8 ) );
 8007b50:	79bb      	ldrb	r3, [r7, #6]
 8007b52:	b21a      	sxth	r2, r3
 8007b54:	79fb      	ldrb	r3, [r7, #7]
 8007b56:	021b      	lsls	r3, r3, #8
 8007b58:	b21b      	sxth	r3, r3
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	b21b      	sxth	r3, r3
 8007b5e:	81fb      	strh	r3, [r7, #14]

    temp_I32 = ( ((int32_t)((int16_t)tempU16)) );
 8007b60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b64:	60bb      	str	r3, [r7, #8]
    temp_I32 = (( temp_I32 * accel_fs_value ) / 32767);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	fb02 f303 	mul.w	r3, r2, r3
 8007b6e:	4a5a      	ldr	r2, [pc, #360]	; (8007cd8 <MPU6050_readSensorData+0x2dc>)
 8007b70:	fb82 1203 	smull	r1, r2, r2, r3
 8007b74:	441a      	add	r2, r3
 8007b76:	1392      	asrs	r2, r2, #14
 8007b78:	17db      	asrs	r3, r3, #31
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	60bb      	str	r3, [r7, #8]

    imu.accelerometer[Y] = ( temp_I32 - (int32_t)imu.accelerometer_offset[Y] );
 8007b7e:	4b51      	ldr	r3, [pc, #324]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	4a4f      	ldr	r2, [pc, #316]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007b88:	61d3      	str	r3, [r2, #28]
  }
  if( !imu.disable.sensors.z_accel )
 8007b8a:	4b4e      	ldr	r3, [pc, #312]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007b8c:	791b      	ldrb	r3, [r3, #4]
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d12e      	bne.n	8007bf6 <MPU6050_readSensorData+0x1fa>
  {
    reg_H = MPU6050_read_register( imu.device_address, ACCEL_ZOUT_H );
 8007b98:	4b4a      	ldr	r3, [pc, #296]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	213f      	movs	r1, #63	; 0x3f
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff f9ff 	bl	8006fa4 <MPU6050_read_register>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	71fb      	strb	r3, [r7, #7]
    reg_L = MPU6050_read_register( imu.device_address, ACCEL_ZOUT_L );
 8007baa:	4b46      	ldr	r3, [pc, #280]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2140      	movs	r1, #64	; 0x40
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff f9f6 	bl	8006fa4 <MPU6050_read_register>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	71bb      	strb	r3, [r7, #6]

    tempU16 = ( (uint16_t)reg_L | ( ((uint16_t)reg_H) << 8 ) );
 8007bbc:	79bb      	ldrb	r3, [r7, #6]
 8007bbe:	b21a      	sxth	r2, r3
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	021b      	lsls	r3, r3, #8
 8007bc4:	b21b      	sxth	r3, r3
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	b21b      	sxth	r3, r3
 8007bca:	81fb      	strh	r3, [r7, #14]

    temp_I32 = ( ((int32_t)((int16_t)tempU16)) );
 8007bcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007bd0:	60bb      	str	r3, [r7, #8]
    temp_I32 = ( ( temp_I32 * accel_fs_value ) / 32767 );
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	fb02 f303 	mul.w	r3, r2, r3
 8007bda:	4a3f      	ldr	r2, [pc, #252]	; (8007cd8 <MPU6050_readSensorData+0x2dc>)
 8007bdc:	fb82 1203 	smull	r1, r2, r2, r3
 8007be0:	441a      	add	r2, r3
 8007be2:	1392      	asrs	r2, r2, #14
 8007be4:	17db      	asrs	r3, r3, #31
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	60bb      	str	r3, [r7, #8]

    imu.accelerometer[Z] = (temp_I32 - (int32_t)imu.accelerometer_offset[Z]);
 8007bea:	4b36      	ldr	r3, [pc, #216]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	4a34      	ldr	r2, [pc, #208]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007bf4:	6213      	str	r3, [r2, #32]
  }


  /** Gyroscope sensors. **/

  if( !imu.disable.sensors.x_gyro )
 8007bf6:	4b33      	ldr	r3, [pc, #204]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007bf8:	791b      	ldrb	r3, [r3, #4]
 8007bfa:	f003 0304 	and.w	r3, r3, #4
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d12e      	bne.n	8007c62 <MPU6050_readSensorData+0x266>
  {
    reg_H = MPU6050_read_register( imu.device_address, GYRO_XOUT_H );
 8007c04:	4b2f      	ldr	r3, [pc, #188]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2143      	movs	r1, #67	; 0x43
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7ff f9c9 	bl	8006fa4 <MPU6050_read_register>
 8007c12:	4603      	mov	r3, r0
 8007c14:	71fb      	strb	r3, [r7, #7]
    reg_L = MPU6050_read_register( imu.device_address, GYRO_XOUT_L );
 8007c16:	4b2b      	ldr	r3, [pc, #172]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2144      	movs	r1, #68	; 0x44
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff f9c0 	bl	8006fa4 <MPU6050_read_register>
 8007c24:	4603      	mov	r3, r0
 8007c26:	71bb      	strb	r3, [r7, #6]

    tempU16 = ( (uint16_t)reg_L | ( ((uint16_t)reg_H) << 8 ) );
 8007c28:	79bb      	ldrb	r3, [r7, #6]
 8007c2a:	b21a      	sxth	r2, r3
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	021b      	lsls	r3, r3, #8
 8007c30:	b21b      	sxth	r3, r3
 8007c32:	4313      	orrs	r3, r2
 8007c34:	b21b      	sxth	r3, r3
 8007c36:	81fb      	strh	r3, [r7, #14]

    temp_I32 = ( ((int32_t)((int16_t)tempU16)) );
 8007c38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007c3c:	60bb      	str	r3, [r7, #8]
    temp_I32 = ( ( temp_I32 * gyro_fs_value ) / 32767 );
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	fb02 f303 	mul.w	r3, r2, r3
 8007c46:	4a24      	ldr	r2, [pc, #144]	; (8007cd8 <MPU6050_readSensorData+0x2dc>)
 8007c48:	fb82 1203 	smull	r1, r2, r2, r3
 8007c4c:	441a      	add	r2, r3
 8007c4e:	1392      	asrs	r2, r2, #14
 8007c50:	17db      	asrs	r3, r3, #31
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	60bb      	str	r3, [r7, #8]

    imu.gyroscope[X] = (temp_I32 - (int32_t)imu.gyroscope_offset[X]);
 8007c56:	4b1b      	ldr	r3, [pc, #108]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	4a19      	ldr	r2, [pc, #100]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007c60:	6253      	str	r3, [r2, #36]	; 0x24
  }
  if( !imu.disable.sensors.y_gyro )
 8007c62:	4b18      	ldr	r3, [pc, #96]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007c64:	791b      	ldrb	r3, [r3, #4]
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d13c      	bne.n	8007cea <MPU6050_readSensorData+0x2ee>
  {
    reg_H = MPU6050_read_register( imu.device_address, GYRO_YOUT_H );
 8007c70:	4b14      	ldr	r3, [pc, #80]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2145      	movs	r1, #69	; 0x45
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff f993 	bl	8006fa4 <MPU6050_read_register>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	71fb      	strb	r3, [r7, #7]
    reg_L = MPU6050_read_register( imu.device_address, GYRO_YOUT_L );
 8007c82:	4b10      	ldr	r3, [pc, #64]	; (8007cc4 <MPU6050_readSensorData+0x2c8>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2146      	movs	r1, #70	; 0x46
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff f98a 	bl	8006fa4 <MPU6050_read_register>
 8007c90:	4603      	mov	r3, r0
 8007c92:	71bb      	strb	r3, [r7, #6]

    tempU16 = ( (uint16_t)reg_L | ( ((uint16_t)reg_H) << 8 ) );
 8007c94:	79bb      	ldrb	r3, [r7, #6]
 8007c96:	b21a      	sxth	r2, r3
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	021b      	lsls	r3, r3, #8
 8007c9c:	b21b      	sxth	r3, r3
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	b21b      	sxth	r3, r3
 8007ca2:	81fb      	strh	r3, [r7, #14]

    temp_I32 = ( ((int32_t)((int16_t)tempU16))  );
 8007ca4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ca8:	60bb      	str	r3, [r7, #8]
    temp_I32 = ( ( temp_I32 * gyro_fs_value ) / 32767 );
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	fb02 f303 	mul.w	r3, r2, r3
 8007cb2:	4a09      	ldr	r2, [pc, #36]	; (8007cd8 <MPU6050_readSensorData+0x2dc>)
 8007cb4:	fb82 1203 	smull	r1, r2, r2, r3
 8007cb8:	441a      	add	r2, r3
 8007cba:	1392      	asrs	r2, r2, #14
 8007cbc:	17db      	asrs	r3, r3, #31
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	e00c      	b.n	8007cdc <MPU6050_readSensorData+0x2e0>
 8007cc2:	bf00      	nop
 8007cc4:	20000350 	.word	0x20000350
 8007cc8:	0003d090 	.word	0x0003d090
 8007ccc:	0007a120 	.word	0x0007a120
 8007cd0:	000f4240 	.word	0x000f4240
 8007cd4:	001e8480 	.word	0x001e8480
 8007cd8:	80010003 	.word	0x80010003
 8007cdc:	60bb      	str	r3, [r7, #8]

    imu.gyroscope[Y] = (temp_I32 - (int32_t)imu.gyroscope_offset[Y]);
 8007cde:	4b20      	ldr	r3, [pc, #128]	; (8007d60 <MPU6050_readSensorData+0x364>)
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	4a1e      	ldr	r2, [pc, #120]	; (8007d60 <MPU6050_readSensorData+0x364>)
 8007ce8:	6293      	str	r3, [r2, #40]	; 0x28
  }
  if( !imu.disable.sensors.z_gyro )
 8007cea:	4b1d      	ldr	r3, [pc, #116]	; (8007d60 <MPU6050_readSensorData+0x364>)
 8007cec:	791b      	ldrb	r3, [r3, #4]
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d12e      	bne.n	8007d56 <MPU6050_readSensorData+0x35a>
  {
    reg_H = MPU6050_read_register( imu.device_address, GYRO_ZOUT_H );
 8007cf8:	4b19      	ldr	r3, [pc, #100]	; (8007d60 <MPU6050_readSensorData+0x364>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2147      	movs	r1, #71	; 0x47
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7ff f94f 	bl	8006fa4 <MPU6050_read_register>
 8007d06:	4603      	mov	r3, r0
 8007d08:	71fb      	strb	r3, [r7, #7]
    reg_L = MPU6050_read_register( imu.device_address, GYRO_ZOUT_L );
 8007d0a:	4b15      	ldr	r3, [pc, #84]	; (8007d60 <MPU6050_readSensorData+0x364>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2148      	movs	r1, #72	; 0x48
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7ff f946 	bl	8006fa4 <MPU6050_read_register>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	71bb      	strb	r3, [r7, #6]

    tempU16 = ( (uint16_t)reg_L | ( ((uint16_t)reg_H) << 8 ) );
 8007d1c:	79bb      	ldrb	r3, [r7, #6]
 8007d1e:	b21a      	sxth	r2, r3
 8007d20:	79fb      	ldrb	r3, [r7, #7]
 8007d22:	021b      	lsls	r3, r3, #8
 8007d24:	b21b      	sxth	r3, r3
 8007d26:	4313      	orrs	r3, r2
 8007d28:	b21b      	sxth	r3, r3
 8007d2a:	81fb      	strh	r3, [r7, #14]

    temp_I32 = ( ((int32_t)((int16_t)tempU16)) );
 8007d2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d30:	60bb      	str	r3, [r7, #8]
    temp_I32 = ( ( temp_I32 * gyro_fs_value ) / 32767 ) ;
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	fb02 f303 	mul.w	r3, r2, r3
 8007d3a:	4a0a      	ldr	r2, [pc, #40]	; (8007d64 <MPU6050_readSensorData+0x368>)
 8007d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8007d40:	441a      	add	r2, r3
 8007d42:	1392      	asrs	r2, r2, #14
 8007d44:	17db      	asrs	r3, r3, #31
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	60bb      	str	r3, [r7, #8]

    imu.gyroscope[Z] = ( temp_I32 - (int32_t)imu.gyroscope_offset[Z] );
 8007d4a:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <MPU6050_readSensorData+0x364>)
 8007d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	4a03      	ldr	r2, [pc, #12]	; (8007d60 <MPU6050_readSensorData+0x364>)
 8007d54:	62d3      	str	r3, [r2, #44]	; 0x2c
  }
}
 8007d56:	bf00      	nop
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20000350 	.word	0x20000350
 8007d64:	80010003 	.word	0x80010003

08007d68 <MPU6050_readAllSensorData>:

uint8_t MPU6050_readAllSensorData()
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b088      	sub	sp, #32
 8007d6c:	af00      	add	r7, sp, #0
  uint8_t buffer[14];

  int32_t accel_fs_value = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	61fb      	str	r3, [r7, #28]
  int32_t gyro_fs_value = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	61bb      	str	r3, [r7, #24]
  uint8_t error_w = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	75fb      	strb	r3, [r7, #23]
  uint8_t error_r = 0;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	75bb      	strb	r3, [r7, #22]

  error_w = I2C1_writeByte( imu.device_address, ACCEL_XOUT_H);
 8007d7e:	4ba1      	ldr	r3, [pc, #644]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	213b      	movs	r1, #59	; 0x3b
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fbbc 	bl	8007504 <I2C1_writeByte>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	75fb      	strb	r3, [r7, #23]
  error_r = I2C1_Read( imu.device_address, 14, buffer );
 8007d90:	4b9c      	ldr	r3, [pc, #624]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	463a      	mov	r2, r7
 8007d98:	210e      	movs	r1, #14
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff fa6c 	bl	8007278 <I2C1_Read>
 8007da0:	4603      	mov	r3, r0
 8007da2:	75bb      	strb	r3, [r7, #22]
   * buffer[8:9]   : Gyroscope X High and Low.
   * buffer[10:11] : Gyroscope Y High and Low.
   * buffer[12:13] : Gyroscope Z High and Low.
   * */

  imu.accelerometer_raw[X] = ((((uint16_t)buffer[0]) << 8) + (uint16_t)buffer[1] );
 8007da4:	783b      	ldrb	r3, [r7, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	021b      	lsls	r3, r3, #8
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	787b      	ldrb	r3, [r7, #1]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	4413      	add	r3, r2
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	4b93      	ldr	r3, [pc, #588]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007db6:	819a      	strh	r2, [r3, #12]
  imu.accelerometer_raw[Y] = ((((uint16_t)buffer[2]) << 8) + (uint16_t)buffer[3] );
 8007db8:	78bb      	ldrb	r3, [r7, #2]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	021b      	lsls	r3, r3, #8
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	4413      	add	r3, r2
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	4b8e      	ldr	r3, [pc, #568]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007dca:	81da      	strh	r2, [r3, #14]
  imu.accelerometer_raw[Z] = ((((uint16_t)buffer[4]) << 8) + (uint16_t)buffer[5] );
 8007dcc:	793b      	ldrb	r3, [r7, #4]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	021b      	lsls	r3, r3, #8
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	797b      	ldrb	r3, [r7, #5]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	4413      	add	r3, r2
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	4b89      	ldr	r3, [pc, #548]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007dde:	821a      	strh	r2, [r3, #16]

  imu.gyroscope_raw[X] = ((((uint16_t)buffer[8]) << 8) + (uint16_t)buffer[9] );
 8007de0:	7a3b      	ldrb	r3, [r7, #8]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	021b      	lsls	r3, r3, #8
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	7a7b      	ldrb	r3, [r7, #9]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	4413      	add	r3, r2
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	4b84      	ldr	r3, [pc, #528]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007df2:	825a      	strh	r2, [r3, #18]
  imu.gyroscope_raw[Y] = ((((uint16_t)buffer[10]) << 8) + (uint16_t)buffer[11] );
 8007df4:	7abb      	ldrb	r3, [r7, #10]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	021b      	lsls	r3, r3, #8
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	7afb      	ldrb	r3, [r7, #11]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	4413      	add	r3, r2
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	4b7f      	ldr	r3, [pc, #508]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007e06:	829a      	strh	r2, [r3, #20]
  imu.gyroscope_raw[Z] = ((((uint16_t)buffer[12]) << 8) + (uint16_t)buffer[13] );
 8007e08:	7b3b      	ldrb	r3, [r7, #12]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	7b7b      	ldrb	r3, [r7, #13]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	4413      	add	r3, r2
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	4b7a      	ldr	r3, [pc, #488]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007e1a:	82da      	strh	r2, [r3, #22]

  /* Obtain sensor full-scale values. */

  if(imu.sensor_configurations.sensor_configuration_segments.accel_fs_config == ACCEL_FS_2G)
 8007e1c:	4b79      	ldr	r3, [pc, #484]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007e1e:	7a1b      	ldrb	r3, [r3, #8]
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d102      	bne.n	8007e30 <MPU6050_readAllSensorData+0xc8>
  {
    accel_fs_value = 2000;
 8007e2a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007e2e:	61fb      	str	r3, [r7, #28]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.accel_fs_config == ACCEL_FS_4G)
 8007e30:	4b74      	ldr	r3, [pc, #464]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007e32:	7a1b      	ldrb	r3, [r3, #8]
 8007e34:	f003 0307 	and.w	r3, r3, #7
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d102      	bne.n	8007e44 <MPU6050_readAllSensorData+0xdc>
  {
    accel_fs_value = 4000;
 8007e3e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8007e42:	61fb      	str	r3, [r7, #28]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.accel_fs_config == ACCEL_FS_8G)
 8007e44:	4b6f      	ldr	r3, [pc, #444]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007e46:	7a1b      	ldrb	r3, [r3, #8]
 8007e48:	f003 0307 	and.w	r3, r3, #7
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d102      	bne.n	8007e58 <MPU6050_readAllSensorData+0xf0>
  {
    accel_fs_value = 8000;
 8007e52:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8007e56:	61fb      	str	r3, [r7, #28]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.accel_fs_config == ACCEL_FS_16G)
 8007e58:	4b6a      	ldr	r3, [pc, #424]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007e5a:	7a1b      	ldrb	r3, [r3, #8]
 8007e5c:	f003 0307 	and.w	r3, r3, #7
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d102      	bne.n	8007e6c <MPU6050_readAllSensorData+0x104>
  {
    accel_fs_value = 16000;
 8007e66:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8007e6a:	61fb      	str	r3, [r7, #28]
  }

  /* Get gyroscope full scale value. */

  if(imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config == GYRO_FS_250DPS)
 8007e6c:	4b65      	ldr	r3, [pc, #404]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007e6e:	7a1b      	ldrb	r3, [r3, #8]
 8007e70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <MPU6050_readAllSensorData+0x116>
  {
    gyro_fs_value = 250000;
 8007e7a:	4b63      	ldr	r3, [pc, #396]	; (8008008 <MPU6050_readAllSensorData+0x2a0>)
 8007e7c:	61bb      	str	r3, [r7, #24]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config == GYRO_FS_500DPS)
 8007e7e:	4b61      	ldr	r3, [pc, #388]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007e80:	7a1b      	ldrb	r3, [r3, #8]
 8007e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	d101      	bne.n	8007e90 <MPU6050_readAllSensorData+0x128>
  {
    gyro_fs_value = 500000;
 8007e8c:	4b5f      	ldr	r3, [pc, #380]	; (800800c <MPU6050_readAllSensorData+0x2a4>)
 8007e8e:	61bb      	str	r3, [r7, #24]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config == GYRO_FS_1000DPS)
 8007e90:	4b5c      	ldr	r3, [pc, #368]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007e92:	7a1b      	ldrb	r3, [r3, #8]
 8007e94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b10      	cmp	r3, #16
 8007e9c:	d101      	bne.n	8007ea2 <MPU6050_readAllSensorData+0x13a>
  {
    gyro_fs_value = 1000000;
 8007e9e:	4b5c      	ldr	r3, [pc, #368]	; (8008010 <MPU6050_readAllSensorData+0x2a8>)
 8007ea0:	61bb      	str	r3, [r7, #24]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config == GYRO_FS_2000DPS)
 8007ea2:	4b58      	ldr	r3, [pc, #352]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007ea4:	7a1b      	ldrb	r3, [r3, #8]
 8007ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b18      	cmp	r3, #24
 8007eae:	d101      	bne.n	8007eb4 <MPU6050_readAllSensorData+0x14c>
  {
    gyro_fs_value = 2000000;
 8007eb0:	4b58      	ldr	r3, [pc, #352]	; (8008014 <MPU6050_readAllSensorData+0x2ac>)
 8007eb2:	61bb      	str	r3, [r7, #24]
  }


  uint16_t tempU16 = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	82bb      	strh	r3, [r7, #20]
  int32_t  tempI32 = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	613b      	str	r3, [r7, #16]

  if( !(error_r|error_w) )
 8007ebc:	7dba      	ldrb	r2, [r7, #22]
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f040 80c1 	bne.w	800804c <MPU6050_readAllSensorData+0x2e4>
  {
  tempU16 = ( (((uint16_t)buffer[0]) << 8) | (uint16_t)buffer[1] );
 8007eca:	783b      	ldrb	r3, [r7, #0]
 8007ecc:	021b      	lsls	r3, r3, #8
 8007ece:	b21a      	sxth	r2, r3
 8007ed0:	787b      	ldrb	r3, [r7, #1]
 8007ed2:	b21b      	sxth	r3, r3
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	b21b      	sxth	r3, r3
 8007ed8:	82bb      	strh	r3, [r7, #20]
  tempI32 = ( accel_fs_value * (int32_t)((int16_t)tempU16) );
 8007eda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	fb02 f303 	mul.w	r3, r2, r3
 8007ee6:	613b      	str	r3, [r7, #16]
  tempI32 = (tempI32/32767);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	4a4b      	ldr	r2, [pc, #300]	; (8008018 <MPU6050_readAllSensorData+0x2b0>)
 8007eec:	fb82 1203 	smull	r1, r2, r2, r3
 8007ef0:	441a      	add	r2, r3
 8007ef2:	1392      	asrs	r2, r2, #14
 8007ef4:	17db      	asrs	r3, r3, #31
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	613b      	str	r3, [r7, #16]
  imu.accelerometer[X] = ( tempI32 - imu.accelerometer_offset[X] );
 8007efa:	4b42      	ldr	r3, [pc, #264]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	4a40      	ldr	r2, [pc, #256]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007f04:	6193      	str	r3, [r2, #24]

  tempU16 = ( (((uint16_t)buffer[2]) << 8) | (uint16_t)buffer[3] );
 8007f06:	78bb      	ldrb	r3, [r7, #2]
 8007f08:	021b      	lsls	r3, r3, #8
 8007f0a:	b21a      	sxth	r2, r3
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	b21b      	sxth	r3, r3
 8007f10:	4313      	orrs	r3, r2
 8007f12:	b21b      	sxth	r3, r3
 8007f14:	82bb      	strh	r3, [r7, #20]
  tempI32 = ( accel_fs_value * (int32_t)((int16_t)tempU16) );
 8007f16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	fb02 f303 	mul.w	r3, r2, r3
 8007f22:	613b      	str	r3, [r7, #16]
  tempI32 = (tempI32/32767);
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	4a3c      	ldr	r2, [pc, #240]	; (8008018 <MPU6050_readAllSensorData+0x2b0>)
 8007f28:	fb82 1203 	smull	r1, r2, r2, r3
 8007f2c:	441a      	add	r2, r3
 8007f2e:	1392      	asrs	r2, r2, #14
 8007f30:	17db      	asrs	r3, r3, #31
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	613b      	str	r3, [r7, #16]
  imu.accelerometer[Y] = ( tempI32 - imu.accelerometer_offset[Y] );
 8007f36:	4b33      	ldr	r3, [pc, #204]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	4a31      	ldr	r2, [pc, #196]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007f40:	61d3      	str	r3, [r2, #28]

  tempU16 = ( (((uint16_t)buffer[4]) << 8) | (uint16_t)buffer[5] );
 8007f42:	793b      	ldrb	r3, [r7, #4]
 8007f44:	021b      	lsls	r3, r3, #8
 8007f46:	b21a      	sxth	r2, r3
 8007f48:	797b      	ldrb	r3, [r7, #5]
 8007f4a:	b21b      	sxth	r3, r3
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	b21b      	sxth	r3, r3
 8007f50:	82bb      	strh	r3, [r7, #20]
  tempI32 = ( accel_fs_value * (int32_t)((int16_t)tempU16) );
 8007f52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007f56:	461a      	mov	r2, r3
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	fb02 f303 	mul.w	r3, r2, r3
 8007f5e:	613b      	str	r3, [r7, #16]
  tempI32 = (tempI32/32767);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	4a2d      	ldr	r2, [pc, #180]	; (8008018 <MPU6050_readAllSensorData+0x2b0>)
 8007f64:	fb82 1203 	smull	r1, r2, r2, r3
 8007f68:	441a      	add	r2, r3
 8007f6a:	1392      	asrs	r2, r2, #14
 8007f6c:	17db      	asrs	r3, r3, #31
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	613b      	str	r3, [r7, #16]
  imu.accelerometer[Z] = ( tempI32 - imu.accelerometer_offset[Z] );
 8007f72:	4b24      	ldr	r3, [pc, #144]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	4a22      	ldr	r2, [pc, #136]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007f7c:	6213      	str	r3, [r2, #32]

  tempU16 = ( (((uint16_t)buffer[8]) << 8) | (uint16_t)buffer[9] );
 8007f7e:	7a3b      	ldrb	r3, [r7, #8]
 8007f80:	021b      	lsls	r3, r3, #8
 8007f82:	b21a      	sxth	r2, r3
 8007f84:	7a7b      	ldrb	r3, [r7, #9]
 8007f86:	b21b      	sxth	r3, r3
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	b21b      	sxth	r3, r3
 8007f8c:	82bb      	strh	r3, [r7, #20]
  tempI32 = ( gyro_fs_value * (int32_t)((int16_t)tempU16) );
 8007f8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007f92:	461a      	mov	r2, r3
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	fb02 f303 	mul.w	r3, r2, r3
 8007f9a:	613b      	str	r3, [r7, #16]
  tempI32 = (tempI32/32767);
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	4a1e      	ldr	r2, [pc, #120]	; (8008018 <MPU6050_readAllSensorData+0x2b0>)
 8007fa0:	fb82 1203 	smull	r1, r2, r2, r3
 8007fa4:	441a      	add	r2, r3
 8007fa6:	1392      	asrs	r2, r2, #14
 8007fa8:	17db      	asrs	r3, r3, #31
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	613b      	str	r3, [r7, #16]
  imu.gyroscope[X] = ( tempI32 - imu.gyroscope_offset[X] );
 8007fae:	4b15      	ldr	r3, [pc, #84]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	4a13      	ldr	r2, [pc, #76]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007fb8:	6253      	str	r3, [r2, #36]	; 0x24

  tempU16 = ( (((uint16_t)buffer[10]) << 8) | (uint16_t)buffer[11] );
 8007fba:	7abb      	ldrb	r3, [r7, #10]
 8007fbc:	021b      	lsls	r3, r3, #8
 8007fbe:	b21a      	sxth	r2, r3
 8007fc0:	7afb      	ldrb	r3, [r7, #11]
 8007fc2:	b21b      	sxth	r3, r3
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	b21b      	sxth	r3, r3
 8007fc8:	82bb      	strh	r3, [r7, #20]
  tempI32 = ( gyro_fs_value * (int32_t)((int16_t)tempU16) );
 8007fca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	fb02 f303 	mul.w	r3, r2, r3
 8007fd6:	613b      	str	r3, [r7, #16]
  tempI32 = (tempI32/32767);
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	4a0f      	ldr	r2, [pc, #60]	; (8008018 <MPU6050_readAllSensorData+0x2b0>)
 8007fdc:	fb82 1203 	smull	r1, r2, r2, r3
 8007fe0:	441a      	add	r2, r3
 8007fe2:	1392      	asrs	r2, r2, #14
 8007fe4:	17db      	asrs	r3, r3, #31
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	613b      	str	r3, [r7, #16]
  imu.gyroscope[Y] = ( tempI32 - imu.gyroscope_offset[Y] );
 8007fea:	4b06      	ldr	r3, [pc, #24]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	4a04      	ldr	r2, [pc, #16]	; (8008004 <MPU6050_readAllSensorData+0x29c>)
 8007ff4:	6293      	str	r3, [r2, #40]	; 0x28

  tempU16 = ( (((uint16_t)buffer[12]) << 8) | (uint16_t)buffer[13] );
 8007ff6:	7b3b      	ldrb	r3, [r7, #12]
 8007ff8:	021b      	lsls	r3, r3, #8
 8007ffa:	b21a      	sxth	r2, r3
 8007ffc:	7b7b      	ldrb	r3, [r7, #13]
 8007ffe:	b21b      	sxth	r3, r3
 8008000:	4313      	orrs	r3, r2
 8008002:	e00b      	b.n	800801c <MPU6050_readAllSensorData+0x2b4>
 8008004:	20000350 	.word	0x20000350
 8008008:	0003d090 	.word	0x0003d090
 800800c:	0007a120 	.word	0x0007a120
 8008010:	000f4240 	.word	0x000f4240
 8008014:	001e8480 	.word	0x001e8480
 8008018:	80010003 	.word	0x80010003
 800801c:	b21b      	sxth	r3, r3
 800801e:	82bb      	strh	r3, [r7, #20]
  tempI32 = ( gyro_fs_value * (int32_t)((int16_t)tempU16) );
 8008020:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008024:	461a      	mov	r2, r3
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	fb02 f303 	mul.w	r3, r2, r3
 800802c:	613b      	str	r3, [r7, #16]
  tempI32 = (tempI32/32767);
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	4a25      	ldr	r2, [pc, #148]	; (80080c8 <MPU6050_readAllSensorData+0x360>)
 8008032:	fb82 1203 	smull	r1, r2, r2, r3
 8008036:	441a      	add	r2, r3
 8008038:	1392      	asrs	r2, r2, #14
 800803a:	17db      	asrs	r3, r3, #31
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	613b      	str	r3, [r7, #16]
  imu.gyroscope[Z] = ( tempI32 - imu.gyroscope_offset[Z] );
 8008040:	4b22      	ldr	r3, [pc, #136]	; (80080cc <MPU6050_readAllSensorData+0x364>)
 8008042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	4a20      	ldr	r2, [pc, #128]	; (80080cc <MPU6050_readAllSensorData+0x364>)
 800804a:	62d3      	str	r3, [r2, #44]	; 0x2c

  #endif /* GYRO_HPF_EN. */

  /* Write data into communication frames. */

  IMU_X_Raw_SMF.IMU_X_Raw_SMF_segments.XACCEL_raw = (uint16_t)imu.accelerometer_raw[X];
 800804c:	4b1f      	ldr	r3, [pc, #124]	; (80080cc <MPU6050_readAllSensorData+0x364>)
 800804e:	899a      	ldrh	r2, [r3, #12]
 8008050:	4b1f      	ldr	r3, [pc, #124]	; (80080d0 <MPU6050_readAllSensorData+0x368>)
 8008052:	801a      	strh	r2, [r3, #0]
  IMU_X_Raw_SMF.IMU_X_Raw_SMF_segments.XGYRO_raw  = (uint16_t)imu.gyroscope_raw[X];
 8008054:	4b1d      	ldr	r3, [pc, #116]	; (80080cc <MPU6050_readAllSensorData+0x364>)
 8008056:	8a5a      	ldrh	r2, [r3, #18]
 8008058:	4b1d      	ldr	r3, [pc, #116]	; (80080d0 <MPU6050_readAllSensorData+0x368>)
 800805a:	805a      	strh	r2, [r3, #2]
  IMU_Y_Raw_SMF.IMU_Y_Raw_SMF_segments.YACCEL_raw = (uint16_t)imu.accelerometer_raw[Y];
 800805c:	4b1b      	ldr	r3, [pc, #108]	; (80080cc <MPU6050_readAllSensorData+0x364>)
 800805e:	89da      	ldrh	r2, [r3, #14]
 8008060:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <MPU6050_readAllSensorData+0x36c>)
 8008062:	801a      	strh	r2, [r3, #0]
  IMU_Y_Raw_SMF.IMU_Y_Raw_SMF_segments.YGYRO_raw  = (uint16_t)imu.gyroscope_raw[Y];
 8008064:	4b19      	ldr	r3, [pc, #100]	; (80080cc <MPU6050_readAllSensorData+0x364>)
 8008066:	8a9a      	ldrh	r2, [r3, #20]
 8008068:	4b1a      	ldr	r3, [pc, #104]	; (80080d4 <MPU6050_readAllSensorData+0x36c>)
 800806a:	805a      	strh	r2, [r3, #2]
  IMU_Z_Raw_SMF.IMU_Z_Raw_SMF_segments.ZACCEL_raw = (uint16_t)imu.accelerometer_raw[Z];
 800806c:	4b17      	ldr	r3, [pc, #92]	; (80080cc <MPU6050_readAllSensorData+0x364>)
 800806e:	8a1a      	ldrh	r2, [r3, #16]
 8008070:	4b19      	ldr	r3, [pc, #100]	; (80080d8 <MPU6050_readAllSensorData+0x370>)
 8008072:	801a      	strh	r2, [r3, #0]
  IMU_Z_Raw_SMF.IMU_Z_Raw_SMF_segments.ZGYRO_raw  = (uint16_t)imu.gyroscope_raw[Z];
 8008074:	4b15      	ldr	r3, [pc, #84]	; (80080cc <MPU6050_readAllSensorData+0x364>)
 8008076:	8ada      	ldrh	r2, [r3, #22]
 8008078:	4b17      	ldr	r3, [pc, #92]	; (80080d8 <MPU6050_readAllSensorData+0x370>)
 800807a:	805a      	strh	r2, [r3, #2]

  IMU_XACCEL_Processed_SMF.all = imu.accelerometer[X];
 800807c:	4b13      	ldr	r3, [pc, #76]	; (80080cc <MPU6050_readAllSensorData+0x364>)
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	461a      	mov	r2, r3
 8008082:	4b16      	ldr	r3, [pc, #88]	; (80080dc <MPU6050_readAllSensorData+0x374>)
 8008084:	601a      	str	r2, [r3, #0]
  IMU_YACCEL_Processed_SMF.all = imu.accelerometer[Y];
 8008086:	4b11      	ldr	r3, [pc, #68]	; (80080cc <MPU6050_readAllSensorData+0x364>)
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	461a      	mov	r2, r3
 800808c:	4b14      	ldr	r3, [pc, #80]	; (80080e0 <MPU6050_readAllSensorData+0x378>)
 800808e:	601a      	str	r2, [r3, #0]
  IMU_ZACCEL_Processed_SMF.all = imu.accelerometer[Z];
 8008090:	4b0e      	ldr	r3, [pc, #56]	; (80080cc <MPU6050_readAllSensorData+0x364>)
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	461a      	mov	r2, r3
 8008096:	4b13      	ldr	r3, [pc, #76]	; (80080e4 <MPU6050_readAllSensorData+0x37c>)
 8008098:	601a      	str	r2, [r3, #0]
  IMU_XGYRO_Processed_SMF.all  = imu.gyroscope[X];
 800809a:	4b0c      	ldr	r3, [pc, #48]	; (80080cc <MPU6050_readAllSensorData+0x364>)
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	461a      	mov	r2, r3
 80080a0:	4b11      	ldr	r3, [pc, #68]	; (80080e8 <MPU6050_readAllSensorData+0x380>)
 80080a2:	601a      	str	r2, [r3, #0]
  IMU_YGYRO_Processed_SMF.all  = imu.gyroscope[Y];
 80080a4:	4b09      	ldr	r3, [pc, #36]	; (80080cc <MPU6050_readAllSensorData+0x364>)
 80080a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a8:	461a      	mov	r2, r3
 80080aa:	4b10      	ldr	r3, [pc, #64]	; (80080ec <MPU6050_readAllSensorData+0x384>)
 80080ac:	601a      	str	r2, [r3, #0]
  IMU_ZGYRO_Processed_SMF.all  = imu.gyroscope[Z];
 80080ae:	4b07      	ldr	r3, [pc, #28]	; (80080cc <MPU6050_readAllSensorData+0x364>)
 80080b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b2:	461a      	mov	r2, r3
 80080b4:	4b0e      	ldr	r3, [pc, #56]	; (80080f0 <MPU6050_readAllSensorData+0x388>)
 80080b6:	601a      	str	r2, [r3, #0]

  return(error_w | error_r);
 80080b8:	7dfa      	ldrb	r2, [r7, #23]
 80080ba:	7dbb      	ldrb	r3, [r7, #22]
 80080bc:	4313      	orrs	r3, r2
 80080be:	b2db      	uxtb	r3, r3
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3720      	adds	r7, #32
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	80010003 	.word	0x80010003
 80080cc:	20000350 	.word	0x20000350
 80080d0:	200004f0 	.word	0x200004f0
 80080d4:	20000504 	.word	0x20000504
 80080d8:	200003a0 	.word	0x200003a0
 80080dc:	200003cc 	.word	0x200003cc
 80080e0:	200004f4 	.word	0x200004f4
 80080e4:	20000474 	.word	0x20000474
 80080e8:	2000040c 	.word	0x2000040c
 80080ec:	2000046c 	.word	0x2000046c
 80080f0:	20000410 	.word	0x20000410

080080f4 <MPU6050_calibrate>:

void MPU6050_calibrate(Calibration_Axis axis, uint8_t nPoints)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b08a      	sub	sp, #40	; 0x28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	4603      	mov	r3, r0
 80080fc:	460a      	mov	r2, r1
 80080fe:	71fb      	strb	r3, [r7, #7]
 8008100:	4613      	mov	r3, r2
 8008102:	71bb      	strb	r3, [r7, #6]
  MPU6050_updateConfig();
 8008104:	f7ff fb32 	bl	800776c <MPU6050_updateConfig>

  /* For calibration, keep the IMU sensor completely motionless. */

  int32_t x_accel_offset = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t y_accel_offset = 0;
 800810c:	2300      	movs	r3, #0
 800810e:	623b      	str	r3, [r7, #32]
  int32_t z_accel_offset = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	61fb      	str	r3, [r7, #28]
  int32_t x_gyro_offset = 0;
 8008114:	2300      	movs	r3, #0
 8008116:	61bb      	str	r3, [r7, #24]
  int32_t y_gyro_offset = 0;
 8008118:	2300      	movs	r3, #0
 800811a:	617b      	str	r3, [r7, #20]
  int32_t z_gyro_offset = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	613b      	str	r3, [r7, #16]

  /* Set offset register values to zero. */

  imu.accelerometer_offset[X] = 0;
 8008120:	4b62      	ldr	r3, [pc, #392]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008122:	2200      	movs	r2, #0
 8008124:	631a      	str	r2, [r3, #48]	; 0x30
  imu.accelerometer_offset[Y] = 0;
 8008126:	4b61      	ldr	r3, [pc, #388]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008128:	2200      	movs	r2, #0
 800812a:	635a      	str	r2, [r3, #52]	; 0x34
  imu.accelerometer_offset[Z] = 0;
 800812c:	4b5f      	ldr	r3, [pc, #380]	; (80082ac <MPU6050_calibrate+0x1b8>)
 800812e:	2200      	movs	r2, #0
 8008130:	639a      	str	r2, [r3, #56]	; 0x38

  imu.gyroscope_offset[X] = 0;
 8008132:	4b5e      	ldr	r3, [pc, #376]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008134:	2200      	movs	r2, #0
 8008136:	63da      	str	r2, [r3, #60]	; 0x3c
  imu.gyroscope_offset[Y] = 0;
 8008138:	4b5c      	ldr	r3, [pc, #368]	; (80082ac <MPU6050_calibrate+0x1b8>)
 800813a:	2200      	movs	r2, #0
 800813c:	641a      	str	r2, [r3, #64]	; 0x40
  imu.gyroscope_offset[Z] = 0;
 800813e:	4b5b      	ldr	r3, [pc, #364]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008140:	2200      	movs	r2, #0
 8008142:	645a      	str	r2, [r3, #68]	; 0x44

  /* Accumulate and add sensor data. */

  for( int i = 0 ; i < nPoints ; i++ )
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	e029      	b.n	800819e <MPU6050_calibrate+0xaa>
  {
	MPU6050_readSensorData();
 800814a:	f7ff fc57 	bl	80079fc <MPU6050_readSensorData>

	x_accel_offset += ( (int32_t)imu.accelerometer[X] );
 800814e:	4b57      	ldr	r3, [pc, #348]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008154:	4413      	add	r3, r2
 8008156:	627b      	str	r3, [r7, #36]	; 0x24
	y_accel_offset += ( (int32_t)imu.accelerometer[Y] );
 8008158:	4b54      	ldr	r3, [pc, #336]	; (80082ac <MPU6050_calibrate+0x1b8>)
 800815a:	69db      	ldr	r3, [r3, #28]
 800815c:	6a3a      	ldr	r2, [r7, #32]
 800815e:	4413      	add	r3, r2
 8008160:	623b      	str	r3, [r7, #32]
	z_accel_offset += ( (int32_t)imu.accelerometer[Z] );
 8008162:	4b52      	ldr	r3, [pc, #328]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	4413      	add	r3, r2
 800816a:	61fb      	str	r3, [r7, #28]

	/* Gyroscope registers. */

	x_gyro_offset += ( (int32_t)imu.gyroscope[X] );
 800816c:	4b4f      	ldr	r3, [pc, #316]	; (80082ac <MPU6050_calibrate+0x1b8>)
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	4413      	add	r3, r2
 8008174:	61bb      	str	r3, [r7, #24]
	y_gyro_offset += ( (int32_t)imu.gyroscope[Y] );
 8008176:	4b4d      	ldr	r3, [pc, #308]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	4413      	add	r3, r2
 800817e:	617b      	str	r3, [r7, #20]
	z_gyro_offset += ( (int32_t)imu.gyroscope[Z] );
 8008180:	4b4a      	ldr	r3, [pc, #296]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4413      	add	r3, r2
 8008188:	613b      	str	r3, [r7, #16]

	System_SysTick_delay_ms(imu.calibration_interval_ms);
 800818a:	4b48      	ldr	r3, [pc, #288]	; (80082ac <MPU6050_calibrate+0x1b8>)
 800818c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008190:	b29b      	uxth	r3, r3
 8008192:	4618      	mov	r0, r3
 8008194:	f003 f9be 	bl	800b514 <System_SysTick_delay_ms>
  for( int i = 0 ; i < nPoints ; i++ )
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3301      	adds	r3, #1
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	79bb      	ldrb	r3, [r7, #6]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	dbd1      	blt.n	800814a <MPU6050_calibrate+0x56>
  }

  /* Load gyroscope data. */

  imu.gyroscope_offset[X] = ( ( x_gyro_offset ) / (int32_t)nPoints );
 80081a6:	79bb      	ldrb	r3, [r7, #6]
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80081ae:	4a3f      	ldr	r2, [pc, #252]	; (80082ac <MPU6050_calibrate+0x1b8>)
 80081b0:	63d3      	str	r3, [r2, #60]	; 0x3c
  imu.gyroscope_offset[Y] = ( ( y_gyro_offset ) / (int32_t)nPoints );
 80081b2:	79bb      	ldrb	r3, [r7, #6]
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80081ba:	4a3c      	ldr	r2, [pc, #240]	; (80082ac <MPU6050_calibrate+0x1b8>)
 80081bc:	6413      	str	r3, [r2, #64]	; 0x40
  imu.gyroscope_offset[Z] = ( ( z_gyro_offset ) / (int32_t)nPoints );
 80081be:	79bb      	ldrb	r3, [r7, #6]
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80081c6:	4a39      	ldr	r2, [pc, #228]	; (80082ac <MPU6050_calibrate+0x1b8>)
 80081c8:	6453      	str	r3, [r2, #68]	; 0x44

  /* Load accelerometer offset. */

  imu.accelerometer_offset[X] = ( ( x_accel_offset ) / (int32_t)nPoints );
 80081ca:	79bb      	ldrb	r3, [r7, #6]
 80081cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80081d2:	4a36      	ldr	r2, [pc, #216]	; (80082ac <MPU6050_calibrate+0x1b8>)
 80081d4:	6313      	str	r3, [r2, #48]	; 0x30
  imu.accelerometer_offset[Y] = ( ( y_accel_offset ) / (int32_t)nPoints );
 80081d6:	79bb      	ldrb	r3, [r7, #6]
 80081d8:	6a3a      	ldr	r2, [r7, #32]
 80081da:	fb92 f3f3 	sdiv	r3, r2, r3
 80081de:	4a33      	ldr	r2, [pc, #204]	; (80082ac <MPU6050_calibrate+0x1b8>)
 80081e0:	6353      	str	r3, [r2, #52]	; 0x34
  imu.accelerometer_offset[Z] = ( ( z_accel_offset ) / (int32_t)nPoints );
 80081e2:	79bb      	ldrb	r3, [r7, #6]
 80081e4:	69fa      	ldr	r2, [r7, #28]
 80081e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80081ea:	4a30      	ldr	r2, [pc, #192]	; (80082ac <MPU6050_calibrate+0x1b8>)
 80081ec:	6393      	str	r3, [r2, #56]	; 0x38

  switch(axis)
 80081ee:	79fb      	ldrb	r3, [r7, #7]
 80081f0:	2b05      	cmp	r3, #5
 80081f2:	d839      	bhi.n	8008268 <MPU6050_calibrate+0x174>
 80081f4:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <MPU6050_calibrate+0x108>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	08008215 	.word	0x08008215
 8008200:	08008223 	.word	0x08008223
 8008204:	08008231 	.word	0x08008231
 8008208:	0800823f 	.word	0x0800823f
 800820c:	0800824d 	.word	0x0800824d
 8008210:	0800825b 	.word	0x0800825b
  {
    case(X_Positive):
	{
      imu.accelerometer_offset[X] -= 1000;
 8008214:	4b25      	ldr	r3, [pc, #148]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008218:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800821c:	4a23      	ldr	r2, [pc, #140]	; (80082ac <MPU6050_calibrate+0x1b8>)
 800821e:	6313      	str	r3, [r2, #48]	; 0x30
	}
    break;
 8008220:	e022      	b.n	8008268 <MPU6050_calibrate+0x174>

    case(X_Negative):
	{
      imu.accelerometer_offset[X] += 1000;
 8008222:	4b22      	ldr	r3, [pc, #136]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008226:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800822a:	4a20      	ldr	r2, [pc, #128]	; (80082ac <MPU6050_calibrate+0x1b8>)
 800822c:	6313      	str	r3, [r2, #48]	; 0x30
	}
    break;
 800822e:	e01b      	b.n	8008268 <MPU6050_calibrate+0x174>

    case(Y_Positive):
	{
      imu.accelerometer_offset[Y] -= 1000;
 8008230:	4b1e      	ldr	r3, [pc, #120]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008234:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8008238:	4a1c      	ldr	r2, [pc, #112]	; (80082ac <MPU6050_calibrate+0x1b8>)
 800823a:	6353      	str	r3, [r2, #52]	; 0x34
	}
    break;
 800823c:	e014      	b.n	8008268 <MPU6050_calibrate+0x174>

    case(Y_Negative):
	{
      imu.accelerometer_offset[Y] += 1000;
 800823e:	4b1b      	ldr	r3, [pc, #108]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008242:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008246:	4a19      	ldr	r2, [pc, #100]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008248:	6353      	str	r3, [r2, #52]	; 0x34
	}
    break;
 800824a:	e00d      	b.n	8008268 <MPU6050_calibrate+0x174>

    case(Z_Positive):
	{
      imu.accelerometer_offset[Z] -= 1000;
 800824c:	4b17      	ldr	r3, [pc, #92]	; (80082ac <MPU6050_calibrate+0x1b8>)
 800824e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008250:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8008254:	4a15      	ldr	r2, [pc, #84]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008256:	6393      	str	r3, [r2, #56]	; 0x38
	}
    break;
 8008258:	e006      	b.n	8008268 <MPU6050_calibrate+0x174>

    case(Z_Negative):
	{
      imu.accelerometer_offset[Z] += 1000;
 800825a:	4b14      	ldr	r3, [pc, #80]	; (80082ac <MPU6050_calibrate+0x1b8>)
 800825c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008262:	4a12      	ldr	r2, [pc, #72]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008264:	6393      	str	r3, [r2, #56]	; 0x38
	}
    break;
 8008266:	bf00      	nop
  }

  /* Put characters in the communication frame. */

  IMU_CALIB_XACCEL_Offset_SMF.all = imu.accelerometer_offset[X];
 8008268:	4b10      	ldr	r3, [pc, #64]	; (80082ac <MPU6050_calibrate+0x1b8>)
 800826a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826c:	461a      	mov	r2, r3
 800826e:	4b10      	ldr	r3, [pc, #64]	; (80082b0 <MPU6050_calibrate+0x1bc>)
 8008270:	601a      	str	r2, [r3, #0]
  IMU_CALIB_YACCEL_Offset_SMF.all = imu.accelerometer_offset[Y];
 8008272:	4b0e      	ldr	r3, [pc, #56]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008276:	461a      	mov	r2, r3
 8008278:	4b0e      	ldr	r3, [pc, #56]	; (80082b4 <MPU6050_calibrate+0x1c0>)
 800827a:	601a      	str	r2, [r3, #0]
  IMU_CALIB_ZACCEL_Offset_SMF.all = imu.accelerometer_offset[Z];
 800827c:	4b0b      	ldr	r3, [pc, #44]	; (80082ac <MPU6050_calibrate+0x1b8>)
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	461a      	mov	r2, r3
 8008282:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <MPU6050_calibrate+0x1c4>)
 8008284:	601a      	str	r2, [r3, #0]
  IMU_CALIB_XGYRO_Offset_SMF.all  = imu.gyroscope_offset[X];
 8008286:	4b09      	ldr	r3, [pc, #36]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828a:	461a      	mov	r2, r3
 800828c:	4b0b      	ldr	r3, [pc, #44]	; (80082bc <MPU6050_calibrate+0x1c8>)
 800828e:	601a      	str	r2, [r3, #0]
  IMU_CALIB_YGYRO_Offset_SMF.all  = imu.gyroscope_offset[Y];
 8008290:	4b06      	ldr	r3, [pc, #24]	; (80082ac <MPU6050_calibrate+0x1b8>)
 8008292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008294:	461a      	mov	r2, r3
 8008296:	4b0a      	ldr	r3, [pc, #40]	; (80082c0 <MPU6050_calibrate+0x1cc>)
 8008298:	601a      	str	r2, [r3, #0]
  IMU_CALIB_ZGYRO_Offset_SMF.all  = imu.gyroscope_offset[Z];
 800829a:	4b04      	ldr	r3, [pc, #16]	; (80082ac <MPU6050_calibrate+0x1b8>)
 800829c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829e:	461a      	mov	r2, r3
 80082a0:	4b08      	ldr	r3, [pc, #32]	; (80082c4 <MPU6050_calibrate+0x1d0>)
 80082a2:	601a      	str	r2, [r3, #0]
}
 80082a4:	bf00      	nop
 80082a6:	3728      	adds	r7, #40	; 0x28
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	20000350 	.word	0x20000350
 80082b0:	200005a8 	.word	0x200005a8
 80082b4:	20000480 	.word	0x20000480
 80082b8:	2000059c 	.word	0x2000059c
 80082bc:	20000464 	.word	0x20000464
 80082c0:	20000150 	.word	0x20000150
 80082c4:	200003bc 	.word	0x200003bc

080082c8 <writeToFrame_filterCoeff>:


/* Helper functions to write values into comm. frame. */

static void writeToFrame_filterCoeff(float rollCoeff, float pitchCoeff, float yawCoeff)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08c      	sub	sp, #48	; 0x30
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80082d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80082d6:	ed87 1a01 	vstr	s2, [r7, #4]
  SDCP_Param parameter = {0};
 80082da:	f107 0314 	add.w	r3, r7, #20
 80082de:	2200      	movs	r2, #0
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	605a      	str	r2, [r3, #4]
 80082e4:	609a      	str	r2, [r3, #8]
 80082e6:	60da      	str	r2, [r3, #12]
 80082e8:	611a      	str	r2, [r3, #16]
 80082ea:	615a      	str	r2, [r3, #20]
 80082ec:	619a      	str	r2, [r3, #24]

  parameter.pFrame    = &CF_coeff_SMF;
 80082ee:	4b20      	ldr	r3, [pc, #128]	; (8008370 <writeToFrame_filterCoeff+0xa8>)
 80082f0:	617b      	str	r3, [r7, #20]
  parameter.bitLength = Roll_coeff_BLEN;
 80082f2:	230a      	movs	r3, #10
 80082f4:	623b      	str	r3, [r7, #32]
  parameter.startBit  = Roll_coeff_SBIT;
 80082f6:	2300      	movs	r3, #0
 80082f8:	61fb      	str	r3, [r7, #28]
  parameter.dataType  = Roll_coeff_DTYPE;
 80082fa:	2300      	movs	r3, #0
 80082fc:	61bb      	str	r3, [r7, #24]
  parameter.factor    = Roll_coeff_FACTOR;
 80082fe:	4b1d      	ldr	r3, [pc, #116]	; (8008374 <writeToFrame_filterCoeff+0xac>)
 8008300:	627b      	str	r3, [r7, #36]	; 0x24
  parameter.offset    = Roll_coeff_OFFSET;
 8008302:	f04f 0300 	mov.w	r3, #0
 8008306:	62bb      	str	r3, [r7, #40]	; 0x28
  parameter.value     = rollCoeff;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	62fb      	str	r3, [r7, #44]	; 0x2c

  SDCP_WPF(&parameter);
 800830c:	f107 0314 	add.w	r3, r7, #20
 8008310:	4618      	mov	r0, r3
 8008312:	f002 fe65 	bl	800afe0 <SDCP_WPF>

  parameter.pFrame    = &CF_coeff_SMF;
 8008316:	4b16      	ldr	r3, [pc, #88]	; (8008370 <writeToFrame_filterCoeff+0xa8>)
 8008318:	617b      	str	r3, [r7, #20]
  parameter.bitLength = Pitch_coeff_BLEN;
 800831a:	230a      	movs	r3, #10
 800831c:	623b      	str	r3, [r7, #32]
  parameter.startBit  = Pitch_coeff_SBIT;
 800831e:	230a      	movs	r3, #10
 8008320:	61fb      	str	r3, [r7, #28]
  parameter.dataType  = Pitch_coeff_DTYPE;
 8008322:	2300      	movs	r3, #0
 8008324:	61bb      	str	r3, [r7, #24]
  parameter.factor    = Pitch_coeff_FACTOR;
 8008326:	4b13      	ldr	r3, [pc, #76]	; (8008374 <writeToFrame_filterCoeff+0xac>)
 8008328:	627b      	str	r3, [r7, #36]	; 0x24
  parameter.offset    = Pitch_coeff_OFFSET;
 800832a:	f04f 0300 	mov.w	r3, #0
 800832e:	62bb      	str	r3, [r7, #40]	; 0x28
  parameter.value     = pitchCoeff;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	62fb      	str	r3, [r7, #44]	; 0x2c

  SDCP_WPF(&parameter);
 8008334:	f107 0314 	add.w	r3, r7, #20
 8008338:	4618      	mov	r0, r3
 800833a:	f002 fe51 	bl	800afe0 <SDCP_WPF>

  parameter.pFrame    = &CF_coeff_SMF;
 800833e:	4b0c      	ldr	r3, [pc, #48]	; (8008370 <writeToFrame_filterCoeff+0xa8>)
 8008340:	617b      	str	r3, [r7, #20]
  parameter.bitLength = Yaw_coeff_BLEN;
 8008342:	230a      	movs	r3, #10
 8008344:	623b      	str	r3, [r7, #32]
  parameter.startBit  = Yaw_coeff_SBIT;
 8008346:	2314      	movs	r3, #20
 8008348:	61fb      	str	r3, [r7, #28]
  parameter.dataType  = Yaw_coeff_DTYPE;
 800834a:	2300      	movs	r3, #0
 800834c:	61bb      	str	r3, [r7, #24]
  parameter.factor    = Yaw_coeff_FACTOR;
 800834e:	4b09      	ldr	r3, [pc, #36]	; (8008374 <writeToFrame_filterCoeff+0xac>)
 8008350:	627b      	str	r3, [r7, #36]	; 0x24
  parameter.offset    = Yaw_coeff_OFFSET;
 8008352:	f04f 0300 	mov.w	r3, #0
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28
  parameter.value     = yawCoeff;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	62fb      	str	r3, [r7, #44]	; 0x2c

  SDCP_WPF(&parameter);
 800835c:	f107 0314 	add.w	r3, r7, #20
 8008360:	4618      	mov	r0, r3
 8008362:	f002 fe3d 	bl	800afe0 <SDCP_WPF>
}
 8008366:	bf00      	nop
 8008368:	3730      	adds	r7, #48	; 0x30
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	20000144 	.word	0x20000144
 8008374:	3a800eae 	.word	0x3a800eae

08008378 <writeToFrame_Roll>:


static void writeToFrame_Roll(float accelRoll, float gyroRoll, float filterRoll)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b08c      	sub	sp, #48	; 0x30
 800837c:	af00      	add	r7, sp, #0
 800837e:	ed87 0a03 	vstr	s0, [r7, #12]
 8008382:	edc7 0a02 	vstr	s1, [r7, #8]
 8008386:	ed87 1a01 	vstr	s2, [r7, #4]
  SDCP_Param parameter = {0};
 800838a:	f107 0314 	add.w	r3, r7, #20
 800838e:	2200      	movs	r2, #0
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	605a      	str	r2, [r3, #4]
 8008394:	609a      	str	r2, [r3, #8]
 8008396:	60da      	str	r2, [r3, #12]
 8008398:	611a      	str	r2, [r3, #16]
 800839a:	615a      	str	r2, [r3, #20]
 800839c:	619a      	str	r2, [r3, #24]

  parameter.pFrame     =  &Roll_SMF;
 800839e:	4b20      	ldr	r3, [pc, #128]	; (8008420 <writeToFrame_Roll+0xa8>)
 80083a0:	617b      	str	r3, [r7, #20]
  parameter.value      =  accelRoll;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  parameter.dataType   =  Roll_Accel_DTYPE;
 80083a6:	2301      	movs	r3, #1
 80083a8:	61bb      	str	r3, [r7, #24]
  parameter.startBit   =  Roll_Accel_SBIT;
 80083aa:	2300      	movs	r3, #0
 80083ac:	61fb      	str	r3, [r7, #28]
  parameter.bitLength  =  Roll_Accel_BLEN;
 80083ae:	230a      	movs	r3, #10
 80083b0:	623b      	str	r3, [r7, #32]
  parameter.factor     =  Roll_Accel_FACTOR;
 80083b2:	4b1c      	ldr	r3, [pc, #112]	; (8008424 <writeToFrame_Roll+0xac>)
 80083b4:	627b      	str	r3, [r7, #36]	; 0x24
  parameter.offset     =  Roll_Accel_OFFSET;
 80083b6:	f04f 0300 	mov.w	r3, #0
 80083ba:	62bb      	str	r3, [r7, #40]	; 0x28

  SDCP_WPF(&parameter);
 80083bc:	f107 0314 	add.w	r3, r7, #20
 80083c0:	4618      	mov	r0, r3
 80083c2:	f002 fe0d 	bl	800afe0 <SDCP_WPF>

  parameter.pFrame     =  &Roll_SMF;
 80083c6:	4b16      	ldr	r3, [pc, #88]	; (8008420 <writeToFrame_Roll+0xa8>)
 80083c8:	617b      	str	r3, [r7, #20]
  parameter.value      =  gyroRoll;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  parameter.dataType   =  Roll_Gyro_DTYPE;
 80083ce:	2301      	movs	r3, #1
 80083d0:	61bb      	str	r3, [r7, #24]
  parameter.startBit   =  Roll_Gyro_SBIT;
 80083d2:	230a      	movs	r3, #10
 80083d4:	61fb      	str	r3, [r7, #28]
  parameter.bitLength  =  Roll_Gyro_BLEN;
 80083d6:	230a      	movs	r3, #10
 80083d8:	623b      	str	r3, [r7, #32]
  parameter.factor     =  Roll_Gyro_FACTOR;
 80083da:	4b12      	ldr	r3, [pc, #72]	; (8008424 <writeToFrame_Roll+0xac>)
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
  parameter.offset     =  Roll_Gyro_OFFSET;
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	62bb      	str	r3, [r7, #40]	; 0x28

  SDCP_WPF(&parameter);
 80083e4:	f107 0314 	add.w	r3, r7, #20
 80083e8:	4618      	mov	r0, r3
 80083ea:	f002 fdf9 	bl	800afe0 <SDCP_WPF>

  parameter.pFrame     =  &Roll_SMF;
 80083ee:	4b0c      	ldr	r3, [pc, #48]	; (8008420 <writeToFrame_Roll+0xa8>)
 80083f0:	617b      	str	r3, [r7, #20]
  parameter.value      =  filterRoll;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  parameter.dataType   =  Roll_CF_DTYPE;
 80083f6:	2301      	movs	r3, #1
 80083f8:	61bb      	str	r3, [r7, #24]
  parameter.startBit   =  Roll_CF_SBIT;
 80083fa:	2314      	movs	r3, #20
 80083fc:	61fb      	str	r3, [r7, #28]
  parameter.bitLength  =  Roll_CF_BLEN;
 80083fe:	230a      	movs	r3, #10
 8008400:	623b      	str	r3, [r7, #32]
  parameter.factor     =  Roll_CF_FACTOR;
 8008402:	4b08      	ldr	r3, [pc, #32]	; (8008424 <writeToFrame_Roll+0xac>)
 8008404:	627b      	str	r3, [r7, #36]	; 0x24
  parameter.offset     =  Roll_CF_OFFSET;
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	62bb      	str	r3, [r7, #40]	; 0x28

  SDCP_WPF(&parameter);
 800840c:	f107 0314 	add.w	r3, r7, #20
 8008410:	4618      	mov	r0, r3
 8008412:	f002 fde5 	bl	800afe0 <SDCP_WPF>
}
 8008416:	bf00      	nop
 8008418:	3730      	adds	r7, #48	; 0x30
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20000514 	.word	0x20000514
 8008424:	3e484b5e 	.word	0x3e484b5e

08008428 <writeToFrame_Pitch>:


static void writeToFrame_Pitch(float accelPitch, float gyroPitch, float filterPitch)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b08c      	sub	sp, #48	; 0x30
 800842c:	af00      	add	r7, sp, #0
 800842e:	ed87 0a03 	vstr	s0, [r7, #12]
 8008432:	edc7 0a02 	vstr	s1, [r7, #8]
 8008436:	ed87 1a01 	vstr	s2, [r7, #4]
  SDCP_Param parameter = {0};
 800843a:	f107 0314 	add.w	r3, r7, #20
 800843e:	2200      	movs	r2, #0
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	605a      	str	r2, [r3, #4]
 8008444:	609a      	str	r2, [r3, #8]
 8008446:	60da      	str	r2, [r3, #12]
 8008448:	611a      	str	r2, [r3, #16]
 800844a:	615a      	str	r2, [r3, #20]
 800844c:	619a      	str	r2, [r3, #24]

  parameter.pFrame     =  &Pitch_SMF;
 800844e:	4b20      	ldr	r3, [pc, #128]	; (80084d0 <writeToFrame_Pitch+0xa8>)
 8008450:	617b      	str	r3, [r7, #20]
  parameter.value      =  accelPitch;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	62fb      	str	r3, [r7, #44]	; 0x2c
  parameter.dataType   =  Pitch_Accel_DTYPE;
 8008456:	2301      	movs	r3, #1
 8008458:	61bb      	str	r3, [r7, #24]
  parameter.startBit   =  Pitch_Accel_SBIT;
 800845a:	2300      	movs	r3, #0
 800845c:	61fb      	str	r3, [r7, #28]
  parameter.bitLength  =  Pitch_Accel_BLEN;
 800845e:	230a      	movs	r3, #10
 8008460:	623b      	str	r3, [r7, #32]
  parameter.factor     =  Pitch_Accel_FACTOR;
 8008462:	4b1c      	ldr	r3, [pc, #112]	; (80084d4 <writeToFrame_Pitch+0xac>)
 8008464:	627b      	str	r3, [r7, #36]	; 0x24
  parameter.offset     =  Pitch_Accel_OFFSET;
 8008466:	f04f 0300 	mov.w	r3, #0
 800846a:	62bb      	str	r3, [r7, #40]	; 0x28

  SDCP_WPF(&parameter);
 800846c:	f107 0314 	add.w	r3, r7, #20
 8008470:	4618      	mov	r0, r3
 8008472:	f002 fdb5 	bl	800afe0 <SDCP_WPF>

  parameter.pFrame     =  &Pitch_SMF;
 8008476:	4b16      	ldr	r3, [pc, #88]	; (80084d0 <writeToFrame_Pitch+0xa8>)
 8008478:	617b      	str	r3, [r7, #20]
  parameter.value      =  gyroPitch;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	62fb      	str	r3, [r7, #44]	; 0x2c
  parameter.dataType   =  Pitch_Gyro_DTYPE;
 800847e:	2301      	movs	r3, #1
 8008480:	61bb      	str	r3, [r7, #24]
  parameter.startBit   =  Pitch_Gyro_SBIT;
 8008482:	230a      	movs	r3, #10
 8008484:	61fb      	str	r3, [r7, #28]
  parameter.bitLength  =  Pitch_Gyro_BLEN;
 8008486:	230a      	movs	r3, #10
 8008488:	623b      	str	r3, [r7, #32]
  parameter.factor     =  Pitch_Gyro_FACTOR;
 800848a:	4b12      	ldr	r3, [pc, #72]	; (80084d4 <writeToFrame_Pitch+0xac>)
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
  parameter.offset     =  Pitch_Gyro_OFFSET;
 800848e:	f04f 0300 	mov.w	r3, #0
 8008492:	62bb      	str	r3, [r7, #40]	; 0x28

  SDCP_WPF(&parameter);
 8008494:	f107 0314 	add.w	r3, r7, #20
 8008498:	4618      	mov	r0, r3
 800849a:	f002 fda1 	bl	800afe0 <SDCP_WPF>

  parameter.pFrame     =  &Pitch_SMF;
 800849e:	4b0c      	ldr	r3, [pc, #48]	; (80084d0 <writeToFrame_Pitch+0xa8>)
 80084a0:	617b      	str	r3, [r7, #20]
  parameter.value      =  filterPitch;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  parameter.dataType   =  Pitch_CF_DTYPE;
 80084a6:	2301      	movs	r3, #1
 80084a8:	61bb      	str	r3, [r7, #24]
  parameter.startBit   =  Pitch_CF_SBIT;
 80084aa:	2314      	movs	r3, #20
 80084ac:	61fb      	str	r3, [r7, #28]
  parameter.bitLength  =  Pitch_CF_BLEN;
 80084ae:	230a      	movs	r3, #10
 80084b0:	623b      	str	r3, [r7, #32]
  parameter.factor     =  Pitch_CF_FACTOR;
 80084b2:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <writeToFrame_Pitch+0xac>)
 80084b4:	627b      	str	r3, [r7, #36]	; 0x24
  parameter.offset     =  Pitch_CF_OFFSET;
 80084b6:	f04f 0300 	mov.w	r3, #0
 80084ba:	62bb      	str	r3, [r7, #40]	; 0x28

  SDCP_WPF(&parameter);
 80084bc:	f107 0314 	add.w	r3, r7, #20
 80084c0:	4618      	mov	r0, r3
 80084c2:	f002 fd8d 	bl	800afe0 <SDCP_WPF>
}
 80084c6:	bf00      	nop
 80084c8:	3730      	adds	r7, #48	; 0x30
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	20000148 	.word	0x20000148
 80084d4:	3e484b5e 	.word	0x3e484b5e

080084d8 <writeToFrame_Yaw>:

static void writeToFrame_Yaw(float accelYaw, float gyroYaw, float filterYaw)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b08c      	sub	sp, #48	; 0x30
 80084dc:	af00      	add	r7, sp, #0
 80084de:	ed87 0a03 	vstr	s0, [r7, #12]
 80084e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80084e6:	ed87 1a01 	vstr	s2, [r7, #4]
  SDCP_Param parameter = {0};
 80084ea:	f107 0314 	add.w	r3, r7, #20
 80084ee:	2200      	movs	r2, #0
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	605a      	str	r2, [r3, #4]
 80084f4:	609a      	str	r2, [r3, #8]
 80084f6:	60da      	str	r2, [r3, #12]
 80084f8:	611a      	str	r2, [r3, #16]
 80084fa:	615a      	str	r2, [r3, #20]
 80084fc:	619a      	str	r2, [r3, #24]

  parameter.pFrame     =  &Yaw_SMF;
 80084fe:	4b20      	ldr	r3, [pc, #128]	; (8008580 <writeToFrame_Yaw+0xa8>)
 8008500:	617b      	str	r3, [r7, #20]
  parameter.value      =  accelYaw;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	62fb      	str	r3, [r7, #44]	; 0x2c
  parameter.dataType   =  Yaw_Accel_DTYPE;
 8008506:	2301      	movs	r3, #1
 8008508:	61bb      	str	r3, [r7, #24]
  parameter.startBit   =  Yaw_Accel_SBIT;
 800850a:	2300      	movs	r3, #0
 800850c:	61fb      	str	r3, [r7, #28]
  parameter.bitLength  =  Yaw_Accel_BLEN;
 800850e:	230a      	movs	r3, #10
 8008510:	623b      	str	r3, [r7, #32]
  parameter.factor     =  Yaw_Accel_FACTOR;
 8008512:	4b1c      	ldr	r3, [pc, #112]	; (8008584 <writeToFrame_Yaw+0xac>)
 8008514:	627b      	str	r3, [r7, #36]	; 0x24
  parameter.offset     =  Yaw_Accel_OFFSET;
 8008516:	f04f 0300 	mov.w	r3, #0
 800851a:	62bb      	str	r3, [r7, #40]	; 0x28

  SDCP_WPF(&parameter);
 800851c:	f107 0314 	add.w	r3, r7, #20
 8008520:	4618      	mov	r0, r3
 8008522:	f002 fd5d 	bl	800afe0 <SDCP_WPF>

  parameter.pFrame     =  &Yaw_SMF;
 8008526:	4b16      	ldr	r3, [pc, #88]	; (8008580 <writeToFrame_Yaw+0xa8>)
 8008528:	617b      	str	r3, [r7, #20]
  parameter.value      =  gyroYaw;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	62fb      	str	r3, [r7, #44]	; 0x2c
  parameter.dataType   =  Yaw_Gyro_DTYPE;
 800852e:	2301      	movs	r3, #1
 8008530:	61bb      	str	r3, [r7, #24]
  parameter.startBit   =  Yaw_Gyro_SBIT;
 8008532:	230a      	movs	r3, #10
 8008534:	61fb      	str	r3, [r7, #28]
  parameter.bitLength  =  Yaw_Gyro_BLEN;
 8008536:	230a      	movs	r3, #10
 8008538:	623b      	str	r3, [r7, #32]
  parameter.factor     =  Yaw_Gyro_FACTOR;
 800853a:	4b12      	ldr	r3, [pc, #72]	; (8008584 <writeToFrame_Yaw+0xac>)
 800853c:	627b      	str	r3, [r7, #36]	; 0x24
  parameter.offset     =  Yaw_Gyro_OFFSET;
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	62bb      	str	r3, [r7, #40]	; 0x28

  SDCP_WPF(&parameter);
 8008544:	f107 0314 	add.w	r3, r7, #20
 8008548:	4618      	mov	r0, r3
 800854a:	f002 fd49 	bl	800afe0 <SDCP_WPF>

  parameter.pFrame     =  &Yaw_SMF;
 800854e:	4b0c      	ldr	r3, [pc, #48]	; (8008580 <writeToFrame_Yaw+0xa8>)
 8008550:	617b      	str	r3, [r7, #20]
  parameter.value      =  filterYaw;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	62fb      	str	r3, [r7, #44]	; 0x2c
  parameter.dataType   =  Yaw_CF_DTYPE;
 8008556:	2301      	movs	r3, #1
 8008558:	61bb      	str	r3, [r7, #24]
  parameter.startBit   =  Yaw_CF_SBIT;
 800855a:	2314      	movs	r3, #20
 800855c:	61fb      	str	r3, [r7, #28]
  parameter.bitLength  =  Yaw_CF_BLEN;
 800855e:	230a      	movs	r3, #10
 8008560:	623b      	str	r3, [r7, #32]
  parameter.factor     =  Yaw_CF_FACTOR;
 8008562:	4b08      	ldr	r3, [pc, #32]	; (8008584 <writeToFrame_Yaw+0xac>)
 8008564:	627b      	str	r3, [r7, #36]	; 0x24
  parameter.offset     =  Yaw_CF_OFFSET;
 8008566:	f04f 0300 	mov.w	r3, #0
 800856a:	62bb      	str	r3, [r7, #40]	; 0x28

  SDCP_WPF(&parameter);
 800856c:	f107 0314 	add.w	r3, r7, #20
 8008570:	4618      	mov	r0, r3
 8008572:	f002 fd35 	bl	800afe0 <SDCP_WPF>
}
 8008576:	bf00      	nop
 8008578:	3730      	adds	r7, #48	; 0x30
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	200003b4 	.word	0x200003b4
 8008584:	3e484b5e 	.word	0x3e484b5e

08008588 <MP_Init>:


/* Function to initialize the motion processing function. */

void MP_Init()
{
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
  /* Load roll, pitch and yaw settings from FLASH memory. */

  Motion_Processing.roll_coeff  = Config.roll_coeff;
 800858c:	4b99      	ldr	r3, [pc, #612]	; (80087f4 <MP_Init+0x26c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a99      	ldr	r2, [pc, #612]	; (80087f8 <MP_Init+0x270>)
 8008592:	60d3      	str	r3, [r2, #12]
  Motion_Processing.pitch_coeff = Config.pitch_coeff;
 8008594:	4b97      	ldr	r3, [pc, #604]	; (80087f4 <MP_Init+0x26c>)
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	4a97      	ldr	r2, [pc, #604]	; (80087f8 <MP_Init+0x270>)
 800859a:	6113      	str	r3, [r2, #16]
  Motion_Processing.yaw_coeff   = Config.yaw_coeff;
 800859c:	4b95      	ldr	r3, [pc, #596]	; (80087f4 <MP_Init+0x26c>)
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	4a95      	ldr	r2, [pc, #596]	; (80087f8 <MP_Init+0x270>)
 80085a2:	6153      	str	r3, [r2, #20]

  /* Load motion processing output parameters from FLASH memory. */

  Motion_Processing.output_config.output_config_segments.RPY_accel_output_enabled =
  Config.IMU_settings.IMU_settings_parameters.enable_RPY_accel;
 80085a4:	4b93      	ldr	r3, [pc, #588]	; (80087f4 <MP_Init+0x26c>)
 80085a6:	7b1b      	ldrb	r3, [r3, #12]
 80085a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80085ac:	b2d9      	uxtb	r1, r3
  Motion_Processing.output_config.output_config_segments.RPY_accel_output_enabled =
 80085ae:	4a92      	ldr	r2, [pc, #584]	; (80087f8 <MP_Init+0x270>)
 80085b0:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80085b4:	f361 0300 	bfi	r3, r1, #0, #1
 80085b8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c

  Motion_Processing.output_config.output_config_segments.RPY_gyro_output_enabled =
  Config.IMU_settings.IMU_settings_parameters.enable_RPY_gyro;
 80085bc:	4b8d      	ldr	r3, [pc, #564]	; (80087f4 <MP_Init+0x26c>)
 80085be:	7b1b      	ldrb	r3, [r3, #12]
 80085c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80085c4:	b2d9      	uxtb	r1, r3
  Motion_Processing.output_config.output_config_segments.RPY_gyro_output_enabled =
 80085c6:	4a8c      	ldr	r2, [pc, #560]	; (80087f8 <MP_Init+0x270>)
 80085c8:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80085cc:	f361 0341 	bfi	r3, r1, #1, #1
 80085d0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c

  Motion_Processing.output_config.output_config_segments.RPY_filter_output_enabled =
  Config.IMU_settings.IMU_settings_parameters.enable_RPY_comp;
 80085d4:	4b87      	ldr	r3, [pc, #540]	; (80087f4 <MP_Init+0x26c>)
 80085d6:	7b1b      	ldrb	r3, [r3, #12]
 80085d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80085dc:	b2d9      	uxtb	r1, r3
  Motion_Processing.output_config.output_config_segments.RPY_filter_output_enabled =
 80085de:	4a86      	ldr	r2, [pc, #536]	; (80087f8 <MP_Init+0x270>)
 80085e0:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80085e4:	f361 0382 	bfi	r3, r1, #2, #1
 80085e8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c

  /* Load motion processing parameters from FLASH memory. */

  Motion_Processing.angle_threshold[X] = Config.angle_threshold[X];
 80085ec:	4b81      	ldr	r3, [pc, #516]	; (80087f4 <MP_Init+0x26c>)
 80085ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f0:	4a81      	ldr	r2, [pc, #516]	; (80087f8 <MP_Init+0x270>)
 80085f2:	64d3      	str	r3, [r2, #76]	; 0x4c
  Motion_Processing.angle_threshold[Y] = Config.angle_threshold[Y];
 80085f4:	4b7f      	ldr	r3, [pc, #508]	; (80087f4 <MP_Init+0x26c>)
 80085f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f8:	4a7f      	ldr	r2, [pc, #508]	; (80087f8 <MP_Init+0x270>)
 80085fa:	6513      	str	r3, [r2, #80]	; 0x50
  Motion_Processing.angle_threshold[Z] = Config.angle_threshold[Z];
 80085fc:	4b7d      	ldr	r3, [pc, #500]	; (80087f4 <MP_Init+0x26c>)
 80085fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008600:	4a7d      	ldr	r2, [pc, #500]	; (80087f8 <MP_Init+0x270>)
 8008602:	6553      	str	r3, [r2, #84]	; 0x54
  Motion_Processing.vibration_threshold[X] = Config.vibration_threshold[X];
 8008604:	4b7b      	ldr	r3, [pc, #492]	; (80087f4 <MP_Init+0x26c>)
 8008606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008608:	4a7b      	ldr	r2, [pc, #492]	; (80087f8 <MP_Init+0x270>)
 800860a:	6413      	str	r3, [r2, #64]	; 0x40
  Motion_Processing.vibration_threshold[Y] = Config.vibration_threshold[Y];
 800860c:	4b79      	ldr	r3, [pc, #484]	; (80087f4 <MP_Init+0x26c>)
 800860e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008610:	4a79      	ldr	r2, [pc, #484]	; (80087f8 <MP_Init+0x270>)
 8008612:	6453      	str	r3, [r2, #68]	; 0x44
  Motion_Processing.vibration_threshold[Z] = Config.vibration_threshold[Z];
 8008614:	4b77      	ldr	r3, [pc, #476]	; (80087f4 <MP_Init+0x26c>)
 8008616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008618:	4a77      	ldr	r2, [pc, #476]	; (80087f8 <MP_Init+0x270>)
 800861a:	6493      	str	r3, [r2, #72]	; 0x48

  /* Load initial configurations into message frame. */

  CF_coeff_SMF.CF_coeff_SMF_segments.Roll_coeff =
  Config.roll_coeff;
 800861c:	4b75      	ldr	r3, [pc, #468]	; (80087f4 <MP_Init+0x26c>)
 800861e:	edd3 7a00 	vldr	s15, [r3]
  CF_coeff_SMF.CF_coeff_SMF_segments.Roll_coeff =
 8008622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008626:	ee17 3a90 	vmov	r3, s15
 800862a:	b299      	uxth	r1, r3
 800862c:	4a73      	ldr	r2, [pc, #460]	; (80087fc <MP_Init+0x274>)
 800862e:	8813      	ldrh	r3, [r2, #0]
 8008630:	f361 0309 	bfi	r3, r1, #0, #10
 8008634:	8013      	strh	r3, [r2, #0]
  CF_coeff_SMF.CF_coeff_SMF_segments.Pitch_coeff =
  Config.pitch_coeff;
 8008636:	4b6f      	ldr	r3, [pc, #444]	; (80087f4 <MP_Init+0x26c>)
 8008638:	edd3 7a01 	vldr	s15, [r3, #4]
  CF_coeff_SMF.CF_coeff_SMF_segments.Pitch_coeff =
 800863c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008640:	ee17 3a90 	vmov	r3, s15
 8008644:	b299      	uxth	r1, r3
 8008646:	4a6d      	ldr	r2, [pc, #436]	; (80087fc <MP_Init+0x274>)
 8008648:	6813      	ldr	r3, [r2, #0]
 800864a:	f361 2393 	bfi	r3, r1, #10, #10
 800864e:	6013      	str	r3, [r2, #0]
  CF_coeff_SMF.CF_coeff_SMF_segments.Yaw_coeff =
  Config.yaw_coeff;
 8008650:	4b68      	ldr	r3, [pc, #416]	; (80087f4 <MP_Init+0x26c>)
 8008652:	edd3 7a02 	vldr	s15, [r3, #8]
  CF_coeff_SMF.CF_coeff_SMF_segments.Yaw_coeff =
 8008656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800865a:	ee17 3a90 	vmov	r3, s15
 800865e:	b299      	uxth	r1, r3
 8008660:	4a66      	ldr	r2, [pc, #408]	; (80087fc <MP_Init+0x274>)
 8008662:	8853      	ldrh	r3, [r2, #2]
 8008664:	f361 130d 	bfi	r3, r1, #4, #10
 8008668:	8053      	strh	r3, [r2, #2]

  MDT_X_SMF.MDT_X_SMF_segments.angle_threshold = (float)Config.angle_threshold[X]/(float)X_angle_threshold_FACTOR;
 800866a:	4b62      	ldr	r3, [pc, #392]	; (80087f4 <MP_Init+0x26c>)
 800866c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8008670:	eddf 6a63 	vldr	s13, [pc, #396]	; 8008800 <MP_Init+0x278>
 8008674:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800867c:	ee17 3a90 	vmov	r3, s15
 8008680:	b29a      	uxth	r2, r3
 8008682:	4b60      	ldr	r3, [pc, #384]	; (8008804 <MP_Init+0x27c>)
 8008684:	801a      	strh	r2, [r3, #0]
  MDT_X_SMF.MDT_X_SMF_segments.vibration_threshold = Config.vibration_threshold[X];
 8008686:	4b5b      	ldr	r3, [pc, #364]	; (80087f4 <MP_Init+0x26c>)
 8008688:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800868c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008690:	ee17 3a90 	vmov	r3, s15
 8008694:	b29a      	uxth	r2, r3
 8008696:	4b5b      	ldr	r3, [pc, #364]	; (8008804 <MP_Init+0x27c>)
 8008698:	805a      	strh	r2, [r3, #2]
  MDT_Y_SMF.MDT_Y_SMF_segments.angle_threshold = Config.angle_threshold[Y]/(float)Y_angle_threshold_FACTOR;
 800869a:	4b56      	ldr	r3, [pc, #344]	; (80087f4 <MP_Init+0x26c>)
 800869c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80086a0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8008800 <MP_Init+0x278>
 80086a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80086a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ac:	ee17 3a90 	vmov	r3, s15
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	4b55      	ldr	r3, [pc, #340]	; (8008808 <MP_Init+0x280>)
 80086b4:	801a      	strh	r2, [r3, #0]
  MDT_Y_SMF.MDT_Y_SMF_segments.vibration_threshold = Config.vibration_threshold[Y];
 80086b6:	4b4f      	ldr	r3, [pc, #316]	; (80087f4 <MP_Init+0x26c>)
 80086b8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80086bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086c0:	ee17 3a90 	vmov	r3, s15
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	4b50      	ldr	r3, [pc, #320]	; (8008808 <MP_Init+0x280>)
 80086c8:	805a      	strh	r2, [r3, #2]
  MDT_Z_SMF.MDT_Z_SMF_segments.angle_threshold = Config.angle_threshold[Z]/(float)Z_angle_threshold_FACTOR;
 80086ca:	4b4a      	ldr	r3, [pc, #296]	; (80087f4 <MP_Init+0x26c>)
 80086cc:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80086d0:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8008800 <MP_Init+0x278>
 80086d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80086d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086dc:	ee17 3a90 	vmov	r3, s15
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	4b4a      	ldr	r3, [pc, #296]	; (800880c <MP_Init+0x284>)
 80086e4:	801a      	strh	r2, [r3, #0]
  MDT_Z_SMF.MDT_Z_SMF_segments.vibration_threshold = Config.vibration_threshold[Z];
 80086e6:	4b43      	ldr	r3, [pc, #268]	; (80087f4 <MP_Init+0x26c>)
 80086e8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80086ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086f0:	ee17 3a90 	vmov	r3, s15
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	4b45      	ldr	r3, [pc, #276]	; (800880c <MP_Init+0x284>)
 80086f8:	805a      	strh	r2, [r3, #2]

  Motion_Detection_SMF.all = 0;
 80086fa:	4b45      	ldr	r3, [pc, #276]	; (8008810 <MP_Init+0x288>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	601a      	str	r2, [r3, #0]
  Motion_Processing.motion_detection.all = 0;
 8008700:	4b3d      	ldr	r3, [pc, #244]	; (80087f8 <MP_Init+0x270>)
 8008702:	2200      	movs	r2, #0
 8008704:	659a      	str	r2, [r3, #88]	; 0x58

  /* Clear all previously stored values. */

  Motion_Processing.filter_roll  = 0.0f;
 8008706:	4b3c      	ldr	r3, [pc, #240]	; (80087f8 <MP_Init+0x270>)
 8008708:	f04f 0200 	mov.w	r2, #0
 800870c:	601a      	str	r2, [r3, #0]
  Motion_Processing.filter_pitch = 0.0f;
 800870e:	4b3a      	ldr	r3, [pc, #232]	; (80087f8 <MP_Init+0x270>)
 8008710:	f04f 0200 	mov.w	r2, #0
 8008714:	605a      	str	r2, [r3, #4]
  Motion_Processing.filter_yaw	 = 0.0f;
 8008716:	4b38      	ldr	r3, [pc, #224]	; (80087f8 <MP_Init+0x270>)
 8008718:	f04f 0200 	mov.w	r2, #0
 800871c:	609a      	str	r2, [r3, #8]

  Motion_Processing.gyro_roll   = 0.0f;
 800871e:	4b36      	ldr	r3, [pc, #216]	; (80087f8 <MP_Init+0x270>)
 8008720:	f04f 0200 	mov.w	r2, #0
 8008724:	625a      	str	r2, [r3, #36]	; 0x24
  Motion_Processing.gyro_pitch  = 0.0f;
 8008726:	4b34      	ldr	r3, [pc, #208]	; (80087f8 <MP_Init+0x270>)
 8008728:	f04f 0200 	mov.w	r2, #0
 800872c:	629a      	str	r2, [r3, #40]	; 0x28
  Motion_Processing.gyro_yaw    = 0.0f;
 800872e:	4b32      	ldr	r3, [pc, #200]	; (80087f8 <MP_Init+0x270>)
 8008730:	f04f 0200 	mov.w	r2, #0
 8008734:	62da      	str	r2, [r3, #44]	; 0x2c

  Motion_Processing.accel_roll  = 0.0f;
 8008736:	4b30      	ldr	r3, [pc, #192]	; (80087f8 <MP_Init+0x270>)
 8008738:	f04f 0200 	mov.w	r2, #0
 800873c:	619a      	str	r2, [r3, #24]
  Motion_Processing.accel_pitch = 0.0f;
 800873e:	4b2e      	ldr	r3, [pc, #184]	; (80087f8 <MP_Init+0x270>)
 8008740:	f04f 0200 	mov.w	r2, #0
 8008744:	61da      	str	r2, [r3, #28]
  Motion_Processing.accel_yaw   = 0.0f;
 8008746:	4b2c      	ldr	r3, [pc, #176]	; (80087f8 <MP_Init+0x270>)
 8008748:	f04f 0200 	mov.w	r2, #0
 800874c:	621a      	str	r2, [r3, #32]

  Motion_Processing.gx_previous = 0.0f;
 800874e:	4b2a      	ldr	r3, [pc, #168]	; (80087f8 <MP_Init+0x270>)
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	631a      	str	r2, [r3, #48]	; 0x30
  Motion_Processing.gy_previous = 0.0f;
 8008756:	4b28      	ldr	r3, [pc, #160]	; (80087f8 <MP_Init+0x270>)
 8008758:	f04f 0200 	mov.w	r2, #0
 800875c:	635a      	str	r2, [r3, #52]	; 0x34
  Motion_Processing.gz_previous = 0.0f;
 800875e:	4b26      	ldr	r3, [pc, #152]	; (80087f8 <MP_Init+0x270>)
 8008760:	f04f 0200 	mov.w	r2, #0
 8008764:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write settigns to frame. */

  writeToFrame_filterCoeff( Motion_Processing.roll_coeff,
 8008766:	4b24      	ldr	r3, [pc, #144]	; (80087f8 <MP_Init+0x270>)
 8008768:	edd3 7a03 	vldr	s15, [r3, #12]
 800876c:	4b22      	ldr	r3, [pc, #136]	; (80087f8 <MP_Init+0x270>)
 800876e:	ed93 7a04 	vldr	s14, [r3, #16]
 8008772:	4b21      	ldr	r3, [pc, #132]	; (80087f8 <MP_Init+0x270>)
 8008774:	edd3 6a05 	vldr	s13, [r3, #20]
 8008778:	eeb0 1a66 	vmov.f32	s2, s13
 800877c:	eef0 0a47 	vmov.f32	s1, s14
 8008780:	eeb0 0a67 	vmov.f32	s0, s15
 8008784:	f7ff fda0 	bl	80082c8 <writeToFrame_filterCoeff>
		                    Motion_Processing.pitch_coeff,
							Motion_Processing.yaw_coeff );

  writeToFrame_Roll( Motion_Processing.accel_roll,
 8008788:	4b1b      	ldr	r3, [pc, #108]	; (80087f8 <MP_Init+0x270>)
 800878a:	edd3 7a06 	vldr	s15, [r3, #24]
 800878e:	4b1a      	ldr	r3, [pc, #104]	; (80087f8 <MP_Init+0x270>)
 8008790:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8008794:	4b18      	ldr	r3, [pc, #96]	; (80087f8 <MP_Init+0x270>)
 8008796:	edd3 6a00 	vldr	s13, [r3]
 800879a:	eeb0 1a66 	vmov.f32	s2, s13
 800879e:	eef0 0a47 	vmov.f32	s1, s14
 80087a2:	eeb0 0a67 	vmov.f32	s0, s15
 80087a6:	f7ff fde7 	bl	8008378 <writeToFrame_Roll>
		             Motion_Processing.gyro_roll,
					 Motion_Processing.filter_roll );

  writeToFrame_Pitch( Motion_Processing.accel_pitch,
 80087aa:	4b13      	ldr	r3, [pc, #76]	; (80087f8 <MP_Init+0x270>)
 80087ac:	edd3 7a07 	vldr	s15, [r3, #28]
 80087b0:	4b11      	ldr	r3, [pc, #68]	; (80087f8 <MP_Init+0x270>)
 80087b2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80087b6:	4b10      	ldr	r3, [pc, #64]	; (80087f8 <MP_Init+0x270>)
 80087b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80087bc:	eeb0 1a66 	vmov.f32	s2, s13
 80087c0:	eef0 0a47 	vmov.f32	s1, s14
 80087c4:	eeb0 0a67 	vmov.f32	s0, s15
 80087c8:	f7ff fe2e 	bl	8008428 <writeToFrame_Pitch>
		              Motion_Processing.gyro_pitch,
					  Motion_Processing.filter_pitch );

  writeToFrame_Yaw(  Motion_Processing.accel_yaw,
 80087cc:	4b0a      	ldr	r3, [pc, #40]	; (80087f8 <MP_Init+0x270>)
 80087ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80087d2:	4b09      	ldr	r3, [pc, #36]	; (80087f8 <MP_Init+0x270>)
 80087d4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80087d8:	4b07      	ldr	r3, [pc, #28]	; (80087f8 <MP_Init+0x270>)
 80087da:	edd3 6a02 	vldr	s13, [r3, #8]
 80087de:	eeb0 1a66 	vmov.f32	s2, s13
 80087e2:	eef0 0a47 	vmov.f32	s1, s14
 80087e6:	eeb0 0a67 	vmov.f32	s0, s15
 80087ea:	f7ff fe75 	bl	80084d8 <writeToFrame_Yaw>
		             Motion_Processing.gyro_yaw,
					 Motion_Processing.filter_yaw );
}
 80087ee:	bf00      	nop
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	200005b0 	.word	0x200005b0
 80087f8:	2000048c 	.word	0x2000048c
 80087fc:	20000144 	.word	0x20000144
 8008800:	3c23d70a 	.word	0x3c23d70a
 8008804:	2000041c 	.word	0x2000041c
 8008808:	200003c4 	.word	0x200003c4
 800880c:	200003a4 	.word	0x200003a4
 8008810:	20000468 	.word	0x20000468
 8008814:	00000000 	.word	0x00000000

08008818 <MP_Update>:


void MP_Update()
{
 8008818:	b5b0      	push	{r4, r5, r7, lr}
 800881a:	b08a      	sub	sp, #40	; 0x28
 800881c:	af00      	add	r7, sp, #0
  float temp = 0.0f;
 800881e:	f04f 0300 	mov.w	r3, #0
 8008822:	627b      	str	r3, [r7, #36]	; 0x24


  /* Update roll, pitch and yaw values based on gyroscope value. */

  float gx = ( 0.001f * (float)imu.gyroscope[X] );
 8008824:	4bd2      	ldr	r3, [pc, #840]	; (8008b70 <MP_Update+0x358>)
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	ee07 3a90 	vmov	s15, r3
 800882c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008830:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 8008b74 <MP_Update+0x35c>
 8008834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008838:	edc7 7a05 	vstr	s15, [r7, #20]
  float gy = ( 0.001f * (float)imu.gyroscope[Y] );
 800883c:	4bcc      	ldr	r3, [pc, #816]	; (8008b70 <MP_Update+0x358>)
 800883e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008840:	ee07 3a90 	vmov	s15, r3
 8008844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008848:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8008b74 <MP_Update+0x35c>
 800884c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008850:	edc7 7a04 	vstr	s15, [r7, #16]
  float gz = ( 0.001f * (float)imu.gyroscope[Z] );
 8008854:	4bc6      	ldr	r3, [pc, #792]	; (8008b70 <MP_Update+0x358>)
 8008856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008858:	ee07 3a90 	vmov	s15, r3
 800885c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008860:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8008b74 <MP_Update+0x35c>
 8008864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008868:	edc7 7a03 	vstr	s15, [r7, #12]

  temp = ( ( gx + Motion_Processing.gx_previous ) * MP_SAMPLE_TIME * 0.5f);
 800886c:	4bc2      	ldr	r3, [pc, #776]	; (8008b78 <MP_Update+0x360>)
 800886e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8008872:	edd7 7a05 	vldr	s15, [r7, #20]
 8008876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800887a:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8008b7c <MP_Update+0x364>
 800887e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008882:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800888a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  Motion_Processing.gyro_roll += temp;
 800888e:	4bba      	ldr	r3, [pc, #744]	; (8008b78 <MP_Update+0x360>)
 8008890:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8008894:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800889c:	4bb6      	ldr	r3, [pc, #728]	; (8008b78 <MP_Update+0x360>)
 800889e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  temp = ( ( gy + Motion_Processing.gy_previous ) * MP_SAMPLE_TIME * 0.5f);
 80088a2:	4bb5      	ldr	r3, [pc, #724]	; (8008b78 <MP_Update+0x360>)
 80088a4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80088a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80088ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088b0:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8008b7c <MP_Update+0x364>
 80088b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80088bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  Motion_Processing.gyro_pitch += temp;
 80088c4:	4bac      	ldr	r3, [pc, #688]	; (8008b78 <MP_Update+0x360>)
 80088c6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80088ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80088ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088d2:	4ba9      	ldr	r3, [pc, #676]	; (8008b78 <MP_Update+0x360>)
 80088d4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

  temp = ( ( gz + Motion_Processing.gz_previous ) * MP_SAMPLE_TIME * 0.5f);
 80088d8:	4ba7      	ldr	r3, [pc, #668]	; (8008b78 <MP_Update+0x360>)
 80088da:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80088de:	edd7 7a03 	vldr	s15, [r7, #12]
 80088e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088e6:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8008b7c <MP_Update+0x364>
 80088ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80088f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  Motion_Processing.gyro_yaw += temp;
 80088fa:	4b9f      	ldr	r3, [pc, #636]	; (8008b78 <MP_Update+0x360>)
 80088fc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8008900:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008908:	4b9b      	ldr	r3, [pc, #620]	; (8008b78 <MP_Update+0x360>)
 800890a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

  Motion_Processing.gx_previous = gx;
 800890e:	4a9a      	ldr	r2, [pc, #616]	; (8008b78 <MP_Update+0x360>)
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	6313      	str	r3, [r2, #48]	; 0x30
  Motion_Processing.gy_previous = gy;
 8008914:	4a98      	ldr	r2, [pc, #608]	; (8008b78 <MP_Update+0x360>)
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	6353      	str	r3, [r2, #52]	; 0x34
  Motion_Processing.gz_previous = gz;
 800891a:	4a97      	ldr	r2, [pc, #604]	; (8008b78 <MP_Update+0x360>)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6393      	str	r3, [r2, #56]	; 0x38

  /* Update roll, pitch and yaw values based on accelerometer values. */

  float a_x = (((float)imu.accelerometer[X])/1000.0f);
 8008920:	4b93      	ldr	r3, [pc, #588]	; (8008b70 <MP_Update+0x358>)
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	ee07 3a90 	vmov	s15, r3
 8008928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800892c:	eddf 6a94 	vldr	s13, [pc, #592]	; 8008b80 <MP_Update+0x368>
 8008930:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008934:	edc7 7a02 	vstr	s15, [r7, #8]
  float a_y = (((float)imu.accelerometer[Y])/1000.0f);
 8008938:	4b8d      	ldr	r3, [pc, #564]	; (8008b70 <MP_Update+0x358>)
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	ee07 3a90 	vmov	s15, r3
 8008940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008944:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8008b80 <MP_Update+0x368>
 8008948:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800894c:	edc7 7a01 	vstr	s15, [r7, #4]
  float a_z = (((float)imu.accelerometer[Z])/1000.0f);
 8008950:	4b87      	ldr	r3, [pc, #540]	; (8008b70 <MP_Update+0x358>)
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	ee07 3a90 	vmov	s15, r3
 8008958:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800895c:	eddf 6a88 	vldr	s13, [pc, #544]	; 8008b80 <MP_Update+0x368>
 8008960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008964:	edc7 7a08 	vstr	s15, [r7, #32]

  /* tan_phi = a_y / a_z. */

  if( a_z == 0.0f )
 8008968:	edd7 7a08 	vldr	s15, [r7, #32]
 800896c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008974:	d101      	bne.n	800897a <MP_Update+0x162>
  {
	  a_z = 0.0001f;
 8008976:	4b83      	ldr	r3, [pc, #524]	; (8008b84 <MP_Update+0x36c>)
 8008978:	623b      	str	r3, [r7, #32]
  }

  Motion_Processing.accel_roll = RAD_TO_DEG * atan2f(a_y,a_z);
 800897a:	edd7 0a08 	vldr	s1, [r7, #32]
 800897e:	ed97 0a01 	vldr	s0, [r7, #4]
 8008982:	f004 f833 	bl	800c9ec <atan2f>
 8008986:	ee10 3a10 	vmov	r3, s0
 800898a:	4618      	mov	r0, r3
 800898c:	f7f7 fd88 	bl	80004a0 <__aeabi_f2d>
 8008990:	a373      	add	r3, pc, #460	; (adr r3, 8008b60 <MP_Update+0x348>)
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	f7f7 fddb 	bl	8000550 <__aeabi_dmul>
 800899a:	4603      	mov	r3, r0
 800899c:	460c      	mov	r4, r1
 800899e:	4618      	mov	r0, r3
 80089a0:	4621      	mov	r1, r4
 80089a2:	f7f8 f807 	bl	80009b4 <__aeabi_d2f>
 80089a6:	4602      	mov	r2, r0
 80089a8:	4b73      	ldr	r3, [pc, #460]	; (8008b78 <MP_Update+0x360>)
 80089aa:	619a      	str	r2, [r3, #24]

  /* tan_theta (tan pitch) = a_x / sqrt(a_y*a_y + a_z*a_z) */

  temp = a_y*a_y + a_z*a_z;
 80089ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80089b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80089b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80089b8:	edd7 6a08 	vldr	s13, [r7, #32]
 80089bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80089c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  if(temp == 0.0f)
 80089cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80089d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80089d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d8:	d101      	bne.n	80089de <MP_Update+0x1c6>
  {
	  temp = 0.001f;
 80089da:	4b6b      	ldr	r3, [pc, #428]	; (8008b88 <MP_Update+0x370>)
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  temp = sqrtf(temp);
 80089de:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80089e2:	f004 f805 	bl	800c9f0 <sqrtf>
 80089e6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

  Motion_Processing.accel_pitch = -RAD_TO_DEG * atan2f(a_x,temp);
 80089ea:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80089ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80089f2:	f003 fffb 	bl	800c9ec <atan2f>
 80089f6:	ee10 3a10 	vmov	r3, s0
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7f7 fd50 	bl	80004a0 <__aeabi_f2d>
 8008a00:	a359      	add	r3, pc, #356	; (adr r3, 8008b68 <MP_Update+0x350>)
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	f7f7 fda3 	bl	8000550 <__aeabi_dmul>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	4618      	mov	r0, r3
 8008a10:	4621      	mov	r1, r4
 8008a12:	f7f7 ffcf 	bl	80009b4 <__aeabi_d2f>
 8008a16:	4602      	mov	r2, r0
 8008a18:	4b57      	ldr	r3, [pc, #348]	; (8008b78 <MP_Update+0x360>)
 8008a1a:	61da      	str	r2, [r3, #28]

  /* Once calculating roll,pitch and yaw using accelerometer and gyroscope data,
   * proceed to do sensor fusion. */

  temp = Motion_Processing.roll_coeff;
 8008a1c:	4b56      	ldr	r3, [pc, #344]	; (8008b78 <MP_Update+0x360>)
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	627b      	str	r3, [r7, #36]	; 0x24
  Motion_Processing.filter_roll = ( ( temp * Motion_Processing.accel_roll ) + ( 1.0f - temp ) * Motion_Processing.gyro_roll );
 8008a22:	4b55      	ldr	r3, [pc, #340]	; (8008b78 <MP_Update+0x360>)
 8008a24:	ed93 7a06 	vldr	s14, [r3, #24]
 8008a28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a38:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008a3c:	4b4e      	ldr	r3, [pc, #312]	; (8008b78 <MP_Update+0x360>)
 8008a3e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008a42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a4a:	4b4b      	ldr	r3, [pc, #300]	; (8008b78 <MP_Update+0x360>)
 8008a4c:	edc3 7a00 	vstr	s15, [r3]

  temp = Motion_Processing.pitch_coeff;
 8008a50:	4b49      	ldr	r3, [pc, #292]	; (8008b78 <MP_Update+0x360>)
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	627b      	str	r3, [r7, #36]	; 0x24
  Motion_Processing.filter_pitch = ( ( temp * Motion_Processing.accel_pitch ) + ( 1.0f - temp ) * Motion_Processing.gyro_pitch );
 8008a56:	4b48      	ldr	r3, [pc, #288]	; (8008b78 <MP_Update+0x360>)
 8008a58:	ed93 7a07 	vldr	s14, [r3, #28]
 8008a5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a68:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008a70:	4b41      	ldr	r3, [pc, #260]	; (8008b78 <MP_Update+0x360>)
 8008a72:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a7e:	4b3e      	ldr	r3, [pc, #248]	; (8008b78 <MP_Update+0x360>)
 8008a80:	edc3 7a01 	vstr	s15, [r3, #4]

  temp = Motion_Processing.yaw_coeff;
 8008a84:	4b3c      	ldr	r3, [pc, #240]	; (8008b78 <MP_Update+0x360>)
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
  Motion_Processing.filter_yaw = ( ( temp * Motion_Processing.accel_yaw ) + ( 1.0f - temp ) * Motion_Processing.gyro_yaw );
 8008a8a:	4b3b      	ldr	r3, [pc, #236]	; (8008b78 <MP_Update+0x360>)
 8008a8c:	ed93 7a08 	vldr	s14, [r3, #32]
 8008a90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008aa0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008aa4:	4b34      	ldr	r3, [pc, #208]	; (8008b78 <MP_Update+0x360>)
 8008aa6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ab2:	4b31      	ldr	r3, [pc, #196]	; (8008b78 <MP_Update+0x360>)
 8008ab4:	edc3 7a02 	vstr	s15, [r3, #8]

  /* Write updated values to frame. */

  writeToFrame_Roll( Motion_Processing.accel_roll,
 8008ab8:	4b2f      	ldr	r3, [pc, #188]	; (8008b78 <MP_Update+0x360>)
 8008aba:	edd3 7a06 	vldr	s15, [r3, #24]
 8008abe:	4b2e      	ldr	r3, [pc, #184]	; (8008b78 <MP_Update+0x360>)
 8008ac0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8008ac4:	4b2c      	ldr	r3, [pc, #176]	; (8008b78 <MP_Update+0x360>)
 8008ac6:	edd3 6a00 	vldr	s13, [r3]
 8008aca:	eeb0 1a66 	vmov.f32	s2, s13
 8008ace:	eef0 0a47 	vmov.f32	s1, s14
 8008ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ad6:	f7ff fc4f 	bl	8008378 <writeToFrame_Roll>
		             Motion_Processing.gyro_roll,
					 Motion_Processing.filter_roll );

  writeToFrame_Pitch( Motion_Processing.accel_pitch,
 8008ada:	4b27      	ldr	r3, [pc, #156]	; (8008b78 <MP_Update+0x360>)
 8008adc:	edd3 7a07 	vldr	s15, [r3, #28]
 8008ae0:	4b25      	ldr	r3, [pc, #148]	; (8008b78 <MP_Update+0x360>)
 8008ae2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8008ae6:	4b24      	ldr	r3, [pc, #144]	; (8008b78 <MP_Update+0x360>)
 8008ae8:	edd3 6a01 	vldr	s13, [r3, #4]
 8008aec:	eeb0 1a66 	vmov.f32	s2, s13
 8008af0:	eef0 0a47 	vmov.f32	s1, s14
 8008af4:	eeb0 0a67 	vmov.f32	s0, s15
 8008af8:	f7ff fc96 	bl	8008428 <writeToFrame_Pitch>
		              Motion_Processing.gyro_pitch,
					  Motion_Processing.filter_pitch );

  writeToFrame_Yaw(  Motion_Processing.accel_yaw,
 8008afc:	4b1e      	ldr	r3, [pc, #120]	; (8008b78 <MP_Update+0x360>)
 8008afe:	edd3 7a08 	vldr	s15, [r3, #32]
 8008b02:	4b1d      	ldr	r3, [pc, #116]	; (8008b78 <MP_Update+0x360>)
 8008b04:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8008b08:	4b1b      	ldr	r3, [pc, #108]	; (8008b78 <MP_Update+0x360>)
 8008b0a:	edd3 6a02 	vldr	s13, [r3, #8]
 8008b0e:	eeb0 1a66 	vmov.f32	s2, s13
 8008b12:	eef0 0a47 	vmov.f32	s1, s14
 8008b16:	eeb0 0a67 	vmov.f32	s0, s15
 8008b1a:	f7ff fcdd 	bl	80084d8 <writeToFrame_Yaw>
					 Motion_Processing.filter_yaw );

  /* Threshold detection. */

  Motion_Processing.motion_detection.motion_detection_segments.X_vibration_detected =
  ( abs(imu.gyroscope[X]) > Motion_Processing.vibration_threshold[X] );
 8008b1e:	4b14      	ldr	r3, [pc, #80]	; (8008b70 <MP_Update+0x358>)
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	bfb8      	it	lt
 8008b26:	425b      	neglt	r3, r3
 8008b28:	ee07 3a90 	vmov	s15, r3
 8008b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b30:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <MP_Update+0x360>)
 8008b32:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8008b36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b3e:	bfcc      	ite	gt
 8008b40:	2301      	movgt	r3, #1
 8008b42:	2300      	movle	r3, #0
 8008b44:	b2d9      	uxtb	r1, r3
  Motion_Processing.motion_detection.motion_detection_segments.X_vibration_detected =
 8008b46:	4a0c      	ldr	r2, [pc, #48]	; (8008b78 <MP_Update+0x360>)
 8008b48:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8008b4c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008b50:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58

  Motion_Processing.motion_detection.motion_detection_segments.Y_vibration_detected =
  ( abs(imu.gyroscope[Y]) > Motion_Processing.vibration_threshold[Y] );
 8008b54:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <MP_Update+0x358>)
 8008b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bfb8      	it	lt
 8008b5c:	425b      	neglt	r3, r3
 8008b5e:	e015      	b.n	8008b8c <MP_Update+0x374>
 8008b60:	1a63c1f8 	.word	0x1a63c1f8
 8008b64:	404ca5dc 	.word	0x404ca5dc
 8008b68:	1a63c1f8 	.word	0x1a63c1f8
 8008b6c:	c04ca5dc 	.word	0xc04ca5dc
 8008b70:	20000350 	.word	0x20000350
 8008b74:	3a83126f 	.word	0x3a83126f
 8008b78:	2000048c 	.word	0x2000048c
 8008b7c:	3c23d70a 	.word	0x3c23d70a
 8008b80:	447a0000 	.word	0x447a0000
 8008b84:	38d1b717 	.word	0x38d1b717
 8008b88:	3a83126f 	.word	0x3a83126f
 8008b8c:	ee07 3a90 	vmov	s15, r3
 8008b90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b94:	4bb7      	ldr	r3, [pc, #732]	; (8008e74 <MP_Update+0x65c>)
 8008b96:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba2:	bfcc      	ite	gt
 8008ba4:	2301      	movgt	r3, #1
 8008ba6:	2300      	movle	r3, #0
 8008ba8:	b2d9      	uxtb	r1, r3
  Motion_Processing.motion_detection.motion_detection_segments.Y_vibration_detected =
 8008baa:	4ab2      	ldr	r2, [pc, #712]	; (8008e74 <MP_Update+0x65c>)
 8008bac:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8008bb0:	f361 1304 	bfi	r3, r1, #4, #1
 8008bb4:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58

  Motion_Processing.motion_detection.motion_detection_segments.Z_vibration_detected =
  ( abs(imu.gyroscope[Z]) > Motion_Processing.vibration_threshold[Z] );
 8008bb8:	4baf      	ldr	r3, [pc, #700]	; (8008e78 <MP_Update+0x660>)
 8008bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	bfb8      	it	lt
 8008bc0:	425b      	neglt	r3, r3
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008bca:	4baa      	ldr	r3, [pc, #680]	; (8008e74 <MP_Update+0x65c>)
 8008bcc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8008bd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd8:	bfcc      	ite	gt
 8008bda:	2301      	movgt	r3, #1
 8008bdc:	2300      	movle	r3, #0
 8008bde:	b2d9      	uxtb	r1, r3
  Motion_Processing.motion_detection.motion_detection_segments.Z_vibration_detected =
 8008be0:	4aa4      	ldr	r2, [pc, #656]	; (8008e74 <MP_Update+0x65c>)
 8008be2:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8008be6:	f361 1345 	bfi	r3, r1, #5, #1
 8008bea:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58

  Motion_Processing.motion_detection.motion_detection_segments.X_angle_detected =
  ( fabs(Motion_Processing.filter_roll) > Motion_Processing.angle_threshold[X] );
 8008bee:	4ba1      	ldr	r3, [pc, #644]	; (8008e74 <MP_Update+0x65c>)
 8008bf0:	edd3 7a00 	vldr	s15, [r3]
 8008bf4:	eeb0 7ae7 	vabs.f32	s14, s15
 8008bf8:	4b9e      	ldr	r3, [pc, #632]	; (8008e74 <MP_Update+0x65c>)
 8008bfa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008bfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c06:	bfcc      	ite	gt
 8008c08:	2301      	movgt	r3, #1
 8008c0a:	2300      	movle	r3, #0
 8008c0c:	b2d9      	uxtb	r1, r3
  Motion_Processing.motion_detection.motion_detection_segments.X_angle_detected =
 8008c0e:	4a99      	ldr	r2, [pc, #612]	; (8008e74 <MP_Update+0x65c>)
 8008c10:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8008c14:	f361 0300 	bfi	r3, r1, #0, #1
 8008c18:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58

  Motion_Processing.motion_detection.motion_detection_segments.Y_angle_detected =
  ( fabs(Motion_Processing.filter_pitch) > Motion_Processing.angle_threshold[Y] );
 8008c1c:	4b95      	ldr	r3, [pc, #596]	; (8008e74 <MP_Update+0x65c>)
 8008c1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c22:	eeb0 7ae7 	vabs.f32	s14, s15
 8008c26:	4b93      	ldr	r3, [pc, #588]	; (8008e74 <MP_Update+0x65c>)
 8008c28:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008c2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c34:	bfcc      	ite	gt
 8008c36:	2301      	movgt	r3, #1
 8008c38:	2300      	movle	r3, #0
 8008c3a:	b2d9      	uxtb	r1, r3
  Motion_Processing.motion_detection.motion_detection_segments.Y_angle_detected =
 8008c3c:	4a8d      	ldr	r2, [pc, #564]	; (8008e74 <MP_Update+0x65c>)
 8008c3e:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8008c42:	f361 0341 	bfi	r3, r1, #1, #1
 8008c46:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58

  Motion_Processing.motion_detection.motion_detection_segments.Z_angle_detected =
  ( fabs(Motion_Processing.filter_yaw) > Motion_Processing.angle_threshold[Z] );
 8008c4a:	4b8a      	ldr	r3, [pc, #552]	; (8008e74 <MP_Update+0x65c>)
 8008c4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008c50:	eeb0 7ae7 	vabs.f32	s14, s15
 8008c54:	4b87      	ldr	r3, [pc, #540]	; (8008e74 <MP_Update+0x65c>)
 8008c56:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008c5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c62:	bfcc      	ite	gt
 8008c64:	2301      	movgt	r3, #1
 8008c66:	2300      	movle	r3, #0
 8008c68:	b2d9      	uxtb	r1, r3
  Motion_Processing.motion_detection.motion_detection_segments.Z_angle_detected =
 8008c6a:	4a82      	ldr	r2, [pc, #520]	; (8008e74 <MP_Update+0x65c>)
 8008c6c:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8008c70:	f361 0382 	bfi	r3, r1, #2, #1
 8008c74:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58

  /* Load motion detection results into message frames. */

  Motion_Detection_SMF.Motion_Detection_SMF_segments.X_angle_detected =
  Motion_Processing.motion_detection.motion_detection_segments.X_angle_detected;
 8008c78:	4b7e      	ldr	r3, [pc, #504]	; (8008e74 <MP_Update+0x65c>)
 8008c7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008c7e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008c82:	b2d9      	uxtb	r1, r3
  Motion_Detection_SMF.Motion_Detection_SMF_segments.X_angle_detected =
 8008c84:	4a7d      	ldr	r2, [pc, #500]	; (8008e7c <MP_Update+0x664>)
 8008c86:	7813      	ldrb	r3, [r2, #0]
 8008c88:	f361 0300 	bfi	r3, r1, #0, #1
 8008c8c:	7013      	strb	r3, [r2, #0]

  Motion_Detection_SMF.Motion_Detection_SMF_segments.Y_angle_detected =
  Motion_Processing.motion_detection.motion_detection_segments.Y_angle_detected;
 8008c8e:	4b79      	ldr	r3, [pc, #484]	; (8008e74 <MP_Update+0x65c>)
 8008c90:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008c94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008c98:	b2d9      	uxtb	r1, r3
  Motion_Detection_SMF.Motion_Detection_SMF_segments.Y_angle_detected =
 8008c9a:	4a78      	ldr	r2, [pc, #480]	; (8008e7c <MP_Update+0x664>)
 8008c9c:	7813      	ldrb	r3, [r2, #0]
 8008c9e:	f361 0382 	bfi	r3, r1, #2, #1
 8008ca2:	7013      	strb	r3, [r2, #0]

  Motion_Detection_SMF.Motion_Detection_SMF_segments.Z_angle_detected =
  Motion_Processing.motion_detection.motion_detection_segments.Z_angle_detected;
 8008ca4:	4b73      	ldr	r3, [pc, #460]	; (8008e74 <MP_Update+0x65c>)
 8008ca6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008caa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008cae:	b2d9      	uxtb	r1, r3
  Motion_Detection_SMF.Motion_Detection_SMF_segments.Z_angle_detected =
 8008cb0:	4a72      	ldr	r2, [pc, #456]	; (8008e7c <MP_Update+0x664>)
 8008cb2:	7813      	ldrb	r3, [r2, #0]
 8008cb4:	f361 1304 	bfi	r3, r1, #4, #1
 8008cb8:	7013      	strb	r3, [r2, #0]

  Motion_Detection_SMF.Motion_Detection_SMF_segments.X_vibration_detected =
  Motion_Processing.motion_detection.motion_detection_segments.X_vibration_detected;
 8008cba:	4b6e      	ldr	r3, [pc, #440]	; (8008e74 <MP_Update+0x65c>)
 8008cbc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008cc0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008cc4:	b2d9      	uxtb	r1, r3
  Motion_Detection_SMF.Motion_Detection_SMF_segments.X_vibration_detected =
 8008cc6:	4a6d      	ldr	r2, [pc, #436]	; (8008e7c <MP_Update+0x664>)
 8008cc8:	7813      	ldrb	r3, [r2, #0]
 8008cca:	f361 0341 	bfi	r3, r1, #1, #1
 8008cce:	7013      	strb	r3, [r2, #0]

  Motion_Detection_SMF.Motion_Detection_SMF_segments.Y_vibration_detected =
  Motion_Processing.motion_detection.motion_detection_segments.Y_vibration_detected;
 8008cd0:	4b68      	ldr	r3, [pc, #416]	; (8008e74 <MP_Update+0x65c>)
 8008cd2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008cd6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008cda:	b2d9      	uxtb	r1, r3
  Motion_Detection_SMF.Motion_Detection_SMF_segments.Y_vibration_detected =
 8008cdc:	4a67      	ldr	r2, [pc, #412]	; (8008e7c <MP_Update+0x664>)
 8008cde:	7813      	ldrb	r3, [r2, #0]
 8008ce0:	f361 03c3 	bfi	r3, r1, #3, #1
 8008ce4:	7013      	strb	r3, [r2, #0]

  Motion_Detection_SMF.Motion_Detection_SMF_segments.Z_vibration_detected =
  Motion_Processing.motion_detection.motion_detection_segments.Z_vibration_detected;
 8008ce6:	4b63      	ldr	r3, [pc, #396]	; (8008e74 <MP_Update+0x65c>)
 8008ce8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008cec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008cf0:	b2d9      	uxtb	r1, r3
  Motion_Detection_SMF.Motion_Detection_SMF_segments.Z_vibration_detected =
 8008cf2:	4a62      	ldr	r2, [pc, #392]	; (8008e7c <MP_Update+0x664>)
 8008cf4:	7813      	ldrb	r3, [r2, #0]
 8008cf6:	f361 1345 	bfi	r3, r1, #5, #1
 8008cfa:	7013      	strb	r3, [r2, #0]

  /* Update state of LEDs. */

  if( !LED_CNTRL_SMF.LED_CNTRL_SMF_segments.LED_OVRRD )
 8008cfc:	4b60      	ldr	r3, [pc, #384]	; (8008e80 <MP_Update+0x668>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f040 8207 	bne.w	800911a <MP_Update+0x902>
  {


  /* Angle detection. */

  if( LED.LED_parameters.LED1_mode == Angle_detection )
 8008d0c:	4b5d      	ldr	r3, [pc, #372]	; (8008e84 <MP_Update+0x66c>)
 8008d0e:	789b      	ldrb	r3, [r3, #2]
 8008d10:	f023 031f 	bic.w	r3, r3, #31
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10a      	bne.n	8008d30 <MP_Update+0x518>
  {
	 LED.LED_parameters.LED1_state =
	 Motion_Processing.motion_detection.motion_detection_segments.X_angle_detected;
 8008d1a:	4b56      	ldr	r3, [pc, #344]	; (8008e74 <MP_Update+0x65c>)
 8008d1c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008d20:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008d24:	b2d9      	uxtb	r1, r3
	 LED.LED_parameters.LED1_state =
 8008d26:	4a57      	ldr	r2, [pc, #348]	; (8008e84 <MP_Update+0x66c>)
 8008d28:	78d3      	ldrb	r3, [r2, #3]
 8008d2a:	f361 1386 	bfi	r3, r1, #6, #1
 8008d2e:	70d3      	strb	r3, [r2, #3]
  }
  if( LED.LED_parameters.LED2_mode == Angle_detection )
 8008d30:	4b54      	ldr	r3, [pc, #336]	; (8008e84 <MP_Update+0x66c>)
 8008d32:	78db      	ldrb	r3, [r3, #3]
 8008d34:	f003 0307 	and.w	r3, r3, #7
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10a      	bne.n	8008d54 <MP_Update+0x53c>
  {
	 LED.LED_parameters.LED2_state =
	 Motion_Processing.motion_detection.motion_detection_segments.Y_angle_detected;
 8008d3e:	4b4d      	ldr	r3, [pc, #308]	; (8008e74 <MP_Update+0x65c>)
 8008d40:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008d44:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008d48:	b2d9      	uxtb	r1, r3
	 LED.LED_parameters.LED2_state =
 8008d4a:	4a4e      	ldr	r2, [pc, #312]	; (8008e84 <MP_Update+0x66c>)
 8008d4c:	78d3      	ldrb	r3, [r2, #3]
 8008d4e:	f361 13c7 	bfi	r3, r1, #7, #1
 8008d52:	70d3      	strb	r3, [r2, #3]
  }
  if( LED.LED_parameters.LED3_mode == Angle_detection )
 8008d54:	4b4b      	ldr	r3, [pc, #300]	; (8008e84 <MP_Update+0x66c>)
 8008d56:	78db      	ldrb	r3, [r3, #3]
 8008d58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10a      	bne.n	8008d78 <MP_Update+0x560>
  {
	 LED.LED_parameters.LED3_state =
	 Motion_Processing.motion_detection.motion_detection_segments.Z_angle_detected;
 8008d62:	4b44      	ldr	r3, [pc, #272]	; (8008e74 <MP_Update+0x65c>)
 8008d64:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008d68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008d6c:	b2d9      	uxtb	r1, r3
	 LED.LED_parameters.LED3_state =
 8008d6e:	4a45      	ldr	r2, [pc, #276]	; (8008e84 <MP_Update+0x66c>)
 8008d70:	7913      	ldrb	r3, [r2, #4]
 8008d72:	f361 0300 	bfi	r3, r1, #0, #1
 8008d76:	7113      	strb	r3, [r2, #4]
  }

  /* Vibration detection. */

  if( LED.LED_parameters.LED1_mode == Vibration_detection )
 8008d78:	4b42      	ldr	r3, [pc, #264]	; (8008e84 <MP_Update+0x66c>)
 8008d7a:	789b      	ldrb	r3, [r3, #2]
 8008d7c:	f023 031f 	bic.w	r3, r3, #31
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b20      	cmp	r3, #32
 8008d84:	d10a      	bne.n	8008d9c <MP_Update+0x584>
  {
	 LED.LED_parameters.LED1_state =
	 Motion_Processing.motion_detection.motion_detection_segments.X_vibration_detected;
 8008d86:	4b3b      	ldr	r3, [pc, #236]	; (8008e74 <MP_Update+0x65c>)
 8008d88:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008d8c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d90:	b2d9      	uxtb	r1, r3
	 LED.LED_parameters.LED1_state =
 8008d92:	4a3c      	ldr	r2, [pc, #240]	; (8008e84 <MP_Update+0x66c>)
 8008d94:	78d3      	ldrb	r3, [r2, #3]
 8008d96:	f361 1386 	bfi	r3, r1, #6, #1
 8008d9a:	70d3      	strb	r3, [r2, #3]
  }
  if( LED.LED_parameters.LED2_mode == Vibration_detection )
 8008d9c:	4b39      	ldr	r3, [pc, #228]	; (8008e84 <MP_Update+0x66c>)
 8008d9e:	78db      	ldrb	r3, [r3, #3]
 8008da0:	f003 0307 	and.w	r3, r3, #7
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d10a      	bne.n	8008dc0 <MP_Update+0x5a8>
  {
	 LED.LED_parameters.LED2_state =
	 Motion_Processing.motion_detection.motion_detection_segments.Y_vibration_detected;
 8008daa:	4b32      	ldr	r3, [pc, #200]	; (8008e74 <MP_Update+0x65c>)
 8008dac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008db0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008db4:	b2d9      	uxtb	r1, r3
	 LED.LED_parameters.LED2_state =
 8008db6:	4a33      	ldr	r2, [pc, #204]	; (8008e84 <MP_Update+0x66c>)
 8008db8:	78d3      	ldrb	r3, [r2, #3]
 8008dba:	f361 13c7 	bfi	r3, r1, #7, #1
 8008dbe:	70d3      	strb	r3, [r2, #3]
  }
  if( LED.LED_parameters.LED3_mode == Vibration_detection )
 8008dc0:	4b30      	ldr	r3, [pc, #192]	; (8008e84 <MP_Update+0x66c>)
 8008dc2:	78db      	ldrb	r3, [r3, #3]
 8008dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	d10a      	bne.n	8008de4 <MP_Update+0x5cc>
  {
	 LED.LED_parameters.LED3_state =
	 Motion_Processing.motion_detection.motion_detection_segments.Z_vibration_detected;
 8008dce:	4b29      	ldr	r3, [pc, #164]	; (8008e74 <MP_Update+0x65c>)
 8008dd0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008dd4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008dd8:	b2d9      	uxtb	r1, r3
	 LED.LED_parameters.LED3_state =
 8008dda:	4a2a      	ldr	r2, [pc, #168]	; (8008e84 <MP_Update+0x66c>)
 8008ddc:	7913      	ldrb	r3, [r2, #4]
 8008dde:	f361 0300 	bfi	r3, r1, #0, #1
 8008de2:	7113      	strb	r3, [r2, #4]
  /* Obtain sensor full-scale values. */

  uint32_t accel_fs_value;
  uint32_t gyro_fs_value;

  if(imu.sensor_configurations.sensor_configuration_segments.accel_fs_config == ACCEL_FS_2G)
 8008de4:	4b24      	ldr	r3, [pc, #144]	; (8008e78 <MP_Update+0x660>)
 8008de6:	7a1b      	ldrb	r3, [r3, #8]
 8008de8:	f003 0307 	and.w	r3, r3, #7
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d102      	bne.n	8008df8 <MP_Update+0x5e0>
  {
    accel_fs_value = 2000;
 8008df2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008df6:	61fb      	str	r3, [r7, #28]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.accel_fs_config == ACCEL_FS_4G)
 8008df8:	4b1f      	ldr	r3, [pc, #124]	; (8008e78 <MP_Update+0x660>)
 8008dfa:	7a1b      	ldrb	r3, [r3, #8]
 8008dfc:	f003 0307 	and.w	r3, r3, #7
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d102      	bne.n	8008e0c <MP_Update+0x5f4>
  {
    accel_fs_value = 4000;
 8008e06:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008e0a:	61fb      	str	r3, [r7, #28]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.accel_fs_config == ACCEL_FS_8G)
 8008e0c:	4b1a      	ldr	r3, [pc, #104]	; (8008e78 <MP_Update+0x660>)
 8008e0e:	7a1b      	ldrb	r3, [r3, #8]
 8008e10:	f003 0307 	and.w	r3, r3, #7
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d102      	bne.n	8008e20 <MP_Update+0x608>
  {
    accel_fs_value = 8000;
 8008e1a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8008e1e:	61fb      	str	r3, [r7, #28]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.accel_fs_config == ACCEL_FS_16G)
 8008e20:	4b15      	ldr	r3, [pc, #84]	; (8008e78 <MP_Update+0x660>)
 8008e22:	7a1b      	ldrb	r3, [r3, #8]
 8008e24:	f003 0307 	and.w	r3, r3, #7
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d102      	bne.n	8008e34 <MP_Update+0x61c>
  {
    accel_fs_value = 16000;
 8008e2e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8008e32:	61fb      	str	r3, [r7, #28]
  }

  /* Get gyroscope full scale value. */

  if(imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config == GYRO_FS_250DPS)
 8008e34:	4b10      	ldr	r3, [pc, #64]	; (8008e78 <MP_Update+0x660>)
 8008e36:	7a1b      	ldrb	r3, [r3, #8]
 8008e38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <MP_Update+0x62e>
  {
    gyro_fs_value = 250000;
 8008e42:	4b11      	ldr	r3, [pc, #68]	; (8008e88 <MP_Update+0x670>)
 8008e44:	61bb      	str	r3, [r7, #24]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config == GYRO_FS_500DPS)
 8008e46:	4b0c      	ldr	r3, [pc, #48]	; (8008e78 <MP_Update+0x660>)
 8008e48:	7a1b      	ldrb	r3, [r3, #8]
 8008e4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b08      	cmp	r3, #8
 8008e52:	d101      	bne.n	8008e58 <MP_Update+0x640>
  {
    gyro_fs_value = 500000;
 8008e54:	4b0d      	ldr	r3, [pc, #52]	; (8008e8c <MP_Update+0x674>)
 8008e56:	61bb      	str	r3, [r7, #24]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config == GYRO_FS_1000DPS)
 8008e58:	4b07      	ldr	r3, [pc, #28]	; (8008e78 <MP_Update+0x660>)
 8008e5a:	7a1b      	ldrb	r3, [r3, #8]
 8008e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b10      	cmp	r3, #16
 8008e64:	d101      	bne.n	8008e6a <MP_Update+0x652>
  {
    gyro_fs_value = 1000000;
 8008e66:	4b0a      	ldr	r3, [pc, #40]	; (8008e90 <MP_Update+0x678>)
 8008e68:	61bb      	str	r3, [r7, #24]
  }
  if(imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config == GYRO_FS_2000DPS)
 8008e6a:	4b03      	ldr	r3, [pc, #12]	; (8008e78 <MP_Update+0x660>)
 8008e6c:	7a1b      	ldrb	r3, [r3, #8]
 8008e6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e72:	e00f      	b.n	8008e94 <MP_Update+0x67c>
 8008e74:	2000048c 	.word	0x2000048c
 8008e78:	20000350 	.word	0x20000350
 8008e7c:	20000468 	.word	0x20000468
 8008e80:	2000045c 	.word	0x2000045c
 8008e84:	200004fc 	.word	0x200004fc
 8008e88:	0003d090 	.word	0x0003d090
 8008e8c:	0007a120 	.word	0x0007a120
 8008e90:	000f4240 	.word	0x000f4240
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b18      	cmp	r3, #24
 8008e98:	d101      	bne.n	8008e9e <MP_Update+0x686>
  {
    gyro_fs_value = 2000000;
 8008e9a:	4ba2      	ldr	r3, [pc, #648]	; (8009124 <MP_Update+0x90c>)
 8008e9c:	61bb      	str	r3, [r7, #24]
  }


  /* Accelerometer measurement. */

  if( LED.LED_parameters.LED1_mode == Accelerometer_measurement )
 8008e9e:	4ba2      	ldr	r3, [pc, #648]	; (8009128 <MP_Update+0x910>)
 8008ea0:	789b      	ldrb	r3, [r3, #2]
 8008ea2:	f023 031f 	bic.w	r3, r3, #31
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b40      	cmp	r3, #64	; 0x40
 8008eaa:	d12d      	bne.n	8008f08 <MP_Update+0x6f0>
  {
    LED.LED_parameters.LED1_duty = ( fabs( 100.0f * (float)imu.accelerometer[X] ) / (float)accel_fs_value );
 8008eac:	4b9f      	ldr	r3, [pc, #636]	; (800912c <MP_Update+0x914>)
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	ee07 3a90 	vmov	s15, r3
 8008eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008eb8:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8009130 <MP_Update+0x918>
 8008ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ec0:	eef0 7ae7 	vabs.f32	s15, s15
 8008ec4:	ee17 0a90 	vmov	r0, s15
 8008ec8:	f7f7 faea 	bl	80004a0 <__aeabi_f2d>
 8008ecc:	4604      	mov	r4, r0
 8008ece:	460d      	mov	r5, r1
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	ee07 3a90 	vmov	s15, r3
 8008ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eda:	ee17 0a90 	vmov	r0, s15
 8008ede:	f7f7 fadf 	bl	80004a0 <__aeabi_f2d>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	4629      	mov	r1, r5
 8008eea:	f7f7 fc5b 	bl	80007a4 <__aeabi_ddiv>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	460c      	mov	r4, r1
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	f7f7 fd3d 	bl	8000974 <__aeabi_d2uiz>
 8008efa:	4603      	mov	r3, r0
 8008efc:	b2d9      	uxtb	r1, r3
 8008efe:	4a8a      	ldr	r2, [pc, #552]	; (8009128 <MP_Update+0x910>)
 8008f00:	7813      	ldrb	r3, [r2, #0]
 8008f02:	f361 0306 	bfi	r3, r1, #0, #7
 8008f06:	7013      	strb	r3, [r2, #0]
  }
  if( LED.LED_parameters.LED2_mode == Accelerometer_measurement )
 8008f08:	4b87      	ldr	r3, [pc, #540]	; (8009128 <MP_Update+0x910>)
 8008f0a:	78db      	ldrb	r3, [r3, #3]
 8008f0c:	f003 0307 	and.w	r3, r3, #7
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d12d      	bne.n	8008f72 <MP_Update+0x75a>
  {
    LED.LED_parameters.LED2_duty = ( fabs( 100.0f * (float)imu.accelerometer[Y] ) / (float)accel_fs_value );
 8008f16:	4b85      	ldr	r3, [pc, #532]	; (800912c <MP_Update+0x914>)
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	ee07 3a90 	vmov	s15, r3
 8008f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f22:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8009130 <MP_Update+0x918>
 8008f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f2a:	eef0 7ae7 	vabs.f32	s15, s15
 8008f2e:	ee17 0a90 	vmov	r0, s15
 8008f32:	f7f7 fab5 	bl	80004a0 <__aeabi_f2d>
 8008f36:	4604      	mov	r4, r0
 8008f38:	460d      	mov	r5, r1
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	ee07 3a90 	vmov	s15, r3
 8008f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f44:	ee17 0a90 	vmov	r0, s15
 8008f48:	f7f7 faaa 	bl	80004a0 <__aeabi_f2d>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	4620      	mov	r0, r4
 8008f52:	4629      	mov	r1, r5
 8008f54:	f7f7 fc26 	bl	80007a4 <__aeabi_ddiv>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	4621      	mov	r1, r4
 8008f60:	f7f7 fd08 	bl	8000974 <__aeabi_d2uiz>
 8008f64:	4603      	mov	r3, r0
 8008f66:	b2d9      	uxtb	r1, r3
 8008f68:	4a6f      	ldr	r2, [pc, #444]	; (8009128 <MP_Update+0x910>)
 8008f6a:	8813      	ldrh	r3, [r2, #0]
 8008f6c:	f361 13cd 	bfi	r3, r1, #7, #7
 8008f70:	8013      	strh	r3, [r2, #0]
  }
  if( LED.LED_parameters.LED3_mode == Accelerometer_measurement )
 8008f72:	4b6d      	ldr	r3, [pc, #436]	; (8009128 <MP_Update+0x910>)
 8008f74:	78db      	ldrb	r3, [r3, #3]
 8008f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b10      	cmp	r3, #16
 8008f7e:	d12d      	bne.n	8008fdc <MP_Update+0x7c4>
  {
    LED.LED_parameters.LED3_duty = ( fabs( 100.0f * (float)imu.accelerometer[Z] ) / (float)accel_fs_value );
 8008f80:	4b6a      	ldr	r3, [pc, #424]	; (800912c <MP_Update+0x914>)
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	ee07 3a90 	vmov	s15, r3
 8008f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f8c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8009130 <MP_Update+0x918>
 8008f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f94:	eef0 7ae7 	vabs.f32	s15, s15
 8008f98:	ee17 0a90 	vmov	r0, s15
 8008f9c:	f7f7 fa80 	bl	80004a0 <__aeabi_f2d>
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	460d      	mov	r5, r1
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	ee07 3a90 	vmov	s15, r3
 8008faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fae:	ee17 0a90 	vmov	r0, s15
 8008fb2:	f7f7 fa75 	bl	80004a0 <__aeabi_f2d>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4620      	mov	r0, r4
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	f7f7 fbf1 	bl	80007a4 <__aeabi_ddiv>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	460c      	mov	r4, r1
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	4621      	mov	r1, r4
 8008fca:	f7f7 fcd3 	bl	8000974 <__aeabi_d2uiz>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	b2d9      	uxtb	r1, r3
 8008fd2:	4a55      	ldr	r2, [pc, #340]	; (8009128 <MP_Update+0x910>)
 8008fd4:	6813      	ldr	r3, [r2, #0]
 8008fd6:	f361 3394 	bfi	r3, r1, #14, #7
 8008fda:	6013      	str	r3, [r2, #0]
  }

  /* Gyroscope measurement. */

  if( LED.LED_parameters.LED1_mode == Gyroscope_measurement )
 8008fdc:	4b52      	ldr	r3, [pc, #328]	; (8009128 <MP_Update+0x910>)
 8008fde:	789b      	ldrb	r3, [r3, #2]
 8008fe0:	f023 031f 	bic.w	r3, r3, #31
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b60      	cmp	r3, #96	; 0x60
 8008fe8:	d12d      	bne.n	8009046 <MP_Update+0x82e>
  {
    LED.LED_parameters.LED1_duty = ( fabs( 100.0f * (float)imu.gyroscope[X] ) / (float)gyro_fs_value );
 8008fea:	4b50      	ldr	r3, [pc, #320]	; (800912c <MP_Update+0x914>)
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	ee07 3a90 	vmov	s15, r3
 8008ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ff6:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8009130 <MP_Update+0x918>
 8008ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ffe:	eef0 7ae7 	vabs.f32	s15, s15
 8009002:	ee17 0a90 	vmov	r0, s15
 8009006:	f7f7 fa4b 	bl	80004a0 <__aeabi_f2d>
 800900a:	4604      	mov	r4, r0
 800900c:	460d      	mov	r5, r1
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	ee07 3a90 	vmov	s15, r3
 8009014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009018:	ee17 0a90 	vmov	r0, s15
 800901c:	f7f7 fa40 	bl	80004a0 <__aeabi_f2d>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4620      	mov	r0, r4
 8009026:	4629      	mov	r1, r5
 8009028:	f7f7 fbbc 	bl	80007a4 <__aeabi_ddiv>
 800902c:	4603      	mov	r3, r0
 800902e:	460c      	mov	r4, r1
 8009030:	4618      	mov	r0, r3
 8009032:	4621      	mov	r1, r4
 8009034:	f7f7 fc9e 	bl	8000974 <__aeabi_d2uiz>
 8009038:	4603      	mov	r3, r0
 800903a:	b2d9      	uxtb	r1, r3
 800903c:	4a3a      	ldr	r2, [pc, #232]	; (8009128 <MP_Update+0x910>)
 800903e:	7813      	ldrb	r3, [r2, #0]
 8009040:	f361 0306 	bfi	r3, r1, #0, #7
 8009044:	7013      	strb	r3, [r2, #0]
  }
  if( LED.LED_parameters.LED2_mode == Gyroscope_measurement )
 8009046:	4b38      	ldr	r3, [pc, #224]	; (8009128 <MP_Update+0x910>)
 8009048:	78db      	ldrb	r3, [r3, #3]
 800904a:	f003 0307 	and.w	r3, r3, #7
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b03      	cmp	r3, #3
 8009052:	d12d      	bne.n	80090b0 <MP_Update+0x898>
  {
    LED.LED_parameters.LED2_duty = ( fabs( 100.0f * (float)imu.gyroscope[Y] ) / (float)gyro_fs_value );
 8009054:	4b35      	ldr	r3, [pc, #212]	; (800912c <MP_Update+0x914>)
 8009056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009058:	ee07 3a90 	vmov	s15, r3
 800905c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009060:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8009130 <MP_Update+0x918>
 8009064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009068:	eef0 7ae7 	vabs.f32	s15, s15
 800906c:	ee17 0a90 	vmov	r0, s15
 8009070:	f7f7 fa16 	bl	80004a0 <__aeabi_f2d>
 8009074:	4604      	mov	r4, r0
 8009076:	460d      	mov	r5, r1
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	ee07 3a90 	vmov	s15, r3
 800907e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009082:	ee17 0a90 	vmov	r0, s15
 8009086:	f7f7 fa0b 	bl	80004a0 <__aeabi_f2d>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4620      	mov	r0, r4
 8009090:	4629      	mov	r1, r5
 8009092:	f7f7 fb87 	bl	80007a4 <__aeabi_ddiv>
 8009096:	4603      	mov	r3, r0
 8009098:	460c      	mov	r4, r1
 800909a:	4618      	mov	r0, r3
 800909c:	4621      	mov	r1, r4
 800909e:	f7f7 fc69 	bl	8000974 <__aeabi_d2uiz>
 80090a2:	4603      	mov	r3, r0
 80090a4:	b2d9      	uxtb	r1, r3
 80090a6:	4a20      	ldr	r2, [pc, #128]	; (8009128 <MP_Update+0x910>)
 80090a8:	8813      	ldrh	r3, [r2, #0]
 80090aa:	f361 13cd 	bfi	r3, r1, #7, #7
 80090ae:	8013      	strh	r3, [r2, #0]
  }
  if( LED.LED_parameters.LED3_mode == Gyroscope_measurement )
 80090b0:	4b1d      	ldr	r3, [pc, #116]	; (8009128 <MP_Update+0x910>)
 80090b2:	78db      	ldrb	r3, [r3, #3]
 80090b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b18      	cmp	r3, #24
 80090bc:	d12d      	bne.n	800911a <MP_Update+0x902>
  {
    LED.LED_parameters.LED3_duty = ( fabs( 100.0f * (float)imu.gyroscope[Z] ) / (float)gyro_fs_value );
 80090be:	4b1b      	ldr	r3, [pc, #108]	; (800912c <MP_Update+0x914>)
 80090c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c2:	ee07 3a90 	vmov	s15, r3
 80090c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090ca:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009130 <MP_Update+0x918>
 80090ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090d2:	eef0 7ae7 	vabs.f32	s15, s15
 80090d6:	ee17 0a90 	vmov	r0, s15
 80090da:	f7f7 f9e1 	bl	80004a0 <__aeabi_f2d>
 80090de:	4604      	mov	r4, r0
 80090e0:	460d      	mov	r5, r1
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	ee07 3a90 	vmov	s15, r3
 80090e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ec:	ee17 0a90 	vmov	r0, s15
 80090f0:	f7f7 f9d6 	bl	80004a0 <__aeabi_f2d>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4620      	mov	r0, r4
 80090fa:	4629      	mov	r1, r5
 80090fc:	f7f7 fb52 	bl	80007a4 <__aeabi_ddiv>
 8009100:	4603      	mov	r3, r0
 8009102:	460c      	mov	r4, r1
 8009104:	4618      	mov	r0, r3
 8009106:	4621      	mov	r1, r4
 8009108:	f7f7 fc34 	bl	8000974 <__aeabi_d2uiz>
 800910c:	4603      	mov	r3, r0
 800910e:	b2d9      	uxtb	r1, r3
 8009110:	4a05      	ldr	r2, [pc, #20]	; (8009128 <MP_Update+0x910>)
 8009112:	6813      	ldr	r3, [r2, #0]
 8009114:	f361 3394 	bfi	r3, r1, #14, #7
 8009118:	6013      	str	r3, [r2, #0]
  }
  }

  //LED_Update();
}
 800911a:	bf00      	nop
 800911c:	3728      	adds	r7, #40	; 0x28
 800911e:	46bd      	mov	sp, r7
 8009120:	bdb0      	pop	{r4, r5, r7, pc}
 8009122:	bf00      	nop
 8009124:	001e8480 	.word	0x001e8480
 8009128:	200004fc 	.word	0x200004fc
 800912c:	20000350 	.word	0x20000350
 8009130:	42c80000 	.word	0x42c80000

08009134 <verifyChecksum>:
uint32_t pSMFs[PM_nFrames];

uint32_t PM_SMFPRI[4];  // Standard message frame priority.

static uint8_t verifyChecksum(uint8_t* buffer)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint16_t checksum = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	81fb      	strh	r3, [r7, #14]

  checksum += (uint16_t)buffer[0];
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	b29a      	uxth	r2, r3
 8009146:	89fb      	ldrh	r3, [r7, #14]
 8009148:	4413      	add	r3, r2
 800914a:	81fb      	strh	r3, [r7, #14]
  checksum += (uint16_t)buffer[1];
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	3301      	adds	r3, #1
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	b29a      	uxth	r2, r3
 8009154:	89fb      	ldrh	r3, [r7, #14]
 8009156:	4413      	add	r3, r2
 8009158:	81fb      	strh	r3, [r7, #14]
  checksum += (uint16_t)buffer[2];
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	3302      	adds	r3, #2
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	b29a      	uxth	r2, r3
 8009162:	89fb      	ldrh	r3, [r7, #14]
 8009164:	4413      	add	r3, r2
 8009166:	81fb      	strh	r3, [r7, #14]
  checksum += (uint16_t)buffer[3];
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	3303      	adds	r3, #3
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	b29a      	uxth	r2, r3
 8009170:	89fb      	ldrh	r3, [r7, #14]
 8009172:	4413      	add	r3, r2
 8009174:	81fb      	strh	r3, [r7, #14]
  checksum += (uint16_t)buffer[4];
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	3304      	adds	r3, #4
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	b29a      	uxth	r2, r3
 800917e:	89fb      	ldrh	r3, [r7, #14]
 8009180:	4413      	add	r3, r2
 8009182:	81fb      	strh	r3, [r7, #14]
  checksum += (uint16_t)buffer[5];
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	3305      	adds	r3, #5
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	b29a      	uxth	r2, r3
 800918c:	89fb      	ldrh	r3, [r7, #14]
 800918e:	4413      	add	r3, r2
 8009190:	81fb      	strh	r3, [r7, #14]

  return((uint8_t)((checksum%255) == 0));
 8009192:	89fa      	ldrh	r2, [r7, #14]
 8009194:	4b09      	ldr	r3, [pc, #36]	; (80091bc <verifyChecksum+0x88>)
 8009196:	fba3 1302 	umull	r1, r3, r3, r2
 800919a:	09d9      	lsrs	r1, r3, #7
 800919c:	460b      	mov	r3, r1
 800919e:	021b      	lsls	r3, r3, #8
 80091a0:	1a5b      	subs	r3, r3, r1
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	bf0c      	ite	eq
 80091aa:	2301      	moveq	r3, #1
 80091ac:	2300      	movne	r3, #0
 80091ae:	b2db      	uxtb	r3, r3
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	80808081 	.word	0x80808081

080091c0 <obtainChecksum>:

static uint8_t obtainChecksum(uint8_t* buffer)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  uint16_t checksum = 0;
 80091c8:	2300      	movs	r3, #0
 80091ca:	81fb      	strh	r3, [r7, #14]

  checksum += (uint16_t)buffer[0];
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	89fb      	ldrh	r3, [r7, #14]
 80091d4:	4413      	add	r3, r2
 80091d6:	81fb      	strh	r3, [r7, #14]
  checksum += (uint16_t)buffer[1];
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3301      	adds	r3, #1
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	b29a      	uxth	r2, r3
 80091e0:	89fb      	ldrh	r3, [r7, #14]
 80091e2:	4413      	add	r3, r2
 80091e4:	81fb      	strh	r3, [r7, #14]
  checksum += (uint16_t)buffer[2];
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	3302      	adds	r3, #2
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	89fb      	ldrh	r3, [r7, #14]
 80091f0:	4413      	add	r3, r2
 80091f2:	81fb      	strh	r3, [r7, #14]
  checksum += (uint16_t)buffer[3];
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	3303      	adds	r3, #3
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	89fb      	ldrh	r3, [r7, #14]
 80091fe:	4413      	add	r3, r2
 8009200:	81fb      	strh	r3, [r7, #14]
  checksum += (uint16_t)buffer[4];
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	3304      	adds	r3, #4
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	b29a      	uxth	r2, r3
 800920a:	89fb      	ldrh	r3, [r7, #14]
 800920c:	4413      	add	r3, r2
 800920e:	81fb      	strh	r3, [r7, #14]
  checksum = ( 255 - (checksum%255) );
 8009210:	89fa      	ldrh	r2, [r7, #14]
 8009212:	4b0a      	ldr	r3, [pc, #40]	; (800923c <obtainChecksum+0x7c>)
 8009214:	fba3 1302 	umull	r1, r3, r3, r2
 8009218:	09d9      	lsrs	r1, r3, #7
 800921a:	460b      	mov	r3, r1
 800921c:	021b      	lsls	r3, r3, #8
 800921e:	1a5b      	subs	r3, r3, r1
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	b29b      	uxth	r3, r3
 8009224:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8009228:	81fb      	strh	r3, [r7, #14]

  return(checksum);
 800922a:	89fb      	ldrh	r3, [r7, #14]
 800922c:	b2db      	uxtb	r3, r3
}
 800922e:	4618      	mov	r0, r3
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	80808081 	.word	0x80808081

08009240 <PM_getMsgFramePriority>:

  PM_SMFPRI[ frame_ID >> 5 ] |= ( priority << ( frame_ID % 32 ) );
}

PM_SMF_Priority PM_getMsgFramePriority(uint8_t frame_ID)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	71fb      	strb	r3, [r7, #7]
  uint32_t index = (frame_ID % 32);
 800924a:	79fb      	ldrb	r3, [r7, #7]
 800924c:	f003 031f 	and.w	r3, r3, #31
 8009250:	60fb      	str	r3, [r7, #12]

  return( (PM_SMF_Priority)( ( PM_SMFPRI[ frame_ID >> 5 ] & ( 1 << index ) ) >> index ) );
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	095b      	lsrs	r3, r3, #5
 8009256:	b2db      	uxtb	r3, r3
 8009258:	461a      	mov	r2, r3
 800925a:	4b09      	ldr	r3, [pc, #36]	; (8009280 <PM_getMsgFramePriority+0x40>)
 800925c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009260:	2101      	movs	r1, #1
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	fa01 f202 	lsl.w	r2, r1, r2
 8009268:	401a      	ands	r2, r3
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	fa22 f303 	lsr.w	r3, r2, r3
 8009270:	b2db      	uxtb	r3, r3
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	20000768 	.word	0x20000768

08009284 <PM_Init>:

void PM_Init(){
 8009284:	b480      	push	{r7}
 8009286:	af00      	add	r7, sp, #0

  pSMFs[0] = (uint32_t)&GUI_SMF;
 8009288:	4a49      	ldr	r2, [pc, #292]	; (80093b0 <PM_Init+0x12c>)
 800928a:	4b4a      	ldr	r3, [pc, #296]	; (80093b4 <PM_Init+0x130>)
 800928c:	601a      	str	r2, [r3, #0]
  pSMFs[1] = (uint32_t)&LED_CNTRL_SMF;
 800928e:	4a4a      	ldr	r2, [pc, #296]	; (80093b8 <PM_Init+0x134>)
 8009290:	4b48      	ldr	r3, [pc, #288]	; (80093b4 <PM_Init+0x130>)
 8009292:	605a      	str	r2, [r3, #4]
  pSMFs[2] = (uint32_t)&IMU_X_Raw_SMF;
 8009294:	4a49      	ldr	r2, [pc, #292]	; (80093bc <PM_Init+0x138>)
 8009296:	4b47      	ldr	r3, [pc, #284]	; (80093b4 <PM_Init+0x130>)
 8009298:	609a      	str	r2, [r3, #8]
  pSMFs[3] = (uint32_t)&IMU_Y_Raw_SMF;
 800929a:	4a49      	ldr	r2, [pc, #292]	; (80093c0 <PM_Init+0x13c>)
 800929c:	4b45      	ldr	r3, [pc, #276]	; (80093b4 <PM_Init+0x130>)
 800929e:	60da      	str	r2, [r3, #12]
  pSMFs[4] = (uint32_t)&IMU_Z_Raw_SMF;
 80092a0:	4a48      	ldr	r2, [pc, #288]	; (80093c4 <PM_Init+0x140>)
 80092a2:	4b44      	ldr	r3, [pc, #272]	; (80093b4 <PM_Init+0x130>)
 80092a4:	611a      	str	r2, [r3, #16]
  pSMFs[5] = (uint32_t)&IMU_Temp_SMF;
 80092a6:	4a48      	ldr	r2, [pc, #288]	; (80093c8 <PM_Init+0x144>)
 80092a8:	4b42      	ldr	r3, [pc, #264]	; (80093b4 <PM_Init+0x130>)
 80092aa:	615a      	str	r2, [r3, #20]
  pSMFs[6] = (uint32_t)&IMU_XACCEL_Processed_SMF;
 80092ac:	4a47      	ldr	r2, [pc, #284]	; (80093cc <PM_Init+0x148>)
 80092ae:	4b41      	ldr	r3, [pc, #260]	; (80093b4 <PM_Init+0x130>)
 80092b0:	619a      	str	r2, [r3, #24]
  pSMFs[7] = (uint32_t)&IMU_YACCEL_Processed_SMF;
 80092b2:	4a47      	ldr	r2, [pc, #284]	; (80093d0 <PM_Init+0x14c>)
 80092b4:	4b3f      	ldr	r3, [pc, #252]	; (80093b4 <PM_Init+0x130>)
 80092b6:	61da      	str	r2, [r3, #28]
  pSMFs[8] = (uint32_t)&IMU_ZACCEL_Processed_SMF;
 80092b8:	4a46      	ldr	r2, [pc, #280]	; (80093d4 <PM_Init+0x150>)
 80092ba:	4b3e      	ldr	r3, [pc, #248]	; (80093b4 <PM_Init+0x130>)
 80092bc:	621a      	str	r2, [r3, #32]
  pSMFs[9] = (uint32_t)&IMU_XGYRO_Processed_SMF;
 80092be:	4a46      	ldr	r2, [pc, #280]	; (80093d8 <PM_Init+0x154>)
 80092c0:	4b3c      	ldr	r3, [pc, #240]	; (80093b4 <PM_Init+0x130>)
 80092c2:	625a      	str	r2, [r3, #36]	; 0x24
  pSMFs[10] = (uint32_t)&IMU_YGYRO_Processed_SMF;
 80092c4:	4a45      	ldr	r2, [pc, #276]	; (80093dc <PM_Init+0x158>)
 80092c6:	4b3b      	ldr	r3, [pc, #236]	; (80093b4 <PM_Init+0x130>)
 80092c8:	629a      	str	r2, [r3, #40]	; 0x28
  pSMFs[11] = (uint32_t)&IMU_ZGYRO_Processed_SMF;
 80092ca:	4a45      	ldr	r2, [pc, #276]	; (80093e0 <PM_Init+0x15c>)
 80092cc:	4b39      	ldr	r3, [pc, #228]	; (80093b4 <PM_Init+0x130>)
 80092ce:	62da      	str	r2, [r3, #44]	; 0x2c
  pSMFs[12] = (uint32_t)&Roll_SMF;
 80092d0:	4a44      	ldr	r2, [pc, #272]	; (80093e4 <PM_Init+0x160>)
 80092d2:	4b38      	ldr	r3, [pc, #224]	; (80093b4 <PM_Init+0x130>)
 80092d4:	631a      	str	r2, [r3, #48]	; 0x30
  pSMFs[13] = (uint32_t)&Pitch_SMF;
 80092d6:	4a44      	ldr	r2, [pc, #272]	; (80093e8 <PM_Init+0x164>)
 80092d8:	4b36      	ldr	r3, [pc, #216]	; (80093b4 <PM_Init+0x130>)
 80092da:	635a      	str	r2, [r3, #52]	; 0x34
  pSMFs[14] = (uint32_t)&Yaw_SMF;
 80092dc:	4a43      	ldr	r2, [pc, #268]	; (80093ec <PM_Init+0x168>)
 80092de:	4b35      	ldr	r3, [pc, #212]	; (80093b4 <PM_Init+0x130>)
 80092e0:	639a      	str	r2, [r3, #56]	; 0x38
  pSMFs[15] = (uint32_t)&CF_coeff_SMF;
 80092e2:	4a43      	ldr	r2, [pc, #268]	; (80093f0 <PM_Init+0x16c>)
 80092e4:	4b33      	ldr	r3, [pc, #204]	; (80093b4 <PM_Init+0x130>)
 80092e6:	63da      	str	r2, [r3, #60]	; 0x3c
  pSMFs[16] = (uint32_t)&IMU_settings_SMF;
 80092e8:	4a42      	ldr	r2, [pc, #264]	; (80093f4 <PM_Init+0x170>)
 80092ea:	4b32      	ldr	r3, [pc, #200]	; (80093b4 <PM_Init+0x130>)
 80092ec:	641a      	str	r2, [r3, #64]	; 0x40
  pSMFs[17] = (uint32_t)&IMU_CALIB_XACCEL_Offset_SMF;
 80092ee:	4a42      	ldr	r2, [pc, #264]	; (80093f8 <PM_Init+0x174>)
 80092f0:	4b30      	ldr	r3, [pc, #192]	; (80093b4 <PM_Init+0x130>)
 80092f2:	645a      	str	r2, [r3, #68]	; 0x44
  pSMFs[18] = (uint32_t)&IMU_CALIB_YACCEL_Offset_SMF;
 80092f4:	4a41      	ldr	r2, [pc, #260]	; (80093fc <PM_Init+0x178>)
 80092f6:	4b2f      	ldr	r3, [pc, #188]	; (80093b4 <PM_Init+0x130>)
 80092f8:	649a      	str	r2, [r3, #72]	; 0x48
  pSMFs[19] = (uint32_t)&IMU_CALIB_ZACCEL_Offset_SMF;
 80092fa:	4a41      	ldr	r2, [pc, #260]	; (8009400 <PM_Init+0x17c>)
 80092fc:	4b2d      	ldr	r3, [pc, #180]	; (80093b4 <PM_Init+0x130>)
 80092fe:	64da      	str	r2, [r3, #76]	; 0x4c
  pSMFs[20] = (uint32_t)&IMU_CALIB_XGYRO_Offset_SMF;
 8009300:	4a40      	ldr	r2, [pc, #256]	; (8009404 <PM_Init+0x180>)
 8009302:	4b2c      	ldr	r3, [pc, #176]	; (80093b4 <PM_Init+0x130>)
 8009304:	651a      	str	r2, [r3, #80]	; 0x50
  pSMFs[21] = (uint32_t)&IMU_CALIB_YGYRO_Offset_SMF;
 8009306:	4a40      	ldr	r2, [pc, #256]	; (8009408 <PM_Init+0x184>)
 8009308:	4b2a      	ldr	r3, [pc, #168]	; (80093b4 <PM_Init+0x130>)
 800930a:	655a      	str	r2, [r3, #84]	; 0x54
  pSMFs[22] = (uint32_t)&IMU_CALIB_ZGYRO_Offset_SMF;
 800930c:	4a3f      	ldr	r2, [pc, #252]	; (800940c <PM_Init+0x188>)
 800930e:	4b29      	ldr	r3, [pc, #164]	; (80093b4 <PM_Init+0x130>)
 8009310:	659a      	str	r2, [r3, #88]	; 0x58
  pSMFs[23] = (uint32_t)&IMU_CALIB_XGYRO_bias_drift_SMF;
 8009312:	4a3f      	ldr	r2, [pc, #252]	; (8009410 <PM_Init+0x18c>)
 8009314:	4b27      	ldr	r3, [pc, #156]	; (80093b4 <PM_Init+0x130>)
 8009316:	65da      	str	r2, [r3, #92]	; 0x5c
  pSMFs[24] = (uint32_t)&IMU_CALIB_YGYRO_bias_drift_SMF;
 8009318:	4a3e      	ldr	r2, [pc, #248]	; (8009414 <PM_Init+0x190>)
 800931a:	4b26      	ldr	r3, [pc, #152]	; (80093b4 <PM_Init+0x130>)
 800931c:	661a      	str	r2, [r3, #96]	; 0x60
  pSMFs[25] = (uint32_t)&IMU_CALIB_ZGYRO_bias_drift_SMF;
 800931e:	4a3e      	ldr	r2, [pc, #248]	; (8009418 <PM_Init+0x194>)
 8009320:	4b24      	ldr	r3, [pc, #144]	; (80093b4 <PM_Init+0x130>)
 8009322:	665a      	str	r2, [r3, #100]	; 0x64
  pSMFs[26] = (uint32_t)&MDT_X_SMF;
 8009324:	4a3d      	ldr	r2, [pc, #244]	; (800941c <PM_Init+0x198>)
 8009326:	4b23      	ldr	r3, [pc, #140]	; (80093b4 <PM_Init+0x130>)
 8009328:	669a      	str	r2, [r3, #104]	; 0x68
  pSMFs[27] = (uint32_t)&MDT_Y_SMF;
 800932a:	4a3d      	ldr	r2, [pc, #244]	; (8009420 <PM_Init+0x19c>)
 800932c:	4b21      	ldr	r3, [pc, #132]	; (80093b4 <PM_Init+0x130>)
 800932e:	66da      	str	r2, [r3, #108]	; 0x6c
  pSMFs[28] = (uint32_t)&MDT_Z_SMF;
 8009330:	4a3c      	ldr	r2, [pc, #240]	; (8009424 <PM_Init+0x1a0>)
 8009332:	4b20      	ldr	r3, [pc, #128]	; (80093b4 <PM_Init+0x130>)
 8009334:	671a      	str	r2, [r3, #112]	; 0x70
  pSMFs[29] = (uint32_t)&Motion_Detection_SMF;
 8009336:	4a3c      	ldr	r2, [pc, #240]	; (8009428 <PM_Init+0x1a4>)
 8009338:	4b1e      	ldr	r3, [pc, #120]	; (80093b4 <PM_Init+0x130>)
 800933a:	675a      	str	r2, [r3, #116]	; 0x74
  pSMFs[30] = (uint32_t)&IMU_calibration_SMF;
 800933c:	4a3b      	ldr	r2, [pc, #236]	; (800942c <PM_Init+0x1a8>)
 800933e:	4b1d      	ldr	r3, [pc, #116]	; (80093b4 <PM_Init+0x130>)
 8009340:	679a      	str	r2, [r3, #120]	; 0x78
  pSMFs[31] = (uint32_t)&Task_counter_SMF;
 8009342:	4a3b      	ldr	r2, [pc, #236]	; (8009430 <PM_Init+0x1ac>)
 8009344:	4b1b      	ldr	r3, [pc, #108]	; (80093b4 <PM_Init+0x130>)
 8009346:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set frame priorities of all frames to low. */

  PM_SMFPRI[0] = 0;
 8009348:	4b3a      	ldr	r3, [pc, #232]	; (8009434 <PM_Init+0x1b0>)
 800934a:	2200      	movs	r2, #0
 800934c:	601a      	str	r2, [r3, #0]
  PM_SMFPRI[1] = 0;
 800934e:	4b39      	ldr	r3, [pc, #228]	; (8009434 <PM_Init+0x1b0>)
 8009350:	2200      	movs	r2, #0
 8009352:	605a      	str	r2, [r3, #4]
  PM_SMFPRI[2] = 0;
 8009354:	4b37      	ldr	r3, [pc, #220]	; (8009434 <PM_Init+0x1b0>)
 8009356:	2200      	movs	r2, #0
 8009358:	609a      	str	r2, [r3, #8]
  PM_SMFPRI[3] = 0;
 800935a:	4b36      	ldr	r3, [pc, #216]	; (8009434 <PM_Init+0x1b0>)
 800935c:	2200      	movs	r2, #0
 800935e:	60da      	str	r2, [r3, #12]

  /* Setting transfer mode to standard message frame transfer. */

  TMC.TMC_segments.BTR_ENSTAT = 0;
 8009360:	4a35      	ldr	r2, [pc, #212]	; (8009438 <PM_Init+0x1b4>)
 8009362:	7893      	ldrb	r3, [r2, #2]
 8009364:	f36f 1347 	bfc	r3, #5, #3
 8009368:	7093      	strb	r3, [r2, #2]
  TMC.TMC_segments.FTOR_ENSTAT = 0;
 800936a:	4a33      	ldr	r2, [pc, #204]	; (8009438 <PM_Init+0x1b4>)
 800936c:	7893      	ldrb	r3, [r2, #2]
 800936e:	f36f 1304 	bfc	r3, #4, #1
 8009372:	7093      	strb	r3, [r2, #2]
  TMC.TMC_segments.SFT_ENSTAT = 1;
 8009374:	4a30      	ldr	r2, [pc, #192]	; (8009438 <PM_Init+0x1b4>)
 8009376:	7893      	ldrb	r3, [r2, #2]
 8009378:	f043 0308 	orr.w	r3, r3, #8
 800937c:	7093      	strb	r3, [r2, #2]
//  Application specific initializations for standard message frames
//  should be made after this section.


  IMU_settings_SMF.IMU_settings_SMF_segments.GYRO_FS
  = imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config;
 800937e:	4b2f      	ldr	r3, [pc, #188]	; (800943c <PM_Init+0x1b8>)
 8009380:	7a1b      	ldrb	r3, [r3, #8]
 8009382:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8009386:	b2d9      	uxtb	r1, r3
 8009388:	4a1a      	ldr	r2, [pc, #104]	; (80093f4 <PM_Init+0x170>)
 800938a:	7813      	ldrb	r3, [r2, #0]
 800938c:	f361 1306 	bfi	r3, r1, #4, #3
 8009390:	7013      	strb	r3, [r2, #0]

  IMU_settings_SMF.IMU_settings_SMF_segments.ACCEL_FS
  = imu.sensor_configurations.sensor_configuration_segments.accel_fs_config;
 8009392:	4b2a      	ldr	r3, [pc, #168]	; (800943c <PM_Init+0x1b8>)
 8009394:	7a1b      	ldrb	r3, [r3, #8]
 8009396:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800939a:	b2d9      	uxtb	r1, r3
 800939c:	4a15      	ldr	r2, [pc, #84]	; (80093f4 <PM_Init+0x170>)
 800939e:	8813      	ldrh	r3, [r2, #0]
 80093a0:	f361 13c9 	bfi	r3, r1, #7, #3
 80093a4:	8013      	strh	r3, [r2, #0]
}
 80093a6:	bf00      	nop
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	20000510 	.word	0x20000510
 80093b4:	20000614 	.word	0x20000614
 80093b8:	2000045c 	.word	0x2000045c
 80093bc:	200004f0 	.word	0x200004f0
 80093c0:	20000504 	.word	0x20000504
 80093c4:	200003a0 	.word	0x200003a0
 80093c8:	20000470 	.word	0x20000470
 80093cc:	200003cc 	.word	0x200003cc
 80093d0:	200004f4 	.word	0x200004f4
 80093d4:	20000474 	.word	0x20000474
 80093d8:	2000040c 	.word	0x2000040c
 80093dc:	2000046c 	.word	0x2000046c
 80093e0:	20000410 	.word	0x20000410
 80093e4:	20000514 	.word	0x20000514
 80093e8:	20000148 	.word	0x20000148
 80093ec:	200003b4 	.word	0x200003b4
 80093f0:	20000144 	.word	0x20000144
 80093f4:	20000484 	.word	0x20000484
 80093f8:	200005a8 	.word	0x200005a8
 80093fc:	20000480 	.word	0x20000480
 8009400:	2000059c 	.word	0x2000059c
 8009404:	20000464 	.word	0x20000464
 8009408:	20000150 	.word	0x20000150
 800940c:	200003bc 	.word	0x200003bc
 8009410:	20000488 	.word	0x20000488
 8009414:	20000140 	.word	0x20000140
 8009418:	20000460 	.word	0x20000460
 800941c:	2000041c 	.word	0x2000041c
 8009420:	200003c4 	.word	0x200003c4
 8009424:	200003a4 	.word	0x200003a4
 8009428:	20000468 	.word	0x20000468
 800942c:	200004f8 	.word	0x200004f8
 8009430:	200005ac 	.word	0x200005ac
 8009434:	20000768 	.word	0x20000768
 8009438:	200004ec 	.word	0x200004ec
 800943c:	20000350 	.word	0x20000350

08009440 <PM_push_transmit_buffer>:



static void PM_push_transmit_buffer(uint8_t* buffer, uint16_t startPosition)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	460b      	mov	r3, r1
 800944a:	807b      	strh	r3, [r7, #2]
  PM_SMF_Transmit_Buffer[startPosition+0] = buffer[0];
 800944c:	887b      	ldrh	r3, [r7, #2]
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	7811      	ldrb	r1, [r2, #0]
 8009452:	4a13      	ldr	r2, [pc, #76]	; (80094a0 <PM_push_transmit_buffer+0x60>)
 8009454:	54d1      	strb	r1, [r2, r3]
  PM_SMF_Transmit_Buffer[startPosition+1] = buffer[1];
 8009456:	887b      	ldrh	r3, [r7, #2]
 8009458:	3301      	adds	r3, #1
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	7851      	ldrb	r1, [r2, #1]
 800945e:	4a10      	ldr	r2, [pc, #64]	; (80094a0 <PM_push_transmit_buffer+0x60>)
 8009460:	54d1      	strb	r1, [r2, r3]
  PM_SMF_Transmit_Buffer[startPosition+2] = buffer[2];
 8009462:	887b      	ldrh	r3, [r7, #2]
 8009464:	3302      	adds	r3, #2
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	7891      	ldrb	r1, [r2, #2]
 800946a:	4a0d      	ldr	r2, [pc, #52]	; (80094a0 <PM_push_transmit_buffer+0x60>)
 800946c:	54d1      	strb	r1, [r2, r3]
  PM_SMF_Transmit_Buffer[startPosition+3] = buffer[3];
 800946e:	887b      	ldrh	r3, [r7, #2]
 8009470:	3303      	adds	r3, #3
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	78d1      	ldrb	r1, [r2, #3]
 8009476:	4a0a      	ldr	r2, [pc, #40]	; (80094a0 <PM_push_transmit_buffer+0x60>)
 8009478:	54d1      	strb	r1, [r2, r3]
  PM_SMF_Transmit_Buffer[startPosition+4] = buffer[4];
 800947a:	887b      	ldrh	r3, [r7, #2]
 800947c:	3304      	adds	r3, #4
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	7911      	ldrb	r1, [r2, #4]
 8009482:	4a07      	ldr	r2, [pc, #28]	; (80094a0 <PM_push_transmit_buffer+0x60>)
 8009484:	54d1      	strb	r1, [r2, r3]
  PM_SMF_Transmit_Buffer[startPosition+5] = buffer[5];
 8009486:	887b      	ldrh	r3, [r7, #2]
 8009488:	3305      	adds	r3, #5
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	7951      	ldrb	r1, [r2, #5]
 800948e:	4a04      	ldr	r2, [pc, #16]	; (80094a0 <PM_push_transmit_buffer+0x60>)
 8009490:	54d1      	strb	r1, [r2, r3]
}
 8009492:	bf00      	nop
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	200006a0 	.word	0x200006a0

080094a4 <PM_SMF_Tx_Handler>:

void PM_SMF_Tx_Handler()
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b086      	sub	sp, #24
 80094a8:	af00      	add	r7, sp, #0
  /* Scheduler counter. */

  uint32_t PM_SMF_Transmit_Event = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	617b      	str	r3, [r7, #20]

  for( int i = 0 ; i < PM_nTransmitEvents ; i++ )
 80094ae:	2300      	movs	r3, #0
 80094b0:	613b      	str	r3, [r7, #16]
 80094b2:	e024      	b.n	80094fe <PM_SMF_Tx_Handler+0x5a>
  {
    PM_SMF_Transmit_Counter[i]++;
 80094b4:	4ac5      	ldr	r2, [pc, #788]	; (80097cc <PM_SMF_Tx_Handler+0x328>)
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	4413      	add	r3, r2
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	3301      	adds	r3, #1
 80094be:	b2d9      	uxtb	r1, r3
 80094c0:	4ac2      	ldr	r2, [pc, #776]	; (80097cc <PM_SMF_Tx_Handler+0x328>)
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	4413      	add	r3, r2
 80094c6:	460a      	mov	r2, r1
 80094c8:	701a      	strb	r2, [r3, #0]

    if(PM_SMF_Transmit_Counter[i] >= PM_SMF_Transmit_Counter_Limit[i] )
 80094ca:	4ac0      	ldr	r2, [pc, #768]	; (80097cc <PM_SMF_Tx_Handler+0x328>)
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	4413      	add	r3, r2
 80094d0:	781a      	ldrb	r2, [r3, #0]
 80094d2:	49bf      	ldr	r1, [pc, #764]	; (80097d0 <PM_SMF_Tx_Handler+0x32c>)
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	440b      	add	r3, r1
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d30c      	bcc.n	80094f8 <PM_SMF_Tx_Handler+0x54>
    {
      PM_SMF_Transmit_Counter[i] = 0;
 80094de:	4abb      	ldr	r2, [pc, #748]	; (80097cc <PM_SMF_Tx_Handler+0x328>)
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	4413      	add	r3, r2
 80094e4:	2200      	movs	r2, #0
 80094e6:	701a      	strb	r2, [r3, #0]
	  PM_SMF_Transmit_Event |= (1 << i);
 80094e8:	2201      	movs	r2, #1
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	fa02 f303 	lsl.w	r3, r2, r3
 80094f0:	461a      	mov	r2, r3
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	617b      	str	r3, [r7, #20]
  for( int i = 0 ; i < PM_nTransmitEvents ; i++ )
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	3301      	adds	r3, #1
 80094fc:	613b      	str	r3, [r7, #16]
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	2b04      	cmp	r3, #4
 8009502:	ddd7      	ble.n	80094b4 <PM_SMF_Tx_Handler+0x10>


  /* Load transmit buffer. */

  uint8_t buffer[6];   // Temporary buffer to frame values.
  uint16_t position = 0;
 8009504:	2300      	movs	r3, #0
 8009506:	81fb      	strh	r3, [r7, #14]
  PM_SMF_Priority priority = LOW;
 8009508:	2300      	movs	r3, #0
 800950a:	737b      	strb	r3, [r7, #13]


  /*  Transmit event 0 */

  if( PM_SMF_Transmit_Event & ( 1 << 0 ) ){
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b00      	cmp	r3, #0
 8009514:	d03b      	beq.n	800958e <PM_SMF_Tx_Handler+0xea>

	priority = PM_getMsgFramePriority(GUI_FID);
 8009516:	2001      	movs	r0, #1
 8009518:	f7ff fe92 	bl	8009240 <PM_getMsgFramePriority>
 800951c:	4603      	mov	r3, r0
 800951e:	737b      	strb	r3, [r7, #13]
    SDCP_encode(&GUI_SMF,GUI_FID,priority,buffer);
 8009520:	1d3b      	adds	r3, r7, #4
 8009522:	7b7a      	ldrb	r2, [r7, #13]
 8009524:	2101      	movs	r1, #1
 8009526:	48ab      	ldr	r0, [pc, #684]	; (80097d4 <PM_SMF_Tx_Handler+0x330>)
 8009528:	f001 fa46 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 800952c:	89fa      	ldrh	r2, [r7, #14]
 800952e:	1d3b      	adds	r3, r7, #4
 8009530:	4611      	mov	r1, r2
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff ff84 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 8009538:	89fb      	ldrh	r3, [r7, #14]
 800953a:	3306      	adds	r3, #6
 800953c:	81fb      	strh	r3, [r7, #14]

    priority = PM_getMsgFramePriority(LED_CNTRL_FID);
 800953e:	2002      	movs	r0, #2
 8009540:	f7ff fe7e 	bl	8009240 <PM_getMsgFramePriority>
 8009544:	4603      	mov	r3, r0
 8009546:	737b      	strb	r3, [r7, #13]
    SDCP_encode(&LED_CNTRL_SMF,LED_CNTRL_FID,priority,buffer);
 8009548:	1d3b      	adds	r3, r7, #4
 800954a:	7b7a      	ldrb	r2, [r7, #13]
 800954c:	2102      	movs	r1, #2
 800954e:	48a2      	ldr	r0, [pc, #648]	; (80097d8 <PM_SMF_Tx_Handler+0x334>)
 8009550:	f001 fa32 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 8009554:	89fa      	ldrh	r2, [r7, #14]
 8009556:	1d3b      	adds	r3, r7, #4
 8009558:	4611      	mov	r1, r2
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff ff70 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 8009560:	89fb      	ldrh	r3, [r7, #14]
 8009562:	3306      	adds	r3, #6
 8009564:	81fb      	strh	r3, [r7, #14]

    priority = PM_getMsgFramePriority(Motion_Detection_FID);
 8009566:	201e      	movs	r0, #30
 8009568:	f7ff fe6a 	bl	8009240 <PM_getMsgFramePriority>
 800956c:	4603      	mov	r3, r0
 800956e:	737b      	strb	r3, [r7, #13]
    SDCP_encode(&Motion_Detection_SMF,Motion_Detection_FID,priority,buffer);
 8009570:	1d3b      	adds	r3, r7, #4
 8009572:	7b7a      	ldrb	r2, [r7, #13]
 8009574:	211e      	movs	r1, #30
 8009576:	4899      	ldr	r0, [pc, #612]	; (80097dc <PM_SMF_Tx_Handler+0x338>)
 8009578:	f001 fa1e 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 800957c:	89fa      	ldrh	r2, [r7, #14]
 800957e:	1d3b      	adds	r3, r7, #4
 8009580:	4611      	mov	r1, r2
 8009582:	4618      	mov	r0, r3
 8009584:	f7ff ff5c 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 8009588:	89fb      	ldrh	r3, [r7, #14]
 800958a:	3306      	adds	r3, #6
 800958c:	81fb      	strh	r3, [r7, #14]
    }

  /*  Transmit event 1 */

  if( PM_SMF_Transmit_Event & ( 1 << 1 ) ){
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f003 0302 	and.w	r3, r3, #2
 8009594:	2b00      	cmp	r3, #0
 8009596:	f000 80b4 	beq.w	8009702 <PM_SMF_Tx_Handler+0x25e>

	priority = PM_getMsgFramePriority(IMU_X_Raw_FID);
 800959a:	2003      	movs	r0, #3
 800959c:	f7ff fe50 	bl	8009240 <PM_getMsgFramePriority>
 80095a0:	4603      	mov	r3, r0
 80095a2:	737b      	strb	r3, [r7, #13]

	SDCP_encode(&IMU_X_Raw_SMF,IMU_X_Raw_FID,priority,buffer);
 80095a4:	1d3b      	adds	r3, r7, #4
 80095a6:	7b7a      	ldrb	r2, [r7, #13]
 80095a8:	2103      	movs	r1, #3
 80095aa:	488d      	ldr	r0, [pc, #564]	; (80097e0 <PM_SMF_Tx_Handler+0x33c>)
 80095ac:	f001 fa04 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 80095b0:	89fa      	ldrh	r2, [r7, #14]
 80095b2:	1d3b      	adds	r3, r7, #4
 80095b4:	4611      	mov	r1, r2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7ff ff42 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 80095bc:	89fb      	ldrh	r3, [r7, #14]
 80095be:	3306      	adds	r3, #6
 80095c0:	81fb      	strh	r3, [r7, #14]

	priority = PM_getMsgFramePriority(IMU_Y_Raw_FID);
 80095c2:	2004      	movs	r0, #4
 80095c4:	f7ff fe3c 	bl	8009240 <PM_getMsgFramePriority>
 80095c8:	4603      	mov	r3, r0
 80095ca:	737b      	strb	r3, [r7, #13]

    SDCP_encode(&IMU_Y_Raw_SMF,IMU_Y_Raw_FID,priority,buffer);
 80095cc:	1d3b      	adds	r3, r7, #4
 80095ce:	7b7a      	ldrb	r2, [r7, #13]
 80095d0:	2104      	movs	r1, #4
 80095d2:	4884      	ldr	r0, [pc, #528]	; (80097e4 <PM_SMF_Tx_Handler+0x340>)
 80095d4:	f001 f9f0 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 80095d8:	89fa      	ldrh	r2, [r7, #14]
 80095da:	1d3b      	adds	r3, r7, #4
 80095dc:	4611      	mov	r1, r2
 80095de:	4618      	mov	r0, r3
 80095e0:	f7ff ff2e 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 80095e4:	89fb      	ldrh	r3, [r7, #14]
 80095e6:	3306      	adds	r3, #6
 80095e8:	81fb      	strh	r3, [r7, #14]

	priority = PM_getMsgFramePriority(IMU_Z_Raw_FID);
 80095ea:	2005      	movs	r0, #5
 80095ec:	f7ff fe28 	bl	8009240 <PM_getMsgFramePriority>
 80095f0:	4603      	mov	r3, r0
 80095f2:	737b      	strb	r3, [r7, #13]

    SDCP_encode(&IMU_Z_Raw_SMF,IMU_Z_Raw_FID,priority,buffer);
 80095f4:	1d3b      	adds	r3, r7, #4
 80095f6:	7b7a      	ldrb	r2, [r7, #13]
 80095f8:	2105      	movs	r1, #5
 80095fa:	487b      	ldr	r0, [pc, #492]	; (80097e8 <PM_SMF_Tx_Handler+0x344>)
 80095fc:	f001 f9dc 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 8009600:	89fa      	ldrh	r2, [r7, #14]
 8009602:	1d3b      	adds	r3, r7, #4
 8009604:	4611      	mov	r1, r2
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff ff1a 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 800960c:	89fb      	ldrh	r3, [r7, #14]
 800960e:	3306      	adds	r3, #6
 8009610:	81fb      	strh	r3, [r7, #14]

	priority = PM_getMsgFramePriority(IMU_XACCEL_Processed_FID);
 8009612:	2007      	movs	r0, #7
 8009614:	f7ff fe14 	bl	8009240 <PM_getMsgFramePriority>
 8009618:	4603      	mov	r3, r0
 800961a:	737b      	strb	r3, [r7, #13]

    SDCP_encode(&IMU_XACCEL_Processed_SMF,IMU_XACCEL_Processed_FID,priority,buffer);
 800961c:	1d3b      	adds	r3, r7, #4
 800961e:	7b7a      	ldrb	r2, [r7, #13]
 8009620:	2107      	movs	r1, #7
 8009622:	4872      	ldr	r0, [pc, #456]	; (80097ec <PM_SMF_Tx_Handler+0x348>)
 8009624:	f001 f9c8 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 8009628:	89fa      	ldrh	r2, [r7, #14]
 800962a:	1d3b      	adds	r3, r7, #4
 800962c:	4611      	mov	r1, r2
 800962e:	4618      	mov	r0, r3
 8009630:	f7ff ff06 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 8009634:	89fb      	ldrh	r3, [r7, #14]
 8009636:	3306      	adds	r3, #6
 8009638:	81fb      	strh	r3, [r7, #14]

	priority = PM_getMsgFramePriority(IMU_YACCEL_Processed_FID);
 800963a:	2008      	movs	r0, #8
 800963c:	f7ff fe00 	bl	8009240 <PM_getMsgFramePriority>
 8009640:	4603      	mov	r3, r0
 8009642:	737b      	strb	r3, [r7, #13]

    SDCP_encode(&IMU_YACCEL_Processed_SMF,IMU_YACCEL_Processed_FID,priority,buffer);
 8009644:	1d3b      	adds	r3, r7, #4
 8009646:	7b7a      	ldrb	r2, [r7, #13]
 8009648:	2108      	movs	r1, #8
 800964a:	4869      	ldr	r0, [pc, #420]	; (80097f0 <PM_SMF_Tx_Handler+0x34c>)
 800964c:	f001 f9b4 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 8009650:	89fa      	ldrh	r2, [r7, #14]
 8009652:	1d3b      	adds	r3, r7, #4
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff fef2 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 800965c:	89fb      	ldrh	r3, [r7, #14]
 800965e:	3306      	adds	r3, #6
 8009660:	81fb      	strh	r3, [r7, #14]

	priority = PM_getMsgFramePriority(IMU_ZACCEL_Processed_FID);
 8009662:	2009      	movs	r0, #9
 8009664:	f7ff fdec 	bl	8009240 <PM_getMsgFramePriority>
 8009668:	4603      	mov	r3, r0
 800966a:	737b      	strb	r3, [r7, #13]

    SDCP_encode(&IMU_ZACCEL_Processed_SMF,IMU_ZACCEL_Processed_FID,priority,buffer);
 800966c:	1d3b      	adds	r3, r7, #4
 800966e:	7b7a      	ldrb	r2, [r7, #13]
 8009670:	2109      	movs	r1, #9
 8009672:	4860      	ldr	r0, [pc, #384]	; (80097f4 <PM_SMF_Tx_Handler+0x350>)
 8009674:	f001 f9a0 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 8009678:	89fa      	ldrh	r2, [r7, #14]
 800967a:	1d3b      	adds	r3, r7, #4
 800967c:	4611      	mov	r1, r2
 800967e:	4618      	mov	r0, r3
 8009680:	f7ff fede 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 8009684:	89fb      	ldrh	r3, [r7, #14]
 8009686:	3306      	adds	r3, #6
 8009688:	81fb      	strh	r3, [r7, #14]

	priority = PM_getMsgFramePriority(IMU_XGYRO_Processed_FID);
 800968a:	200a      	movs	r0, #10
 800968c:	f7ff fdd8 	bl	8009240 <PM_getMsgFramePriority>
 8009690:	4603      	mov	r3, r0
 8009692:	737b      	strb	r3, [r7, #13]

    SDCP_encode(&IMU_XGYRO_Processed_SMF,IMU_XGYRO_Processed_FID,priority,buffer);
 8009694:	1d3b      	adds	r3, r7, #4
 8009696:	7b7a      	ldrb	r2, [r7, #13]
 8009698:	210a      	movs	r1, #10
 800969a:	4857      	ldr	r0, [pc, #348]	; (80097f8 <PM_SMF_Tx_Handler+0x354>)
 800969c:	f001 f98c 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 80096a0:	89fa      	ldrh	r2, [r7, #14]
 80096a2:	1d3b      	adds	r3, r7, #4
 80096a4:	4611      	mov	r1, r2
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff feca 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 80096ac:	89fb      	ldrh	r3, [r7, #14]
 80096ae:	3306      	adds	r3, #6
 80096b0:	81fb      	strh	r3, [r7, #14]

	priority = PM_getMsgFramePriority(IMU_YGYRO_Processed_FID);
 80096b2:	200b      	movs	r0, #11
 80096b4:	f7ff fdc4 	bl	8009240 <PM_getMsgFramePriority>
 80096b8:	4603      	mov	r3, r0
 80096ba:	737b      	strb	r3, [r7, #13]

    SDCP_encode(&IMU_YGYRO_Processed_SMF,IMU_YGYRO_Processed_FID,priority,buffer);
 80096bc:	1d3b      	adds	r3, r7, #4
 80096be:	7b7a      	ldrb	r2, [r7, #13]
 80096c0:	210b      	movs	r1, #11
 80096c2:	484e      	ldr	r0, [pc, #312]	; (80097fc <PM_SMF_Tx_Handler+0x358>)
 80096c4:	f001 f978 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 80096c8:	89fa      	ldrh	r2, [r7, #14]
 80096ca:	1d3b      	adds	r3, r7, #4
 80096cc:	4611      	mov	r1, r2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff feb6 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 80096d4:	89fb      	ldrh	r3, [r7, #14]
 80096d6:	3306      	adds	r3, #6
 80096d8:	81fb      	strh	r3, [r7, #14]

	priority = PM_getMsgFramePriority(IMU_ZGYRO_Processed_FID);
 80096da:	200c      	movs	r0, #12
 80096dc:	f7ff fdb0 	bl	8009240 <PM_getMsgFramePriority>
 80096e0:	4603      	mov	r3, r0
 80096e2:	737b      	strb	r3, [r7, #13]

    SDCP_encode(&IMU_ZGYRO_Processed_SMF,IMU_ZGYRO_Processed_FID,priority,buffer);
 80096e4:	1d3b      	adds	r3, r7, #4
 80096e6:	7b7a      	ldrb	r2, [r7, #13]
 80096e8:	210c      	movs	r1, #12
 80096ea:	4845      	ldr	r0, [pc, #276]	; (8009800 <PM_SMF_Tx_Handler+0x35c>)
 80096ec:	f001 f964 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 80096f0:	89fa      	ldrh	r2, [r7, #14]
 80096f2:	1d3b      	adds	r3, r7, #4
 80096f4:	4611      	mov	r1, r2
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7ff fea2 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 80096fc:	89fb      	ldrh	r3, [r7, #14]
 80096fe:	3306      	adds	r3, #6
 8009700:	81fb      	strh	r3, [r7, #14]
    }

  /*  Transmit event 2 */

  if( PM_SMF_Transmit_Event & ( 1 << 2 ) ){
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f003 0304 	and.w	r3, r3, #4
 8009708:	2b00      	cmp	r3, #0
 800970a:	d013      	beq.n	8009734 <PM_SMF_Tx_Handler+0x290>

    priority = PM_getMsgFramePriority(IMU_Temp_FID);
 800970c:	2006      	movs	r0, #6
 800970e:	f7ff fd97 	bl	8009240 <PM_getMsgFramePriority>
 8009712:	4603      	mov	r3, r0
 8009714:	737b      	strb	r3, [r7, #13]

    SDCP_encode(&IMU_Temp_SMF,IMU_Temp_FID,priority,buffer);
 8009716:	1d3b      	adds	r3, r7, #4
 8009718:	7b7a      	ldrb	r2, [r7, #13]
 800971a:	2106      	movs	r1, #6
 800971c:	4839      	ldr	r0, [pc, #228]	; (8009804 <PM_SMF_Tx_Handler+0x360>)
 800971e:	f001 f94b 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 8009722:	89fa      	ldrh	r2, [r7, #14]
 8009724:	1d3b      	adds	r3, r7, #4
 8009726:	4611      	mov	r1, r2
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff fe89 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 800972e:	89fb      	ldrh	r3, [r7, #14]
 8009730:	3306      	adds	r3, #6
 8009732:	81fb      	strh	r3, [r7, #14]
    }

  /*  Transmit event 4 */

  if( PM_SMF_Transmit_Event & ( 1 << 4 ) ){
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	f003 0310 	and.w	r3, r3, #16
 800973a:	2b00      	cmp	r3, #0
 800973c:	d03b      	beq.n	80097b6 <PM_SMF_Tx_Handler+0x312>

	priority = PM_getMsgFramePriority(Roll_FID);
 800973e:	200d      	movs	r0, #13
 8009740:	f7ff fd7e 	bl	8009240 <PM_getMsgFramePriority>
 8009744:	4603      	mov	r3, r0
 8009746:	737b      	strb	r3, [r7, #13]

    SDCP_encode(&Roll_SMF,Roll_FID,priority,buffer);
 8009748:	1d3b      	adds	r3, r7, #4
 800974a:	7b7a      	ldrb	r2, [r7, #13]
 800974c:	210d      	movs	r1, #13
 800974e:	482e      	ldr	r0, [pc, #184]	; (8009808 <PM_SMF_Tx_Handler+0x364>)
 8009750:	f001 f932 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 8009754:	89fa      	ldrh	r2, [r7, #14]
 8009756:	1d3b      	adds	r3, r7, #4
 8009758:	4611      	mov	r1, r2
 800975a:	4618      	mov	r0, r3
 800975c:	f7ff fe70 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 8009760:	89fb      	ldrh	r3, [r7, #14]
 8009762:	3306      	adds	r3, #6
 8009764:	81fb      	strh	r3, [r7, #14]

	priority = PM_getMsgFramePriority(Pitch_FID);
 8009766:	200e      	movs	r0, #14
 8009768:	f7ff fd6a 	bl	8009240 <PM_getMsgFramePriority>
 800976c:	4603      	mov	r3, r0
 800976e:	737b      	strb	r3, [r7, #13]

    SDCP_encode(&Pitch_SMF,Pitch_FID,priority,buffer);
 8009770:	1d3b      	adds	r3, r7, #4
 8009772:	7b7a      	ldrb	r2, [r7, #13]
 8009774:	210e      	movs	r1, #14
 8009776:	4825      	ldr	r0, [pc, #148]	; (800980c <PM_SMF_Tx_Handler+0x368>)
 8009778:	f001 f91e 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 800977c:	89fa      	ldrh	r2, [r7, #14]
 800977e:	1d3b      	adds	r3, r7, #4
 8009780:	4611      	mov	r1, r2
 8009782:	4618      	mov	r0, r3
 8009784:	f7ff fe5c 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 8009788:	89fb      	ldrh	r3, [r7, #14]
 800978a:	3306      	adds	r3, #6
 800978c:	81fb      	strh	r3, [r7, #14]

	priority = PM_getMsgFramePriority(Yaw_FID);
 800978e:	200f      	movs	r0, #15
 8009790:	f7ff fd56 	bl	8009240 <PM_getMsgFramePriority>
 8009794:	4603      	mov	r3, r0
 8009796:	737b      	strb	r3, [r7, #13]

    SDCP_encode(&Yaw_SMF,Yaw_FID,priority,buffer);
 8009798:	1d3b      	adds	r3, r7, #4
 800979a:	7b7a      	ldrb	r2, [r7, #13]
 800979c:	210f      	movs	r1, #15
 800979e:	481c      	ldr	r0, [pc, #112]	; (8009810 <PM_SMF_Tx_Handler+0x36c>)
 80097a0:	f001 f90a 	bl	800a9b8 <SDCP_encode>
    PM_push_transmit_buffer(buffer,position);
 80097a4:	89fa      	ldrh	r2, [r7, #14]
 80097a6:	1d3b      	adds	r3, r7, #4
 80097a8:	4611      	mov	r1, r2
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff fe48 	bl	8009440 <PM_push_transmit_buffer>
    position += 6;
 80097b0:	89fb      	ldrh	r3, [r7, #14]
 80097b2:	3306      	adds	r3, #6
 80097b4:	81fb      	strh	r3, [r7, #14]
    }

  PM_SMF_Transmit_Event = 0;
 80097b6:	2300      	movs	r3, #0
 80097b8:	617b      	str	r3, [r7, #20]

  UART_DMA_Transmit((uint8_t*)PM_SMF_Transmit_Buffer, position);
 80097ba:	89fb      	ldrh	r3, [r7, #14]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	4619      	mov	r1, r3
 80097c0:	4814      	ldr	r0, [pc, #80]	; (8009814 <PM_SMF_Tx_Handler+0x370>)
 80097c2:	f002 fa55 	bl	800bc70 <UART_DMA_Transmit>
}
 80097c6:	bf00      	nop
 80097c8:	e026      	b.n	8009818 <PM_SMF_Tx_Handler+0x374>
 80097ca:	bf00      	nop
 80097cc:	20000698 	.word	0x20000698
 80097d0:	20000000 	.word	0x20000000
 80097d4:	20000510 	.word	0x20000510
 80097d8:	2000045c 	.word	0x2000045c
 80097dc:	20000468 	.word	0x20000468
 80097e0:	200004f0 	.word	0x200004f0
 80097e4:	20000504 	.word	0x20000504
 80097e8:	200003a0 	.word	0x200003a0
 80097ec:	200003cc 	.word	0x200003cc
 80097f0:	200004f4 	.word	0x200004f4
 80097f4:	20000474 	.word	0x20000474
 80097f8:	2000040c 	.word	0x2000040c
 80097fc:	2000046c 	.word	0x2000046c
 8009800:	20000410 	.word	0x20000410
 8009804:	20000470 	.word	0x20000470
 8009808:	20000514 	.word	0x20000514
 800980c:	20000148 	.word	0x20000148
 8009810:	200003b4 	.word	0x200003b4
 8009814:	200006a0 	.word	0x200006a0
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop

08009820 <PM_Rx_Handler>:


void PM_Rx_Handler()
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
  uint8_t buffer[6] = {1,1,1,1,1,1};
 8009826:	4a37      	ldr	r2, [pc, #220]	; (8009904 <PM_Rx_Handler+0xe4>)
 8009828:	463b      	mov	r3, r7
 800982a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800982e:	6018      	str	r0, [r3, #0]
 8009830:	3304      	adds	r3, #4
 8009832:	8019      	strh	r1, [r3, #0]

  uint8_t queueStatus = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	71fb      	strb	r3, [r7, #7]

  queueStatus = SDCP_RXDQ(buffer);
 8009838:	463b      	mov	r3, r7
 800983a:	4618      	mov	r0, r3
 800983c:	f001 fa94 	bl	800ad68 <SDCP_RXDQ>
 8009840:	4603      	mov	r3, r0
 8009842:	71fb      	strb	r3, [r7, #7]

  /* Check for 6-byte 0 synchronization frame. */

  if(    !buffer[0] && !buffer[1] && !buffer[2]
 8009844:	783b      	ldrb	r3, [r7, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d133      	bne.n	80098b2 <PM_Rx_Handler+0x92>
 800984a:	787b      	ldrb	r3, [r7, #1]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d130      	bne.n	80098b2 <PM_Rx_Handler+0x92>
 8009850:	78bb      	ldrb	r3, [r7, #2]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d12d      	bne.n	80098b2 <PM_Rx_Handler+0x92>
      && !buffer[3] && !buffer[4] && !buffer[5] && queueStatus )
 8009856:	78fb      	ldrb	r3, [r7, #3]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d12a      	bne.n	80098b2 <PM_Rx_Handler+0x92>
 800985c:	793b      	ldrb	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d127      	bne.n	80098b2 <PM_Rx_Handler+0x92>
 8009862:	797b      	ldrb	r3, [r7, #5]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d124      	bne.n	80098b2 <PM_Rx_Handler+0x92>
 8009868:	79fb      	ldrb	r3, [r7, #7]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d021      	beq.n	80098b2 <PM_Rx_Handler+0x92>
  {
    buffer[0] = 0; buffer[1] = 0; buffer[2] = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	703b      	strb	r3, [r7, #0]
 8009872:	2300      	movs	r3, #0
 8009874:	707b      	strb	r3, [r7, #1]
 8009876:	2300      	movs	r3, #0
 8009878:	70bb      	strb	r3, [r7, #2]
    buffer[3] = 0; buffer[4] = 0; buffer[5] = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	70fb      	strb	r3, [r7, #3]
 800987e:	2300      	movs	r3, #0
 8009880:	713b      	strb	r3, [r7, #4]
 8009882:	2300      	movs	r3, #0
 8009884:	717b      	strb	r3, [r7, #5]

    while(!UART.UART_parameters.DMA_Tx_completed);
 8009886:	bf00      	nop
 8009888:	4b1f      	ldr	r3, [pc, #124]	; (8009908 <PM_Rx_Handler+0xe8>)
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	f003 0308 	and.w	r3, r3, #8
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0f8      	beq.n	8009888 <PM_Rx_Handler+0x68>
    UART_DMA_Transmit(buffer,6);
 8009896:	463b      	mov	r3, r7
 8009898:	2106      	movs	r1, #6
 800989a:	4618      	mov	r0, r3
 800989c:	f002 f9e8 	bl	800bc70 <UART_DMA_Transmit>
    while(!UART.UART_parameters.DMA_Tx_completed);
 80098a0:	bf00      	nop
 80098a2:	4b19      	ldr	r3, [pc, #100]	; (8009908 <PM_Rx_Handler+0xe8>)
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	f003 0308 	and.w	r3, r3, #8
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d0f8      	beq.n	80098a2 <PM_Rx_Handler+0x82>
    return;
 80098b0:	e024      	b.n	80098fc <PM_Rx_Handler+0xdc>
  }

  /* Standard message frames have frame IDs from 1 to 240. */

  if( buffer[0] < 248 )
 80098b2:	783b      	ldrb	r3, [r7, #0]
 80098b4:	2bf7      	cmp	r3, #247	; 0xf7
 80098b6:	d803      	bhi.n	80098c0 <PM_Rx_Handler+0xa0>
  {
	 PM_SMF_Rx_Handler(buffer);
 80098b8:	463b      	mov	r3, r7
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 f826 	bl	800990c <PM_SMF_Rx_Handler>
  }

  /* Handler for frame transfer on request. */

  if( ( buffer[0] == 248 ) || (buffer[0] == 249) )
 80098c0:	783b      	ldrb	r3, [r7, #0]
 80098c2:	2bf8      	cmp	r3, #248	; 0xf8
 80098c4:	d002      	beq.n	80098cc <PM_Rx_Handler+0xac>
 80098c6:	783b      	ldrb	r3, [r7, #0]
 80098c8:	2bf9      	cmp	r3, #249	; 0xf9
 80098ca:	d103      	bne.n	80098d4 <PM_Rx_Handler+0xb4>
  {
	  PM_FTOR_Handler(buffer);
 80098cc:	463b      	mov	r3, r7
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 fab8 	bl	8009e44 <PM_FTOR_Handler>
  }

  /* Handler for block transfer control frame. */

  if( ( buffer[0] == 250 ) || ( buffer[0] == 251 ) || ( buffer[0] == 252 ) )
 80098d4:	783b      	ldrb	r3, [r7, #0]
 80098d6:	2bfa      	cmp	r3, #250	; 0xfa
 80098d8:	d005      	beq.n	80098e6 <PM_Rx_Handler+0xc6>
 80098da:	783b      	ldrb	r3, [r7, #0]
 80098dc:	2bfb      	cmp	r3, #251	; 0xfb
 80098de:	d002      	beq.n	80098e6 <PM_Rx_Handler+0xc6>
 80098e0:	783b      	ldrb	r3, [r7, #0]
 80098e2:	2bfc      	cmp	r3, #252	; 0xfc
 80098e4:	d103      	bne.n	80098ee <PM_Rx_Handler+0xce>
  {
	  PM_BTR_Rx_Handler(buffer);
 80098e6:	463b      	mov	r3, r7
 80098e8:	4618      	mov	r0, r3
 80098ea:	f000 fd11 	bl	800a310 <PM_BTR_Rx_Handler>
  }

  /* Handler for transfer mode request and control frame. */

  if( buffer[0] == 254 )
 80098ee:	783b      	ldrb	r3, [r7, #0]
 80098f0:	2bfe      	cmp	r3, #254	; 0xfe
 80098f2:	d103      	bne.n	80098fc <PM_Rx_Handler+0xdc>
  {
	  PM_TMC_Rx_Handler(buffer);
 80098f4:	463b      	mov	r3, r7
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 fbe4 	bl	800a0c4 <PM_TMC_Rx_Handler>
  }
}
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	0800d278 	.word	0x0800d278
 8009908:	20000138 	.word	0x20000138

0800990c <PM_SMF_Rx_Handler>:

void PM_SMF_Rx_Handler(uint8_t* buffer)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08a      	sub	sp, #40	; 0x28
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  /* Verify checksum of received message frame. */

  if( verifyChecksum(buffer) )
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7ff fc0d 	bl	8009134 <verifyChecksum>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 8274 	beq.w	8009e0a <PM_SMF_Rx_Handler+0x4fe>
  {
	/* Case for handling LED update events. */

	if( ( buffer[0] & 127 ) == LED_CNTRL_FID )
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800992a:	2b02      	cmp	r3, #2
 800992c:	f040 8094 	bne.w	8009a58 <PM_SMF_Rx_Handler+0x14c>
	{
	  /* Decode the given message frame. */

	   SDCP_decode(buffer,LED_CNTRL_FID,&LED_CNTRL_SMF);
 8009930:	4ab8      	ldr	r2, [pc, #736]	; (8009c14 <PM_SMF_Rx_Handler+0x308>)
 8009932:	2102      	movs	r1, #2
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f001 f89d 	bl	800aa74 <SDCP_decode>
	   asm("NOP");
 800993a:	bf00      	nop

	   /* If LED over-riding is enabled, discard the values written via MCU
	    * and update from the communication stack. */

	   if( LED_CNTRL_SMF.LED_CNTRL_SMF_segments.LED_OVRRD )
 800993c:	4bb5      	ldr	r3, [pc, #724]	; (8009c14 <PM_SMF_Rx_Handler+0x308>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	f003 0301 	and.w	r3, r3, #1
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 8084 	beq.w	8009a54 <PM_SMF_Rx_Handler+0x148>
	   {
	     LED.LED_parameters.LED1_state = LED_CNTRL_SMF.LED_CNTRL_SMF_segments.XLED_state;
 800994c:	4bb1      	ldr	r3, [pc, #708]	; (8009c14 <PM_SMF_Rx_Handler+0x308>)
 800994e:	785b      	ldrb	r3, [r3, #1]
 8009950:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009954:	b2d9      	uxtb	r1, r3
 8009956:	4ab0      	ldr	r2, [pc, #704]	; (8009c18 <PM_SMF_Rx_Handler+0x30c>)
 8009958:	78d3      	ldrb	r3, [r2, #3]
 800995a:	f361 1386 	bfi	r3, r1, #6, #1
 800995e:	70d3      	strb	r3, [r2, #3]
	     LED.LED_parameters.LED2_state = LED_CNTRL_SMF.LED_CNTRL_SMF_segments.YLED_state;
 8009960:	4bac      	ldr	r3, [pc, #688]	; (8009c14 <PM_SMF_Rx_Handler+0x308>)
 8009962:	785b      	ldrb	r3, [r3, #1]
 8009964:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009968:	b2d9      	uxtb	r1, r3
 800996a:	4aab      	ldr	r2, [pc, #684]	; (8009c18 <PM_SMF_Rx_Handler+0x30c>)
 800996c:	78d3      	ldrb	r3, [r2, #3]
 800996e:	f361 13c7 	bfi	r3, r1, #7, #1
 8009972:	70d3      	strb	r3, [r2, #3]
	     LED.LED_parameters.LED3_state = LED_CNTRL_SMF.LED_CNTRL_SMF_segments.ZLED_state;
 8009974:	4ba7      	ldr	r3, [pc, #668]	; (8009c14 <PM_SMF_Rx_Handler+0x308>)
 8009976:	785b      	ldrb	r3, [r3, #1]
 8009978:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800997c:	b2d9      	uxtb	r1, r3
 800997e:	4aa6      	ldr	r2, [pc, #664]	; (8009c18 <PM_SMF_Rx_Handler+0x30c>)
 8009980:	7913      	ldrb	r3, [r2, #4]
 8009982:	f361 0300 	bfi	r3, r1, #0, #1
 8009986:	7113      	strb	r3, [r2, #4]
	     LED.LED_parameters.LED1_mode = LED_CNTRL_SMF.LED_CNTRL_SMF_segments.XLED_mode;
 8009988:	4ba2      	ldr	r3, [pc, #648]	; (8009c14 <PM_SMF_Rx_Handler+0x308>)
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8009990:	b2d9      	uxtb	r1, r3
 8009992:	4aa1      	ldr	r2, [pc, #644]	; (8009c18 <PM_SMF_Rx_Handler+0x30c>)
 8009994:	7893      	ldrb	r3, [r2, #2]
 8009996:	f361 1347 	bfi	r3, r1, #5, #3
 800999a:	7093      	strb	r3, [r2, #2]
	     LED.LED_parameters.LED2_mode = LED_CNTRL_SMF.LED_CNTRL_SMF_segments.YLED_mode;
 800999c:	4b9d      	ldr	r3, [pc, #628]	; (8009c14 <PM_SMF_Rx_Handler+0x308>)
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80099a4:	b2d9      	uxtb	r1, r3
 80099a6:	4a9c      	ldr	r2, [pc, #624]	; (8009c18 <PM_SMF_Rx_Handler+0x30c>)
 80099a8:	78d3      	ldrb	r3, [r2, #3]
 80099aa:	f361 0302 	bfi	r3, r1, #0, #3
 80099ae:	70d3      	strb	r3, [r2, #3]
	     LED.LED_parameters.LED3_mode = LED_CNTRL_SMF.LED_CNTRL_SMF_segments.ZLED_mode;
 80099b0:	4b98      	ldr	r3, [pc, #608]	; (8009c14 <PM_SMF_Rx_Handler+0x308>)
 80099b2:	881b      	ldrh	r3, [r3, #0]
 80099b4:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 80099b8:	b2d9      	uxtb	r1, r3
 80099ba:	4a97      	ldr	r2, [pc, #604]	; (8009c18 <PM_SMF_Rx_Handler+0x30c>)
 80099bc:	78d3      	ldrb	r3, [r2, #3]
 80099be:	f361 03c5 	bfi	r3, r1, #3, #3
 80099c2:	70d3      	strb	r3, [r2, #3]
	     LED.LED_parameters.LED1_duty = (float)LED_CNTRL_SMF.LED_CNTRL_SMF_segments.XLED_Brightness * XLED_Brightness_FACTOR;
 80099c4:	4b93      	ldr	r3, [pc, #588]	; (8009c14 <PM_SMF_Rx_Handler+0x308>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f3c3 33c4 	ubfx	r3, r3, #15, #5
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	ee07 3a90 	vmov	s15, r3
 80099d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d6:	eeb0 7a09 	vmov.f32	s14, #9	; 0x40480000  3.125
 80099da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099e2:	edc7 7a00 	vstr	s15, [r7]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	b2d9      	uxtb	r1, r3
 80099ea:	4a8b      	ldr	r2, [pc, #556]	; (8009c18 <PM_SMF_Rx_Handler+0x30c>)
 80099ec:	7813      	ldrb	r3, [r2, #0]
 80099ee:	f361 0306 	bfi	r3, r1, #0, #7
 80099f2:	7013      	strb	r3, [r2, #0]
	     LED.LED_parameters.LED2_duty = (float)LED_CNTRL_SMF.LED_CNTRL_SMF_segments.YLED_Brightness * YLED_Brightness_FACTOR;
 80099f4:	4b87      	ldr	r3, [pc, #540]	; (8009c14 <PM_SMF_Rx_Handler+0x308>)
 80099f6:	885b      	ldrh	r3, [r3, #2]
 80099f8:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	ee07 3a90 	vmov	s15, r3
 8009a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a06:	eeb0 7a09 	vmov.f32	s14, #9	; 0x40480000  3.125
 8009a0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a12:	edc7 7a00 	vstr	s15, [r7]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	b2d9      	uxtb	r1, r3
 8009a1a:	4a7f      	ldr	r2, [pc, #508]	; (8009c18 <PM_SMF_Rx_Handler+0x30c>)
 8009a1c:	8813      	ldrh	r3, [r2, #0]
 8009a1e:	f361 13cd 	bfi	r3, r1, #7, #7
 8009a22:	8013      	strh	r3, [r2, #0]
	     LED.LED_parameters.LED3_duty = (float)LED_CNTRL_SMF.LED_CNTRL_SMF_segments.ZLED_Brightness * ZLED_Brightness_FACTOR;
 8009a24:	4b7b      	ldr	r3, [pc, #492]	; (8009c14 <PM_SMF_Rx_Handler+0x308>)
 8009a26:	78db      	ldrb	r3, [r3, #3]
 8009a28:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	ee07 3a90 	vmov	s15, r3
 8009a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a36:	eeb0 7a09 	vmov.f32	s14, #9	; 0x40480000  3.125
 8009a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a42:	edc7 7a00 	vstr	s15, [r7]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	b2d9      	uxtb	r1, r3
 8009a4a:	4a73      	ldr	r2, [pc, #460]	; (8009c18 <PM_SMF_Rx_Handler+0x30c>)
 8009a4c:	6813      	ldr	r3, [r2, #0]
 8009a4e:	f361 3394 	bfi	r3, r1, #14, #7
 8009a52:	6013      	str	r3, [r2, #0]
	   }

	   LED_Update();
 8009a54:	f7fc ffa6 	bl	80069a4 <LED_Update>
	}  /* End LED_CNTRL SMF handler. */


	/* Case for handling IMU control commands. */

	if( ( buffer[0] & 127 ) == IMU_settings_FID )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a60:	2b11      	cmp	r3, #17
 8009a62:	f040 80b8 	bne.w	8009bd6 <PM_SMF_Rx_Handler+0x2ca>
	{
		/* Store current values in the message frame. */

		uint32_t __temp = IMU_settings_SMF.all;
 8009a66:	4b6d      	ldr	r3, [pc, #436]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Decode the message frame contents. */

		SDCP_decode(buffer,IMU_settings_FID,&IMU_settings_SMF);
 8009a6c:	4a6b      	ldr	r2, [pc, #428]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009a6e:	2111      	movs	r1, #17
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 ffff 	bl	800aa74 <SDCP_decode>

		/* If the write accelerometer configuration bit is enabled. */

		if(IMU_settings_SMF.IMU_settings_SMF_segments.write_accel_config)
 8009a76:	4b69      	ldr	r3, [pc, #420]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009a78:	785b      	ldrb	r3, [r3, #1]
 8009a7a:	f003 0310 	and.w	r3, r3, #16
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d01b      	beq.n	8009abc <PM_SMF_Rx_Handler+0x1b0>
		{
			imu.sensor_configurations.sensor_configuration_segments.accel_fs_config =
		    IMU_settings_SMF.IMU_settings_SMF_segments.ACCEL_FS;
 8009a84:	4b65      	ldr	r3, [pc, #404]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8009a8c:	b2d9      	uxtb	r1, r3
			imu.sensor_configurations.sensor_configuration_segments.accel_fs_config =
 8009a8e:	4a64      	ldr	r2, [pc, #400]	; (8009c20 <PM_SMF_Rx_Handler+0x314>)
 8009a90:	7a13      	ldrb	r3, [r2, #8]
 8009a92:	f361 0302 	bfi	r3, r1, #0, #3
 8009a96:	7213      	strb	r3, [r2, #8]

			IMU_settings_SMF.IMU_settings_SMF_segments.write_accel_config = 0;
 8009a98:	4a60      	ldr	r2, [pc, #384]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009a9a:	7853      	ldrb	r3, [r2, #1]
 8009a9c:	f36f 1304 	bfc	r3, #4, #1
 8009aa0:	7053      	strb	r3, [r2, #1]

			/* Clear configuration bits. */

			__temp &= ~( ( ( 1UL << ACCEL_FS_BLEN ) - 1 ) << ACCEL_FS_SBIT );
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8009aa8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Update accelerometer full-scale configuration bits. */

			__temp |= ( (uint32_t)IMU_settings_SMF.IMU_settings_SMF_segments.ACCEL_FS << ACCEL_FS_SBIT );
 8009aaa:	4b5c      	ldr	r3, [pc, #368]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	01db      	lsls	r3, r3, #7
 8009ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	627b      	str	r3, [r7, #36]	; 0x24
		}

		/* If the write gyroscope configuration bit is enabled. */

		if(IMU_settings_SMF.IMU_settings_SMF_segments.write_gyro_config)
 8009abc:	4b57      	ldr	r3, [pc, #348]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009abe:	785b      	ldrb	r3, [r3, #1]
 8009ac0:	f003 0320 	and.w	r3, r3, #32
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d01b      	beq.n	8009b02 <PM_SMF_Rx_Handler+0x1f6>
		{
			imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config =
		    IMU_settings_SMF.IMU_settings_SMF_segments.GYRO_FS;
 8009aca:	4b54      	ldr	r3, [pc, #336]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009ad2:	b2d9      	uxtb	r1, r3
			imu.sensor_configurations.sensor_configuration_segments.gyro_fs_config =
 8009ad4:	4a52      	ldr	r2, [pc, #328]	; (8009c20 <PM_SMF_Rx_Handler+0x314>)
 8009ad6:	7a13      	ldrb	r3, [r2, #8]
 8009ad8:	f361 03c5 	bfi	r3, r1, #3, #3
 8009adc:	7213      	strb	r3, [r2, #8]

			IMU_settings_SMF.IMU_settings_SMF_segments.write_gyro_config = 0;
 8009ade:	4a4f      	ldr	r2, [pc, #316]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009ae0:	7853      	ldrb	r3, [r2, #1]
 8009ae2:	f36f 1345 	bfc	r3, #5, #1
 8009ae6:	7053      	strb	r3, [r2, #1]

			/* Clear configuration bits. */

			__temp &= ~( ( ( 1UL << GYRO_FS_BLEN ) - 1 ) << GYRO_FS_SBIT );
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Update gyroscope full-scale configuration bits. */

			__temp |= ( (uint32_t)IMU_settings_SMF.IMU_settings_SMF_segments.GYRO_FS << GYRO_FS_SBIT );
 8009af0:	4b4a      	ldr	r3, [pc, #296]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	011b      	lsls	r3, r3, #4
 8009afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009afe:	4313      	orrs	r3, r2
 8009b00:	627b      	str	r3, [r7, #36]	; 0x24
		}

		/* If calibration bit is set, perform calibration. */

		if(IMU_settings_SMF.IMU_settings_SMF_segments.Calibrate_CS)
 8009b02:	4b46      	ldr	r3, [pc, #280]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	f003 0301 	and.w	r3, r3, #1
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d012      	beq.n	8009b36 <PM_SMF_Rx_Handler+0x22a>
  __ASM volatile ("cpsid i" : : : "memory");
 8009b10:	b672      	cpsid	i
		{
			__disable_irq();
			MPU6050_calibrate(imu.calibration_axis,imu.N_calibration_points);
 8009b12:	4b43      	ldr	r3, [pc, #268]	; (8009c20 <PM_SMF_Rx_Handler+0x314>)
 8009b14:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8009b18:	4b41      	ldr	r3, [pc, #260]	; (8009c20 <PM_SMF_Rx_Handler+0x314>)
 8009b1a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009b1e:	4619      	mov	r1, r3
 8009b20:	4610      	mov	r0, r2
 8009b22:	f7fe fae7 	bl	80080f4 <MPU6050_calibrate>
			MP_Init();
 8009b26:	f7fe fd2f 	bl	8008588 <MP_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8009b2a:	b662      	cpsie	i
			__enable_irq();
			IMU_settings_SMF.IMU_settings_SMF_segments.Calibrate_CS = 0;
 8009b2c:	4a3b      	ldr	r2, [pc, #236]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009b2e:	7813      	ldrb	r3, [r2, #0]
 8009b30:	f36f 0300 	bfc	r3, #0, #1
 8009b34:	7013      	strb	r3, [r2, #0]
		}

		if(IMU_settings_SMF.IMU_settings_SMF_segments.write_ryp_accel_config)
 8009b36:	4b39      	ldr	r3, [pc, #228]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009b38:	785b      	ldrb	r3, [r3, #1]
 8009b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00b      	beq.n	8009b5c <PM_SMF_Rx_Handler+0x250>
		{
			Motion_Processing.output_config.output_config_segments.RPY_accel_output_enabled =
			IMU_settings_SMF.IMU_settings_SMF_segments.write_ryp_accel_config;
 8009b44:	4b35      	ldr	r3, [pc, #212]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009b46:	785b      	ldrb	r3, [r3, #1]
 8009b48:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009b4c:	b2d9      	uxtb	r1, r3
			Motion_Processing.output_config.output_config_segments.RPY_accel_output_enabled =
 8009b4e:	4a35      	ldr	r2, [pc, #212]	; (8009c24 <PM_SMF_Rx_Handler+0x318>)
 8009b50:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8009b54:	f361 0300 	bfi	r3, r1, #0, #1
 8009b58:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
		}

		if(IMU_settings_SMF.IMU_settings_SMF_segments.write_ryp_gyro_config)
 8009b5c:	4b2f      	ldr	r3, [pc, #188]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009b5e:	785b      	ldrb	r3, [r3, #1]
 8009b60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00b      	beq.n	8009b82 <PM_SMF_Rx_Handler+0x276>
		{
			Motion_Processing.output_config.output_config_segments.RPY_gyro_output_enabled =
			IMU_settings_SMF.IMU_settings_SMF_segments.write_ryp_gyro_config;
 8009b6a:	4b2c      	ldr	r3, [pc, #176]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009b6c:	785b      	ldrb	r3, [r3, #1]
 8009b6e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009b72:	b2d9      	uxtb	r1, r3
			Motion_Processing.output_config.output_config_segments.RPY_gyro_output_enabled =
 8009b74:	4a2b      	ldr	r2, [pc, #172]	; (8009c24 <PM_SMF_Rx_Handler+0x318>)
 8009b76:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8009b7a:	f361 0341 	bfi	r3, r1, #1, #1
 8009b7e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
		}

		if(IMU_settings_SMF.IMU_settings_SMF_segments.write_ryp_filter_config)
 8009b82:	4b26      	ldr	r3, [pc, #152]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009b84:	789b      	ldrb	r3, [r3, #2]
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00b      	beq.n	8009ba8 <PM_SMF_Rx_Handler+0x29c>
		{
			Motion_Processing.output_config.output_config_segments.RPY_filter_output_enabled =
			IMU_settings_SMF.IMU_settings_SMF_segments.write_ryp_filter_config;
 8009b90:	4b22      	ldr	r3, [pc, #136]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009b92:	789b      	ldrb	r3, [r3, #2]
 8009b94:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009b98:	b2d9      	uxtb	r1, r3
			Motion_Processing.output_config.output_config_segments.RPY_filter_output_enabled =
 8009b9a:	4a22      	ldr	r2, [pc, #136]	; (8009c24 <PM_SMF_Rx_Handler+0x318>)
 8009b9c:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8009ba0:	f361 0382 	bfi	r3, r1, #2, #1
 8009ba4:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
		}

		/* Clear all write configuration bits. */

		__temp &= ~( 1UL << write_accel_config_SBIT );
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bae:	627b      	str	r3, [r7, #36]	; 0x24
		__temp &= ~( 1UL << write_gyro_config_SBIT );
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bb6:	627b      	str	r3, [r7, #36]	; 0x24
		__temp &= ~( 1UL << write_rpy_accel_config_SBIT );
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bbe:	627b      	str	r3, [r7, #36]	; 0x24
		__temp &= ~( 1UL << write_rpy_gyro_config_SBIT );
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009bc6:	627b      	str	r3, [r7, #36]	; 0x24
		__temp &= ~( 1UL << write_rpy_filter_config_SBIT );
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bce:	627b      	str	r3, [r7, #36]	; 0x24

		IMU_settings_SMF.all = __temp;
 8009bd0:	4a12      	ldr	r2, [pc, #72]	; (8009c1c <PM_SMF_Rx_Handler+0x310>)
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd4:	6013      	str	r3, [r2, #0]
	}/* END: IMU_settings handler. */


	/* Handler for complementary filter coefficients. */

	if( (buffer[0] & 127) == CF_coeff_FID )
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bde:	2b10      	cmp	r3, #16
 8009be0:	d153      	bne.n	8009c8a <PM_SMF_Rx_Handler+0x37e>
	{
		SDCP_decode(buffer,CF_coeff_FID,&CF_coeff_SMF);
 8009be2:	4a11      	ldr	r2, [pc, #68]	; (8009c28 <PM_SMF_Rx_Handler+0x31c>)
 8009be4:	2110      	movs	r1, #16
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 ff44 	bl	800aa74 <SDCP_decode>

		SDCP_Param tempParameter;

		tempParameter.bitLength = Roll_coeff_BLEN;
 8009bec:	230a      	movs	r3, #10
 8009bee:	617b      	str	r3, [r7, #20]
		tempParameter.dataType  = Roll_coeff_DTYPE;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	60fb      	str	r3, [r7, #12]
		tempParameter.factor    = Roll_coeff_FACTOR;
 8009bf4:	4b0d      	ldr	r3, [pc, #52]	; (8009c2c <PM_SMF_Rx_Handler+0x320>)
 8009bf6:	61bb      	str	r3, [r7, #24]
		tempParameter.offset    = Roll_coeff_OFFSET;
 8009bf8:	f04f 0300 	mov.w	r3, #0
 8009bfc:	61fb      	str	r3, [r7, #28]
		tempParameter.pFrame    = &CF_coeff_SMF;
 8009bfe:	4b0a      	ldr	r3, [pc, #40]	; (8009c28 <PM_SMF_Rx_Handler+0x31c>)
 8009c00:	60bb      	str	r3, [r7, #8]
		tempParameter.startBit  = Roll_coeff_SBIT;
 8009c02:	2300      	movs	r3, #0
 8009c04:	613b      	str	r3, [r7, #16]

		SDCP_RPF(&tempParameter);
 8009c06:	f107 0308 	add.w	r3, r7, #8
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f001 faa6 	bl	800b15c <SDCP_RPF>
 8009c10:	e00e      	b.n	8009c30 <PM_SMF_Rx_Handler+0x324>
 8009c12:	bf00      	nop
 8009c14:	2000045c 	.word	0x2000045c
 8009c18:	200004fc 	.word	0x200004fc
 8009c1c:	20000484 	.word	0x20000484
 8009c20:	20000350 	.word	0x20000350
 8009c24:	2000048c 	.word	0x2000048c
 8009c28:	20000144 	.word	0x20000144
 8009c2c:	3a800eae 	.word	0x3a800eae
		Motion_Processing.roll_coeff = tempParameter.value;
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	4a78      	ldr	r2, [pc, #480]	; (8009e14 <PM_SMF_Rx_Handler+0x508>)
 8009c34:	60d3      	str	r3, [r2, #12]

		tempParameter.bitLength = Pitch_coeff_BLEN;
 8009c36:	230a      	movs	r3, #10
 8009c38:	617b      	str	r3, [r7, #20]
		tempParameter.dataType  = Pitch_coeff_DTYPE;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60fb      	str	r3, [r7, #12]
		tempParameter.factor    = Pitch_coeff_FACTOR;
 8009c3e:	4b76      	ldr	r3, [pc, #472]	; (8009e18 <PM_SMF_Rx_Handler+0x50c>)
 8009c40:	61bb      	str	r3, [r7, #24]
		tempParameter.offset    = Pitch_coeff_OFFSET;
 8009c42:	f04f 0300 	mov.w	r3, #0
 8009c46:	61fb      	str	r3, [r7, #28]
		tempParameter.pFrame    = &CF_coeff_SMF;
 8009c48:	4b74      	ldr	r3, [pc, #464]	; (8009e1c <PM_SMF_Rx_Handler+0x510>)
 8009c4a:	60bb      	str	r3, [r7, #8]
		tempParameter.startBit  = Pitch_coeff_SBIT;
 8009c4c:	230a      	movs	r3, #10
 8009c4e:	613b      	str	r3, [r7, #16]

		SDCP_RPF(&tempParameter);
 8009c50:	f107 0308 	add.w	r3, r7, #8
 8009c54:	4618      	mov	r0, r3
 8009c56:	f001 fa81 	bl	800b15c <SDCP_RPF>
		Motion_Processing.pitch_coeff = tempParameter.value;
 8009c5a:	6a3b      	ldr	r3, [r7, #32]
 8009c5c:	4a6d      	ldr	r2, [pc, #436]	; (8009e14 <PM_SMF_Rx_Handler+0x508>)
 8009c5e:	6113      	str	r3, [r2, #16]

		tempParameter.bitLength = Yaw_coeff_BLEN;
 8009c60:	230a      	movs	r3, #10
 8009c62:	617b      	str	r3, [r7, #20]
		tempParameter.dataType  = Yaw_coeff_DTYPE;
 8009c64:	2300      	movs	r3, #0
 8009c66:	60fb      	str	r3, [r7, #12]
		tempParameter.factor    = Yaw_coeff_FACTOR;
 8009c68:	4b6b      	ldr	r3, [pc, #428]	; (8009e18 <PM_SMF_Rx_Handler+0x50c>)
 8009c6a:	61bb      	str	r3, [r7, #24]
		tempParameter.offset    = Yaw_coeff_OFFSET;
 8009c6c:	f04f 0300 	mov.w	r3, #0
 8009c70:	61fb      	str	r3, [r7, #28]
		tempParameter.pFrame    = &CF_coeff_SMF;
 8009c72:	4b6a      	ldr	r3, [pc, #424]	; (8009e1c <PM_SMF_Rx_Handler+0x510>)
 8009c74:	60bb      	str	r3, [r7, #8]
		tempParameter.startBit  = Yaw_coeff_SBIT;
 8009c76:	2314      	movs	r3, #20
 8009c78:	613b      	str	r3, [r7, #16]

		SDCP_RPF(&tempParameter);
 8009c7a:	f107 0308 	add.w	r3, r7, #8
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f001 fa6c 	bl	800b15c <SDCP_RPF>
		Motion_Processing.yaw_coeff = tempParameter.value;
 8009c84:	6a3b      	ldr	r3, [r7, #32]
 8009c86:	4a63      	ldr	r2, [pc, #396]	; (8009e14 <PM_SMF_Rx_Handler+0x508>)
 8009c88:	6153      	str	r3, [r2, #20]
	}/* END: CF_coeff SMF handler. */


	/* Handler for configuration read, write. */

	if( ( buffer[0] & 127 ) == Config_RW_FID )
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c92:	2b32      	cmp	r3, #50	; 0x32
 8009c94:	d10f      	bne.n	8009cb6 <PM_SMF_Rx_Handler+0x3aa>
	{
	  SDCP_decode(buffer,Config_RW_FID,&Config_RW_SMF);
 8009c96:	4a62      	ldr	r2, [pc, #392]	; (8009e20 <PM_SMF_Rx_Handler+0x514>)
 8009c98:	2132      	movs	r1, #50	; 0x32
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 feea 	bl	800aa74 <SDCP_decode>

	  if(Config_RW_SMF.Config_RW_SMF_segments.save_config)
 8009ca0:	4b5f      	ldr	r3, [pc, #380]	; (8009e20 <PM_SMF_Rx_Handler+0x514>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	f003 0301 	and.w	r3, r3, #1
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d003      	beq.n	8009cb6 <PM_SMF_Rx_Handler+0x3aa>
  __ASM volatile ("cpsid i" : : : "memory");
 8009cae:	b672      	cpsid	i
	  {
		  __disable_irq();

		  /* Write configurations. */

		  Config_write();
 8009cb0:	f7f6 fed0 	bl	8000a54 <Config_write>
  __ASM volatile ("cpsie i" : : : "memory");
 8009cb4:	b662      	cpsie	i
	  }
	}

	/* Handler for motion detection parameters. */

	if( ( buffer[0] & 127 ) == MDT_X_FID )
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cbe:	2b1b      	cmp	r3, #27
 8009cc0:	d11a      	bne.n	8009cf8 <PM_SMF_Rx_Handler+0x3ec>
	{
	  SDCP_decode(buffer,MDT_X_FID,&MDT_X_SMF);
 8009cc2:	4a58      	ldr	r2, [pc, #352]	; (8009e24 <PM_SMF_Rx_Handler+0x518>)
 8009cc4:	211b      	movs	r1, #27
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fed4 	bl	800aa74 <SDCP_decode>

	  Motion_Processing.angle_threshold[X] = MDT_X_SMF.MDT_X_SMF_segments.angle_threshold*X_angle_threshold_FACTOR;
 8009ccc:	4b55      	ldr	r3, [pc, #340]	; (8009e24 <PM_SMF_Rx_Handler+0x518>)
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	ee07 3a90 	vmov	s15, r3
 8009cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cd8:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8009e28 <PM_SMF_Rx_Handler+0x51c>
 8009cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ce0:	4b4c      	ldr	r3, [pc, #304]	; (8009e14 <PM_SMF_Rx_Handler+0x508>)
 8009ce2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
      Motion_Processing.vibration_threshold[X] = MDT_X_SMF.MDT_X_SMF_segments.vibration_threshold;
 8009ce6:	4b4f      	ldr	r3, [pc, #316]	; (8009e24 <PM_SMF_Rx_Handler+0x518>)
 8009ce8:	885b      	ldrh	r3, [r3, #2]
 8009cea:	ee07 3a90 	vmov	s15, r3
 8009cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf2:	4b48      	ldr	r3, [pc, #288]	; (8009e14 <PM_SMF_Rx_Handler+0x508>)
 8009cf4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}

	if( ( buffer[0] & 127 ) == MDT_Y_FID )
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d00:	2b1c      	cmp	r3, #28
 8009d02:	d11a      	bne.n	8009d3a <PM_SMF_Rx_Handler+0x42e>
	{
	  SDCP_decode(buffer,MDT_Y_FID,&MDT_Y_SMF);
 8009d04:	4a49      	ldr	r2, [pc, #292]	; (8009e2c <PM_SMF_Rx_Handler+0x520>)
 8009d06:	211c      	movs	r1, #28
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 feb3 	bl	800aa74 <SDCP_decode>

	  Motion_Processing.angle_threshold[Y] = MDT_Y_SMF.MDT_Y_SMF_segments.angle_threshold*X_angle_threshold_FACTOR;
 8009d0e:	4b47      	ldr	r3, [pc, #284]	; (8009e2c <PM_SMF_Rx_Handler+0x520>)
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	ee07 3a90 	vmov	s15, r3
 8009d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d1a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8009e28 <PM_SMF_Rx_Handler+0x51c>
 8009d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d22:	4b3c      	ldr	r3, [pc, #240]	; (8009e14 <PM_SMF_Rx_Handler+0x508>)
 8009d24:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
      Motion_Processing.vibration_threshold[Y] = MDT_Y_SMF.MDT_Y_SMF_segments.vibration_threshold;
 8009d28:	4b40      	ldr	r3, [pc, #256]	; (8009e2c <PM_SMF_Rx_Handler+0x520>)
 8009d2a:	885b      	ldrh	r3, [r3, #2]
 8009d2c:	ee07 3a90 	vmov	s15, r3
 8009d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d34:	4b37      	ldr	r3, [pc, #220]	; (8009e14 <PM_SMF_Rx_Handler+0x508>)
 8009d36:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	if( ( buffer[0] & 127 ) == MDT_Z_FID )
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d42:	2b1d      	cmp	r3, #29
 8009d44:	d11a      	bne.n	8009d7c <PM_SMF_Rx_Handler+0x470>
	{
	  SDCP_decode(buffer,MDT_Z_FID,&MDT_Z_SMF);
 8009d46:	4a3a      	ldr	r2, [pc, #232]	; (8009e30 <PM_SMF_Rx_Handler+0x524>)
 8009d48:	211d      	movs	r1, #29
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fe92 	bl	800aa74 <SDCP_decode>

	  Motion_Processing.angle_threshold[Z] = MDT_Z_SMF.MDT_Z_SMF_segments.angle_threshold*X_angle_threshold_FACTOR;
 8009d50:	4b37      	ldr	r3, [pc, #220]	; (8009e30 <PM_SMF_Rx_Handler+0x524>)
 8009d52:	881b      	ldrh	r3, [r3, #0]
 8009d54:	ee07 3a90 	vmov	s15, r3
 8009d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d5c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009e28 <PM_SMF_Rx_Handler+0x51c>
 8009d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d64:	4b2b      	ldr	r3, [pc, #172]	; (8009e14 <PM_SMF_Rx_Handler+0x508>)
 8009d66:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
      Motion_Processing.vibration_threshold[Z] = MDT_Z_SMF.MDT_Z_SMF_segments.vibration_threshold;
 8009d6a:	4b31      	ldr	r3, [pc, #196]	; (8009e30 <PM_SMF_Rx_Handler+0x524>)
 8009d6c:	885b      	ldrh	r3, [r3, #2]
 8009d6e:	ee07 3a90 	vmov	s15, r3
 8009d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d76:	4b27      	ldr	r3, [pc, #156]	; (8009e14 <PM_SMF_Rx_Handler+0x508>)
 8009d78:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	}

	if( ( buffer[0] & 127 ) == IMU_calibration_FID )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d84:	2b1f      	cmp	r3, #31
 8009d86:	d117      	bne.n	8009db8 <PM_SMF_Rx_Handler+0x4ac>
	{
	  SDCP_decode(buffer,IMU_calibration_FID,&IMU_calibration_SMF);
 8009d88:	4a2a      	ldr	r2, [pc, #168]	; (8009e34 <PM_SMF_Rx_Handler+0x528>)
 8009d8a:	211f      	movs	r1, #31
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fe71 	bl	800aa74 <SDCP_decode>

	  imu.N_calibration_points = IMU_calibration_SMF.IMU_calibration_SMF_segments.points;
 8009d92:	4b28      	ldr	r3, [pc, #160]	; (8009e34 <PM_SMF_Rx_Handler+0x528>)
 8009d94:	785a      	ldrb	r2, [r3, #1]
 8009d96:	4b28      	ldr	r3, [pc, #160]	; (8009e38 <PM_SMF_Rx_Handler+0x52c>)
 8009d98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	  imu.calibration_axis = IMU_calibration_SMF.IMU_calibration_SMF_segments.axis;
 8009d9c:	4b25      	ldr	r3, [pc, #148]	; (8009e34 <PM_SMF_Rx_Handler+0x528>)
 8009d9e:	789b      	ldrb	r3, [r3, #2]
 8009da0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	461a      	mov	r2, r3
 8009da8:	4b23      	ldr	r3, [pc, #140]	; (8009e38 <PM_SMF_Rx_Handler+0x52c>)
 8009daa:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	  imu.calibration_interval_ms = IMU_calibration_SMF.IMU_calibration_SMF_segments.interval;
 8009dae:	4b21      	ldr	r3, [pc, #132]	; (8009e34 <PM_SMF_Rx_Handler+0x528>)
 8009db0:	781a      	ldrb	r2, [r3, #0]
 8009db2:	4b21      	ldr	r3, [pc, #132]	; (8009e38 <PM_SMF_Rx_Handler+0x52c>)
 8009db4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	}

	/* Handler for GUI control parameters. */

	if( ( buffer[0] & 127 ) == GUI_FID )
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d122      	bne.n	8009e0a <PM_SMF_Rx_Handler+0x4fe>
	{
	  SDCP_decode(buffer,GUI_FID,&GUI_SMF);
 8009dc4:	4a1d      	ldr	r2, [pc, #116]	; (8009e3c <PM_SMF_Rx_Handler+0x530>)
 8009dc6:	2101      	movs	r1, #1
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fe53 	bl	800aa74 <SDCP_decode>

	  Rotary_Encoder.parameters.clockwise = GUI_SMF.GUI_SMF_segments.RENC_CLK;
 8009dce:	4b1b      	ldr	r3, [pc, #108]	; (8009e3c <PM_SMF_Rx_Handler+0x530>)
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009dd6:	b2d9      	uxtb	r1, r3
 8009dd8:	4a19      	ldr	r2, [pc, #100]	; (8009e40 <PM_SMF_Rx_Handler+0x534>)
 8009dda:	6813      	ldr	r3, [r2, #0]
 8009ddc:	f361 0300 	bfi	r3, r1, #0, #1
 8009de0:	6013      	str	r3, [r2, #0]
	  Rotary_Encoder.parameters.anticlockwise = GUI_SMF.GUI_SMF_segments.RENC_ACLK;
 8009de2:	4b16      	ldr	r3, [pc, #88]	; (8009e3c <PM_SMF_Rx_Handler+0x530>)
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009dea:	b2d9      	uxtb	r1, r3
 8009dec:	4a14      	ldr	r2, [pc, #80]	; (8009e40 <PM_SMF_Rx_Handler+0x534>)
 8009dee:	6813      	ldr	r3, [r2, #0]
 8009df0:	f361 0341 	bfi	r3, r1, #1, #1
 8009df4:	6013      	str	r3, [r2, #0]
	  Rotary_Encoder.parameters.switch_state = GUI_SMF.GUI_SMF_segments.RENC_SW;
 8009df6:	4b11      	ldr	r3, [pc, #68]	; (8009e3c <PM_SMF_Rx_Handler+0x530>)
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009dfe:	b2d9      	uxtb	r1, r3
 8009e00:	4a0f      	ldr	r2, [pc, #60]	; (8009e40 <PM_SMF_Rx_Handler+0x534>)
 8009e02:	6813      	ldr	r3, [r2, #0]
 8009e04:	f361 0382 	bfi	r3, r1, #2, #1
 8009e08:	6013      	str	r3, [r2, #0]
	}
  }
}
 8009e0a:	bf00      	nop
 8009e0c:	3728      	adds	r7, #40	; 0x28
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	2000048c 	.word	0x2000048c
 8009e18:	3a800eae 	.word	0x3a800eae
 8009e1c:	20000144 	.word	0x20000144
 8009e20:	200003c8 	.word	0x200003c8
 8009e24:	2000041c 	.word	0x2000041c
 8009e28:	3c23d70a 	.word	0x3c23d70a
 8009e2c:	200003c4 	.word	0x200003c4
 8009e30:	200003a4 	.word	0x200003a4
 8009e34:	200004f8 	.word	0x200004f8
 8009e38:	20000350 	.word	0x20000350
 8009e3c:	20000510 	.word	0x20000510
 8009e40:	200005a0 	.word	0x200005a0

08009e44 <PM_FTOR_Handler>:


void PM_FTOR_Handler(uint8_t* buffer)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b09a      	sub	sp, #104	; 0x68
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* Case for FTOR1 message frame. */

  if( buffer[0] == 248 )
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	2bf8      	cmp	r3, #248	; 0xf8
 8009e52:	f040 8110 	bne.w	800a076 <PM_FTOR_Handler+0x232>
	uint8_t txBuffer[6];
	uint8_t rxBuffer[6];

	/* Get request field data. */

    FTOR1.all = ( ( (uint32_t)buffer[1] << 24 )
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	061a      	lsls	r2, r3, #24
    						   | ( (uint32_t)buffer[2] << 16 )
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	3302      	adds	r3, #2
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	041b      	lsls	r3, r3, #16
 8009e66:	431a      	orrs	r2, r3
							   | ( (uint32_t)buffer[3] << 8 )
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3303      	adds	r3, #3
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	021b      	lsls	r3, r3, #8
 8009e70:	4313      	orrs	r3, r2
							   | ( (uint32_t)buffer[4] << 0 ) );
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	3204      	adds	r2, #4
 8009e76:	7812      	ldrb	r2, [r2, #0]
 8009e78:	4313      	orrs	r3, r2
    FTOR1.all = ( ( (uint32_t)buffer[1] << 24 )
 8009e7a:	4a8d      	ldr	r2, [pc, #564]	; (800a0b0 <PM_FTOR_Handler+0x26c>)
 8009e7c:	6013      	str	r3, [r2, #0]

    /* Clear the RQST bit and set the ACK bit. */

    FTOR1.FTOR1_segments.REQ = 0;
 8009e7e:	4a8c      	ldr	r2, [pc, #560]	; (800a0b0 <PM_FTOR_Handler+0x26c>)
 8009e80:	78d3      	ldrb	r3, [r2, #3]
 8009e82:	f36f 1386 	bfc	r3, #6, #1
 8009e86:	70d3      	strb	r3, [r2, #3]
    FTOR1.FTOR1_segments.ACK = 1;
 8009e88:	4a89      	ldr	r2, [pc, #548]	; (800a0b0 <PM_FTOR_Handler+0x26c>)
 8009e8a:	78d3      	ldrb	r3, [r2, #3]
 8009e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e90:	70d3      	strb	r3, [r2, #3]

    txBuffer[0] = 248;
 8009e92:	23f8      	movs	r3, #248	; 0xf8
 8009e94:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    txBuffer[1] = ((FTOR1.all >> 24) & 0xFF);
 8009e98:	4b85      	ldr	r3, [pc, #532]	; (800a0b0 <PM_FTOR_Handler+0x26c>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	0e1b      	lsrs	r3, r3, #24
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    txBuffer[2] = ((FTOR1.all >> 16) & 0xFF);
 8009ea4:	4b82      	ldr	r3, [pc, #520]	; (800a0b0 <PM_FTOR_Handler+0x26c>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	0c1b      	lsrs	r3, r3, #16
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
    txBuffer[3] = ((FTOR1.all >> 8) & 0xFF);
 8009eb0:	4b7f      	ldr	r3, [pc, #508]	; (800a0b0 <PM_FTOR_Handler+0x26c>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	0a1b      	lsrs	r3, r3, #8
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    txBuffer[4] = ((FTOR1.all >> 0) & 0xFF);
 8009ebc:	4b7c      	ldr	r3, [pc, #496]	; (800a0b0 <PM_FTOR_Handler+0x26c>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    txBuffer[5] = obtainChecksum(txBuffer);
 8009ec6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7ff f978 	bl	80091c0 <obtainChecksum>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    /* Wait for current DMA transfer to complete and then proceed
     * forward to send ACK frame. */

    while(!UART.UART_parameters.DMA_Tx_completed);
 8009ed6:	bf00      	nop
 8009ed8:	4b76      	ldr	r3, [pc, #472]	; (800a0b4 <PM_FTOR_Handler+0x270>)
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	f003 0308 	and.w	r3, r3, #8
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d0f8      	beq.n	8009ed8 <PM_FTOR_Handler+0x94>
    UART_DMA_Transmit(txBuffer,6);
 8009ee6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009eea:	2106      	movs	r1, #6
 8009eec:	4618      	mov	r0, r3
 8009eee:	f001 febf 	bl	800bc70 <UART_DMA_Transmit>
    while(!UART.UART_parameters.DMA_Tx_completed);
 8009ef2:	bf00      	nop
 8009ef4:	4b6f      	ldr	r3, [pc, #444]	; (800a0b4 <PM_FTOR_Handler+0x270>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	f003 0308 	and.w	r3, r3, #8
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d0f8      	beq.n	8009ef4 <PM_FTOR_Handler+0xb0>


    uint8_t bytesToTransmit[42] = {0};  // 42 bytes allocates since maximum of
 8009f02:	f107 030c 	add.w	r3, r7, #12
 8009f06:	222a      	movs	r2, #42	; 0x2a
 8009f08:	2100      	movs	r1, #0
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f002 f8fe 	bl	800c10c <memset>
    							  // 7 frames can be transmitted on
    							  // request.

    uint8_t numberOfFrameRequests = FTOR1.FTOR1_segments.NF;
 8009f10:	4b67      	ldr	r3, [pc, #412]	; (800a0b0 <PM_FTOR_Handler+0x26c>)
 8009f12:	78db      	ldrb	r3, [r3, #3]
 8009f14:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    /* Load the frame IDs to transmit. */

    uint8_t frame_ID[7];

    frame_ID[0] = FTOR1.FTOR1_segments.FID_0;
 8009f1e:	4b64      	ldr	r3, [pc, #400]	; (800a0b0 <PM_FTOR_Handler+0x26c>)
 8009f20:	789b      	ldrb	r3, [r3, #2]
 8009f22:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    frame_ID[1] = FTOR1.FTOR1_segments.FID_1;
 8009f26:	4b62      	ldr	r3, [pc, #392]	; (800a0b0 <PM_FTOR_Handler+0x26c>)
 8009f28:	785b      	ldrb	r3, [r3, #1]
 8009f2a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    frame_ID[2] = FTOR1.FTOR1_segments.FID_2;
 8009f2e:	4b60      	ldr	r3, [pc, #384]	; (800a0b0 <PM_FTOR_Handler+0x26c>)
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    frame_ID[3] = FTOR2.FTOR2_segments.FID_3;
 8009f36:	4b60      	ldr	r3, [pc, #384]	; (800a0b8 <PM_FTOR_Handler+0x274>)
 8009f38:	78db      	ldrb	r3, [r3, #3]
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    frame_ID[4] = FTOR2.FTOR2_segments.FID_4;
 8009f3e:	4b5e      	ldr	r3, [pc, #376]	; (800a0b8 <PM_FTOR_Handler+0x274>)
 8009f40:	789b      	ldrb	r3, [r3, #2]
 8009f42:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    frame_ID[5] = FTOR2.FTOR2_segments.FID_5;
 8009f46:	4b5c      	ldr	r3, [pc, #368]	; (800a0b8 <PM_FTOR_Handler+0x274>)
 8009f48:	785b      	ldrb	r3, [r3, #1]
 8009f4a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    frame_ID[6] = FTOR2.FTOR2_segments.FID_6;
 8009f4e:	4b5a      	ldr	r3, [pc, #360]	; (800a0b8 <PM_FTOR_Handler+0x274>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

    /* Fill in buffer to transmit. */

    int index = -1;
 8009f56:	f04f 33ff 	mov.w	r3, #4294967295
 8009f5a:	667b      	str	r3, [r7, #100]	; 0x64
    uint8_t tempBuffer[6];
    uint16_t pointerToBuffer = 0;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    for(int i = 0 ; i < numberOfFrameRequests ; i++ )
 8009f62:	2300      	movs	r3, #0
 8009f64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f66:	e06b      	b.n	800a040 <PM_FTOR_Handler+0x1fc>
    {
      /* Search for structure corresponding to current frame ID.*/

      for(int j = 0 ; j < PM_nFrames ; j++ )
 8009f68:	2300      	movs	r3, #0
 8009f6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f6c:	e00f      	b.n	8009f8e <PM_FTOR_Handler+0x14a>
      {
        if( PM_FIDs[j] == frame_ID[i] )
 8009f6e:	4a53      	ldr	r2, [pc, #332]	; (800a0bc <PM_FTOR_Handler+0x278>)
 8009f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f76:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8009f7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f7c:	440a      	add	r2, r1
 8009f7e:	7812      	ldrb	r2, [r2, #0]
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d101      	bne.n	8009f88 <PM_FTOR_Handler+0x144>
        {
        	index = j;
 8009f84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f86:	667b      	str	r3, [r7, #100]	; 0x64
      for(int j = 0 ; j < PM_nFrames ; j++ )
 8009f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f90:	2b20      	cmp	r3, #32
 8009f92:	ddec      	ble.n	8009f6e <PM_FTOR_Handler+0x12a>
        }
      }

      /* If the frame is found, proceed. */

      if( index != -1 )
 8009f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f9a:	d04e      	beq.n	800a03a <PM_FTOR_Handler+0x1f6>
      {
        SDCP_encode( (void*)pSMFs[index], PM_FIDs[index], 0, tempBuffer);
 8009f9c:	4a48      	ldr	r2, [pc, #288]	; (800a0c0 <PM_FTOR_Handler+0x27c>)
 8009f9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	4a45      	ldr	r2, [pc, #276]	; (800a0bc <PM_FTOR_Handler+0x278>)
 8009fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fae:	b2d9      	uxtb	r1, r3
 8009fb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f000 fcff 	bl	800a9b8 <SDCP_encode>

        bytesToTransmit[pointerToBuffer+0] = tempBuffer[0];
 8009fba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009fbe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009fc2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009fc6:	440b      	add	r3, r1
 8009fc8:	f803 2c5c 	strb.w	r2, [r3, #-92]
        bytesToTransmit[pointerToBuffer+1] = tempBuffer[1];
 8009fcc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8009fd6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009fda:	440b      	add	r3, r1
 8009fdc:	f803 2c5c 	strb.w	r2, [r3, #-92]
        bytesToTransmit[pointerToBuffer+2] = tempBuffer[2];
 8009fe0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009fe4:	3302      	adds	r3, #2
 8009fe6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8009fea:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009fee:	440b      	add	r3, r1
 8009ff0:	f803 2c5c 	strb.w	r2, [r3, #-92]
        bytesToTransmit[pointerToBuffer+3] = tempBuffer[3];
 8009ff4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009ff8:	3303      	adds	r3, #3
 8009ffa:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8009ffe:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800a002:	440b      	add	r3, r1
 800a004:	f803 2c5c 	strb.w	r2, [r3, #-92]
        bytesToTransmit[pointerToBuffer+4] = tempBuffer[4];
 800a008:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a00c:	3304      	adds	r3, #4
 800a00e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800a012:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800a016:	440b      	add	r3, r1
 800a018:	f803 2c5c 	strb.w	r2, [r3, #-92]
        bytesToTransmit[pointerToBuffer+5] = tempBuffer[5];
 800a01c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a020:	3305      	adds	r3, #5
 800a022:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800a026:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800a02a:	440b      	add	r3, r1
 800a02c:	f803 2c5c 	strb.w	r2, [r3, #-92]

        pointerToBuffer += 6;
 800a030:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a034:	3306      	adds	r3, #6
 800a036:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    for(int i = 0 ; i < numberOfFrameRequests ; i++ )
 800a03a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a03c:	3301      	adds	r3, #1
 800a03e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a040:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a046:	429a      	cmp	r2, r3
 800a048:	db8e      	blt.n	8009f68 <PM_FTOR_Handler+0x124>
      }
    }

    //while(!UART.UART_parameters.DMA_Tx_completed);
    UART_DMA_Transmit(bytesToTransmit,6*numberOfFrameRequests);
 800a04a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a04e:	461a      	mov	r2, r3
 800a050:	0052      	lsls	r2, r2, #1
 800a052:	4413      	add	r3, r2
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	b2da      	uxtb	r2, r3
 800a058:	f107 030c 	add.w	r3, r7, #12
 800a05c:	4611      	mov	r1, r2
 800a05e:	4618      	mov	r0, r3
 800a060:	f001 fe06 	bl	800bc70 <UART_DMA_Transmit>
    while(!UART.UART_parameters.DMA_Tx_completed);
 800a064:	bf00      	nop
 800a066:	4b13      	ldr	r3, [pc, #76]	; (800a0b4 <PM_FTOR_Handler+0x270>)
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	f003 0308 	and.w	r3, r3, #8
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	2b00      	cmp	r3, #0
 800a072:	d0f8      	beq.n	800a066 <PM_FTOR_Handler+0x222>
	    					   | ( (uint32_t)buffer[2] << 16 )
							   | ( (uint32_t)buffer[3] << 8 )
							   | ( (uint32_t)buffer[4] << 0 ) );
  }

  return;
 800a074:	e018      	b.n	800a0a8 <PM_FTOR_Handler+0x264>
  else if( buffer[0] == 249 )
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2bf9      	cmp	r3, #249	; 0xf9
 800a07c:	d114      	bne.n	800a0a8 <PM_FTOR_Handler+0x264>
	FTOR2.all = ( ( (uint32_t)buffer[1] << 24 )
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	3301      	adds	r3, #1
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	061a      	lsls	r2, r3, #24
	    					   | ( (uint32_t)buffer[2] << 16 )
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	3302      	adds	r3, #2
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	041b      	lsls	r3, r3, #16
 800a08e:	431a      	orrs	r2, r3
							   | ( (uint32_t)buffer[3] << 8 )
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3303      	adds	r3, #3
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	021b      	lsls	r3, r3, #8
 800a098:	4313      	orrs	r3, r2
							   | ( (uint32_t)buffer[4] << 0 ) );
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	3204      	adds	r2, #4
 800a09e:	7812      	ldrb	r2, [r2, #0]
 800a0a0:	4313      	orrs	r3, r2
	FTOR2.all = ( ( (uint32_t)buffer[1] << 24 )
 800a0a2:	4a05      	ldr	r2, [pc, #20]	; (800a0b8 <PM_FTOR_Handler+0x274>)
 800a0a4:	6013      	str	r3, [r2, #0]
  return;
 800a0a6:	bf00      	nop
 800a0a8:	bf00      	nop
}
 800a0aa:	3768      	adds	r7, #104	; 0x68
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	200003b8 	.word	0x200003b8
 800a0b4:	20000138 	.word	0x20000138
 800a0b8:	20000134 	.word	0x20000134
 800a0bc:	20000008 	.word	0x20000008
 800a0c0:	20000614 	.word	0x20000614

0800a0c4 <PM_TMC_Rx_Handler>:


void PM_TMC_Rx_Handler(uint8_t* buffer)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
	  uint8_t tbfr[6];

	  /* Decode transfer mode control frame from the received frame. */
	  /* Note that decode should be done only for read/write bits only. */

	  TMC.TMC_segments.TMS_REQ = (( buffer[1] & ( 1 << 3 ) ) >> 3);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	10db      	asrs	r3, r3, #3
 800a0d4:	f003 031f 	and.w	r3, r3, #31
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	b2d9      	uxtb	r1, r3
 800a0e0:	4a89      	ldr	r2, [pc, #548]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a0e2:	78d3      	ldrb	r3, [r2, #3]
 800a0e4:	f361 03c7 	bfi	r3, r1, #3, #5
 800a0e8:	70d3      	strb	r3, [r2, #3]
	  TMC.TMC_segments.TMC_REQ = (( buffer[1] & ( 1 << 1 ) ) >> 1);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	105b      	asrs	r3, r3, #1
 800a0f2:	f003 0301 	and.w	r3, r3, #1
 800a0f6:	b2d9      	uxtb	r1, r3
 800a0f8:	4a83      	ldr	r2, [pc, #524]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a0fa:	78d3      	ldrb	r3, [r2, #3]
 800a0fc:	f361 0341 	bfi	r3, r1, #1, #1
 800a100:	70d3      	strb	r3, [r2, #3]

	  TMC.TMC_segments.BTR_ENREQ = (( buffer[2] & ( 1 << 2 ) ) >> 2);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	3302      	adds	r3, #2
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	109b      	asrs	r3, r3, #2
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	b2d9      	uxtb	r1, r3
 800a110:	4a7d      	ldr	r2, [pc, #500]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a112:	7893      	ldrb	r3, [r2, #2]
 800a114:	f361 0382 	bfi	r3, r1, #2, #1
 800a118:	7093      	strb	r3, [r2, #2]
	  TMC.TMC_segments.FTOR_ENREQ = (( buffer[2] & ( 1 << 1 ) ) >> 1);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3302      	adds	r3, #2
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	105b      	asrs	r3, r3, #1
 800a122:	f003 0301 	and.w	r3, r3, #1
 800a126:	b2d9      	uxtb	r1, r3
 800a128:	4a77      	ldr	r2, [pc, #476]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a12a:	7893      	ldrb	r3, [r2, #2]
 800a12c:	f361 0341 	bfi	r3, r1, #1, #1
 800a130:	7093      	strb	r3, [r2, #2]
	  TMC.TMC_segments.SFT_ENREQ = (( buffer[2] & ( 1 << 0 ) ) >> 0);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	3302      	adds	r3, #2
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	f003 0301 	and.w	r3, r3, #1
 800a13c:	b2d9      	uxtb	r1, r3
 800a13e:	4a72      	ldr	r2, [pc, #456]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a140:	7893      	ldrb	r3, [r2, #2]
 800a142:	f361 0300 	bfi	r3, r1, #0, #1
 800a146:	7093      	strb	r3, [r2, #2]

	  TMC.TMC_segments.MTEN_REQ = (( buffer[3] & ( 1 << 0 ) ) >> 0);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3303      	adds	r3, #3
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	f003 0301 	and.w	r3, r3, #1
 800a152:	b2da      	uxtb	r2, r3
 800a154:	4b6c      	ldr	r3, [pc, #432]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a156:	701a      	strb	r2, [r3, #0]

	  /* Check for transfer mode status requests. */

	  if(TMC.TMC_segments.TMS_REQ)
 800a158:	4b6b      	ldr	r3, [pc, #428]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a15a:	78db      	ldrb	r3, [r3, #3]
 800a15c:	f023 0307 	bic.w	r3, r3, #7
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	d04a      	beq.n	800a1fc <PM_TMC_Rx_Handler+0x138>
	  {
		  /* Reset the request bit and set acknowledgement bit. */

		  TMC.TMC_segments.TMC_REQ = 0;
 800a166:	4a68      	ldr	r2, [pc, #416]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a168:	78d3      	ldrb	r3, [r2, #3]
 800a16a:	f36f 0341 	bfc	r3, #1, #1
 800a16e:	70d3      	strb	r3, [r2, #3]
		  TMC.TMC_segments.TMC_ACK = 0;
 800a170:	4a65      	ldr	r2, [pc, #404]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a172:	78d3      	ldrb	r3, [r2, #3]
 800a174:	f36f 0300 	bfc	r3, #0, #1
 800a178:	70d3      	strb	r3, [r2, #3]
		  TMC.TMC_segments.TMS_REQ = 0;
 800a17a:	4a63      	ldr	r2, [pc, #396]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a17c:	78d3      	ldrb	r3, [r2, #3]
 800a17e:	f36f 03c7 	bfc	r3, #3, #5
 800a182:	70d3      	strb	r3, [r2, #3]
		  TMC.TMC_segments.TMS_ACK = 1;
 800a184:	4a60      	ldr	r2, [pc, #384]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a186:	78d3      	ldrb	r3, [r2, #3]
 800a188:	f043 0304 	orr.w	r3, r3, #4
 800a18c:	70d3      	strb	r3, [r2, #3]

		  tbfr[0] = 254;
 800a18e:	23fe      	movs	r3, #254	; 0xfe
 800a190:	723b      	strb	r3, [r7, #8]
		  tbfr[1] = ((((uint32_t)TMC.all) & (uint32_t)((uint32_t)0xFFUL << 24)) >> 24);
 800a192:	4b5d      	ldr	r3, [pc, #372]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	0e1b      	lsrs	r3, r3, #24
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	727b      	strb	r3, [r7, #9]
		  tbfr[2] = ((((uint32_t)TMC.all) & (uint32_t)((uint32_t)0xFFUL << 16)) >> 16);
 800a19c:	4b5a      	ldr	r3, [pc, #360]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	0c1b      	lsrs	r3, r3, #16
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	72bb      	strb	r3, [r7, #10]
		  tbfr[3] = ((((uint32_t)TMC.all) & (uint32_t)((uint32_t)0xFFUL << 8)) >> 8);
 800a1a6:	4b58      	ldr	r3, [pc, #352]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	0a1b      	lsrs	r3, r3, #8
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	72fb      	strb	r3, [r7, #11]
		  tbfr[4] = ((((uint32_t)TMC.all) & (uint32_t)((uint32_t)0xFFUL << 0)) >> 0);
 800a1b0:	4b55      	ldr	r3, [pc, #340]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	733b      	strb	r3, [r7, #12]
		  tbfr[5] = obtainChecksum(tbfr);
 800a1b8:	f107 0308 	add.w	r3, r7, #8
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7fe ffff 	bl	80091c0 <obtainChecksum>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	737b      	strb	r3, [r7, #13]

	      while(!UART.UART_parameters.DMA_Tx_completed);
 800a1c6:	bf00      	nop
 800a1c8:	4b50      	ldr	r3, [pc, #320]	; (800a30c <PM_TMC_Rx_Handler+0x248>)
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	f003 0308 	and.w	r3, r3, #8
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d0f8      	beq.n	800a1c8 <PM_TMC_Rx_Handler+0x104>
	      UART_DMA_Transmit(tbfr,6);
 800a1d6:	f107 0308 	add.w	r3, r7, #8
 800a1da:	2106      	movs	r1, #6
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f001 fd47 	bl	800bc70 <UART_DMA_Transmit>
	      while(!UART.UART_parameters.DMA_Tx_completed);
 800a1e2:	bf00      	nop
 800a1e4:	4b49      	ldr	r3, [pc, #292]	; (800a30c <PM_TMC_Rx_Handler+0x248>)
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	f003 0308 	and.w	r3, r3, #8
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d0f8      	beq.n	800a1e4 <PM_TMC_Rx_Handler+0x120>

	      TMC.TMC_segments.TMS_ACK = 0;
 800a1f2:	4a45      	ldr	r2, [pc, #276]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a1f4:	78d3      	ldrb	r3, [r2, #3]
 800a1f6:	f36f 0382 	bfc	r3, #2, #1
 800a1fa:	70d3      	strb	r3, [r2, #3]

	  /* Check for transfer mode control request. */
	  /* When this request is made, the mode of transfer is updated
	   * to the transfer mode requested by the sender. */

	  if(TMC.TMC_segments.TMC_REQ)
 800a1fc:	4b42      	ldr	r3, [pc, #264]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a1fe:	78db      	ldrb	r3, [r3, #3]
 800a200:	f003 0302 	and.w	r3, r3, #2
 800a204:	b2db      	uxtb	r3, r3
 800a206:	2b00      	cmp	r3, #0
 800a208:	d07a      	beq.n	800a300 <PM_TMC_Rx_Handler+0x23c>
	  {
	    TMC.TMC_segments.BTR_ENSTAT = TMC.TMC_segments.BTR_ENREQ;
 800a20a:	4b3f      	ldr	r3, [pc, #252]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a20c:	789b      	ldrb	r3, [r3, #2]
 800a20e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a212:	b2db      	uxtb	r3, r3
 800a214:	f003 0307 	and.w	r3, r3, #7
 800a218:	b2d9      	uxtb	r1, r3
 800a21a:	4a3b      	ldr	r2, [pc, #236]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a21c:	7893      	ldrb	r3, [r2, #2]
 800a21e:	f361 1347 	bfi	r3, r1, #5, #3
 800a222:	7093      	strb	r3, [r2, #2]
	    TMC.TMC_segments.FTOR_ENSTAT = TMC.TMC_segments.FTOR_ENREQ;
 800a224:	4b38      	ldr	r3, [pc, #224]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a226:	789b      	ldrb	r3, [r3, #2]
 800a228:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a22c:	b2d9      	uxtb	r1, r3
 800a22e:	4a36      	ldr	r2, [pc, #216]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a230:	7893      	ldrb	r3, [r2, #2]
 800a232:	f361 1304 	bfi	r3, r1, #4, #1
 800a236:	7093      	strb	r3, [r2, #2]
	    TMC.TMC_segments.SFT_ENSTAT = TMC.TMC_segments.SFT_ENREQ;
 800a238:	4b33      	ldr	r3, [pc, #204]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a23a:	789b      	ldrb	r3, [r3, #2]
 800a23c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a240:	b2d9      	uxtb	r1, r3
 800a242:	4a31      	ldr	r2, [pc, #196]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a244:	7893      	ldrb	r3, [r2, #2]
 800a246:	f361 03c3 	bfi	r3, r1, #3, #1
 800a24a:	7093      	strb	r3, [r2, #2]

	    TMC.TMC_segments.TMS_REQ = 0;
 800a24c:	4a2e      	ldr	r2, [pc, #184]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a24e:	78d3      	ldrb	r3, [r2, #3]
 800a250:	f36f 03c7 	bfc	r3, #3, #5
 800a254:	70d3      	strb	r3, [r2, #3]
	    TMC.TMC_segments.TMS_ACK = 0;
 800a256:	4a2c      	ldr	r2, [pc, #176]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a258:	78d3      	ldrb	r3, [r2, #3]
 800a25a:	f36f 0382 	bfc	r3, #2, #1
 800a25e:	70d3      	strb	r3, [r2, #3]
	    TMC.TMC_segments.TMC_REQ = 0;
 800a260:	4a29      	ldr	r2, [pc, #164]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a262:	78d3      	ldrb	r3, [r2, #3]
 800a264:	f36f 0341 	bfc	r3, #1, #1
 800a268:	70d3      	strb	r3, [r2, #3]
	    TMC.TMC_segments.TMC_ACK = 1;
 800a26a:	4a27      	ldr	r2, [pc, #156]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a26c:	78d3      	ldrb	r3, [r2, #3]
 800a26e:	f043 0301 	orr.w	r3, r3, #1
 800a272:	70d3      	strb	r3, [r2, #3]

		tbfr[0] = 254;
 800a274:	23fe      	movs	r3, #254	; 0xfe
 800a276:	723b      	strb	r3, [r7, #8]
		tbfr[1] = ((((uint32_t)TMC.all) & (uint32_t)((uint32_t)0xFFUL << 24)) >> 24);
 800a278:	4b23      	ldr	r3, [pc, #140]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	0e1b      	lsrs	r3, r3, #24
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	727b      	strb	r3, [r7, #9]
		tbfr[2] = ((((uint32_t)TMC.all) & (uint32_t)((uint32_t)0xFFUL << 16)) >> 16);
 800a282:	4b21      	ldr	r3, [pc, #132]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	0c1b      	lsrs	r3, r3, #16
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	72bb      	strb	r3, [r7, #10]
		tbfr[3] = ((((uint32_t)TMC.all) & (uint32_t)((uint32_t)0xFFUL << 8)) >> 8);
 800a28c:	4b1e      	ldr	r3, [pc, #120]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	0a1b      	lsrs	r3, r3, #8
 800a292:	b2db      	uxtb	r3, r3
 800a294:	72fb      	strb	r3, [r7, #11]
		tbfr[4] = ((((uint32_t)TMC.all) & (uint32_t)((uint32_t)0xFFUL << 0)) >> 0);
 800a296:	4b1c      	ldr	r3, [pc, #112]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	733b      	strb	r3, [r7, #12]
		tbfr[5] = obtainChecksum(tbfr);
 800a29e:	f107 0308 	add.w	r3, r7, #8
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe ff8c 	bl	80091c0 <obtainChecksum>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	737b      	strb	r3, [r7, #13]

	    while(!UART.UART_parameters.DMA_Tx_completed);
 800a2ac:	bf00      	nop
 800a2ae:	4b17      	ldr	r3, [pc, #92]	; (800a30c <PM_TMC_Rx_Handler+0x248>)
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	f003 0308 	and.w	r3, r3, #8
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d0f8      	beq.n	800a2ae <PM_TMC_Rx_Handler+0x1ea>
	    UART_DMA_Transmit(tbfr,6);
 800a2bc:	f107 0308 	add.w	r3, r7, #8
 800a2c0:	2106      	movs	r1, #6
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f001 fcd4 	bl	800bc70 <UART_DMA_Transmit>
	    while(!UART.UART_parameters.DMA_Tx_completed);
 800a2c8:	bf00      	nop
 800a2ca:	4b10      	ldr	r3, [pc, #64]	; (800a30c <PM_TMC_Rx_Handler+0x248>)
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	f003 0308 	and.w	r3, r3, #8
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d0f8      	beq.n	800a2ca <PM_TMC_Rx_Handler+0x206>

	    TMC.TMC_segments.TMC_ACK = 0;
 800a2d8:	4a0b      	ldr	r2, [pc, #44]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a2da:	78d3      	ldrb	r3, [r2, #3]
 800a2dc:	f36f 0300 	bfc	r3, #0, #1
 800a2e0:	70d3      	strb	r3, [r2, #3]
	    TMC.TMC_segments.BTR_ENREQ = 0;
 800a2e2:	4a09      	ldr	r2, [pc, #36]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a2e4:	7893      	ldrb	r3, [r2, #2]
 800a2e6:	f36f 0382 	bfc	r3, #2, #1
 800a2ea:	7093      	strb	r3, [r2, #2]
	    TMC.TMC_segments.FTOR_ENREQ = 0;
 800a2ec:	4a06      	ldr	r2, [pc, #24]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a2ee:	7893      	ldrb	r3, [r2, #2]
 800a2f0:	f36f 0341 	bfc	r3, #1, #1
 800a2f4:	7093      	strb	r3, [r2, #2]
	    TMC.TMC_segments.SFT_ENREQ = 0;
 800a2f6:	4a04      	ldr	r2, [pc, #16]	; (800a308 <PM_TMC_Rx_Handler+0x244>)
 800a2f8:	7893      	ldrb	r3, [r2, #2]
 800a2fa:	f36f 0300 	bfc	r3, #0, #1
 800a2fe:	7093      	strb	r3, [r2, #2]
	  }
}
 800a300:	bf00      	nop
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	200004ec 	.word	0x200004ec
 800a30c:	20000138 	.word	0x20000138

0800a310 <PM_BTR_Rx_Handler>:


void PM_BTR_Rx_Handler(uint8_t* buffer)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  uint8_t txBuffer[6];

  /* Register 250 is BTR1 register. */

  if( buffer[0] == 250 )
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	2bfa      	cmp	r3, #250	; 0xfa
 800a31e:	f040 80af 	bne.w	800a480 <PM_BTR_Rx_Handler+0x170>
  {
	uint32_t __data = 0;
 800a322:	2300      	movs	r3, #0
 800a324:	617b      	str	r3, [r7, #20]

	__data |= ( ((uint32_t)buffer[1]) << 24 );
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	3301      	adds	r3, #1
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	061b      	lsls	r3, r3, #24
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	4313      	orrs	r3, r2
 800a332:	617b      	str	r3, [r7, #20]
	__data |= ( ((uint32_t)buffer[2]) << 16 );
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	3302      	adds	r3, #2
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	041b      	lsls	r3, r3, #16
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	4313      	orrs	r3, r2
 800a340:	617b      	str	r3, [r7, #20]
	__data |= ( ((uint32_t)buffer[3]) << 8 );
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	3303      	adds	r3, #3
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	021b      	lsls	r3, r3, #8
 800a34a:	697a      	ldr	r2, [r7, #20]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	617b      	str	r3, [r7, #20]
	__data |= ( ((uint32_t)buffer[4]) << 0 );
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	3304      	adds	r3, #4
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	461a      	mov	r2, r3
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	617b      	str	r3, [r7, #20]

	BTR1.all = __data;
 800a35e:	4a6e      	ldr	r2, [pc, #440]	; (800a518 <PM_BTR_Rx_Handler+0x208>)
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	6013      	str	r3, [r2, #0]

    if( BTR1.BTR1_segments.REQ)
 800a364:	4b6c      	ldr	r3, [pc, #432]	; (800a518 <PM_BTR_Rx_Handler+0x208>)
 800a366:	78db      	ldrb	r3, [r3, #3]
 800a368:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 8086 	beq.w	800a480 <PM_BTR_Rx_Handler+0x170>
    {
    	/* Set acknowledgement bit and reset the request bit. */

    	BTR1.BTR1_segments.ACK = 1;
 800a374:	4a68      	ldr	r2, [pc, #416]	; (800a518 <PM_BTR_Rx_Handler+0x208>)
 800a376:	78d3      	ldrb	r3, [r2, #3]
 800a378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a37c:	70d3      	strb	r3, [r2, #3]
    	BTR1.BTR1_segments.REQ = 0;
 800a37e:	4a66      	ldr	r2, [pc, #408]	; (800a518 <PM_BTR_Rx_Handler+0x208>)
 800a380:	78d3      	ldrb	r3, [r2, #3]
 800a382:	f36f 13c7 	bfc	r3, #7, #1
 800a386:	70d3      	strb	r3, [r2, #3]

    	TMC.TMC_segments.BTR_ENSTAT = 1;
 800a388:	4a64      	ldr	r2, [pc, #400]	; (800a51c <PM_BTR_Rx_Handler+0x20c>)
 800a38a:	7893      	ldrb	r3, [r2, #2]
 800a38c:	2101      	movs	r1, #1
 800a38e:	f361 1347 	bfi	r3, r1, #5, #3
 800a392:	7093      	strb	r3, [r2, #2]
    	TMC.TMC_segments.FTOR_ENSTAT = 0;
 800a394:	4a61      	ldr	r2, [pc, #388]	; (800a51c <PM_BTR_Rx_Handler+0x20c>)
 800a396:	7893      	ldrb	r3, [r2, #2]
 800a398:	f36f 1304 	bfc	r3, #4, #1
 800a39c:	7093      	strb	r3, [r2, #2]
    	TMC.TMC_segments.SFT_ENSTAT = 0;
 800a39e:	4a5f      	ldr	r2, [pc, #380]	; (800a51c <PM_BTR_Rx_Handler+0x20c>)
 800a3a0:	7893      	ldrb	r3, [r2, #2]
 800a3a2:	f36f 03c3 	bfc	r3, #3, #1
 800a3a6:	7093      	strb	r3, [r2, #2]

    	__data = BTR1.all;
 800a3a8:	4b5b      	ldr	r3, [pc, #364]	; (800a518 <PM_BTR_Rx_Handler+0x208>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	617b      	str	r3, [r7, #20]

    	txBuffer[0] = 250;
 800a3ae:	23fa      	movs	r3, #250	; 0xfa
 800a3b0:	733b      	strb	r3, [r7, #12]
    	txBuffer[1] = ( ( ((uint32_t)__data) & ( 0xFFUL << 24 ) ) >> 24 );
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	0e1b      	lsrs	r3, r3, #24
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	737b      	strb	r3, [r7, #13]
    	txBuffer[2] = ( ( ((uint32_t)__data) & ( 0xFFUL << 16 ) ) >> 16 );
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	0c1b      	lsrs	r3, r3, #16
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	73bb      	strb	r3, [r7, #14]
    	txBuffer[3] = ( ( ((uint32_t)__data) & ( 0xFFUL << 8 ) ) >> 8 );
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	0a1b      	lsrs	r3, r3, #8
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	73fb      	strb	r3, [r7, #15]
    	txBuffer[4] = ( ( ((uint32_t)__data) & ( 0xFFUL << 0 ) ) >> 0 );
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	743b      	strb	r3, [r7, #16]
    	txBuffer[5] = obtainChecksum(txBuffer);
 800a3d0:	f107 030c 	add.w	r3, r7, #12
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7fe fef3 	bl	80091c0 <obtainChecksum>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	747b      	strb	r3, [r7, #17]

	    while(!UART.UART_parameters.DMA_Tx_completed);
 800a3de:	bf00      	nop
 800a3e0:	4b4f      	ldr	r3, [pc, #316]	; (800a520 <PM_BTR_Rx_Handler+0x210>)
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	f003 0308 	and.w	r3, r3, #8
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0f8      	beq.n	800a3e0 <PM_BTR_Rx_Handler+0xd0>
	    UART_DMA_Transmit(txBuffer,6);
 800a3ee:	f107 030c 	add.w	r3, r7, #12
 800a3f2:	2106      	movs	r1, #6
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f001 fc3b 	bl	800bc70 <UART_DMA_Transmit>
	    while(!UART.UART_parameters.DMA_Tx_completed);
 800a3fa:	bf00      	nop
 800a3fc:	4b48      	ldr	r3, [pc, #288]	; (800a520 <PM_BTR_Rx_Handler+0x210>)
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	f003 0308 	and.w	r3, r3, #8
 800a404:	b2db      	uxtb	r3, r3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d0f8      	beq.n	800a3fc <PM_BTR_Rx_Handler+0xec>

    	SDCP_BTR_PID[0] = BTR1.BTR1_segments.PID_0;
 800a40a:	4b43      	ldr	r3, [pc, #268]	; (800a518 <PM_BTR_Rx_Handler+0x208>)
 800a40c:	781a      	ldrb	r2, [r3, #0]
 800a40e:	4b45      	ldr	r3, [pc, #276]	; (800a524 <PM_BTR_Rx_Handler+0x214>)
 800a410:	701a      	strb	r2, [r3, #0]
         * to be transmitted. The current parameter ID of the parameter
         * to be transferred is accessed by the variable SDCP_BTR_currentPID. */

    	/* The parameter and transfer counters must be reset. */

    	SDCP_BTR_PCNTR = 0;
 800a412:	4b45      	ldr	r3, [pc, #276]	; (800a528 <PM_BTR_Rx_Handler+0x218>)
 800a414:	2200      	movs	r2, #0
 800a416:	601a      	str	r2, [r3, #0]
    	SDCP_BTR_XCNTR = 0;
 800a418:	4b44      	ldr	r3, [pc, #272]	; (800a52c <PM_BTR_Rx_Handler+0x21c>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	601a      	str	r2, [r3, #0]

    	TMC.TMC_segments.BTR_ENSTAT = 1;
 800a41e:	4a3f      	ldr	r2, [pc, #252]	; (800a51c <PM_BTR_Rx_Handler+0x20c>)
 800a420:	7893      	ldrb	r3, [r2, #2]
 800a422:	2101      	movs	r1, #1
 800a424:	f361 1347 	bfi	r3, r1, #5, #3
 800a428:	7093      	strb	r3, [r2, #2]
    	TMC.TMC_segments.FTOR_ENSTAT = 0;
 800a42a:	4a3c      	ldr	r2, [pc, #240]	; (800a51c <PM_BTR_Rx_Handler+0x20c>)
 800a42c:	7893      	ldrb	r3, [r2, #2]
 800a42e:	f36f 1304 	bfc	r3, #4, #1
 800a432:	7093      	strb	r3, [r2, #2]
    	TMC.TMC_segments.SFT_ENSTAT = 0;
 800a434:	4a39      	ldr	r2, [pc, #228]	; (800a51c <PM_BTR_Rx_Handler+0x20c>)
 800a436:	7893      	ldrb	r3, [r2, #2]
 800a438:	f36f 03c3 	bfc	r3, #3, #1
 800a43c:	7093      	strb	r3, [r2, #2]

    	asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP");
 800a43e:	bf00      	nop
 800a440:	bf00      	nop
 800a442:	bf00      	nop
 800a444:	bf00      	nop
    	asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP");
 800a446:	bf00      	nop
 800a448:	bf00      	nop
 800a44a:	bf00      	nop
 800a44c:	bf00      	nop
    	asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP");
 800a44e:	bf00      	nop
 800a450:	bf00      	nop
 800a452:	bf00      	nop
 800a454:	bf00      	nop
    	asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP");
 800a456:	bf00      	nop
 800a458:	bf00      	nop
 800a45a:	bf00      	nop
 800a45c:	bf00      	nop

    	SDCP_BTR_currentPID = SDCP_BTR_PID[SDCP_BTR_PCNTR];
 800a45e:	4b32      	ldr	r3, [pc, #200]	; (800a528 <PM_BTR_Rx_Handler+0x218>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a30      	ldr	r2, [pc, #192]	; (800a524 <PM_BTR_Rx_Handler+0x214>)
 800a464:	5cd3      	ldrb	r3, [r2, r3]
 800a466:	461a      	mov	r2, r3
 800a468:	4b31      	ldr	r3, [pc, #196]	; (800a530 <PM_BTR_Rx_Handler+0x220>)
 800a46a:	601a      	str	r2, [r3, #0]
    	SDCP_BTR_PCNTR = 0;
 800a46c:	4b2e      	ldr	r3, [pc, #184]	; (800a528 <PM_BTR_Rx_Handler+0x218>)
 800a46e:	2200      	movs	r2, #0
 800a470:	601a      	str	r2, [r3, #0]
    	SDCP_BTR_XCNTR = 0;
 800a472:	4b2e      	ldr	r3, [pc, #184]	; (800a52c <PM_BTR_Rx_Handler+0x21c>)
 800a474:	2200      	movs	r2, #0
 800a476:	601a      	str	r2, [r3, #0]

    	SDCP_BTR_FSM_update();
 800a478:	f000 fd4e 	bl	800af18 <SDCP_BTR_FSM_update>


        asm("NOP");
 800a47c:	bf00      	nop
        asm("NOP");
 800a47e:	bf00      	nop
    }
  }

  /* Register 251 is BTR2 register. */

  if( buffer[0] == 251 )
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	2bfb      	cmp	r3, #251	; 0xfb
 800a486:	d11f      	bne.n	800a4c8 <PM_BTR_Rx_Handler+0x1b8>
  {
	  BTR2.BTR2_segments.PID_1 = buffer[1];
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	785a      	ldrb	r2, [r3, #1]
 800a48c:	4b29      	ldr	r3, [pc, #164]	; (800a534 <PM_BTR_Rx_Handler+0x224>)
 800a48e:	70da      	strb	r2, [r3, #3]
	  BTR2.BTR2_segments.PID_2 = buffer[2];
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	789a      	ldrb	r2, [r3, #2]
 800a494:	4b27      	ldr	r3, [pc, #156]	; (800a534 <PM_BTR_Rx_Handler+0x224>)
 800a496:	709a      	strb	r2, [r3, #2]
	  BTR2.BTR2_segments.PID_3 = buffer[3];
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	78da      	ldrb	r2, [r3, #3]
 800a49c:	4b25      	ldr	r3, [pc, #148]	; (800a534 <PM_BTR_Rx_Handler+0x224>)
 800a49e:	705a      	strb	r2, [r3, #1]
	  BTR2.BTR2_segments.PID_4 = buffer[4];
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	791a      	ldrb	r2, [r3, #4]
 800a4a4:	4b23      	ldr	r3, [pc, #140]	; (800a534 <PM_BTR_Rx_Handler+0x224>)
 800a4a6:	701a      	strb	r2, [r3, #0]

	  SDCP_BTR_PID[1] = buffer[1];
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	785a      	ldrb	r2, [r3, #1]
 800a4ac:	4b1d      	ldr	r3, [pc, #116]	; (800a524 <PM_BTR_Rx_Handler+0x214>)
 800a4ae:	705a      	strb	r2, [r3, #1]
	  SDCP_BTR_PID[2] = buffer[2];
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	789a      	ldrb	r2, [r3, #2]
 800a4b4:	4b1b      	ldr	r3, [pc, #108]	; (800a524 <PM_BTR_Rx_Handler+0x214>)
 800a4b6:	709a      	strb	r2, [r3, #2]
	  SDCP_BTR_PID[3] = buffer[3];
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	78da      	ldrb	r2, [r3, #3]
 800a4bc:	4b19      	ldr	r3, [pc, #100]	; (800a524 <PM_BTR_Rx_Handler+0x214>)
 800a4be:	70da      	strb	r2, [r3, #3]
	  SDCP_BTR_PID[4] = buffer[4];
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	791a      	ldrb	r2, [r3, #4]
 800a4c4:	4b17      	ldr	r3, [pc, #92]	; (800a524 <PM_BTR_Rx_Handler+0x214>)
 800a4c6:	711a      	strb	r2, [r3, #4]
  }

  /* Register 252 is BTR3 register. */

  if( buffer[0] == 252 )
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	2bfc      	cmp	r3, #252	; 0xfc
 800a4ce:	d11f      	bne.n	800a510 <PM_BTR_Rx_Handler+0x200>
  {
	  BTR3.BTR3_segments.PID_5 = buffer[1];
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	785a      	ldrb	r2, [r3, #1]
 800a4d4:	4b18      	ldr	r3, [pc, #96]	; (800a538 <PM_BTR_Rx_Handler+0x228>)
 800a4d6:	70da      	strb	r2, [r3, #3]
	  BTR3.BTR3_segments.PID_6 = buffer[2];
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	789a      	ldrb	r2, [r3, #2]
 800a4dc:	4b16      	ldr	r3, [pc, #88]	; (800a538 <PM_BTR_Rx_Handler+0x228>)
 800a4de:	709a      	strb	r2, [r3, #2]
	  BTR3.BTR3_segments.PID_7 = buffer[3];
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	78da      	ldrb	r2, [r3, #3]
 800a4e4:	4b14      	ldr	r3, [pc, #80]	; (800a538 <PM_BTR_Rx_Handler+0x228>)
 800a4e6:	705a      	strb	r2, [r3, #1]
	  BTR3.BTR3_segments.PID_8 = buffer[4];
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	791a      	ldrb	r2, [r3, #4]
 800a4ec:	4b12      	ldr	r3, [pc, #72]	; (800a538 <PM_BTR_Rx_Handler+0x228>)
 800a4ee:	701a      	strb	r2, [r3, #0]

	  SDCP_BTR_PID[5] = buffer[1];
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	785a      	ldrb	r2, [r3, #1]
 800a4f4:	4b0b      	ldr	r3, [pc, #44]	; (800a524 <PM_BTR_Rx_Handler+0x214>)
 800a4f6:	715a      	strb	r2, [r3, #5]
	  SDCP_BTR_PID[6] = buffer[2];
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	789a      	ldrb	r2, [r3, #2]
 800a4fc:	4b09      	ldr	r3, [pc, #36]	; (800a524 <PM_BTR_Rx_Handler+0x214>)
 800a4fe:	719a      	strb	r2, [r3, #6]
	  SDCP_BTR_PID[7] = buffer[3];
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	78da      	ldrb	r2, [r3, #3]
 800a504:	4b07      	ldr	r3, [pc, #28]	; (800a524 <PM_BTR_Rx_Handler+0x214>)
 800a506:	71da      	strb	r2, [r3, #7]
	  SDCP_BTR_PID[8] = buffer[4];
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	791a      	ldrb	r2, [r3, #4]
 800a50c:	4b05      	ldr	r3, [pc, #20]	; (800a524 <PM_BTR_Rx_Handler+0x214>)
 800a50e:	721a      	strb	r2, [r3, #8]
  }
}
 800a510:	bf00      	nop
 800a512:	3718      	adds	r7, #24
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	2000013c 	.word	0x2000013c
 800a51c:	200004ec 	.word	0x200004ec
 800a520:	20000138 	.word	0x20000138
 800a524:	200003a8 	.word	0x200003a8
 800a528:	20000508 	.word	0x20000508
 800a52c:	200003c0 	.word	0x200003c0
 800a530:	200005a4 	.word	0x200005a4
 800a534:	200004e8 	.word	0x200004e8
 800a538:	20000418 	.word	0x20000418

0800a53c <PM_BTR_Tx_Handler>:



void PM_BTR_Tx_Handler()
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	af00      	add	r7, sp, #0
  SDCP_BTR_buffer_position = 0;
 800a540:	4b25      	ldr	r3, [pc, #148]	; (800a5d8 <PM_BTR_Tx_Handler+0x9c>)
 800a542:	2200      	movs	r2, #0
 800a544:	701a      	strb	r2, [r3, #0]

  if( SDCP_BTR_currentPID == 1 )
 800a546:	4b25      	ldr	r3, [pc, #148]	; (800a5dc <PM_BTR_Tx_Handler+0xa0>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d106      	bne.n	800a55c <PM_BTR_Tx_Handler+0x20>
  {
    SDCP_BTR_push( &(imu.accelerometer[X]), I32 );
 800a54e:	2105      	movs	r1, #5
 800a550:	4823      	ldr	r0, [pc, #140]	; (800a5e0 <PM_BTR_Tx_Handler+0xa4>)
 800a552:	f000 fead 	bl	800b2b0 <SDCP_BTR_push>
    SDCP_BTR_FSM_update();
 800a556:	f000 fcdf 	bl	800af18 <SDCP_BTR_FSM_update>
    asm("NOP");
 800a55a:	bf00      	nop
  }
  if( SDCP_BTR_currentPID == 2 )
 800a55c:	4b1f      	ldr	r3, [pc, #124]	; (800a5dc <PM_BTR_Tx_Handler+0xa0>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b02      	cmp	r3, #2
 800a562:	d105      	bne.n	800a570 <PM_BTR_Tx_Handler+0x34>
  {
    SDCP_BTR_push( &(imu.accelerometer[Y]), I32 );
 800a564:	2105      	movs	r1, #5
 800a566:	481f      	ldr	r0, [pc, #124]	; (800a5e4 <PM_BTR_Tx_Handler+0xa8>)
 800a568:	f000 fea2 	bl	800b2b0 <SDCP_BTR_push>
    SDCP_BTR_FSM_update();
 800a56c:	f000 fcd4 	bl	800af18 <SDCP_BTR_FSM_update>
  }
  if( SDCP_BTR_currentPID == 3 )
 800a570:	4b1a      	ldr	r3, [pc, #104]	; (800a5dc <PM_BTR_Tx_Handler+0xa0>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b03      	cmp	r3, #3
 800a576:	d105      	bne.n	800a584 <PM_BTR_Tx_Handler+0x48>
  {
    SDCP_BTR_push( &(imu.accelerometer[Z]), I32 );
 800a578:	2105      	movs	r1, #5
 800a57a:	481b      	ldr	r0, [pc, #108]	; (800a5e8 <PM_BTR_Tx_Handler+0xac>)
 800a57c:	f000 fe98 	bl	800b2b0 <SDCP_BTR_push>
    SDCP_BTR_FSM_update();
 800a580:	f000 fcca 	bl	800af18 <SDCP_BTR_FSM_update>
  }
  if( SDCP_BTR_currentPID == 4 )
 800a584:	4b15      	ldr	r3, [pc, #84]	; (800a5dc <PM_BTR_Tx_Handler+0xa0>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b04      	cmp	r3, #4
 800a58a:	d105      	bne.n	800a598 <PM_BTR_Tx_Handler+0x5c>
  {
    SDCP_BTR_push( &(imu.gyroscope[X]), I32 );
 800a58c:	2105      	movs	r1, #5
 800a58e:	4817      	ldr	r0, [pc, #92]	; (800a5ec <PM_BTR_Tx_Handler+0xb0>)
 800a590:	f000 fe8e 	bl	800b2b0 <SDCP_BTR_push>
    SDCP_BTR_FSM_update();
 800a594:	f000 fcc0 	bl	800af18 <SDCP_BTR_FSM_update>
  }
  if( SDCP_BTR_currentPID == 5 )
 800a598:	4b10      	ldr	r3, [pc, #64]	; (800a5dc <PM_BTR_Tx_Handler+0xa0>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b05      	cmp	r3, #5
 800a59e:	d105      	bne.n	800a5ac <PM_BTR_Tx_Handler+0x70>
  {
    SDCP_BTR_push( &(imu.gyroscope[Y]), I32 );
 800a5a0:	2105      	movs	r1, #5
 800a5a2:	4813      	ldr	r0, [pc, #76]	; (800a5f0 <PM_BTR_Tx_Handler+0xb4>)
 800a5a4:	f000 fe84 	bl	800b2b0 <SDCP_BTR_push>
    SDCP_BTR_FSM_update();
 800a5a8:	f000 fcb6 	bl	800af18 <SDCP_BTR_FSM_update>
  }
  if( SDCP_BTR_currentPID == 6 )
 800a5ac:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <PM_BTR_Tx_Handler+0xa0>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b06      	cmp	r3, #6
 800a5b2:	d105      	bne.n	800a5c0 <PM_BTR_Tx_Handler+0x84>
  {
    SDCP_BTR_push( &(imu.gyroscope[Z]), I32 );
 800a5b4:	2105      	movs	r1, #5
 800a5b6:	480f      	ldr	r0, [pc, #60]	; (800a5f4 <PM_BTR_Tx_Handler+0xb8>)
 800a5b8:	f000 fe7a 	bl	800b2b0 <SDCP_BTR_push>
    SDCP_BTR_FSM_update();
 800a5bc:	f000 fcac 	bl	800af18 <SDCP_BTR_FSM_update>
  }

  if( SDCP_BTR_buffer_position != 0 )
 800a5c0:	4b05      	ldr	r3, [pc, #20]	; (800a5d8 <PM_BTR_Tx_Handler+0x9c>)
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d005      	beq.n	800a5d4 <PM_BTR_Tx_Handler+0x98>
  {
    UART_DMA_Transmit(SDCP_BTR_buffer,SDCP_BTR_buffer_position);
 800a5c8:	4b03      	ldr	r3, [pc, #12]	; (800a5d8 <PM_BTR_Tx_Handler+0x9c>)
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	480a      	ldr	r0, [pc, #40]	; (800a5f8 <PM_BTR_Tx_Handler+0xbc>)
 800a5d0:	f001 fb4e 	bl	800bc70 <UART_DMA_Transmit>
  }
}
 800a5d4:	bf00      	nop
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	2000047e 	.word	0x2000047e
 800a5dc:	200005a4 	.word	0x200005a4
 800a5e0:	20000368 	.word	0x20000368
 800a5e4:	2000036c 	.word	0x2000036c
 800a5e8:	20000370 	.word	0x20000370
 800a5ec:	20000374 	.word	0x20000374
 800a5f0:	20000378 	.word	0x20000378
 800a5f4:	2000037c 	.word	0x2000037c
 800a5f8:	20000518 	.word	0x20000518

0800a5fc <Protocol_Manager>:


void Protocol_Manager()
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	af00      	add	r7, sp, #0
	/* Proceed to transmit messages. Only if the standard frame transmit
	 * bit is set in the transfer mode control register, transit the
	 * standard message frames. */

	if(TMC.TMC_segments.SFT_ENSTAT)
 800a600:	4b0b      	ldr	r3, [pc, #44]	; (800a630 <Protocol_Manager+0x34>)
 800a602:	789b      	ldrb	r3, [r3, #2]
 800a604:	f003 0308 	and.w	r3, r3, #8
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d002      	beq.n	800a614 <Protocol_Manager+0x18>
	{
	  PM_SMF_Tx_Handler();
 800a60e:	f7fe ff49 	bl	80094a4 <PM_SMF_Tx_Handler>
 800a612:	e008      	b.n	800a626 <Protocol_Manager+0x2a>
	}
	else if(TMC.TMC_segments.BTR_ENSTAT)
 800a614:	4b06      	ldr	r3, [pc, #24]	; (800a630 <Protocol_Manager+0x34>)
 800a616:	789b      	ldrb	r3, [r3, #2]
 800a618:	f023 031f 	bic.w	r3, r3, #31
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <Protocol_Manager+0x2a>
	{
	  PM_BTR_Tx_Handler();
 800a622:	f7ff ff8b 	bl	800a53c <PM_BTR_Tx_Handler>
	}

	/* First, handle the received messages. */

	PM_Rx_Handler();
 800a626:	f7ff f8fb 	bl	8009820 <PM_Rx_Handler>

}
 800a62a:	bf00      	nop
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	200004ec 	.word	0x200004ec

0800a634 <__NVIC_EnableIRQ>:
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a63e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a642:	2b00      	cmp	r3, #0
 800a644:	db0b      	blt.n	800a65e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a646:	79fb      	ldrb	r3, [r7, #7]
 800a648:	f003 021f 	and.w	r2, r3, #31
 800a64c:	4907      	ldr	r1, [pc, #28]	; (800a66c <__NVIC_EnableIRQ+0x38>)
 800a64e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a652:	095b      	lsrs	r3, r3, #5
 800a654:	2001      	movs	r0, #1
 800a656:	fa00 f202 	lsl.w	r2, r0, r2
 800a65a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a65e:	bf00      	nop
 800a660:	370c      	adds	r7, #12
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	e000e100 	.word	0xe000e100

0800a670 <__NVIC_SetPriority>:
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	4603      	mov	r3, r0
 800a678:	6039      	str	r1, [r7, #0]
 800a67a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a67c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a680:	2b00      	cmp	r3, #0
 800a682:	db0a      	blt.n	800a69a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	b2da      	uxtb	r2, r3
 800a688:	490c      	ldr	r1, [pc, #48]	; (800a6bc <__NVIC_SetPriority+0x4c>)
 800a68a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a68e:	0112      	lsls	r2, r2, #4
 800a690:	b2d2      	uxtb	r2, r2
 800a692:	440b      	add	r3, r1
 800a694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a698:	e00a      	b.n	800a6b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	4908      	ldr	r1, [pc, #32]	; (800a6c0 <__NVIC_SetPriority+0x50>)
 800a6a0:	79fb      	ldrb	r3, [r7, #7]
 800a6a2:	f003 030f 	and.w	r3, r3, #15
 800a6a6:	3b04      	subs	r3, #4
 800a6a8:	0112      	lsls	r2, r2, #4
 800a6aa:	b2d2      	uxtb	r2, r2
 800a6ac:	440b      	add	r3, r1
 800a6ae:	761a      	strb	r2, [r3, #24]
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr
 800a6bc:	e000e100 	.word	0xe000e100
 800a6c0:	e000ed00 	.word	0xe000ed00

0800a6c4 <RotaryEncoder_Init>:

static uint8_t rotaryEncoder_SW_counter = 0;
static uint8_t rotaryEncoder_DT_counter = 0;
static uint8_t rotaryEncoder_CLK_counter = 0;

void RotaryEncoder_Init(){
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	af00      	add	r7, sp, #0

  /* Enable Port C.*/

  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN_Msk;
 800a6c8:	4b2b      	ldr	r3, [pc, #172]	; (800a778 <RotaryEncoder_Init+0xb4>)
 800a6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6cc:	4a2a      	ldr	r2, [pc, #168]	; (800a778 <RotaryEncoder_Init+0xb4>)
 800a6ce:	f043 0304 	orr.w	r3, r3, #4
 800a6d2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configure PC10, PC11 and PC12 as inputs. */

  GPIOC->MODER &= ~( 0x3UL << ( 2 * 10 ) );
 800a6d4:	4b29      	ldr	r3, [pc, #164]	; (800a77c <RotaryEncoder_Init+0xb8>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a28      	ldr	r2, [pc, #160]	; (800a77c <RotaryEncoder_Init+0xb8>)
 800a6da:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a6de:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~( 0x3UL << ( 2 * 11 ) );
 800a6e0:	4b26      	ldr	r3, [pc, #152]	; (800a77c <RotaryEncoder_Init+0xb8>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a25      	ldr	r2, [pc, #148]	; (800a77c <RotaryEncoder_Init+0xb8>)
 800a6e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a6ea:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~( 0x3UL << ( 2 * 12 ) );
 800a6ec:	4b23      	ldr	r3, [pc, #140]	; (800a77c <RotaryEncoder_Init+0xb8>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a22      	ldr	r2, [pc, #136]	; (800a77c <RotaryEncoder_Init+0xb8>)
 800a6f2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800a6f6:	6013      	str	r3, [r2, #0]

  /* Enable pull-up resistor at PC10, PC11 and PC12. */

   GPIOC->PUPDR |= ( 0x1UL << ( 2 * 10 ) );
 800a6f8:	4b20      	ldr	r3, [pc, #128]	; (800a77c <RotaryEncoder_Init+0xb8>)
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	4a1f      	ldr	r2, [pc, #124]	; (800a77c <RotaryEncoder_Init+0xb8>)
 800a6fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a702:	60d3      	str	r3, [r2, #12]
   GPIOC->PUPDR |= ( 0x1UL << ( 2 * 11 ) );
 800a704:	4b1d      	ldr	r3, [pc, #116]	; (800a77c <RotaryEncoder_Init+0xb8>)
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	4a1c      	ldr	r2, [pc, #112]	; (800a77c <RotaryEncoder_Init+0xb8>)
 800a70a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a70e:	60d3      	str	r3, [r2, #12]
   GPIOC->PUPDR |= ( 0x1UL << ( 2 * 12 ) );
 800a710:	4b1a      	ldr	r3, [pc, #104]	; (800a77c <RotaryEncoder_Init+0xb8>)
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	4a19      	ldr	r2, [pc, #100]	; (800a77c <RotaryEncoder_Init+0xb8>)
 800a716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a71a:	60d3      	str	r3, [r2, #12]

  /* Enable external interrupts on pins PC10, PC11 and PC12. */

  /* Source for EXTI12 is from PC. */

  SYSCFG->EXTICR[3] |= ( 0x2UL << ( 0 << 2 ) );
 800a71c:	4b18      	ldr	r3, [pc, #96]	; (800a780 <RotaryEncoder_Init+0xbc>)
 800a71e:	695b      	ldr	r3, [r3, #20]
 800a720:	4a17      	ldr	r2, [pc, #92]	; (800a780 <RotaryEncoder_Init+0xbc>)
 800a722:	f043 0302 	orr.w	r3, r3, #2
 800a726:	6153      	str	r3, [r2, #20]

  /* Source for EXTI11 is from PC. */

  SYSCFG->EXTICR[2] |= ( 0x2UL << ( 3 << 2 ) );
 800a728:	4b15      	ldr	r3, [pc, #84]	; (800a780 <RotaryEncoder_Init+0xbc>)
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	4a14      	ldr	r2, [pc, #80]	; (800a780 <RotaryEncoder_Init+0xbc>)
 800a72e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a732:	6113      	str	r3, [r2, #16]

  /* Source for EXTI12 is from PC. */

  SYSCFG->EXTICR[2] |= ( 0x2UL << ( 2 << 2 ) );
 800a734:	4b12      	ldr	r3, [pc, #72]	; (800a780 <RotaryEncoder_Init+0xbc>)
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	4a11      	ldr	r2, [pc, #68]	; (800a780 <RotaryEncoder_Init+0xbc>)
 800a73a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a73e:	6113      	str	r3, [r2, #16]
  /* Unmask interrupt bits for EXTI10, EXTI11 and EXTI12. */

  //EXTI->IMR |= ( ( 1 << 10 ) | ( 1 << 11 ) | ( 1 << 12 ) );
  //EXTI->EMR |= ( ( 1 << 10 ) | ( 1 << 11 ) | ( 1 << 12 ) );

  EXTI->IMR |= ( ( 1 << 10 ) | ( 1 << 12 ) );
 800a740:	4b10      	ldr	r3, [pc, #64]	; (800a784 <RotaryEncoder_Init+0xc0>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a0f      	ldr	r2, [pc, #60]	; (800a784 <RotaryEncoder_Init+0xc0>)
 800a746:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800a74a:	6013      	str	r3, [r2, #0]
  EXTI->EMR |= ( ( 1 << 10 ) | ( 1 << 12 ) );
 800a74c:	4b0d      	ldr	r3, [pc, #52]	; (800a784 <RotaryEncoder_Init+0xc0>)
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	4a0c      	ldr	r2, [pc, #48]	; (800a784 <RotaryEncoder_Init+0xc0>)
 800a752:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800a756:	6053      	str	r3, [r2, #4]

  /* Enable interrupt for EXTI10, EXTI11 and EXTI12 at rising and falling
   * edge. */

  //EXTI->RTSR |= ( ( 1 << 12 ) );
  EXTI->FTSR |= ( ( 1 << 10 ) | ( 1 << 12) );
 800a758:	4b0a      	ldr	r3, [pc, #40]	; (800a784 <RotaryEncoder_Init+0xc0>)
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	4a09      	ldr	r2, [pc, #36]	; (800a784 <RotaryEncoder_Init+0xc0>)
 800a75e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800a762:	60d3      	str	r3, [r2, #12]

  /* Enable interrupts for EXTI13, EXTI14 and EXTI15. */

  NVIC_SetPriority (EXTI15_10_IRQn, 9);
 800a764:	2109      	movs	r1, #9
 800a766:	2028      	movs	r0, #40	; 0x28
 800a768:	f7ff ff82 	bl	800a670 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a76c:	2028      	movs	r0, #40	; 0x28
 800a76e:	f7ff ff61 	bl	800a634 <__NVIC_EnableIRQ>
}
 800a772:	bf00      	nop
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	40023800 	.word	0x40023800
 800a77c:	40020800 	.word	0x40020800
 800a780:	40013800 	.word	0x40013800
 800a784:	40013c00 	.word	0x40013c00

0800a788 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
  //__disable_irq();

  uint8_t CLK = ( ( ( GPIOC->IDR & ( 1 << 11 ) ) >> 11 ) == 1 );
 800a78e:	4b83      	ldr	r3, [pc, #524]	; (800a99c <EXTI15_10_IRQHandler+0x214>)
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	0adb      	lsrs	r3, r3, #11
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	2b01      	cmp	r3, #1
 800a79a:	bf0c      	ite	eq
 800a79c:	2301      	moveq	r3, #1
 800a79e:	2300      	movne	r3, #0
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	71fb      	strb	r3, [r7, #7]
  uint8_t SW = ( ( ( GPIOC->IDR & ( 1 << 10 ) ) >> 10 ) == 0 );
 800a7a4:	4b7d      	ldr	r3, [pc, #500]	; (800a99c <EXTI15_10_IRQHandler+0x214>)
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	bf0c      	ite	eq
 800a7b0:	2301      	moveq	r3, #1
 800a7b2:	2300      	movne	r3, #0
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	71bb      	strb	r3, [r7, #6]
  uint8_t DT = ( ( ( GPIOC->IDR & ( 1 << 12 ) ) >> 12 ) == 1 );
 800a7b8:	4b78      	ldr	r3, [pc, #480]	; (800a99c <EXTI15_10_IRQHandler+0x214>)
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	0b1b      	lsrs	r3, r3, #12
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	bf0c      	ite	eq
 800a7c6:	2301      	moveq	r3, #1
 800a7c8:	2300      	movne	r3, #0
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	717b      	strb	r3, [r7, #5]

  /* EXTI10: Rotary encoder switch press. */

  if( (EXTI->PR & ( 1 << 10 )) ){
 800a7ce:	4b74      	ldr	r3, [pc, #464]	; (800a9a0 <EXTI15_10_IRQHandler+0x218>)
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d035      	beq.n	800a846 <EXTI15_10_IRQHandler+0xbe>

	    if(SW)
 800a7da:	79bb      	ldrb	r3, [r7, #6]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d02c      	beq.n	800a83a <EXTI15_10_IRQHandler+0xb2>
	    {

		rotaryEncoder_SW_counter++;
 800a7e0:	4b70      	ldr	r3, [pc, #448]	; (800a9a4 <EXTI15_10_IRQHandler+0x21c>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	b2da      	uxtb	r2, r3
 800a7e8:	4b6e      	ldr	r3, [pc, #440]	; (800a9a4 <EXTI15_10_IRQHandler+0x21c>)
 800a7ea:	701a      	strb	r2, [r3, #0]

		if( rotaryEncoder_SW_counter >= SW_DEBOUNCE_LIMIT )
 800a7ec:	4b6d      	ldr	r3, [pc, #436]	; (800a9a4 <EXTI15_10_IRQHandler+0x21c>)
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d022      	beq.n	800a83a <EXTI15_10_IRQHandler+0xb2>
		{
		  rotaryEncoder_SW_counter = 0;
 800a7f4:	4b6b      	ldr	r3, [pc, #428]	; (800a9a4 <EXTI15_10_IRQHandler+0x21c>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	701a      	strb	r2, [r3, #0]
		  if(Rotary_Encoder.parameters.switch_state == 1 )
 800a7fa:	4b6b      	ldr	r3, [pc, #428]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a802:	b2db      	uxtb	r3, r3
 800a804:	2b01      	cmp	r3, #1
 800a806:	d105      	bne.n	800a814 <EXTI15_10_IRQHandler+0x8c>
		  {
	        Rotary_Encoder.parameters.switch_state = 0;
 800a808:	4a67      	ldr	r2, [pc, #412]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a80a:	6813      	ldr	r3, [r2, #0]
 800a80c:	f36f 0382 	bfc	r3, #2, #1
 800a810:	6013      	str	r3, [r2, #0]
 800a812:	e004      	b.n	800a81e <EXTI15_10_IRQHandler+0x96>
		  }
		  else
		  {
		    Rotary_Encoder.parameters.switch_state = 1;
 800a814:	4a64      	ldr	r2, [pc, #400]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a816:	6813      	ldr	r3, [r2, #0]
 800a818:	f043 0304 	orr.w	r3, r3, #4
 800a81c:	6013      	str	r3, [r2, #0]
		  }
	      Rotary_Encoder.parameters.switch_counter++;
 800a81e:	4b62      	ldr	r3, [pc, #392]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f3c3 03cd 	ubfx	r3, r3, #3, #14
 800a826:	b29b      	uxth	r3, r3
 800a828:	3301      	adds	r3, #1
 800a82a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a82e:	b299      	uxth	r1, r3
 800a830:	4a5d      	ldr	r2, [pc, #372]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a832:	6813      	ldr	r3, [r2, #0]
 800a834:	f361 03d0 	bfi	r3, r1, #3, #14
 800a838:	6013      	str	r3, [r2, #0]
		}

	    }

    EXTI->PR |= ( 1 << 10 );
 800a83a:	4b59      	ldr	r3, [pc, #356]	; (800a9a0 <EXTI15_10_IRQHandler+0x218>)
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	4a58      	ldr	r2, [pc, #352]	; (800a9a0 <EXTI15_10_IRQHandler+0x218>)
 800a840:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a844:	6153      	str	r3, [r2, #20]
  }
  if( EXTI->PR & ( 1 << 12 ) ){
 800a846:	4b56      	ldr	r3, [pc, #344]	; (800a9a0 <EXTI15_10_IRQHandler+0x218>)
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d065      	beq.n	800a91e <EXTI15_10_IRQHandler+0x196>

	//Rotary_Encoder.parameters.switch_state = 0;

    if( !CLK ){
 800a852:	79fb      	ldrb	r3, [r7, #7]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d12d      	bne.n	800a8b4 <EXTI15_10_IRQHandler+0x12c>

      rotaryEncoder_DT_counter++;
 800a858:	4b54      	ldr	r3, [pc, #336]	; (800a9ac <EXTI15_10_IRQHandler+0x224>)
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	3301      	adds	r3, #1
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	4b52      	ldr	r3, [pc, #328]	; (800a9ac <EXTI15_10_IRQHandler+0x224>)
 800a862:	701a      	strb	r2, [r3, #0]

      if(rotaryEncoder_DT_counter >= DT_DEBOUNCE_LIMIT)
 800a864:	4b51      	ldr	r3, [pc, #324]	; (800a9ac <EXTI15_10_IRQHandler+0x224>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d023      	beq.n	800a8b4 <EXTI15_10_IRQHandler+0x12c>
      {
    	rotaryEncoder_DT_counter = 0;
 800a86c:	4b4f      	ldr	r3, [pc, #316]	; (800a9ac <EXTI15_10_IRQHandler+0x224>)
 800a86e:	2200      	movs	r2, #0
 800a870:	701a      	strb	r2, [r3, #0]

    	Rotary_Encoder.parameters.clockwise = 0;
 800a872:	4a4d      	ldr	r2, [pc, #308]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a874:	6813      	ldr	r3, [r2, #0]
 800a876:	f36f 0300 	bfc	r3, #0, #1
 800a87a:	6013      	str	r3, [r2, #0]
        Rotary_Encoder.parameters.anticlockwise = 1;
 800a87c:	4a4a      	ldr	r2, [pc, #296]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a87e:	6813      	ldr	r3, [r2, #0]
 800a880:	f043 0302 	orr.w	r3, r3, #2
 800a884:	6013      	str	r3, [r2, #0]

        if(Rotary_Encoder.parameters.rotation_counter){
 800a886:	4b48      	ldr	r3, [pc, #288]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f3c3 434d 	ubfx	r3, r3, #17, #14
 800a88e:	b29b      	uxth	r3, r3
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00f      	beq.n	800a8b4 <EXTI15_10_IRQHandler+0x12c>
          Rotary_Encoder.parameters.rotation_counter--;
 800a894:	4b44      	ldr	r3, [pc, #272]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f3c3 434d 	ubfx	r3, r3, #17, #14
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 800a8a2:	333f      	adds	r3, #63	; 0x3f
 800a8a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a8a8:	b299      	uxth	r1, r3
 800a8aa:	4a3f      	ldr	r2, [pc, #252]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a8ac:	6813      	ldr	r3, [r2, #0]
 800a8ae:	f361 435e 	bfi	r3, r1, #17, #14
 800a8b2:	6013      	str	r3, [r2, #0]
        }
      }
    }
    if( CLK & !DT )
 800a8b4:	79fb      	ldrb	r3, [r7, #7]
 800a8b6:	797a      	ldrb	r2, [r7, #5]
 800a8b8:	2a00      	cmp	r2, #0
 800a8ba:	bf0c      	ite	eq
 800a8bc:	2201      	moveq	r2, #1
 800a8be:	2200      	movne	r2, #0
 800a8c0:	b2d2      	uxtb	r2, r2
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d024      	beq.n	800a912 <EXTI15_10_IRQHandler+0x18a>
    {
    	rotaryEncoder_CLK_counter++;
 800a8c8:	4b39      	ldr	r3, [pc, #228]	; (800a9b0 <EXTI15_10_IRQHandler+0x228>)
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	4b37      	ldr	r3, [pc, #220]	; (800a9b0 <EXTI15_10_IRQHandler+0x228>)
 800a8d2:	701a      	strb	r2, [r3, #0]

    	if(rotaryEncoder_CLK_counter >= CLK_DEBOUNCE_LIMIT )
 800a8d4:	4b36      	ldr	r3, [pc, #216]	; (800a9b0 <EXTI15_10_IRQHandler+0x228>)
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d01a      	beq.n	800a912 <EXTI15_10_IRQHandler+0x18a>
    	{
    	  rotaryEncoder_CLK_counter = 0;
 800a8dc:	4b34      	ldr	r3, [pc, #208]	; (800a9b0 <EXTI15_10_IRQHandler+0x228>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	701a      	strb	r2, [r3, #0]

          Rotary_Encoder.parameters.clockwise = 1;
 800a8e2:	4a31      	ldr	r2, [pc, #196]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a8e4:	6813      	ldr	r3, [r2, #0]
 800a8e6:	f043 0301 	orr.w	r3, r3, #1
 800a8ea:	6013      	str	r3, [r2, #0]
          Rotary_Encoder.parameters.anticlockwise = 0;
 800a8ec:	4a2e      	ldr	r2, [pc, #184]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a8ee:	6813      	ldr	r3, [r2, #0]
 800a8f0:	f36f 0341 	bfc	r3, #1, #1
 800a8f4:	6013      	str	r3, [r2, #0]
          Rotary_Encoder.parameters.rotation_counter++;
 800a8f6:	4b2c      	ldr	r3, [pc, #176]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f3c3 434d 	ubfx	r3, r3, #17, #14
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	3301      	adds	r3, #1
 800a902:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a906:	b299      	uxth	r1, r3
 800a908:	4a27      	ldr	r2, [pc, #156]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a90a:	6813      	ldr	r3, [r2, #0]
 800a90c:	f361 435e 	bfi	r3, r1, #17, #14
 800a910:	6013      	str	r3, [r2, #0]
    	}
    }

    EXTI->PR |= ( 1 << 12 );
 800a912:	4b23      	ldr	r3, [pc, #140]	; (800a9a0 <EXTI15_10_IRQHandler+0x218>)
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	4a22      	ldr	r2, [pc, #136]	; (800a9a0 <EXTI15_10_IRQHandler+0x218>)
 800a918:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a91c:	6153      	str	r3, [r2, #20]

  //EXTI->PR |= ( ( 1 << 10 ) | ( 1 << 11 ) | ( 1 << 12 ) );

  /* Update communication frame variables. */

  GUI_SMF.GUI_SMF_segments.RENC_CLK  = Rotary_Encoder.parameters.clockwise;
 800a91e:	4b22      	ldr	r3, [pc, #136]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a926:	b2d9      	uxtb	r1, r3
 800a928:	4a22      	ldr	r2, [pc, #136]	; (800a9b4 <EXTI15_10_IRQHandler+0x22c>)
 800a92a:	7813      	ldrb	r3, [r2, #0]
 800a92c:	f361 1304 	bfi	r3, r1, #4, #1
 800a930:	7013      	strb	r3, [r2, #0]
  GUI_SMF.GUI_SMF_segments.RENC_ACLK = Rotary_Encoder.parameters.anticlockwise;
 800a932:	4b1d      	ldr	r3, [pc, #116]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a93a:	b2d9      	uxtb	r1, r3
 800a93c:	4a1d      	ldr	r2, [pc, #116]	; (800a9b4 <EXTI15_10_IRQHandler+0x22c>)
 800a93e:	7813      	ldrb	r3, [r2, #0]
 800a940:	f361 1345 	bfi	r3, r1, #5, #1
 800a944:	7013      	strb	r3, [r2, #0]
  GUI_SMF.GUI_SMF_segments.RENC_SW   = Rotary_Encoder.parameters.switch_state;
 800a946:	4b18      	ldr	r3, [pc, #96]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a94e:	b2d9      	uxtb	r1, r3
 800a950:	4a18      	ldr	r2, [pc, #96]	; (800a9b4 <EXTI15_10_IRQHandler+0x22c>)
 800a952:	7813      	ldrb	r3, [r2, #0]
 800a954:	f361 1386 	bfi	r3, r1, #6, #1
 800a958:	7013      	strb	r3, [r2, #0]
  GUI_SMF.GUI_SMF_segments.rotation_counter = Rotary_Encoder.parameters.rotation_counter;
 800a95a:	4b13      	ldr	r3, [pc, #76]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f3c3 434d 	ubfx	r3, r3, #17, #14
 800a962:	b29b      	uxth	r3, r3
 800a964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a968:	b299      	uxth	r1, r3
 800a96a:	4a12      	ldr	r2, [pc, #72]	; (800a9b4 <EXTI15_10_IRQHandler+0x22c>)
 800a96c:	6813      	ldr	r3, [r2, #0]
 800a96e:	f361 13d2 	bfi	r3, r1, #7, #12
 800a972:	6013      	str	r3, [r2, #0]
  GUI_SMF.GUI_SMF_segments.switch_counter = Rotary_Encoder.parameters.switch_counter;
 800a974:	4b0c      	ldr	r3, [pc, #48]	; (800a9a8 <EXTI15_10_IRQHandler+0x220>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f3c3 03cd 	ubfx	r3, r3, #3, #14
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a982:	b299      	uxth	r1, r3
 800a984:	4a0b      	ldr	r2, [pc, #44]	; (800a9b4 <EXTI15_10_IRQHandler+0x22c>)
 800a986:	8853      	ldrh	r3, [r2, #2]
 800a988:	f361 03ce 	bfi	r3, r1, #3, #12
 800a98c:	8053      	strh	r3, [r2, #2]

  //__enable_irq();
}
 800a98e:	bf00      	nop
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	40020800 	.word	0x40020800
 800a9a0:	40013c00 	.word	0x40013c00
 800a9a4:	20000120 	.word	0x20000120
 800a9a8:	200005a0 	.word	0x200005a0
 800a9ac:	20000121 	.word	0x20000121
 800a9b0:	20000122 	.word	0x20000122
 800a9b4:	20000510 	.word	0x20000510

0800a9b8 <SDCP_encode>:
int8_t SDCP_RXQ_front = - 1;    	//  SDCP receive circular queue front.
int8_t SDCP_RXQ_back = -1;     		//  SDCP receive circular queue back.

/* Function to encode a message frame. */

void SDCP_encode(void* frame, uint8_t frameID, uint8_t priority, uint8_t* buffer){
 800a9b8:	b480      	push	{r7}
 800a9ba:	b087      	sub	sp, #28
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	607b      	str	r3, [r7, #4]
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	72fb      	strb	r3, [r7, #11]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	72bb      	strb	r3, [r7, #10]

  /* Obtain data from the frame structure. */

  uint32_t data = (*((__DF*)frame)).__data;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	617b      	str	r3, [r7, #20]

  /* The most significant byte contains the frame ID along with the priority. */

  buffer[0] = ( (priority << 7) + frameID );
 800a9d0:	7abb      	ldrb	r3, [r7, #10]
 800a9d2:	01db      	lsls	r3, r3, #7
 800a9d4:	b2da      	uxtb	r2, r3
 800a9d6:	7afb      	ldrb	r3, [r7, #11]
 800a9d8:	4413      	add	r3, r2
 800a9da:	b2da      	uxtb	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	701a      	strb	r2, [r3, #0]

  /* The next four bytes contain data. */

  buffer[1] = (uint8_t)( (data & 0xFF000000UL) >> 24 );
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	0e1a      	lsrs	r2, r3, #24
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	b2d2      	uxtb	r2, r2
 800a9ea:	701a      	strb	r2, [r3, #0]
  buffer[2] = (uint8_t)( (data & 0x00FF0000UL) >> 16 );
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	0c1a      	lsrs	r2, r3, #16
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	3302      	adds	r3, #2
 800a9f4:	b2d2      	uxtb	r2, r2
 800a9f6:	701a      	strb	r2, [r3, #0]
  buffer[3] = (uint8_t)( (data & 0x0000FF00UL) >> 8 );
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	0a1a      	lsrs	r2, r3, #8
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	3303      	adds	r3, #3
 800aa00:	b2d2      	uxtb	r2, r2
 800aa02:	701a      	strb	r2, [r3, #0]
  buffer[4] = (uint8_t)( (data & 0x000000FFUL) >> 0 );
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	3304      	adds	r3, #4
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	b2d2      	uxtb	r2, r2
 800aa0c:	701a      	strb	r2, [r3, #0]

  /* Calculate 8-bit checksum and load it into the last byte of the data frame. */

  buffer[5] = (uint8_t)(((uint16_t)buffer[0] + (uint16_t)buffer[1] + (uint16_t)buffer[2] + (uint16_t)buffer[3] + (uint16_t)buffer[4])%255);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	3301      	adds	r3, #1
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	3202      	adds	r2, #2
 800aa20:	7812      	ldrb	r2, [r2, #0]
 800aa22:	4413      	add	r3, r2
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	3203      	adds	r2, #3
 800aa28:	7812      	ldrb	r2, [r2, #0]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	3204      	adds	r2, #4
 800aa30:	7812      	ldrb	r2, [r2, #0]
 800aa32:	441a      	add	r2, r3
 800aa34:	4b0e      	ldr	r3, [pc, #56]	; (800aa70 <SDCP_encode+0xb8>)
 800aa36:	fb83 1302 	smull	r1, r3, r3, r2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	11d9      	asrs	r1, r3, #7
 800aa3e:	17d3      	asrs	r3, r2, #31
 800aa40:	1ac9      	subs	r1, r1, r3
 800aa42:	460b      	mov	r3, r1
 800aa44:	021b      	lsls	r3, r3, #8
 800aa46:	1a5b      	subs	r3, r3, r1
 800aa48:	1ad1      	subs	r1, r2, r3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	3305      	adds	r3, #5
 800aa4e:	b2ca      	uxtb	r2, r1
 800aa50:	701a      	strb	r2, [r3, #0]
  buffer[5] = ~buffer[5];
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	3305      	adds	r3, #5
 800aa56:	781a      	ldrb	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3305      	adds	r3, #5
 800aa5c:	43d2      	mvns	r2, r2
 800aa5e:	b2d2      	uxtb	r2, r2
 800aa60:	701a      	strb	r2, [r3, #0]
}
 800aa62:	bf00      	nop
 800aa64:	371c      	adds	r7, #28
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	80808081 	.word	0x80808081

0800aa74 <SDCP_decode>:

/* Function to decode a message frame. */

uint8_t SDCP_decode( uint8_t* buffer, uint8_t frameID, void* frame ){
 800aa74:	b480      	push	{r7}
 800aa76:	b087      	sub	sp, #28
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	607a      	str	r2, [r7, #4]
 800aa80:	72fb      	strb	r3, [r7, #11]

  /* Check if the frame ID of the received message matches with the expected frame to be decoded. */

  if( ( buffer[0] & 0x7F ) == frameID ){
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa8a:	7afb      	ldrb	r3, [r7, #11]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d117      	bne.n	800aac0 <SDCP_decode+0x4c>

    /* Extract the data bytes from the buffer. */

    uint32_t frameData = ( ( (uint32_t)(buffer[1]) << 24 )
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	3301      	adds	r3, #1
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	061a      	lsls	r2, r3, #24
	                   + ( (uint32_t)(buffer[2]) << 16 )
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	3302      	adds	r3, #2
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	041b      	lsls	r3, r3, #16
 800aaa0:	441a      	add	r2, r3
                       + ( (uint32_t)(buffer[3]) << 8 )
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3303      	adds	r3, #3
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	021b      	lsls	r3, r3, #8
 800aaaa:	4413      	add	r3, r2
                       + ( (uint32_t)(buffer[4]) << 0 ) );
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	3204      	adds	r2, #4
 800aab0:	7812      	ldrb	r2, [r2, #0]
    uint32_t frameData = ( ( (uint32_t)(buffer[1]) << 24 )
 800aab2:	4413      	add	r3, r2
 800aab4:	617b      	str	r3, [r7, #20]

    /* Load data into the union. */

    (*((__DF*)frame)).__data = frameData;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	697a      	ldr	r2, [r7, #20]
 800aaba:	601a      	str	r2, [r3, #0]

    return(1);
 800aabc:	2301      	movs	r3, #1
 800aabe:	e000      	b.n	800aac2 <SDCP_decode+0x4e>
  }

	return(0);
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	371c      	adds	r7, #28
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
	...

0800aad0 <SDCP_RXNQ>:



/* Function to load an encoded data frame into the receive circular queue. */

uint8_t SDCP_RXNQ( uint8_t* buffer ){
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]

  /* Check priority of the incoming 6-byte encoded frame. */

  if( buffer[0] & 0x80 ){
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	b25b      	sxtb	r3, r3
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f280 809f 	bge.w	800ac22 <SDCP_RXNQ+0x152>
	/* Check if queue is full. This is done by checking if the rear is about
	   to exceed the front. */

	int8_t nextFront;

	nextFront = SDCP_RXQ_front - 1;
 800aae4:	4b9b      	ldr	r3, [pc, #620]	; (800ad54 <SDCP_RXNQ+0x284>)
 800aae6:	f993 3000 	ldrsb.w	r3, [r3]
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	3b01      	subs	r3, #1
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	73fb      	strb	r3, [r7, #15]

	if(nextFront <= -1){
 800aaf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	da01      	bge.n	800aafe <SDCP_RXNQ+0x2e>
	  nextFront = SDCP_RXQ_SIZE - 1;
 800aafa:	2309      	movs	r3, #9
 800aafc:	73fb      	strb	r3, [r7, #15]
	}

	if( ( ( SDCP_RXQ_front == 0 ) && ( SDCP_RXQ_back == ( SDCP_RXQ_SIZE - 1 ) ) )
 800aafe:	4b95      	ldr	r3, [pc, #596]	; (800ad54 <SDCP_RXNQ+0x284>)
 800ab00:	f993 3000 	ldrsb.w	r3, [r3]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d104      	bne.n	800ab12 <SDCP_RXNQ+0x42>
 800ab08:	4b93      	ldr	r3, [pc, #588]	; (800ad58 <SDCP_RXNQ+0x288>)
 800ab0a:	f993 3000 	ldrsb.w	r3, [r3]
 800ab0e:	2b09      	cmp	r3, #9
 800ab10:	d012      	beq.n	800ab38 <SDCP_RXNQ+0x68>
		 || ( ( nextFront % SDCP_RXQ_SIZE ) == SDCP_RXQ_back ) ){
 800ab12:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800ab16:	4b91      	ldr	r3, [pc, #580]	; (800ad5c <SDCP_RXNQ+0x28c>)
 800ab18:	fb83 1302 	smull	r1, r3, r3, r2
 800ab1c:	1099      	asrs	r1, r3, #2
 800ab1e:	17d3      	asrs	r3, r2, #31
 800ab20:	1ac9      	subs	r1, r1, r3
 800ab22:	460b      	mov	r3, r1
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	440b      	add	r3, r1
 800ab28:	005b      	lsls	r3, r3, #1
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	b25a      	sxtb	r2, r3
 800ab2e:	4b8a      	ldr	r3, [pc, #552]	; (800ad58 <SDCP_RXNQ+0x288>)
 800ab30:	f993 3000 	ldrsb.w	r3, [r3]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d101      	bne.n	800ab3c <SDCP_RXNQ+0x6c>

        return(0);
 800ab38:	2300      	movs	r3, #0
 800ab3a:	e107      	b.n	800ad4c <SDCP_RXNQ+0x27c>

	}
    else if(SDCP_RXQ_front == -1){    /* If this is the first message frame loaded into the queue. */
 800ab3c:	4b85      	ldr	r3, [pc, #532]	; (800ad54 <SDCP_RXNQ+0x284>)
 800ab3e:	f993 3000 	ldrsb.w	r3, [r3]
 800ab42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab46:	d108      	bne.n	800ab5a <SDCP_RXNQ+0x8a>

        SDCP_RXQ_front = SDCP_RXQ_back = 0;
 800ab48:	4b83      	ldr	r3, [pc, #524]	; (800ad58 <SDCP_RXNQ+0x288>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	701a      	strb	r2, [r3, #0]
 800ab4e:	4b82      	ldr	r3, [pc, #520]	; (800ad58 <SDCP_RXNQ+0x288>)
 800ab50:	f993 2000 	ldrsb.w	r2, [r3]
 800ab54:	4b7f      	ldr	r3, [pc, #508]	; (800ad54 <SDCP_RXNQ+0x284>)
 800ab56:	701a      	strb	r2, [r3, #0]
 800ab58:	e014      	b.n	800ab84 <SDCP_RXNQ+0xb4>

    }
	else if( (SDCP_RXQ_front - 1) == - 1 ){  /* If rear is about to warp to start. */
 800ab5a:	4b7e      	ldr	r3, [pc, #504]	; (800ad54 <SDCP_RXNQ+0x284>)
 800ab5c:	f993 3000 	ldrsb.w	r3, [r3]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d106      	bne.n	800ab72 <SDCP_RXNQ+0xa2>

		printf("\nRXQ: Queue on front wrap.\n");
 800ab64:	487e      	ldr	r0, [pc, #504]	; (800ad60 <SDCP_RXNQ+0x290>)
 800ab66:	f001 fb35 	bl	800c1d4 <puts>

        SDCP_RXQ_front = SDCP_RXQ_SIZE - 1;
 800ab6a:	4b7a      	ldr	r3, [pc, #488]	; (800ad54 <SDCP_RXNQ+0x284>)
 800ab6c:	2209      	movs	r2, #9
 800ab6e:	701a      	strb	r2, [r3, #0]
 800ab70:	e008      	b.n	800ab84 <SDCP_RXNQ+0xb4>
	}
    else{  /* If the queue is NOT full and element is NOT the first element in queue AND the queue is NOT warping around. */

        SDCP_RXQ_front--;
 800ab72:	4b78      	ldr	r3, [pc, #480]	; (800ad54 <SDCP_RXNQ+0x284>)
 800ab74:	f993 3000 	ldrsb.w	r3, [r3]
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	b25a      	sxtb	r2, r3
 800ab80:	4b74      	ldr	r3, [pc, #464]	; (800ad54 <SDCP_RXNQ+0x284>)
 800ab82:	701a      	strb	r2, [r3, #0]

    }

	/* Load message frame into queue. */

	SDCP_RXQ[6*SDCP_RXQ_front+0] = 	buffer[0];
 800ab84:	4b73      	ldr	r3, [pc, #460]	; (800ad54 <SDCP_RXNQ+0x284>)
 800ab86:	f993 3000 	ldrsb.w	r3, [r3]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	005b      	lsls	r3, r3, #1
 800ab90:	4413      	add	r3, r2
 800ab92:	005b      	lsls	r3, r3, #1
 800ab94:	461a      	mov	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	7819      	ldrb	r1, [r3, #0]
 800ab9a:	4b72      	ldr	r3, [pc, #456]	; (800ad64 <SDCP_RXNQ+0x294>)
 800ab9c:	5499      	strb	r1, [r3, r2]
	SDCP_RXQ[6*SDCP_RXQ_front+1] = 	buffer[1];
 800ab9e:	4b6d      	ldr	r3, [pc, #436]	; (800ad54 <SDCP_RXNQ+0x284>)
 800aba0:	f993 3000 	ldrsb.w	r3, [r3]
 800aba4:	461a      	mov	r2, r3
 800aba6:	4613      	mov	r3, r2
 800aba8:	005b      	lsls	r3, r3, #1
 800abaa:	4413      	add	r3, r2
 800abac:	005b      	lsls	r3, r3, #1
 800abae:	3301      	adds	r3, #1
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	7851      	ldrb	r1, [r2, #1]
 800abb4:	4a6b      	ldr	r2, [pc, #428]	; (800ad64 <SDCP_RXNQ+0x294>)
 800abb6:	54d1      	strb	r1, [r2, r3]
	SDCP_RXQ[6*SDCP_RXQ_front+2] = 	buffer[2];
 800abb8:	4b66      	ldr	r3, [pc, #408]	; (800ad54 <SDCP_RXNQ+0x284>)
 800abba:	f993 3000 	ldrsb.w	r3, [r3]
 800abbe:	461a      	mov	r2, r3
 800abc0:	4613      	mov	r3, r2
 800abc2:	005b      	lsls	r3, r3, #1
 800abc4:	4413      	add	r3, r2
 800abc6:	005b      	lsls	r3, r3, #1
 800abc8:	3302      	adds	r3, #2
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	7891      	ldrb	r1, [r2, #2]
 800abce:	4a65      	ldr	r2, [pc, #404]	; (800ad64 <SDCP_RXNQ+0x294>)
 800abd0:	54d1      	strb	r1, [r2, r3]
	SDCP_RXQ[6*SDCP_RXQ_front+3] = 	buffer[3];
 800abd2:	4b60      	ldr	r3, [pc, #384]	; (800ad54 <SDCP_RXNQ+0x284>)
 800abd4:	f993 3000 	ldrsb.w	r3, [r3]
 800abd8:	461a      	mov	r2, r3
 800abda:	4613      	mov	r3, r2
 800abdc:	005b      	lsls	r3, r3, #1
 800abde:	4413      	add	r3, r2
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	3303      	adds	r3, #3
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	78d1      	ldrb	r1, [r2, #3]
 800abe8:	4a5e      	ldr	r2, [pc, #376]	; (800ad64 <SDCP_RXNQ+0x294>)
 800abea:	54d1      	strb	r1, [r2, r3]
    SDCP_RXQ[6*SDCP_RXQ_front+4] = 	buffer[4];
 800abec:	4b59      	ldr	r3, [pc, #356]	; (800ad54 <SDCP_RXNQ+0x284>)
 800abee:	f993 3000 	ldrsb.w	r3, [r3]
 800abf2:	461a      	mov	r2, r3
 800abf4:	4613      	mov	r3, r2
 800abf6:	005b      	lsls	r3, r3, #1
 800abf8:	4413      	add	r3, r2
 800abfa:	005b      	lsls	r3, r3, #1
 800abfc:	3304      	adds	r3, #4
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	7911      	ldrb	r1, [r2, #4]
 800ac02:	4a58      	ldr	r2, [pc, #352]	; (800ad64 <SDCP_RXNQ+0x294>)
 800ac04:	54d1      	strb	r1, [r2, r3]
    SDCP_RXQ[6*SDCP_RXQ_front+5] = 	buffer[5];
 800ac06:	4b53      	ldr	r3, [pc, #332]	; (800ad54 <SDCP_RXNQ+0x284>)
 800ac08:	f993 3000 	ldrsb.w	r3, [r3]
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	4613      	mov	r3, r2
 800ac10:	005b      	lsls	r3, r3, #1
 800ac12:	4413      	add	r3, r2
 800ac14:	005b      	lsls	r3, r3, #1
 800ac16:	3305      	adds	r3, #5
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	7951      	ldrb	r1, [r2, #5]
 800ac1c:	4a51      	ldr	r2, [pc, #324]	; (800ad64 <SDCP_RXNQ+0x294>)
 800ac1e:	54d1      	strb	r1, [r2, r3]
 800ac20:	e093      	b.n	800ad4a <SDCP_RXNQ+0x27a>
	   at the back of the queue. */

	/* Check if queue is full. This is done by checking if the rear is about
	   to exceed the front. */

	if( ( ( SDCP_RXQ_front == 0 ) && ( SDCP_RXQ_back == ( SDCP_RXQ_SIZE - 1 ) ) )
 800ac22:	4b4c      	ldr	r3, [pc, #304]	; (800ad54 <SDCP_RXNQ+0x284>)
 800ac24:	f993 3000 	ldrsb.w	r3, [r3]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d104      	bne.n	800ac36 <SDCP_RXNQ+0x166>
 800ac2c:	4b4a      	ldr	r3, [pc, #296]	; (800ad58 <SDCP_RXNQ+0x288>)
 800ac2e:	f993 3000 	ldrsb.w	r3, [r3]
 800ac32:	2b09      	cmp	r3, #9
 800ac34:	d013      	beq.n	800ac5e <SDCP_RXNQ+0x18e>
		 || ( ( ( SDCP_RXQ_back + 1 ) % SDCP_RXQ_SIZE ) == SDCP_RXQ_front ) ){
 800ac36:	4b48      	ldr	r3, [pc, #288]	; (800ad58 <SDCP_RXNQ+0x288>)
 800ac38:	f993 3000 	ldrsb.w	r3, [r3]
 800ac3c:	1c59      	adds	r1, r3, #1
 800ac3e:	4b47      	ldr	r3, [pc, #284]	; (800ad5c <SDCP_RXNQ+0x28c>)
 800ac40:	fb83 2301 	smull	r2, r3, r3, r1
 800ac44:	109a      	asrs	r2, r3, #2
 800ac46:	17cb      	asrs	r3, r1, #31
 800ac48:	1ad2      	subs	r2, r2, r3
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4413      	add	r3, r2
 800ac50:	005b      	lsls	r3, r3, #1
 800ac52:	1aca      	subs	r2, r1, r3
 800ac54:	4b3f      	ldr	r3, [pc, #252]	; (800ad54 <SDCP_RXNQ+0x284>)
 800ac56:	f993 3000 	ldrsb.w	r3, [r3]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d101      	bne.n	800ac62 <SDCP_RXNQ+0x192>

        return(0);
 800ac5e:	2300      	movs	r3, #0
 800ac60:	e074      	b.n	800ad4c <SDCP_RXNQ+0x27c>

	}
    else if(SDCP_RXQ_front == -1){    /* If this is the first messag frame loaded into the queue. */
 800ac62:	4b3c      	ldr	r3, [pc, #240]	; (800ad54 <SDCP_RXNQ+0x284>)
 800ac64:	f993 3000 	ldrsb.w	r3, [r3]
 800ac68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6c:	d108      	bne.n	800ac80 <SDCP_RXNQ+0x1b0>

        SDCP_RXQ_front = SDCP_RXQ_back = 0;
 800ac6e:	4b3a      	ldr	r3, [pc, #232]	; (800ad58 <SDCP_RXNQ+0x288>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	701a      	strb	r2, [r3, #0]
 800ac74:	4b38      	ldr	r3, [pc, #224]	; (800ad58 <SDCP_RXNQ+0x288>)
 800ac76:	f993 2000 	ldrsb.w	r2, [r3]
 800ac7a:	4b36      	ldr	r3, [pc, #216]	; (800ad54 <SDCP_RXNQ+0x284>)
 800ac7c:	701a      	strb	r2, [r3, #0]
 800ac7e:	e016      	b.n	800acae <SDCP_RXNQ+0x1de>

    }
	else if( (SDCP_RXQ_back == (SDCP_RXQ_SIZE-1)) && ( SDCP_RXQ_front != 0 ) ){  /* If rear is about to warp to start. */
 800ac80:	4b35      	ldr	r3, [pc, #212]	; (800ad58 <SDCP_RXNQ+0x288>)
 800ac82:	f993 3000 	ldrsb.w	r3, [r3]
 800ac86:	2b09      	cmp	r3, #9
 800ac88:	d108      	bne.n	800ac9c <SDCP_RXNQ+0x1cc>
 800ac8a:	4b32      	ldr	r3, [pc, #200]	; (800ad54 <SDCP_RXNQ+0x284>)
 800ac8c:	f993 3000 	ldrsb.w	r3, [r3]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d003      	beq.n	800ac9c <SDCP_RXNQ+0x1cc>

        SDCP_RXQ_back = 0;
 800ac94:	4b30      	ldr	r3, [pc, #192]	; (800ad58 <SDCP_RXNQ+0x288>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	701a      	strb	r2, [r3, #0]
 800ac9a:	e008      	b.n	800acae <SDCP_RXNQ+0x1de>
	}
    else{  /* If the queue is NOT full and element is NOT the first element in queue AND the queue is NOT warping around. */

        SDCP_RXQ_back++;
 800ac9c:	4b2e      	ldr	r3, [pc, #184]	; (800ad58 <SDCP_RXNQ+0x288>)
 800ac9e:	f993 3000 	ldrsb.w	r3, [r3]
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	3301      	adds	r3, #1
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	b25a      	sxtb	r2, r3
 800acaa:	4b2b      	ldr	r3, [pc, #172]	; (800ad58 <SDCP_RXNQ+0x288>)
 800acac:	701a      	strb	r2, [r3, #0]

    }

	/* Load message frame into queue. */

	SDCP_RXQ[6*SDCP_RXQ_back+0] = 	buffer[0];
 800acae:	4b2a      	ldr	r3, [pc, #168]	; (800ad58 <SDCP_RXNQ+0x288>)
 800acb0:	f993 3000 	ldrsb.w	r3, [r3]
 800acb4:	461a      	mov	r2, r3
 800acb6:	4613      	mov	r3, r2
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	4413      	add	r3, r2
 800acbc:	005b      	lsls	r3, r3, #1
 800acbe:	461a      	mov	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	7819      	ldrb	r1, [r3, #0]
 800acc4:	4b27      	ldr	r3, [pc, #156]	; (800ad64 <SDCP_RXNQ+0x294>)
 800acc6:	5499      	strb	r1, [r3, r2]
	SDCP_RXQ[6*SDCP_RXQ_back+1] = 	buffer[1];
 800acc8:	4b23      	ldr	r3, [pc, #140]	; (800ad58 <SDCP_RXNQ+0x288>)
 800acca:	f993 3000 	ldrsb.w	r3, [r3]
 800acce:	461a      	mov	r2, r3
 800acd0:	4613      	mov	r3, r2
 800acd2:	005b      	lsls	r3, r3, #1
 800acd4:	4413      	add	r3, r2
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	3301      	adds	r3, #1
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	7851      	ldrb	r1, [r2, #1]
 800acde:	4a21      	ldr	r2, [pc, #132]	; (800ad64 <SDCP_RXNQ+0x294>)
 800ace0:	54d1      	strb	r1, [r2, r3]
	SDCP_RXQ[6*SDCP_RXQ_back+2] = 	buffer[2];
 800ace2:	4b1d      	ldr	r3, [pc, #116]	; (800ad58 <SDCP_RXNQ+0x288>)
 800ace4:	f993 3000 	ldrsb.w	r3, [r3]
 800ace8:	461a      	mov	r2, r3
 800acea:	4613      	mov	r3, r2
 800acec:	005b      	lsls	r3, r3, #1
 800acee:	4413      	add	r3, r2
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	3302      	adds	r3, #2
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	7891      	ldrb	r1, [r2, #2]
 800acf8:	4a1a      	ldr	r2, [pc, #104]	; (800ad64 <SDCP_RXNQ+0x294>)
 800acfa:	54d1      	strb	r1, [r2, r3]
	SDCP_RXQ[6*SDCP_RXQ_back+3] = 	buffer[3];
 800acfc:	4b16      	ldr	r3, [pc, #88]	; (800ad58 <SDCP_RXNQ+0x288>)
 800acfe:	f993 3000 	ldrsb.w	r3, [r3]
 800ad02:	461a      	mov	r2, r3
 800ad04:	4613      	mov	r3, r2
 800ad06:	005b      	lsls	r3, r3, #1
 800ad08:	4413      	add	r3, r2
 800ad0a:	005b      	lsls	r3, r3, #1
 800ad0c:	3303      	adds	r3, #3
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	78d1      	ldrb	r1, [r2, #3]
 800ad12:	4a14      	ldr	r2, [pc, #80]	; (800ad64 <SDCP_RXNQ+0x294>)
 800ad14:	54d1      	strb	r1, [r2, r3]
    SDCP_RXQ[6*SDCP_RXQ_back+4] = 	buffer[4];
 800ad16:	4b10      	ldr	r3, [pc, #64]	; (800ad58 <SDCP_RXNQ+0x288>)
 800ad18:	f993 3000 	ldrsb.w	r3, [r3]
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	4613      	mov	r3, r2
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	4413      	add	r3, r2
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	3304      	adds	r3, #4
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	7911      	ldrb	r1, [r2, #4]
 800ad2c:	4a0d      	ldr	r2, [pc, #52]	; (800ad64 <SDCP_RXNQ+0x294>)
 800ad2e:	54d1      	strb	r1, [r2, r3]
    SDCP_RXQ[6*SDCP_RXQ_back+5] = 	buffer[5];
 800ad30:	4b09      	ldr	r3, [pc, #36]	; (800ad58 <SDCP_RXNQ+0x288>)
 800ad32:	f993 3000 	ldrsb.w	r3, [r3]
 800ad36:	461a      	mov	r2, r3
 800ad38:	4613      	mov	r3, r2
 800ad3a:	005b      	lsls	r3, r3, #1
 800ad3c:	4413      	add	r3, r2
 800ad3e:	005b      	lsls	r3, r3, #1
 800ad40:	3305      	adds	r3, #5
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	7951      	ldrb	r1, [r2, #5]
 800ad46:	4a07      	ldr	r2, [pc, #28]	; (800ad64 <SDCP_RXNQ+0x294>)
 800ad48:	54d1      	strb	r1, [r2, r3]

  }


  return(1);
 800ad4a:	2301      	movs	r3, #1
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	2000008c 	.word	0x2000008c
 800ad58:	2000008d 	.word	0x2000008d
 800ad5c:	66666667 	.word	0x66666667
 800ad60:	0800d29c 	.word	0x0800d29c
 800ad64:	200003d0 	.word	0x200003d0

0800ad68 <SDCP_RXDQ>:



/* Function to dequeue an encoded data frame from the transmit circular queue. */

uint8_t SDCP_RXDQ( uint8_t* buffer ){
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]

   /* If the queue was not initialized, do nothing. */

   if( SDCP_RXQ_front == - 1 ){
 800ad70:	4b66      	ldr	r3, [pc, #408]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800ad72:	f993 3000 	ldrsb.w	r3, [r3]
 800ad76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad7a:	d101      	bne.n	800ad80 <SDCP_RXDQ+0x18>

		return(0);
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	e0be      	b.n	800aefe <SDCP_RXDQ+0x196>

   }

   /* Retrive data from queue. */

   buffer[0] = SDCP_RXQ[6*SDCP_RXQ_front+0];
 800ad80:	4b62      	ldr	r3, [pc, #392]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800ad82:	f993 3000 	ldrsb.w	r3, [r3]
 800ad86:	461a      	mov	r2, r3
 800ad88:	4613      	mov	r3, r2
 800ad8a:	005b      	lsls	r3, r3, #1
 800ad8c:	4413      	add	r3, r2
 800ad8e:	005b      	lsls	r3, r3, #1
 800ad90:	461a      	mov	r2, r3
 800ad92:	4b5f      	ldr	r3, [pc, #380]	; (800af10 <SDCP_RXDQ+0x1a8>)
 800ad94:	5c9a      	ldrb	r2, [r3, r2]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	701a      	strb	r2, [r3, #0]
   buffer[1] = SDCP_RXQ[6*SDCP_RXQ_front+1];
 800ad9a:	4b5c      	ldr	r3, [pc, #368]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800ad9c:	f993 3000 	ldrsb.w	r3, [r3]
 800ada0:	461a      	mov	r2, r3
 800ada2:	4613      	mov	r3, r2
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	4413      	add	r3, r2
 800ada8:	005b      	lsls	r3, r3, #1
 800adaa:	1c5a      	adds	r2, r3, #1
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	3301      	adds	r3, #1
 800adb0:	4957      	ldr	r1, [pc, #348]	; (800af10 <SDCP_RXDQ+0x1a8>)
 800adb2:	5c8a      	ldrb	r2, [r1, r2]
 800adb4:	701a      	strb	r2, [r3, #0]
   buffer[2] = SDCP_RXQ[6*SDCP_RXQ_front+2];
 800adb6:	4b55      	ldr	r3, [pc, #340]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800adb8:	f993 3000 	ldrsb.w	r3, [r3]
 800adbc:	461a      	mov	r2, r3
 800adbe:	4613      	mov	r3, r2
 800adc0:	005b      	lsls	r3, r3, #1
 800adc2:	4413      	add	r3, r2
 800adc4:	005b      	lsls	r3, r3, #1
 800adc6:	1c9a      	adds	r2, r3, #2
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	3302      	adds	r3, #2
 800adcc:	4950      	ldr	r1, [pc, #320]	; (800af10 <SDCP_RXDQ+0x1a8>)
 800adce:	5c8a      	ldrb	r2, [r1, r2]
 800add0:	701a      	strb	r2, [r3, #0]
   buffer[3] = SDCP_RXQ[6*SDCP_RXQ_front+3];
 800add2:	4b4e      	ldr	r3, [pc, #312]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800add4:	f993 3000 	ldrsb.w	r3, [r3]
 800add8:	461a      	mov	r2, r3
 800adda:	4613      	mov	r3, r2
 800addc:	005b      	lsls	r3, r3, #1
 800adde:	4413      	add	r3, r2
 800ade0:	005b      	lsls	r3, r3, #1
 800ade2:	1cda      	adds	r2, r3, #3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	3303      	adds	r3, #3
 800ade8:	4949      	ldr	r1, [pc, #292]	; (800af10 <SDCP_RXDQ+0x1a8>)
 800adea:	5c8a      	ldrb	r2, [r1, r2]
 800adec:	701a      	strb	r2, [r3, #0]
   buffer[4] = SDCP_RXQ[6*SDCP_RXQ_front+4];
 800adee:	4b47      	ldr	r3, [pc, #284]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800adf0:	f993 3000 	ldrsb.w	r3, [r3]
 800adf4:	461a      	mov	r2, r3
 800adf6:	4613      	mov	r3, r2
 800adf8:	005b      	lsls	r3, r3, #1
 800adfa:	4413      	add	r3, r2
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	1d1a      	adds	r2, r3, #4
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3304      	adds	r3, #4
 800ae04:	4942      	ldr	r1, [pc, #264]	; (800af10 <SDCP_RXDQ+0x1a8>)
 800ae06:	5c8a      	ldrb	r2, [r1, r2]
 800ae08:	701a      	strb	r2, [r3, #0]
   buffer[5] = SDCP_RXQ[6*SDCP_RXQ_front+5];
 800ae0a:	4b40      	ldr	r3, [pc, #256]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800ae0c:	f993 3000 	ldrsb.w	r3, [r3]
 800ae10:	461a      	mov	r2, r3
 800ae12:	4613      	mov	r3, r2
 800ae14:	005b      	lsls	r3, r3, #1
 800ae16:	4413      	add	r3, r2
 800ae18:	005b      	lsls	r3, r3, #1
 800ae1a:	1d5a      	adds	r2, r3, #5
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	3305      	adds	r3, #5
 800ae20:	493b      	ldr	r1, [pc, #236]	; (800af10 <SDCP_RXDQ+0x1a8>)
 800ae22:	5c8a      	ldrb	r2, [r1, r2]
 800ae24:	701a      	strb	r2, [r3, #0]

    /* Delete dequeued element. */

	SDCP_RXQ[6*SDCP_RXQ_front+0] = 	0;
 800ae26:	4b39      	ldr	r3, [pc, #228]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800ae28:	f993 3000 	ldrsb.w	r3, [r3]
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	4613      	mov	r3, r2
 800ae30:	005b      	lsls	r3, r3, #1
 800ae32:	4413      	add	r3, r2
 800ae34:	005b      	lsls	r3, r3, #1
 800ae36:	461a      	mov	r2, r3
 800ae38:	4b35      	ldr	r3, [pc, #212]	; (800af10 <SDCP_RXDQ+0x1a8>)
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	5499      	strb	r1, [r3, r2]
	SDCP_RXQ[6*SDCP_RXQ_front+1] = 	0;
 800ae3e:	4b33      	ldr	r3, [pc, #204]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800ae40:	f993 3000 	ldrsb.w	r3, [r3]
 800ae44:	461a      	mov	r2, r3
 800ae46:	4613      	mov	r3, r2
 800ae48:	005b      	lsls	r3, r3, #1
 800ae4a:	4413      	add	r3, r2
 800ae4c:	005b      	lsls	r3, r3, #1
 800ae4e:	3301      	adds	r3, #1
 800ae50:	4a2f      	ldr	r2, [pc, #188]	; (800af10 <SDCP_RXDQ+0x1a8>)
 800ae52:	2100      	movs	r1, #0
 800ae54:	54d1      	strb	r1, [r2, r3]
	SDCP_RXQ[6*SDCP_RXQ_front+2] = 	0;
 800ae56:	4b2d      	ldr	r3, [pc, #180]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800ae58:	f993 3000 	ldrsb.w	r3, [r3]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	4613      	mov	r3, r2
 800ae60:	005b      	lsls	r3, r3, #1
 800ae62:	4413      	add	r3, r2
 800ae64:	005b      	lsls	r3, r3, #1
 800ae66:	3302      	adds	r3, #2
 800ae68:	4a29      	ldr	r2, [pc, #164]	; (800af10 <SDCP_RXDQ+0x1a8>)
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	54d1      	strb	r1, [r2, r3]
	SDCP_RXQ[6*SDCP_RXQ_front+3] = 	0;
 800ae6e:	4b27      	ldr	r3, [pc, #156]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800ae70:	f993 3000 	ldrsb.w	r3, [r3]
 800ae74:	461a      	mov	r2, r3
 800ae76:	4613      	mov	r3, r2
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	4413      	add	r3, r2
 800ae7c:	005b      	lsls	r3, r3, #1
 800ae7e:	3303      	adds	r3, #3
 800ae80:	4a23      	ldr	r2, [pc, #140]	; (800af10 <SDCP_RXDQ+0x1a8>)
 800ae82:	2100      	movs	r1, #0
 800ae84:	54d1      	strb	r1, [r2, r3]
    SDCP_RXQ[6*SDCP_RXQ_front+4] = 	0;
 800ae86:	4b21      	ldr	r3, [pc, #132]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800ae88:	f993 3000 	ldrsb.w	r3, [r3]
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	4613      	mov	r3, r2
 800ae90:	005b      	lsls	r3, r3, #1
 800ae92:	4413      	add	r3, r2
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	3304      	adds	r3, #4
 800ae98:	4a1d      	ldr	r2, [pc, #116]	; (800af10 <SDCP_RXDQ+0x1a8>)
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	54d1      	strb	r1, [r2, r3]
    SDCP_RXQ[6*SDCP_RXQ_front+5] = 	0;
 800ae9e:	4b1b      	ldr	r3, [pc, #108]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800aea0:	f993 3000 	ldrsb.w	r3, [r3]
 800aea4:	461a      	mov	r2, r3
 800aea6:	4613      	mov	r3, r2
 800aea8:	005b      	lsls	r3, r3, #1
 800aeaa:	4413      	add	r3, r2
 800aeac:	005b      	lsls	r3, r3, #1
 800aeae:	3305      	adds	r3, #5
 800aeb0:	4a17      	ldr	r2, [pc, #92]	; (800af10 <SDCP_RXDQ+0x1a8>)
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	54d1      	strb	r1, [r2, r3]

   /* If queue overflows, set queue front and queue back to -1. */

   if( SDCP_RXQ_front == SDCP_RXQ_back ){
 800aeb6:	4b15      	ldr	r3, [pc, #84]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800aeb8:	f993 2000 	ldrsb.w	r2, [r3]
 800aebc:	4b15      	ldr	r3, [pc, #84]	; (800af14 <SDCP_RXDQ+0x1ac>)
 800aebe:	f993 3000 	ldrsb.w	r3, [r3]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d108      	bne.n	800aed8 <SDCP_RXDQ+0x170>

	  SDCP_RXQ_front = SDCP_RXQ_back = -1;
 800aec6:	4b13      	ldr	r3, [pc, #76]	; (800af14 <SDCP_RXDQ+0x1ac>)
 800aec8:	22ff      	movs	r2, #255	; 0xff
 800aeca:	701a      	strb	r2, [r3, #0]
 800aecc:	4b11      	ldr	r3, [pc, #68]	; (800af14 <SDCP_RXDQ+0x1ac>)
 800aece:	f993 2000 	ldrsb.w	r2, [r3]
 800aed2:	4b0e      	ldr	r3, [pc, #56]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800aed4:	701a      	strb	r2, [r3, #0]
 800aed6:	e011      	b.n	800aefc <SDCP_RXDQ+0x194>

   }else if( SDCP_RXQ_front == (SDCP_RXQ_SIZE - 1) ){  /* If front position exceeds queue size, go to start of queue.*/
 800aed8:	4b0c      	ldr	r3, [pc, #48]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800aeda:	f993 3000 	ldrsb.w	r3, [r3]
 800aede:	2b09      	cmp	r3, #9
 800aee0:	d103      	bne.n	800aeea <SDCP_RXDQ+0x182>

      SDCP_RXQ_front = 0;
 800aee2:	4b0a      	ldr	r3, [pc, #40]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	701a      	strb	r2, [r3, #0]
 800aee8:	e008      	b.n	800aefc <SDCP_RXDQ+0x194>

   }else{

      SDCP_RXQ_front++;
 800aeea:	4b08      	ldr	r3, [pc, #32]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800aeec:	f993 3000 	ldrsb.w	r3, [r3]
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	3301      	adds	r3, #1
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	b25a      	sxtb	r2, r3
 800aef8:	4b04      	ldr	r3, [pc, #16]	; (800af0c <SDCP_RXDQ+0x1a4>)
 800aefa:	701a      	strb	r2, [r3, #0]

   }

   return(1);
 800aefc:	2301      	movs	r3, #1
}
 800aefe:	4618      	mov	r0, r3
 800af00:	370c      	adds	r7, #12
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	2000008c 	.word	0x2000008c
 800af10:	200003d0 	.word	0x200003d0
 800af14:	2000008d 	.word	0x2000008d

0800af18 <SDCP_BTR_FSM_update>:


/* Function to evaluate the block transfer FSM. */

void SDCP_BTR_FSM_update(){
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0

  /* Check if block transfer mode is enabled. */

  if( TMC.TMC_segments.BTR_ENSTAT )
 800af1e:	4b2a      	ldr	r3, [pc, #168]	; (800afc8 <SDCP_BTR_FSM_update+0xb0>)
 800af20:	789b      	ldrb	r3, [r3, #2]
 800af22:	f023 031f 	bic.w	r3, r3, #31
 800af26:	b2db      	uxtb	r3, r3
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d047      	beq.n	800afbc <SDCP_BTR_FSM_update+0xa4>
  {
	/* Check if transfer counter of block transfer mode has not overflowed. */

    if( SDCP_BTR_XCNTR < BTR1.BTR1_segments.NTR )
 800af2c:	4b27      	ldr	r3, [pc, #156]	; (800afcc <SDCP_BTR_FSM_update+0xb4>)
 800af2e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800af32:	b29b      	uxth	r3, r3
 800af34:	461a      	mov	r2, r3
 800af36:	4b26      	ldr	r3, [pc, #152]	; (800afd0 <SDCP_BTR_FSM_update+0xb8>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d929      	bls.n	800af92 <SDCP_BTR_FSM_update+0x7a>
    {
      /* Check if parameter counter has not overflowed. */

      if( SDCP_BTR_PCNTR < BTR1.BTR1_segments.NPAR )
 800af3e:	4b23      	ldr	r3, [pc, #140]	; (800afcc <SDCP_BTR_FSM_update+0xb4>)
 800af40:	78db      	ldrb	r3, [r3, #3]
 800af42:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800af46:	b2db      	uxtb	r3, r3
 800af48:	461a      	mov	r2, r3
 800af4a:	4b22      	ldr	r3, [pc, #136]	; (800afd4 <SDCP_BTR_FSM_update+0xbc>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d911      	bls.n	800af76 <SDCP_BTR_FSM_update+0x5e>
      {
    	  SDCP_BTR_currentPID = SDCP_BTR_PID[SDCP_BTR_PCNTR];
 800af52:	4b20      	ldr	r3, [pc, #128]	; (800afd4 <SDCP_BTR_FSM_update+0xbc>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a20      	ldr	r2, [pc, #128]	; (800afd8 <SDCP_BTR_FSM_update+0xc0>)
 800af58:	5cd3      	ldrb	r3, [r2, r3]
 800af5a:	461a      	mov	r2, r3
 800af5c:	4b1f      	ldr	r3, [pc, #124]	; (800afdc <SDCP_BTR_FSM_update+0xc4>)
 800af5e:	601a      	str	r2, [r3, #0]

    	  uint32_t tempU32 = SDCP_BTR_PCNTR;
 800af60:	4b1c      	ldr	r3, [pc, #112]	; (800afd4 <SDCP_BTR_FSM_update+0xbc>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	607b      	str	r3, [r7, #4]
       	  tempU32 = tempU32 + 1;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	3301      	adds	r3, #1
 800af6a:	607b      	str	r3, [r7, #4]
       	  SDCP_BTR_PCNTR = tempU32;
 800af6c:	4a19      	ldr	r2, [pc, #100]	; (800afd4 <SDCP_BTR_FSM_update+0xbc>)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6013      	str	r3, [r2, #0]
       	  asm("NOP");
 800af72:	bf00      	nop
      TMC.TMC_segments.SFT_ENSTAT = 1;
      TMC.TMC_segments.FTOR_ENSTAT = 0;
      TMC.TMC_segments.BTR_ENSTAT = 0;
    }
  }
}
 800af74:	e022      	b.n	800afbc <SDCP_BTR_FSM_update+0xa4>
    	SDCP_BTR_currentPID = SDCP_BTR_PID[0];
 800af76:	4b18      	ldr	r3, [pc, #96]	; (800afd8 <SDCP_BTR_FSM_update+0xc0>)
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	461a      	mov	r2, r3
 800af7c:	4b17      	ldr	r3, [pc, #92]	; (800afdc <SDCP_BTR_FSM_update+0xc4>)
 800af7e:	601a      	str	r2, [r3, #0]
    	SDCP_BTR_PCNTR = 1; // Reset parameter counter.
 800af80:	4b14      	ldr	r3, [pc, #80]	; (800afd4 <SDCP_BTR_FSM_update+0xbc>)
 800af82:	2201      	movs	r2, #1
 800af84:	601a      	str	r2, [r3, #0]
    	SDCP_BTR_XCNTR++;   // Increment parameter counter.
 800af86:	4b12      	ldr	r3, [pc, #72]	; (800afd0 <SDCP_BTR_FSM_update+0xb8>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	3301      	adds	r3, #1
 800af8c:	4a10      	ldr	r2, [pc, #64]	; (800afd0 <SDCP_BTR_FSM_update+0xb8>)
 800af8e:	6013      	str	r3, [r2, #0]
}
 800af90:	e014      	b.n	800afbc <SDCP_BTR_FSM_update+0xa4>
      SDCP_BTR_PCNTR = 0;
 800af92:	4b10      	ldr	r3, [pc, #64]	; (800afd4 <SDCP_BTR_FSM_update+0xbc>)
 800af94:	2200      	movs	r2, #0
 800af96:	601a      	str	r2, [r3, #0]
      SDCP_BTR_XCNTR = 0;
 800af98:	4b0d      	ldr	r3, [pc, #52]	; (800afd0 <SDCP_BTR_FSM_update+0xb8>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	601a      	str	r2, [r3, #0]
      TMC.TMC_segments.SFT_ENSTAT = 1;
 800af9e:	4a0a      	ldr	r2, [pc, #40]	; (800afc8 <SDCP_BTR_FSM_update+0xb0>)
 800afa0:	7893      	ldrb	r3, [r2, #2]
 800afa2:	f043 0308 	orr.w	r3, r3, #8
 800afa6:	7093      	strb	r3, [r2, #2]
      TMC.TMC_segments.FTOR_ENSTAT = 0;
 800afa8:	4a07      	ldr	r2, [pc, #28]	; (800afc8 <SDCP_BTR_FSM_update+0xb0>)
 800afaa:	7893      	ldrb	r3, [r2, #2]
 800afac:	f36f 1304 	bfc	r3, #4, #1
 800afb0:	7093      	strb	r3, [r2, #2]
      TMC.TMC_segments.BTR_ENSTAT = 0;
 800afb2:	4a05      	ldr	r2, [pc, #20]	; (800afc8 <SDCP_BTR_FSM_update+0xb0>)
 800afb4:	7893      	ldrb	r3, [r2, #2]
 800afb6:	f36f 1347 	bfc	r3, #5, #3
 800afba:	7093      	strb	r3, [r2, #2]
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr
 800afc8:	200004ec 	.word	0x200004ec
 800afcc:	2000013c 	.word	0x2000013c
 800afd0:	200003c0 	.word	0x200003c0
 800afd4:	20000508 	.word	0x20000508
 800afd8:	200003a8 	.word	0x200003a8
 800afdc:	200005a4 	.word	0x200005a4

0800afe0 <SDCP_WPF>:


/* Function to write a parameter into a frame. */

void SDCP_WPF(SDCP_Param* parameter)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b08f      	sub	sp, #60	; 0x3c
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  /* Get instance of frame. */

  __DF frame = *( (__DF*)parameter->pFrame );
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	60fb      	str	r3, [r7, #12]

  /* Porting to local variable. */

  uint32_t  data       =  frame.__data;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  dataType   =  parameter->dataType;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	623b      	str	r3, [r7, #32]
  float     factor     =  parameter->factor;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	61fb      	str	r3, [r7, #28]
  float 	offset     =  parameter->offset;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	695b      	ldr	r3, [r3, #20]
 800b004:	61bb      	str	r3, [r7, #24]
  float     value      =  parameter->value;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t  bitLength  =  parameter->bitLength;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	617b      	str	r3, [r7, #20]
  uint32_t  startBit   =  parameter->startBit;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	613b      	str	r3, [r7, #16]

  /* Clear the bits in the frame associated with the current parameter. */

  uint32_t mask = 0;
 800b018:	2300      	movs	r3, #0
 800b01a:	633b      	str	r3, [r7, #48]	; 0x30

  if( bitLength < 32 )
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	2b1f      	cmp	r3, #31
 800b020:	d806      	bhi.n	800b030 <SDCP_WPF+0x50>
  {
    mask = ( ( 1UL << bitLength ) - 1 );
 800b022:	2201      	movs	r2, #1
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	fa02 f303 	lsl.w	r3, r2, r3
 800b02a:	3b01      	subs	r3, #1
 800b02c:	633b      	str	r3, [r7, #48]	; 0x30
 800b02e:	e002      	b.n	800b036 <SDCP_WPF+0x56>
  }
  else
  {
    mask = 0xFFFFFFFFUL;
 800b030:	f04f 33ff 	mov.w	r3, #4294967295
 800b034:	633b      	str	r3, [r7, #48]	; 0x30
  }

  data &= ~( mask << startBit );
 800b036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	fa02 f303 	lsl.w	r3, r2, r3
 800b03e:	43db      	mvns	r3, r3
 800b040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b042:	4013      	ands	r3, r2
 800b044:	627b      	str	r3, [r7, #36]	; 0x24

  /* Frame value = (to unsigned int){ ( value - offset ) / factor }. */

  if( factor != 0.0f )
 800b046:	edd7 7a07 	vldr	s15, [r7, #28]
 800b04a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b052:	d00c      	beq.n	800b06e <SDCP_WPF+0x8e>
  {
    value = ( ( value - offset ) / factor );
 800b054:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b058:	edd7 7a06 	vldr	s15, [r7, #24]
 800b05c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b060:	ed97 7a07 	vldr	s14, [r7, #28]
 800b064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b068:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800b06c:	e002      	b.n	800b074 <SDCP_WPF+0x94>
  }
  else
  {
    value = 0.0f;
 800b06e:	f04f 0300 	mov.w	r3, #0
 800b072:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Process based on data type. */

  uint32_t tempVal = 0;
 800b074:	2300      	movs	r3, #0
 800b076:	62fb      	str	r3, [r7, #44]	; 0x2c

  switch(dataType)
 800b078:	6a3b      	ldr	r3, [r7, #32]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d00e      	beq.n	800b09c <SDCP_WPF+0xbc>
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d302      	bcc.n	800b088 <SDCP_WPF+0xa8>
 800b082:	2b02      	cmp	r3, #2
 800b084:	d04f      	beq.n	800b126 <SDCP_WPF+0x146>
 800b086:	e055      	b.n	800b134 <SDCP_WPF+0x154>
  {
    case(UNSIGNED):
	{
      tempVal = ( ((uint32_t)value) & mask );
 800b088:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b08c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b090:	ee17 2a90 	vmov	r2, s15
 800b094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b096:	4013      	ands	r3, r2
 800b098:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    break;
 800b09a:	e04b      	b.n	800b134 <SDCP_WPF+0x154>

    case(SIGNED):
	{
      uint8_t sign = 0;	// Sign of 'value'. sign 1 --> negative, sign 0 --> Positive.
 800b09c:	2300      	movs	r3, #0
 800b09e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

      /* Calculate absolute value. */

      if( value < 0.0f )
 800b0a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b0a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ae:	d508      	bpl.n	800b0c2 <SDCP_WPF+0xe2>
      {
        value = -value;
 800b0b0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b0b4:	eef1 7a67 	vneg.f32	s15, s15
 800b0b8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        sign = 1;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      }

      /* If sign is negative. */

      if( sign )
 800b0c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d018      	beq.n	800b0fc <SDCP_WPF+0x11c>
      {
    	if( bitLength < 32 )
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	2b1f      	cmp	r3, #31
 800b0ce:	d80d      	bhi.n	800b0ec <SDCP_WPF+0x10c>
    	{
          tempVal = ( ( 1UL << bitLength ) - ( (uint32_t)value & mask ));
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	409a      	lsls	r2, r3
 800b0d6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b0da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0de:	ee17 1a90 	vmov	r1, s15
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e4:	400b      	ands	r3, r1
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
		  tempVal = (uint32_t)value;
		}
      }
	}
    break;
 800b0ea:	e023      	b.n	800b134 <SDCP_WPF+0x154>
    	  tempVal = (int32_t)value;
 800b0ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b0f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0f4:	ee17 3a90 	vmov	r3, s15
 800b0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    break;
 800b0fa:	e01b      	b.n	800b134 <SDCP_WPF+0x154>
		if( bitLength < 32 )
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	2b1f      	cmp	r3, #31
 800b100:	d809      	bhi.n	800b116 <SDCP_WPF+0x136>
          tempVal = ( (uint32_t)value & mask );
 800b102:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b10a:	ee17 2a90 	vmov	r2, s15
 800b10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b110:	4013      	ands	r3, r2
 800b112:	62fb      	str	r3, [r7, #44]	; 0x2c
    break;
 800b114:	e00e      	b.n	800b134 <SDCP_WPF+0x154>
		  tempVal = (uint32_t)value;
 800b116:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b11a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b11e:	ee17 3a90 	vmov	r3, s15
 800b122:	62fb      	str	r3, [r7, #44]	; 0x2c
    break;
 800b124:	e006      	b.n	800b134 <SDCP_WPF+0x154>

    case(FLOAT):
	{
      IEEE754.value = value;
 800b126:	4a0c      	ldr	r2, [pc, #48]	; (800b158 <SDCP_WPF+0x178>)
 800b128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b12a:	6013      	str	r3, [r2, #0]
      tempVal = IEEE754.raw;
 800b12c:	4b0a      	ldr	r3, [pc, #40]	; (800b158 <SDCP_WPF+0x178>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
    break;
 800b132:	bf00      	nop
  }

  /* Merge modified bits with current bits. */

  data |= ( tempVal << startBit );
 800b134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	fa02 f303 	lsl.w	r3, r2, r3
 800b13c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b13e:	4313      	orrs	r3, r2
 800b140:	627b      	str	r3, [r7, #36]	; 0x24

  /* Store modified bits in frame. */

  (*((__DF*)(parameter->pFrame))).__data = data;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b148:	601a      	str	r2, [r3, #0]
}
 800b14a:	bf00      	nop
 800b14c:	373c      	adds	r7, #60	; 0x3c
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	20000778 	.word	0x20000778

0800b15c <SDCP_RPF>:

/* Function to read a parameter from a frame. */

void SDCP_RPF(SDCP_Param* parameter)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b08f      	sub	sp, #60	; 0x3c
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  /* Get instance of frame. */

  __DF frame = *( (__DF*)parameter->pFrame );
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	60fb      	str	r3, [r7, #12]

  /* Porting to local variable. */

  uint32_t  data       =  frame.__data;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t  dataType   =  parameter->dataType;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	62bb      	str	r3, [r7, #40]	; 0x28
  float     factor     =  parameter->factor;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	627b      	str	r3, [r7, #36]	; 0x24
  float 	offset     =  parameter->offset;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	695b      	ldr	r3, [r3, #20]
 800b180:	623b      	str	r3, [r7, #32]
  float     value      =  0.0f;
 800b182:	f04f 0300 	mov.w	r3, #0
 800b186:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t  bitLength  =  parameter->bitLength;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	61fb      	str	r3, [r7, #28]
  uint32_t  startBit   =  parameter->startBit;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	61bb      	str	r3, [r7, #24]

  uint32_t rawValue = 0;
 800b194:	2300      	movs	r3, #0
 800b196:	617b      	str	r3, [r7, #20]
  uint32_t mask = 0;
 800b198:	2300      	movs	r3, #0
 800b19a:	633b      	str	r3, [r7, #48]	; 0x30

  if( bitLength < 32 )
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	2b1f      	cmp	r3, #31
 800b1a0:	d806      	bhi.n	800b1b0 <SDCP_RPF+0x54>
  {
    mask = (( 1UL << bitLength ) - 1);
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	633b      	str	r3, [r7, #48]	; 0x30
 800b1ae:	e002      	b.n	800b1b6 <SDCP_RPF+0x5a>
  }
  else
  {
    mask = 0xFFFFFFFFUL;
 800b1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1b4:	633b      	str	r3, [r7, #48]	; 0x30
  }

  rawValue = ( (data >> startBit) & mask );
 800b1b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b1be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	617b      	str	r3, [r7, #20]

  switch(dataType)
 800b1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d014      	beq.n	800b1f4 <SDCP_RPF+0x98>
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d302      	bcc.n	800b1d4 <SDCP_RPF+0x78>
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d052      	beq.n	800b278 <SDCP_RPF+0x11c>
 800b1d2:	e062      	b.n	800b29a <SDCP_RPF+0x13e>
  {
    case(UNSIGNED):
	{
      value = ( ( factor * (float)rawValue ) + offset );
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	ee07 3a90 	vmov	s15, r3
 800b1da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b1de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b1e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1e6:	ed97 7a08 	vldr	s14, [r7, #32]
 800b1ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1ee:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	}
    break;
 800b1f2:	e052      	b.n	800b29a <SDCP_RPF+0x13e>

    case(SIGNED):
	{
      uint32_t maxAbsValue = (( 1UL << (bitLength - 1) ) - 1);
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b1fe:	3b01      	subs	r3, #1
 800b200:	613b      	str	r3, [r7, #16]

      if( rawValue > maxAbsValue ) // When value of number > 2*(N_bits-1) value is -ve.
 800b202:	697a      	ldr	r2, [r7, #20]
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	429a      	cmp	r2, r3
 800b208:	d926      	bls.n	800b258 <SDCP_RPF+0xfc>
      {
        if( bitLength < 32 )
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	2b1f      	cmp	r3, #31
 800b20e:	d813      	bhi.n	800b238 <SDCP_RPF+0xdc>
        {
          value = ( offset - factor * (float)( ( 1UL << bitLength ) - rawValue ) );
 800b210:	2201      	movs	r2, #1
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	409a      	lsls	r2, r3
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	ee07 3a90 	vmov	s15, r3
 800b21e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b222:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b22a:	ed97 7a08 	vldr	s14, [r7, #32]
 800b22e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b232:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      else /* If number is positive. */
      {
        value = ( factor * (float)rawValue + offset );
      }
	}
    break;
 800b236:	e030      	b.n	800b29a <SDCP_RPF+0x13e>
          value = ( factor * (float)( (int32_t)rawValue ) + offset );
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	ee07 3a90 	vmov	s15, r3
 800b23e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b242:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24a:	ed97 7a08 	vldr	s14, [r7, #32]
 800b24e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b252:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    break;
 800b256:	e020      	b.n	800b29a <SDCP_RPF+0x13e>
        value = ( factor * (float)rawValue + offset );
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	ee07 3a90 	vmov	s15, r3
 800b25e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b262:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b26a:	ed97 7a08 	vldr	s14, [r7, #32]
 800b26e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b272:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    break;
 800b276:	e010      	b.n	800b29a <SDCP_RPF+0x13e>


    case(FLOAT):
	{
      IEEE754.raw = rawValue;
 800b278:	4a0c      	ldr	r2, [pc, #48]	; (800b2ac <SDCP_RPF+0x150>)
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	6013      	str	r3, [r2, #0]
      value = (( factor * (float)IEEE754.value ) + offset);
 800b27e:	4b0b      	ldr	r3, [pc, #44]	; (800b2ac <SDCP_RPF+0x150>)
 800b280:	ed93 7a00 	vldr	s14, [r3]
 800b284:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b28c:	ed97 7a08 	vldr	s14, [r7, #32]
 800b290:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b294:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	}
    break;
 800b298:	bf00      	nop
  }

  parameter->value = value;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b29e:	619a      	str	r2, [r3, #24]
}
 800b2a0:	bf00      	nop
 800b2a2:	373c      	adds	r7, #60	; 0x3c
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	20000778 	.word	0x20000778

0800b2b0 <SDCP_BTR_push>:



void SDCP_BTR_push(void* pValue,SDCP_BTR_parameter_t dataType)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	70fb      	strb	r3, [r7, #3]
  if( ( dataType == I8 ) || ( dataType == U8 ) )
 800b2bc:	78fb      	ldrb	r3, [r7, #3]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d002      	beq.n	800b2c8 <SDCP_BTR_push+0x18>
 800b2c2:	78fb      	ldrb	r3, [r7, #3]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d10c      	bne.n	800b2e2 <SDCP_BTR_push+0x32>
  {
    SDCP_BTR_buffer[SDCP_BTR_buffer_position] = *((uint8_t*)pValue);
 800b2c8:	4b5b      	ldr	r3, [pc, #364]	; (800b438 <SDCP_BTR_push+0x188>)
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	7819      	ldrb	r1, [r3, #0]
 800b2d2:	4b5a      	ldr	r3, [pc, #360]	; (800b43c <SDCP_BTR_push+0x18c>)
 800b2d4:	5499      	strb	r1, [r3, r2]
    SDCP_BTR_buffer_position++;
 800b2d6:	4b58      	ldr	r3, [pc, #352]	; (800b438 <SDCP_BTR_push+0x188>)
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	4b56      	ldr	r3, [pc, #344]	; (800b438 <SDCP_BTR_push+0x188>)
 800b2e0:	701a      	strb	r2, [r3, #0]
  }

  if( ( dataType == I16 ) || ( dataType == U16 ) )
 800b2e2:	78fb      	ldrb	r3, [r7, #3]
 800b2e4:	2b03      	cmp	r3, #3
 800b2e6:	d002      	beq.n	800b2ee <SDCP_BTR_push+0x3e>
 800b2e8:	78fb      	ldrb	r3, [r7, #3]
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d11d      	bne.n	800b32a <SDCP_BTR_push+0x7a>
  {
    SDCP_BTR_buffer[SDCP_BTR_buffer_position] = ( *((uint16_t*)pValue) >> 8 );
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	881b      	ldrh	r3, [r3, #0]
 800b2f2:	0a1b      	lsrs	r3, r3, #8
 800b2f4:	b299      	uxth	r1, r3
 800b2f6:	4b50      	ldr	r3, [pc, #320]	; (800b438 <SDCP_BTR_push+0x188>)
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	b2c9      	uxtb	r1, r1
 800b2fe:	4b4f      	ldr	r3, [pc, #316]	; (800b43c <SDCP_BTR_push+0x18c>)
 800b300:	5499      	strb	r1, [r3, r2]
    SDCP_BTR_buffer_position++;
 800b302:	4b4d      	ldr	r3, [pc, #308]	; (800b438 <SDCP_BTR_push+0x188>)
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	3301      	adds	r3, #1
 800b308:	b2da      	uxtb	r2, r3
 800b30a:	4b4b      	ldr	r3, [pc, #300]	; (800b438 <SDCP_BTR_push+0x188>)
 800b30c:	701a      	strb	r2, [r3, #0]
    SDCP_BTR_buffer[SDCP_BTR_buffer_position] = ( *((uint16_t*)pValue) & 0xFF );
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	8819      	ldrh	r1, [r3, #0]
 800b312:	4b49      	ldr	r3, [pc, #292]	; (800b438 <SDCP_BTR_push+0x188>)
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	461a      	mov	r2, r3
 800b318:	b2c9      	uxtb	r1, r1
 800b31a:	4b48      	ldr	r3, [pc, #288]	; (800b43c <SDCP_BTR_push+0x18c>)
 800b31c:	5499      	strb	r1, [r3, r2]
    SDCP_BTR_buffer_position++;
 800b31e:	4b46      	ldr	r3, [pc, #280]	; (800b438 <SDCP_BTR_push+0x188>)
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	3301      	adds	r3, #1
 800b324:	b2da      	uxtb	r2, r3
 800b326:	4b44      	ldr	r3, [pc, #272]	; (800b438 <SDCP_BTR_push+0x188>)
 800b328:	701a      	strb	r2, [r3, #0]
  }

  if( ( dataType == I32 ) || ( dataType == U32 ) )
 800b32a:	78fb      	ldrb	r3, [r7, #3]
 800b32c:	2b05      	cmp	r3, #5
 800b32e:	d002      	beq.n	800b336 <SDCP_BTR_push+0x86>
 800b330:	78fb      	ldrb	r3, [r7, #3]
 800b332:	2b04      	cmp	r3, #4
 800b334:	d139      	bne.n	800b3aa <SDCP_BTR_push+0xfa>
  {
	uint32_t tempU32 = *((uint32_t*)pValue);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	60fb      	str	r3, [r7, #12]

    SDCP_BTR_buffer[SDCP_BTR_buffer_position] = (tempU32 & 0xFF000000UL) >> 24;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	0e19      	lsrs	r1, r3, #24
 800b340:	4b3d      	ldr	r3, [pc, #244]	; (800b438 <SDCP_BTR_push+0x188>)
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	461a      	mov	r2, r3
 800b346:	b2c9      	uxtb	r1, r1
 800b348:	4b3c      	ldr	r3, [pc, #240]	; (800b43c <SDCP_BTR_push+0x18c>)
 800b34a:	5499      	strb	r1, [r3, r2]
    SDCP_BTR_buffer_position++;
 800b34c:	4b3a      	ldr	r3, [pc, #232]	; (800b438 <SDCP_BTR_push+0x188>)
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	3301      	adds	r3, #1
 800b352:	b2da      	uxtb	r2, r3
 800b354:	4b38      	ldr	r3, [pc, #224]	; (800b438 <SDCP_BTR_push+0x188>)
 800b356:	701a      	strb	r2, [r3, #0]
    SDCP_BTR_buffer[SDCP_BTR_buffer_position] = (tempU32 & 0x00FF0000UL) >> 16;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	0c19      	lsrs	r1, r3, #16
 800b35c:	4b36      	ldr	r3, [pc, #216]	; (800b438 <SDCP_BTR_push+0x188>)
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	461a      	mov	r2, r3
 800b362:	b2c9      	uxtb	r1, r1
 800b364:	4b35      	ldr	r3, [pc, #212]	; (800b43c <SDCP_BTR_push+0x18c>)
 800b366:	5499      	strb	r1, [r3, r2]
    SDCP_BTR_buffer_position++;
 800b368:	4b33      	ldr	r3, [pc, #204]	; (800b438 <SDCP_BTR_push+0x188>)
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	3301      	adds	r3, #1
 800b36e:	b2da      	uxtb	r2, r3
 800b370:	4b31      	ldr	r3, [pc, #196]	; (800b438 <SDCP_BTR_push+0x188>)
 800b372:	701a      	strb	r2, [r3, #0]
    SDCP_BTR_buffer[SDCP_BTR_buffer_position] = (tempU32 & 0x0000FF00UL) >> 8;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	0a19      	lsrs	r1, r3, #8
 800b378:	4b2f      	ldr	r3, [pc, #188]	; (800b438 <SDCP_BTR_push+0x188>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	461a      	mov	r2, r3
 800b37e:	b2c9      	uxtb	r1, r1
 800b380:	4b2e      	ldr	r3, [pc, #184]	; (800b43c <SDCP_BTR_push+0x18c>)
 800b382:	5499      	strb	r1, [r3, r2]
    SDCP_BTR_buffer_position++;
 800b384:	4b2c      	ldr	r3, [pc, #176]	; (800b438 <SDCP_BTR_push+0x188>)
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	3301      	adds	r3, #1
 800b38a:	b2da      	uxtb	r2, r3
 800b38c:	4b2a      	ldr	r3, [pc, #168]	; (800b438 <SDCP_BTR_push+0x188>)
 800b38e:	701a      	strb	r2, [r3, #0]
    SDCP_BTR_buffer[SDCP_BTR_buffer_position] = (tempU32 & 0x000000FFUL) >> 0;
 800b390:	4b29      	ldr	r3, [pc, #164]	; (800b438 <SDCP_BTR_push+0x188>)
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	461a      	mov	r2, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	b2d9      	uxtb	r1, r3
 800b39a:	4b28      	ldr	r3, [pc, #160]	; (800b43c <SDCP_BTR_push+0x18c>)
 800b39c:	5499      	strb	r1, [r3, r2]
    SDCP_BTR_buffer_position++;
 800b39e:	4b26      	ldr	r3, [pc, #152]	; (800b438 <SDCP_BTR_push+0x188>)
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	b2da      	uxtb	r2, r3
 800b3a6:	4b24      	ldr	r3, [pc, #144]	; (800b438 <SDCP_BTR_push+0x188>)
 800b3a8:	701a      	strb	r2, [r3, #0]
  }

  if( dataType == FLT32 )
 800b3aa:	78fb      	ldrb	r3, [r7, #3]
 800b3ac:	2b06      	cmp	r3, #6
 800b3ae:	d13d      	bne.n	800b42c <SDCP_BTR_push+0x17c>
  {
    IEEE754.value = *((float*)pValue);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a22      	ldr	r2, [pc, #136]	; (800b440 <SDCP_BTR_push+0x190>)
 800b3b6:	6013      	str	r3, [r2, #0]

	uint32_t tempU32 = IEEE754.raw;
 800b3b8:	4b21      	ldr	r3, [pc, #132]	; (800b440 <SDCP_BTR_push+0x190>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	60bb      	str	r3, [r7, #8]

    SDCP_BTR_buffer[SDCP_BTR_buffer_position] = (tempU32 & 0xFF000000UL) >> 24;
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	0e19      	lsrs	r1, r3, #24
 800b3c2:	4b1d      	ldr	r3, [pc, #116]	; (800b438 <SDCP_BTR_push+0x188>)
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	b2c9      	uxtb	r1, r1
 800b3ca:	4b1c      	ldr	r3, [pc, #112]	; (800b43c <SDCP_BTR_push+0x18c>)
 800b3cc:	5499      	strb	r1, [r3, r2]
    SDCP_BTR_buffer_position++;
 800b3ce:	4b1a      	ldr	r3, [pc, #104]	; (800b438 <SDCP_BTR_push+0x188>)
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	b2da      	uxtb	r2, r3
 800b3d6:	4b18      	ldr	r3, [pc, #96]	; (800b438 <SDCP_BTR_push+0x188>)
 800b3d8:	701a      	strb	r2, [r3, #0]
    SDCP_BTR_buffer[SDCP_BTR_buffer_position] = (tempU32 & 0x00FF0000UL) >> 16;
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	0c19      	lsrs	r1, r3, #16
 800b3de:	4b16      	ldr	r3, [pc, #88]	; (800b438 <SDCP_BTR_push+0x188>)
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	b2c9      	uxtb	r1, r1
 800b3e6:	4b15      	ldr	r3, [pc, #84]	; (800b43c <SDCP_BTR_push+0x18c>)
 800b3e8:	5499      	strb	r1, [r3, r2]
    SDCP_BTR_buffer_position++;
 800b3ea:	4b13      	ldr	r3, [pc, #76]	; (800b438 <SDCP_BTR_push+0x188>)
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	b2da      	uxtb	r2, r3
 800b3f2:	4b11      	ldr	r3, [pc, #68]	; (800b438 <SDCP_BTR_push+0x188>)
 800b3f4:	701a      	strb	r2, [r3, #0]
    SDCP_BTR_buffer[SDCP_BTR_buffer_position] = (tempU32 & 0x0000FF00UL) >> 8;
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	0a19      	lsrs	r1, r3, #8
 800b3fa:	4b0f      	ldr	r3, [pc, #60]	; (800b438 <SDCP_BTR_push+0x188>)
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	461a      	mov	r2, r3
 800b400:	b2c9      	uxtb	r1, r1
 800b402:	4b0e      	ldr	r3, [pc, #56]	; (800b43c <SDCP_BTR_push+0x18c>)
 800b404:	5499      	strb	r1, [r3, r2]
    SDCP_BTR_buffer_position++;
 800b406:	4b0c      	ldr	r3, [pc, #48]	; (800b438 <SDCP_BTR_push+0x188>)
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	3301      	adds	r3, #1
 800b40c:	b2da      	uxtb	r2, r3
 800b40e:	4b0a      	ldr	r3, [pc, #40]	; (800b438 <SDCP_BTR_push+0x188>)
 800b410:	701a      	strb	r2, [r3, #0]
    SDCP_BTR_buffer[SDCP_BTR_buffer_position] = (tempU32 & 0x000000FFUL) >> 0;
 800b412:	4b09      	ldr	r3, [pc, #36]	; (800b438 <SDCP_BTR_push+0x188>)
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	461a      	mov	r2, r3
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	b2d9      	uxtb	r1, r3
 800b41c:	4b07      	ldr	r3, [pc, #28]	; (800b43c <SDCP_BTR_push+0x18c>)
 800b41e:	5499      	strb	r1, [r3, r2]
    SDCP_BTR_buffer_position++;
 800b420:	4b05      	ldr	r3, [pc, #20]	; (800b438 <SDCP_BTR_push+0x188>)
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	3301      	adds	r3, #1
 800b426:	b2da      	uxtb	r2, r3
 800b428:	4b03      	ldr	r3, [pc, #12]	; (800b438 <SDCP_BTR_push+0x188>)
 800b42a:	701a      	strb	r2, [r3, #0]
  }

}
 800b42c:	bf00      	nop
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	2000047e 	.word	0x2000047e
 800b43c:	20000518 	.word	0x20000518
 800b440:	20000778 	.word	0x20000778

0800b444 <System_ClockInit>:
 * @brief: System_ClockInit(): Function to configure system base clock to 84 MHz.
 *
 * */

void System_ClockInit()
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
	/*	Turn on High Speed Internal Oscillator (16MHz). */

	RCC->CR |= RCC_CR_HSION_Msk;
 800b44a:	4b2f      	ldr	r3, [pc, #188]	; (800b508 <System_ClockInit+0xc4>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a2e      	ldr	r2, [pc, #184]	; (800b508 <System_ClockInit+0xc4>)
 800b450:	f043 0301 	orr.w	r3, r3, #1
 800b454:	6013      	str	r3, [r2, #0]

	/*	Wait until HSI oscillator is ready. */

	while( ( RCC->CR & RCC_CR_HSIRDY_Msk ) == 0 );
 800b456:	bf00      	nop
 800b458:	4b2b      	ldr	r3, [pc, #172]	; (800b508 <System_ClockInit+0xc4>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 0302 	and.w	r3, r3, #2
 800b460:	2b00      	cmp	r3, #0
 800b462:	d0f9      	beq.n	800b458 <System_ClockInit+0x14>

	/*	Load default calibration value of 0x10. */

	RCC->CR |= RCC_CR_HSITRIM_4;
 800b464:	4b28      	ldr	r3, [pc, #160]	; (800b508 <System_ClockInit+0xc4>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a27      	ldr	r2, [pc, #156]	; (800b508 <System_ClockInit+0xc4>)
 800b46a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b46e:	6013      	str	r3, [r2, #0]

	/*	Turn on High Speed External oscillator (8MHz). */

	RCC->CR |= RCC_CR_HSEON_Msk;
 800b470:	4b25      	ldr	r3, [pc, #148]	; (800b508 <System_ClockInit+0xc4>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a24      	ldr	r2, [pc, #144]	; (800b508 <System_ClockInit+0xc4>)
 800b476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b47a:	6013      	str	r3, [r2, #0]

	/*	Wait until external oscillator is ready. */

	while( ( RCC->CR & RCC_CR_HSERDY_Msk ) == 0 );
 800b47c:	bf00      	nop
 800b47e:	4b22      	ldr	r3, [pc, #136]	; (800b508 <System_ClockInit+0xc4>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b486:	2b00      	cmp	r3, #0
 800b488:	d0f9      	beq.n	800b47e <System_ClockInit+0x3a>

	int i = 0;
 800b48a:	2300      	movs	r3, #0
 800b48c:	607b      	str	r3, [r7, #4]

	while( ++i < 1000 );
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	3301      	adds	r3, #1
 800b492:	607b      	str	r3, [r7, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b49a:	dbf8      	blt.n	800b48e <System_ClockInit+0x4a>

	/*	Enable clocks. */

	RCC->APB1ENR |= 	RCC_APB1ENR_PWREN_Msk; 			//	Power module.
 800b49c:	4b1a      	ldr	r3, [pc, #104]	; (800b508 <System_ClockInit+0xc4>)
 800b49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a0:	4a19      	ldr	r2, [pc, #100]	; (800b508 <System_ClockInit+0xc4>)
 800b4a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4a6:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB2ENR |= 	RCC_APB2ENR_SYSCFGEN_Msk;		//	System configuration module.
 800b4a8:	4b17      	ldr	r3, [pc, #92]	; (800b508 <System_ClockInit+0xc4>)
 800b4aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ac:	4a16      	ldr	r2, [pc, #88]	; (800b508 <System_ClockInit+0xc4>)
 800b4ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b4b2:	6453      	str	r3, [r2, #68]	; 0x44

	/****	PLL Configuration. 	****/

	/*	Turn off PLL. */

	RCC->CR &= ~RCC_CR_PLLON_Msk;
 800b4b4:	4b14      	ldr	r3, [pc, #80]	; (800b508 <System_ClockInit+0xc4>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a13      	ldr	r2, [pc, #76]	; (800b508 <System_ClockInit+0xc4>)
 800b4ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b4be:	6013      	str	r3, [r2, #0]

	/*	Configure basic PLL settings. */

	RCC->PLLCFGR = 		RCC_PLLCFGR_PLLSRC_Msk					/*	Select HSE as PLL clock source. */
 800b4c0:	4b11      	ldr	r3, [pc, #68]	; (800b508 <System_ClockInit+0xc4>)
 800b4c2:	4a12      	ldr	r2, [pc, #72]	; (800b50c <System_ClockInit+0xc8>)
 800b4c4:	605a      	str	r2, [r3, #4]
					|	( 0 << RCC_PLLCFGR_PLLP_Pos )			/*	Set the main PLL output clock division factor. */
					| 	( 4 << RCC_PLLCFGR_PLLQ_Pos );			/*	Set I2S PLL clock division factor. */

	/*	Turn ON PLL. */

	RCC->CR |= RCC_CR_PLLON_Msk;
 800b4c6:	4b10      	ldr	r3, [pc, #64]	; (800b508 <System_ClockInit+0xc4>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a0f      	ldr	r2, [pc, #60]	; (800b508 <System_ClockInit+0xc4>)
 800b4cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4d0:	6013      	str	r3, [r2, #0]

	/*	Wait until PLL is ready. */

	while( ( RCC->CR & RCC_CR_PLLRDY_Msk ) == 0 );
 800b4d2:	bf00      	nop
 800b4d4:	4b0c      	ldr	r3, [pc, #48]	; (800b508 <System_ClockInit+0xc4>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d0f9      	beq.n	800b4d4 <System_ClockInit+0x90>

	/*	Increase FLASH access latency since system frequency is increased. */

	*(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint32_t)2;
 800b4e0:	4b0b      	ldr	r3, [pc, #44]	; (800b510 <System_ClockInit+0xcc>)
 800b4e2:	2202      	movs	r2, #2
 800b4e4:	701a      	strb	r2, [r3, #0]

	RCC->CFGR =  ( 0x4U << RCC_CFGR_PPRE1_Pos ) |	//	Set APB1 low-speed clock divider to 2 to set its clock speed to 42 MHz.
 800b4e6:	4b08      	ldr	r3, [pc, #32]	; (800b508 <System_ClockInit+0xc4>)
 800b4e8:	f241 0202 	movw	r2, #4098	; 0x1002
 800b4ec:	609a      	str	r2, [r3, #8]
				 ( 0x0U << RCC_CFGR_PPRE2_Pos ) |	//	No clock division for APB1 high-speed.
				 RCC_CFGR_SW_PLL;					//	Select PLL output as system clock source.

	/*	Wait until system clock source change in reflected. */

	while( ( RCC->CFGR & RCC_CFGR_SWS_Msk ) != RCC_CFGR_SWS_PLL );
 800b4ee:	bf00      	nop
 800b4f0:	4b05      	ldr	r3, [pc, #20]	; (800b508 <System_ClockInit+0xc4>)
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f003 030c 	and.w	r3, r3, #12
 800b4f8:	2b08      	cmp	r3, #8
 800b4fa:	d1f9      	bne.n	800b4f0 <System_ClockInit+0xac>
}
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	40023800 	.word	0x40023800
 800b50c:	04401504 	.word	0x04401504
 800b510:	40023c00 	.word	0x40023c00

0800b514 <System_SysTick_delay_ms>:
 * @brief: Function to generate delay using SysTick timer in steps of milliseconds.
 *
 * */

void System_SysTick_delay_ms(uint16_t delay_ms)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4603      	mov	r3, r0
 800b51c:	80fb      	strh	r3, [r7, #6]
	while( delay_ms )
 800b51e:	e015      	b.n	800b54c <System_SysTick_delay_ms+0x38>
	{
		/*	Disable SysTick timer. */

		SysTick->CTRL = 0;
 800b520:	4b0f      	ldr	r3, [pc, #60]	; (800b560 <System_SysTick_delay_ms+0x4c>)
 800b522:	2200      	movs	r2, #0
 800b524:	601a      	str	r2, [r3, #0]

		/*	Load value with 0. */

		SysTick->VAL = 0;
 800b526:	4b0e      	ldr	r3, [pc, #56]	; (800b560 <System_SysTick_delay_ms+0x4c>)
 800b528:	2200      	movs	r2, #0
 800b52a:	609a      	str	r2, [r3, #8]

		/*	Load upper limit of SysTick timer. */

		SysTick->LOAD = (F_CPU / 1000) - 1;
 800b52c:	4b0c      	ldr	r3, [pc, #48]	; (800b560 <System_SysTick_delay_ms+0x4c>)
 800b52e:	4a0d      	ldr	r2, [pc, #52]	; (800b564 <System_SysTick_delay_ms+0x50>)
 800b530:	605a      	str	r2, [r3, #4]

		/*	Enable SysTick timer and select clock source as processor clock. */

		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
 800b532:	4b0b      	ldr	r3, [pc, #44]	; (800b560 <System_SysTick_delay_ms+0x4c>)
 800b534:	2205      	movs	r2, #5
 800b536:	601a      	str	r2, [r3, #0]

		/*	Wait until SysTick timer reaches limit. */

		while( ( SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk ) == 0 );
 800b538:	bf00      	nop
 800b53a:	4b09      	ldr	r3, [pc, #36]	; (800b560 <System_SysTick_delay_ms+0x4c>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b542:	2b00      	cmp	r3, #0
 800b544:	d0f9      	beq.n	800b53a <System_SysTick_delay_ms+0x26>

		/*	Decrement counter variable. */

		delay_ms--;
 800b546:	88fb      	ldrh	r3, [r7, #6]
 800b548:	3b01      	subs	r3, #1
 800b54a:	80fb      	strh	r3, [r7, #6]
	while( delay_ms )
 800b54c:	88fb      	ldrh	r3, [r7, #6]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1e6      	bne.n	800b520 <System_SysTick_delay_ms+0xc>
	}
}
 800b552:	bf00      	nop
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	e000e010 	.word	0xe000e010
 800b564:	0001481f 	.word	0x0001481f

0800b568 <TM_addTask>:
 * Function to add a task to the task dispatcher.
 *
 * */

void TM_addTask(uint8_t taskIndex, void* taskFunctionPtr, uint32_t taskTickInterval)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	4603      	mov	r3, r0
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	607a      	str	r2, [r7, #4]
 800b574:	73fb      	strb	r3, [r7, #15]
  TM_Task[taskIndex].fptr = taskFunctionPtr;
 800b576:	7bfa      	ldrb	r2, [r7, #15]
 800b578:	68b9      	ldr	r1, [r7, #8]
 800b57a:	481a      	ldr	r0, [pc, #104]	; (800b5e4 <TM_addTask+0x7c>)
 800b57c:	4613      	mov	r3, r2
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	4413      	add	r3, r2
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	4403      	add	r3, r0
 800b586:	3310      	adds	r3, #16
 800b588:	6019      	str	r1, [r3, #0]
  TM_Task[taskIndex].interval = taskTickInterval;
 800b58a:	7bfa      	ldrb	r2, [r7, #15]
 800b58c:	4915      	ldr	r1, [pc, #84]	; (800b5e4 <TM_addTask+0x7c>)
 800b58e:	4613      	mov	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	4413      	add	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	440b      	add	r3, r1
 800b598:	330c      	adds	r3, #12
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	601a      	str	r2, [r3, #0]

  TM_Task[taskIndex].counter = 0;
 800b59e:	7bfa      	ldrb	r2, [r7, #15]
 800b5a0:	4910      	ldr	r1, [pc, #64]	; (800b5e4 <TM_addTask+0x7c>)
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4413      	add	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	440b      	add	r3, r1
 800b5ac:	3308      	adds	r3, #8
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	601a      	str	r2, [r3, #0]
  TM_Task[taskIndex].pendingExecutions = 0;
 800b5b2:	7bfa      	ldrb	r2, [r7, #15]
 800b5b4:	490b      	ldr	r1, [pc, #44]	; (800b5e4 <TM_addTask+0x7c>)
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4413      	add	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	440b      	add	r3, r1
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	601a      	str	r2, [r3, #0]
  TM_Task[taskIndex].runnable = 1;
 800b5c4:	7bfa      	ldrb	r2, [r7, #15]
 800b5c6:	4907      	ldr	r1, [pc, #28]	; (800b5e4 <TM_addTask+0x7c>)
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	4413      	add	r3, r2
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	440b      	add	r3, r1
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	601a      	str	r2, [r3, #0]
}
 800b5d8:	bf00      	nop
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	20000538 	.word	0x20000538

0800b5e8 <TM_dispatcher>:


/* Task dispatcher. */

void TM_dispatcher()
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
  /* Loop through available tasks. */

  for(int i = 0 ; i < TM_nTasks ; i++ )
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	607b      	str	r3, [r7, #4]
 800b5f2:	e063      	b.n	800b6bc <TM_dispatcher+0xd4>
  {
	/* Check if task is set as runnable. */

    if( TM_Task[i].runnable == 1 )
 800b5f4:	4936      	ldr	r1, [pc, #216]	; (800b6d0 <TM_dispatcher+0xe8>)
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4413      	add	r3, r2
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	440b      	add	r3, r1
 800b602:	3304      	adds	r3, #4
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b01      	cmp	r3, #1
 800b608:	d142      	bne.n	800b690 <TM_dispatcher+0xa8>
    {
      /* Increment task counter. */

      TM_Task[i].counter++;
 800b60a:	4931      	ldr	r1, [pc, #196]	; (800b6d0 <TM_dispatcher+0xe8>)
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	4613      	mov	r3, r2
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	4413      	add	r3, r2
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	440b      	add	r3, r1
 800b618:	3308      	adds	r3, #8
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	1c59      	adds	r1, r3, #1
 800b61e:	482c      	ldr	r0, [pc, #176]	; (800b6d0 <TM_dispatcher+0xe8>)
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	4613      	mov	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4403      	add	r3, r0
 800b62c:	3308      	adds	r3, #8
 800b62e:	6019      	str	r1, [r3, #0]

      /* If task counter has reached task interval limit. */

      if( TM_Task[i].counter >= TM_Task[i].interval )
 800b630:	4927      	ldr	r1, [pc, #156]	; (800b6d0 <TM_dispatcher+0xe8>)
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	4613      	mov	r3, r2
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	440b      	add	r3, r1
 800b63e:	3308      	adds	r3, #8
 800b640:	6819      	ldr	r1, [r3, #0]
 800b642:	4823      	ldr	r0, [pc, #140]	; (800b6d0 <TM_dispatcher+0xe8>)
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	4613      	mov	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4413      	add	r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4403      	add	r3, r0
 800b650:	330c      	adds	r3, #12
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4299      	cmp	r1, r3
 800b656:	d32e      	bcc.n	800b6b6 <TM_dispatcher+0xce>
      {
    	  TM_Task[i].counter = 0; // Reset task counter.
 800b658:	491d      	ldr	r1, [pc, #116]	; (800b6d0 <TM_dispatcher+0xe8>)
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	4613      	mov	r3, r2
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	4413      	add	r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	440b      	add	r3, r1
 800b666:	3308      	adds	r3, #8
 800b668:	2200      	movs	r2, #0
 800b66a:	601a      	str	r2, [r3, #0]
    	  TM_Task[i].pendingExecutions++; // Increment pending executions.
 800b66c:	4918      	ldr	r1, [pc, #96]	; (800b6d0 <TM_dispatcher+0xe8>)
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	4613      	mov	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4413      	add	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	440b      	add	r3, r1
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	1c59      	adds	r1, r3, #1
 800b67e:	4814      	ldr	r0, [pc, #80]	; (800b6d0 <TM_dispatcher+0xe8>)
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	4613      	mov	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	4413      	add	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4403      	add	r3, r0
 800b68c:	6019      	str	r1, [r3, #0]
 800b68e:	e012      	b.n	800b6b6 <TM_dispatcher+0xce>
      }
    }
    else /* If task is not set as runnable. */
    {
    	TM_Task[i].counter = 0;
 800b690:	490f      	ldr	r1, [pc, #60]	; (800b6d0 <TM_dispatcher+0xe8>)
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	4613      	mov	r3, r2
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	4413      	add	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	440b      	add	r3, r1
 800b69e:	3308      	adds	r3, #8
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	601a      	str	r2, [r3, #0]
    	TM_Task[i].pendingExecutions = 0;
 800b6a4:	490a      	ldr	r1, [pc, #40]	; (800b6d0 <TM_dispatcher+0xe8>)
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4413      	add	r3, r2
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	440b      	add	r3, r1
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	601a      	str	r2, [r3, #0]
  for(int i = 0 ; i < TM_nTasks ; i++ )
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	607b      	str	r3, [r7, #4]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b04      	cmp	r3, #4
 800b6c0:	dd98      	ble.n	800b5f4 <TM_dispatcher+0xc>
    }
  }
}
 800b6c2:	bf00      	nop
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	20000538 	.word	0x20000538

0800b6d4 <__NVIC_EnableIRQ>:
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	4603      	mov	r3, r0
 800b6dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b6de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	db0b      	blt.n	800b6fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b6e6:	79fb      	ldrb	r3, [r7, #7]
 800b6e8:	f003 021f 	and.w	r2, r3, #31
 800b6ec:	4907      	ldr	r1, [pc, #28]	; (800b70c <__NVIC_EnableIRQ+0x38>)
 800b6ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6f2:	095b      	lsrs	r3, r3, #5
 800b6f4:	2001      	movs	r0, #1
 800b6f6:	fa00 f202 	lsl.w	r2, r0, r2
 800b6fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b6fe:	bf00      	nop
 800b700:	370c      	adds	r7, #12
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	e000e100 	.word	0xe000e100

0800b710 <__NVIC_SetPriority>:
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	4603      	mov	r3, r0
 800b718:	6039      	str	r1, [r7, #0]
 800b71a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b71c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b720:	2b00      	cmp	r3, #0
 800b722:	db0a      	blt.n	800b73a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	b2da      	uxtb	r2, r3
 800b728:	490c      	ldr	r1, [pc, #48]	; (800b75c <__NVIC_SetPriority+0x4c>)
 800b72a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b72e:	0112      	lsls	r2, r2, #4
 800b730:	b2d2      	uxtb	r2, r2
 800b732:	440b      	add	r3, r1
 800b734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b738:	e00a      	b.n	800b750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	b2da      	uxtb	r2, r3
 800b73e:	4908      	ldr	r1, [pc, #32]	; (800b760 <__NVIC_SetPriority+0x50>)
 800b740:	79fb      	ldrb	r3, [r7, #7]
 800b742:	f003 030f 	and.w	r3, r3, #15
 800b746:	3b04      	subs	r3, #4
 800b748:	0112      	lsls	r2, r2, #4
 800b74a:	b2d2      	uxtb	r2, r2
 800b74c:	440b      	add	r3, r1
 800b74e:	761a      	strb	r2, [r3, #24]
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	e000e100 	.word	0xe000e100
 800b760:	e000ed00 	.word	0xe000ed00

0800b764 <Ticks_setTicks>:

#include "Timing_Measurement.h"

void Ticks_setTicks(Ticks_Ticks_t ticks)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	4603      	mov	r3, r0
 800b76c:	71fb      	strb	r3, [r7, #7]

  /* Stop Timer 4 and Timer 5 modules. */

  TIM4->CR1 &= (~TIM_CR1_CEN_Msk);
 800b76e:	4b59      	ldr	r3, [pc, #356]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a58      	ldr	r2, [pc, #352]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b774:	f023 0301 	bic.w	r3, r3, #1
 800b778:	6013      	str	r3, [r2, #0]
  TIM5->CR1 &= (~TIM_CR1_CEN_Msk);
 800b77a:	4b57      	ldr	r3, [pc, #348]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a56      	ldr	r2, [pc, #344]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b780:	f023 0301 	bic.w	r3, r3, #1
 800b784:	6013      	str	r3, [r2, #0]

  /* Reset counter values. */

  TIM4->CNT = 0;
 800b786:	4b53      	ldr	r3, [pc, #332]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b788:	2200      	movs	r2, #0
 800b78a:	625a      	str	r2, [r3, #36]	; 0x24
  TIM5->CNT = 0;
 800b78c:	4b52      	ldr	r3, [pc, #328]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b78e:	2200      	movs	r2, #0
 800b790:	625a      	str	r2, [r3, #36]	; 0x24

  /* Store current tick configuration. */

  Ticks_CurrentTickBase = ticks;
 800b792:	4a52      	ldr	r2, [pc, #328]	; (800b8dc <Ticks_setTicks+0x178>)
 800b794:	79fb      	ldrb	r3, [r7, #7]
 800b796:	7013      	strb	r3, [r2, #0]

  /*********	Configure clock tick generator (Timer 4).   **************/

  /*	Enable clock for Timer 4. */

  RCC->APB1ENR |= RCC_APB1ENR_TIM4EN_Msk;   // APB1 Maximum Clock Frequency is 42 MHz.
 800b798:	4b51      	ldr	r3, [pc, #324]	; (800b8e0 <Ticks_setTicks+0x17c>)
 800b79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79c:	4a50      	ldr	r2, [pc, #320]	; (800b8e0 <Ticks_setTicks+0x17c>)
 800b79e:	f043 0304 	orr.w	r3, r3, #4
 800b7a2:	6413      	str	r3, [r2, #64]	; 0x40
  /* Timer overflow timer = 42000000 (APB1 max. frequency ) / ( ( 1 + ARR ) * ( 1 + PSC ) ). */

  /* Prescaler is increased by 2 since it was observed that update event was generated on reaching
   * the timer upper limit (ARR) as well as the timer lower limit (0).*/

  switch(ticks)
 800b7a4:	79fb      	ldrb	r3, [r7, #7]
 800b7a6:	2b06      	cmp	r3, #6
 800b7a8:	d848      	bhi.n	800b83c <Ticks_setTicks+0xd8>
 800b7aa:	a201      	add	r2, pc, #4	; (adr r2, 800b7b0 <Ticks_setTicks+0x4c>)
 800b7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b0:	0800b7cd 	.word	0x0800b7cd
 800b7b4:	0800b7db 	.word	0x0800b7db
 800b7b8:	0800b7eb 	.word	0x0800b7eb
 800b7bc:	0800b7fb 	.word	0x0800b7fb
 800b7c0:	0800b80b 	.word	0x0800b80b
 800b7c4:	0800b81b 	.word	0x0800b81b
 800b7c8:	0800b82b 	.word	0x0800b82b
  {
    case(Ticks_1us):
	{
      TIM4->ARR = 41;
 800b7cc:	4b41      	ldr	r3, [pc, #260]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b7ce:	2229      	movs	r2, #41	; 0x29
 800b7d0:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM4->PSC = 1;
 800b7d2:	4b40      	ldr	r3, [pc, #256]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	629a      	str	r2, [r3, #40]	; 0x28
	}
    break;
 800b7d8:	e030      	b.n	800b83c <Ticks_setTicks+0xd8>

    case(Ticks_10us):
	{
      TIM4->ARR = 419;
 800b7da:	4b3e      	ldr	r3, [pc, #248]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b7dc:	f240 12a3 	movw	r2, #419	; 0x1a3
 800b7e0:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM4->PSC = 1;
 800b7e2:	4b3c      	ldr	r3, [pc, #240]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	629a      	str	r2, [r3, #40]	; 0x28
	}
    break;
 800b7e8:	e028      	b.n	800b83c <Ticks_setTicks+0xd8>

    case(Ticks_100us):
	{
      TIM4->ARR = (4200 - 1);
 800b7ea:	4b3a      	ldr	r3, [pc, #232]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b7ec:	f241 0267 	movw	r2, #4199	; 0x1067
 800b7f0:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM4->PSC = 1;
 800b7f2:	4b38      	ldr	r3, [pc, #224]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	629a      	str	r2, [r3, #40]	; 0x28
	}
    break;
 800b7f8:	e020      	b.n	800b83c <Ticks_setTicks+0xd8>

    case(Ticks_1ms):
	{
      TIM4->ARR = (42000 - 1);
 800b7fa:	4b36      	ldr	r3, [pc, #216]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b7fc:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800b800:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM4->PSC = 1;
 800b802:	4b34      	ldr	r3, [pc, #208]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b804:	2201      	movs	r2, #1
 800b806:	629a      	str	r2, [r3, #40]	; 0x28
	}
    break;
 800b808:	e018      	b.n	800b83c <Ticks_setTicks+0xd8>

    case(Ticks_10ms):
	{
      TIM4->ARR = (42000 - 1);
 800b80a:	4b32      	ldr	r3, [pc, #200]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b80c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800b810:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM4->PSC = (10 - 1) << 1;
 800b812:	4b30      	ldr	r3, [pc, #192]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b814:	2212      	movs	r2, #18
 800b816:	629a      	str	r2, [r3, #40]	; 0x28
	}
    break;
 800b818:	e010      	b.n	800b83c <Ticks_setTicks+0xd8>

    case(Ticks_100ms):
	{
      TIM4->ARR = (42000 - 1);
 800b81a:	4b2e      	ldr	r3, [pc, #184]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b81c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800b820:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM4->PSC = (100 - 1) << 1;
 800b822:	4b2c      	ldr	r3, [pc, #176]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b824:	22c6      	movs	r2, #198	; 0xc6
 800b826:	629a      	str	r2, [r3, #40]	; 0x28
	}
    break;
 800b828:	e008      	b.n	800b83c <Ticks_setTicks+0xd8>

    case(Ticks_1000ms):
	{
      TIM4->ARR = (42000 - 1);
 800b82a:	4b2a      	ldr	r3, [pc, #168]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b82c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800b830:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM4->PSC = (1000 - 1) << 1;
 800b832:	4b28      	ldr	r3, [pc, #160]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b834:	f240 72ce 	movw	r2, #1998	; 0x7ce
 800b838:	629a      	str	r2, [r3, #40]	; 0x28
	}
    break;
 800b83a:	bf00      	nop
  }

  /*  Set auto-preload enable bit. */

  TIM4->CR1 |= TIM_CR1_ARPE_Msk;
 800b83c:	4b25      	ldr	r3, [pc, #148]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a24      	ldr	r2, [pc, #144]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b846:	6013      	str	r3, [r2, #0]

  /*	Set count direction to up. */

  TIM4->CR1 |= 0x0 << TIM_CR1_DIR_Pos;
 800b848:	4b22      	ldr	r3, [pc, #136]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b84a:	4a22      	ldr	r2, [pc, #136]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	6013      	str	r3, [r2, #0]

  /*	Set counting mode to edge aligned mode. */

  TIM4->CR1 |= 0x0 << TIM_CR1_CMS_Pos;
 800b850:	4b20      	ldr	r3, [pc, #128]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b852:	4a20      	ldr	r2, [pc, #128]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	6013      	str	r3, [r2, #0]

  /* Enable master mode for Timer 4 with update event signal
   * used as external trigger output signal. */

  TIM4->CR2 |= ( 0x2UL << TIM_CR2_MMS_Pos );
 800b858:	4b1e      	ldr	r3, [pc, #120]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	4a1d      	ldr	r2, [pc, #116]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b85e:	f043 0320 	orr.w	r3, r3, #32
 800b862:	6053      	str	r3, [r2, #4]

  /* Make individual configurations for Timer 5 which receives clock from.
   * Timer 4. */

  RCC->APB1ENR |= RCC_APB1ENR_TIM5EN_Msk;
 800b864:	4b1e      	ldr	r3, [pc, #120]	; (800b8e0 <Ticks_setTicks+0x17c>)
 800b866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b868:	4a1d      	ldr	r2, [pc, #116]	; (800b8e0 <Ticks_setTicks+0x17c>)
 800b86a:	f043 0308 	orr.w	r3, r3, #8
 800b86e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set Timer 5 prescaler to 0 and auto reload limit to maximum. */

  TIM5->PSC = 0;
 800b870:	4b19      	ldr	r3, [pc, #100]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b872:	2200      	movs	r2, #0
 800b874:	629a      	str	r2, [r3, #40]	; 0x28
  TIM5->ARR = 0xFFFFFFFFUL;
 800b876:	4b18      	ldr	r3, [pc, #96]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b878:	f04f 32ff 	mov.w	r2, #4294967295
 800b87c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*  Set auto-preload enable bit. */

  TIM5->CR1 |= TIM_CR1_ARPE_Msk;
 800b87e:	4b16      	ldr	r3, [pc, #88]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a15      	ldr	r2, [pc, #84]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b888:	6013      	str	r3, [r2, #0]

  /*	Set count direction to up. */

  TIM5->CR1 |= 0x0 << TIM_CR1_DIR_Pos;
 800b88a:	4b13      	ldr	r3, [pc, #76]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b88c:	4a12      	ldr	r2, [pc, #72]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	6013      	str	r3, [r2, #0]

  /*	Set counting mode to edge aligned mode. */

  TIM5->CR1 |= 0x0 << TIM_CR1_CMS_Pos;
 800b892:	4b11      	ldr	r3, [pc, #68]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b894:	4a10      	ldr	r2, [pc, #64]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	6013      	str	r3, [r2, #0]

  /* Set trigger source for Timer 5 as ITR2 (TS=010). */

  TIM5->SMCR = ( 0x2UL << TIM_SMCR_TS_Pos );
 800b89a:	4b0f      	ldr	r3, [pc, #60]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b89c:	2220      	movs	r2, #32
 800b89e:	609a      	str	r2, [r3, #8]

  /* Set slave mode to external clock source 1. */

  TIM5->SMCR |= ( 0x7UL << TIM_SMCR_SMS_Pos );
 800b8a0:	4b0d      	ldr	r3, [pc, #52]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	4a0c      	ldr	r2, [pc, #48]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b8a6:	f043 0307 	orr.w	r3, r3, #7
 800b8aa:	6093      	str	r3, [r2, #8]

  /*	Enable counter of Timer 4. */

  TIM4->CR1 |= TIM_CR1_CEN_Msk;
 800b8ac:	4b09      	ldr	r3, [pc, #36]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a08      	ldr	r2, [pc, #32]	; (800b8d4 <Ticks_setTicks+0x170>)
 800b8b2:	f043 0301 	orr.w	r3, r3, #1
 800b8b6:	6013      	str	r3, [r2, #0]

  /* Enable counter of Timer 5. */

  TIM5->CR1 |= TIM_CR1_CEN_Msk;
 800b8b8:	4b07      	ldr	r3, [pc, #28]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a06      	ldr	r2, [pc, #24]	; (800b8d8 <Ticks_setTicks+0x174>)
 800b8be:	f043 0301 	orr.w	r3, r3, #1
 800b8c2:	6013      	str	r3, [r2, #0]

 asm("NOP");
 800b8c4:	bf00      	nop
}
 800b8c6:	bf00      	nop
 800b8c8:	370c      	adds	r7, #12
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr
 800b8d2:	bf00      	nop
 800b8d4:	40000800 	.word	0x40000800
 800b8d8:	40000c00 	.word	0x40000c00
 800b8dc:	2000014c 	.word	0x2000014c
 800b8e0:	40023800 	.word	0x40023800

0800b8e4 <Ticks_TicksToUs>:

  return(Ticks_captureStopTick - Ticks_captureStartTick);
}

uint32_t Ticks_TicksToUs(uint32_t ticks)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  uint32_t microseconds = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	60fb      	str	r3, [r7, #12]

  switch(Ticks_CurrentTickBase)
 800b8f0:	4b23      	ldr	r3, [pc, #140]	; (800b980 <Ticks_TicksToUs+0x9c>)
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2b06      	cmp	r3, #6
 800b8f6:	d83b      	bhi.n	800b970 <Ticks_TicksToUs+0x8c>
 800b8f8:	a201      	add	r2, pc, #4	; (adr r2, 800b900 <Ticks_TicksToUs+0x1c>)
 800b8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8fe:	bf00      	nop
 800b900:	0800b91d 	.word	0x0800b91d
 800b904:	0800b923 	.word	0x0800b923
 800b908:	0800b931 	.word	0x0800b931
 800b90c:	0800b93d 	.word	0x0800b93d
 800b910:	0800b94b 	.word	0x0800b94b
 800b914:	0800b959 	.word	0x0800b959
 800b918:	0800b965 	.word	0x0800b965
  {
    case(Ticks_1us):
    {
      microseconds = ticks;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	60fb      	str	r3, [r7, #12]
	}
    break;
 800b920:	e026      	b.n	800b970 <Ticks_TicksToUs+0x8c>

    case(Ticks_10us):
	{
      microseconds = (10 * ticks);
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	4613      	mov	r3, r2
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	4413      	add	r3, r2
 800b92a:	005b      	lsls	r3, r3, #1
 800b92c:	60fb      	str	r3, [r7, #12]
	}
    break;
 800b92e:	e01f      	b.n	800b970 <Ticks_TicksToUs+0x8c>

    case(Ticks_100us):
	{
      microseconds = (100 * ticks);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2264      	movs	r2, #100	; 0x64
 800b934:	fb02 f303 	mul.w	r3, r2, r3
 800b938:	60fb      	str	r3, [r7, #12]
	}
    break;
 800b93a:	e019      	b.n	800b970 <Ticks_TicksToUs+0x8c>

    case(Ticks_1ms):
	{
      microseconds = (1000 * ticks);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b942:	fb02 f303 	mul.w	r3, r2, r3
 800b946:	60fb      	str	r3, [r7, #12]
	}
    break;
 800b948:	e012      	b.n	800b970 <Ticks_TicksToUs+0x8c>

    case(Ticks_10ms):
	{
      microseconds = ( 10000 * ticks );
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f242 7210 	movw	r2, #10000	; 0x2710
 800b950:	fb02 f303 	mul.w	r3, r2, r3
 800b954:	60fb      	str	r3, [r7, #12]
	}
    break;
 800b956:	e00b      	b.n	800b970 <Ticks_TicksToUs+0x8c>

    case(Ticks_100ms):
	{
      microseconds = ( 100000 * ticks );
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a0a      	ldr	r2, [pc, #40]	; (800b984 <Ticks_TicksToUs+0xa0>)
 800b95c:	fb02 f303 	mul.w	r3, r2, r3
 800b960:	60fb      	str	r3, [r7, #12]
	}
    break;
 800b962:	e005      	b.n	800b970 <Ticks_TicksToUs+0x8c>

    case(Ticks_1000ms):
	{
      microseconds = ( 1000000 * ticks );
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a08      	ldr	r2, [pc, #32]	; (800b988 <Ticks_TicksToUs+0xa4>)
 800b968:	fb02 f303 	mul.w	r3, r2, r3
 800b96c:	60fb      	str	r3, [r7, #12]
	}
    break;
 800b96e:	bf00      	nop
  }

  return(microseconds);
 800b970:	68fb      	ldr	r3, [r7, #12]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3714      	adds	r7, #20
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	2000014c 	.word	0x2000014c
 800b984:	000186a0 	.word	0x000186a0
 800b988:	000f4240 	.word	0x000f4240

0800b98c <Ticks_enableInterrupt>:


void Ticks_enableInterrupt()
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	af00      	add	r7, sp, #0

  //__disable_irq();

  /* Enable update event interrupt flag. */

  TIM4->DIER = TIM_DIER_UIE_Msk;	//	Enable update event interrupt.
 800b990:	4b05      	ldr	r3, [pc, #20]	; (800b9a8 <Ticks_enableInterrupt+0x1c>)
 800b992:	2201      	movs	r2, #1
 800b994:	60da      	str	r2, [r3, #12]

  NVIC_EnableIRQ(TIM4_IRQn);
 800b996:	201e      	movs	r0, #30
 800b998:	f7ff fe9c 	bl	800b6d4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM4_IRQn,4);
 800b99c:	2104      	movs	r1, #4
 800b99e:	201e      	movs	r0, #30
 800b9a0:	f7ff feb6 	bl	800b710 <__NVIC_SetPriority>

  /* Enable interrupts. */

  //__enable_irq();
}
 800b9a4:	bf00      	nop
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	40000800 	.word	0x40000800

0800b9ac <TIM4_IRQHandler>:
}

/* IRQ Handler for timer tick event. */

void TIM4_IRQHandler(void)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	af00      	add	r7, sp, #0
  if(TIM4->SR & TIM_SR_UIF_Msk)
 800b9b0:	4b09      	ldr	r3, [pc, #36]	; (800b9d8 <TIM4_IRQHandler+0x2c>)
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00a      	beq.n	800b9d2 <TIM4_IRQHandler+0x26>
  {
    Tick_Handler();
 800b9bc:	f000 f810 	bl	800b9e0 <Tick_Handler>

	/* Clear update flag. */

    TIM4->SR &= ~TIM_SR_UIF_Msk;
 800b9c0:	4b05      	ldr	r3, [pc, #20]	; (800b9d8 <TIM4_IRQHandler+0x2c>)
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	4a04      	ldr	r2, [pc, #16]	; (800b9d8 <TIM4_IRQHandler+0x2c>)
 800b9c6:	f023 0301 	bic.w	r3, r3, #1
 800b9ca:	6113      	str	r3, [r2, #16]

    Tick_IF = 1;
 800b9cc:	4b03      	ldr	r3, [pc, #12]	; (800b9dc <TIM4_IRQHandler+0x30>)
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	701a      	strb	r2, [r3, #0]
  }
}
 800b9d2:	bf00      	nop
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	40000800 	.word	0x40000800
 800b9dc:	20000130 	.word	0x20000130

0800b9e0 <Tick_Handler>:
/***************** Tick Handler  **********/

static uint8_t toggleCounter = 0;

void Tick_Handler()
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	af00      	add	r7, sp, #0
  if( toggleCounter >= 10 )
 800b9e4:	4b0d      	ldr	r3, [pc, #52]	; (800ba1c <Tick_Handler+0x3c>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	2b09      	cmp	r3, #9
 800b9ea:	d909      	bls.n	800ba00 <Tick_Handler+0x20>
  {
    GPIOA->ODR ^= ( 1 << 5 );
 800b9ec:	4b0c      	ldr	r3, [pc, #48]	; (800ba20 <Tick_Handler+0x40>)
 800b9ee:	695b      	ldr	r3, [r3, #20]
 800b9f0:	4a0b      	ldr	r2, [pc, #44]	; (800ba20 <Tick_Handler+0x40>)
 800b9f2:	f083 0320 	eor.w	r3, r3, #32
 800b9f6:	6153      	str	r3, [r2, #20]
    toggleCounter = 0;
 800b9f8:	4b08      	ldr	r3, [pc, #32]	; (800ba1c <Tick_Handler+0x3c>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	701a      	strb	r2, [r3, #0]
 800b9fe:	e005      	b.n	800ba0c <Tick_Handler+0x2c>
  }
  else
  {
	  toggleCounter++;
 800ba00:	4b06      	ldr	r3, [pc, #24]	; (800ba1c <Tick_Handler+0x3c>)
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	3301      	adds	r3, #1
 800ba06:	b2da      	uxtb	r2, r3
 800ba08:	4b04      	ldr	r3, [pc, #16]	; (800ba1c <Tick_Handler+0x3c>)
 800ba0a:	701a      	strb	r2, [r3, #0]
  }

  MPU6050_readAllSensorData();
 800ba0c:	f7fc f9ac 	bl	8007d68 <MPU6050_readAllSensorData>
  MP_Update();
 800ba10:	f7fc ff02 	bl	8008818 <MP_Update>
  //Protocol_Manager();
  TM_dispatcher();
 800ba14:	f7ff fde8 	bl	800b5e8 <TM_dispatcher>
}
 800ba18:	bf00      	nop
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	20000123 	.word	0x20000123
 800ba20:	40020000 	.word	0x40020000

0800ba24 <__NVIC_EnableIRQ>:
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ba2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	db0b      	blt.n	800ba4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ba36:	79fb      	ldrb	r3, [r7, #7]
 800ba38:	f003 021f 	and.w	r2, r3, #31
 800ba3c:	4907      	ldr	r1, [pc, #28]	; (800ba5c <__NVIC_EnableIRQ+0x38>)
 800ba3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba42:	095b      	lsrs	r3, r3, #5
 800ba44:	2001      	movs	r0, #1
 800ba46:	fa00 f202 	lsl.w	r2, r0, r2
 800ba4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ba4e:	bf00      	nop
 800ba50:	370c      	adds	r7, #12
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop
 800ba5c:	e000e100 	.word	0xe000e100

0800ba60 <UART_Init>:

#include "UART.h"

void UART_Init()
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	af00      	add	r7, sp, #0
  /****** GPIO configurations for UART communication. **************/

  /* Enable clocks for GPIOB and GPIOC. */

  RCC->AHB1ENR |= ( RCC_AHB1ENR_GPIOBEN_Msk | RCC_AHB1ENR_GPIOCEN_Msk );
 800ba64:	4b3d      	ldr	r3, [pc, #244]	; (800bb5c <UART_Init+0xfc>)
 800ba66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba68:	4a3c      	ldr	r2, [pc, #240]	; (800bb5c <UART_Init+0xfc>)
 800ba6a:	f043 0306 	orr.w	r3, r3, #6
 800ba6e:	6313      	str	r3, [r2, #48]	; 0x30

  /* For UART, Tx pin is PB6 (UART1_TX) and Rx pin is PC7 (UART6_RX). */

  GPIOB->MODER |= ( 0x2 << ( 2 * 6 ) );
 800ba70:	4b3b      	ldr	r3, [pc, #236]	; (800bb60 <UART_Init+0x100>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a3a      	ldr	r2, [pc, #232]	; (800bb60 <UART_Init+0x100>)
 800ba76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ba7a:	6013      	str	r3, [r2, #0]
  GPIOC->MODER |= ( 0x2 << ( 2 * 7 ) );
 800ba7c:	4b39      	ldr	r3, [pc, #228]	; (800bb64 <UART_Init+0x104>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a38      	ldr	r2, [pc, #224]	; (800bb64 <UART_Init+0x104>)
 800ba82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba86:	6013      	str	r3, [r2, #0]

  /* Transmit pin of UART1 is configured in very high-speed mode. */

  GPIOB->OSPEEDR |= ( 0x3UL << ( 2 * 6 ) );
 800ba88:	4b35      	ldr	r3, [pc, #212]	; (800bb60 <UART_Init+0x100>)
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	4a34      	ldr	r2, [pc, #208]	; (800bb60 <UART_Init+0x100>)
 800ba8e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800ba92:	6093      	str	r3, [r2, #8]

  /* Configure alternate function registers. */

  GPIOB->AFR[0] |= ( 0x7UL << ( ( 6 - 0 ) << 2 ) );
 800ba94:	4b32      	ldr	r3, [pc, #200]	; (800bb60 <UART_Init+0x100>)
 800ba96:	6a1b      	ldr	r3, [r3, #32]
 800ba98:	4a31      	ldr	r2, [pc, #196]	; (800bb60 <UART_Init+0x100>)
 800ba9a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800ba9e:	6213      	str	r3, [r2, #32]
  GPIOC->AFR[0] |= ( 0x8UL << ( ( 7 - 0 ) << 2 ) );
 800baa0:	4b30      	ldr	r3, [pc, #192]	; (800bb64 <UART_Init+0x104>)
 800baa2:	6a1b      	ldr	r3, [r3, #32]
 800baa4:	4a2f      	ldr	r2, [pc, #188]	; (800bb64 <UART_Init+0x104>)
 800baa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800baaa:	6213      	str	r3, [r2, #32]

  /**********  UART1 initialization: Transmit. ***********/

  /*	Enable clock for USART1 module. */

  RCC->APB2ENR |= RCC_APB2ENR_USART1EN_Msk;
 800baac:	4b2b      	ldr	r3, [pc, #172]	; (800bb5c <UART_Init+0xfc>)
 800baae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bab0:	4a2a      	ldr	r2, [pc, #168]	; (800bb5c <UART_Init+0xfc>)
 800bab2:	f043 0310 	orr.w	r3, r3, #16
 800bab6:	6453      	str	r3, [r2, #68]	; 0x44

  /*	Enable USART1 module. */

  USART1->CR1 |= USART_CR1_UE_Msk;
 800bab8:	4b2b      	ldr	r3, [pc, #172]	; (800bb68 <UART_Init+0x108>)
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	4a2a      	ldr	r2, [pc, #168]	; (800bb68 <UART_Init+0x108>)
 800babe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bac2:	60d3      	str	r3, [r2, #12]

  /*	Set number of stop bits to 1. */

  USART1->CR2 |= 0x0 << USART_CR2_STOP_Pos;
 800bac4:	4b28      	ldr	r3, [pc, #160]	; (800bb68 <UART_Init+0x108>)
 800bac6:	4a28      	ldr	r2, [pc, #160]	; (800bb68 <UART_Init+0x108>)
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	6113      	str	r3, [r2, #16]

  /*	Set baud rate divider to 45 + 0/16 and oversampling by 16 for baud rate of 115200. */

  USART1->BRR 	|= 	( 45 << USART_BRR_DIV_Mantissa_Pos )
 800bacc:	4b26      	ldr	r3, [pc, #152]	; (800bb68 <UART_Init+0x108>)
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	4a25      	ldr	r2, [pc, #148]	; (800bb68 <UART_Init+0x108>)
 800bad2:	f443 7334 	orr.w	r3, r3, #720	; 0x2d0
 800bad6:	6093      	str	r3, [r2, #8]
  //USART2->BRR 	|= 	( 2 << USART_BRR_DIV_Mantissa_Pos )
  //				|	( 14 << USART_BRR_DIV_Fraction_Pos );

  /*	Enable transmit DMA for UART1. */

  USART1->CR3 |= USART_CR3_DMAT_Msk;
 800bad8:	4b23      	ldr	r3, [pc, #140]	; (800bb68 <UART_Init+0x108>)
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	4a22      	ldr	r2, [pc, #136]	; (800bb68 <UART_Init+0x108>)
 800bade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bae2:	6153      	str	r3, [r2, #20]

  /*	Enable only transmission for USART1. */

  USART1->CR1 |= USART_CR1_TE_Msk;
 800bae4:	4b20      	ldr	r3, [pc, #128]	; (800bb68 <UART_Init+0x108>)
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	4a1f      	ldr	r2, [pc, #124]	; (800bb68 <UART_Init+0x108>)
 800baea:	f043 0308 	orr.w	r3, r3, #8
 800baee:	60d3      	str	r3, [r2, #12]

  while( ( USART1->SR & USART_SR_TC_Msk ) == 0 );
 800baf0:	bf00      	nop
 800baf2:	4b1d      	ldr	r3, [pc, #116]	; (800bb68 <UART_Init+0x108>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d0f9      	beq.n	800baf2 <UART_Init+0x92>

  /**********  UART6 initialization: Receive. ***********/

  /*	Enable clock for USART6 module. */

  RCC->APB2ENR |= RCC_APB2ENR_USART6EN_Msk;
 800bafe:	4b17      	ldr	r3, [pc, #92]	; (800bb5c <UART_Init+0xfc>)
 800bb00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb02:	4a16      	ldr	r2, [pc, #88]	; (800bb5c <UART_Init+0xfc>)
 800bb04:	f043 0320 	orr.w	r3, r3, #32
 800bb08:	6453      	str	r3, [r2, #68]	; 0x44

  /*	Enable USART6 module. */

  USART6->CR1 |= USART_CR1_UE_Msk;
 800bb0a:	4b18      	ldr	r3, [pc, #96]	; (800bb6c <UART_Init+0x10c>)
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	4a17      	ldr	r2, [pc, #92]	; (800bb6c <UART_Init+0x10c>)
 800bb10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bb14:	60d3      	str	r3, [r2, #12]

  /*	Set number of stop bits to 1. */

  USART6->CR2 |= 0x0 << USART_CR2_STOP_Pos;
 800bb16:	4b15      	ldr	r3, [pc, #84]	; (800bb6c <UART_Init+0x10c>)
 800bb18:	4a14      	ldr	r2, [pc, #80]	; (800bb6c <UART_Init+0x10c>)
 800bb1a:	691b      	ldr	r3, [r3, #16]
 800bb1c:	6113      	str	r3, [r2, #16]

  /*	Set baud rate divider to 45 + 0/16 and oversampling by 16 for baud rate of 115200. */

  USART6->BRR 	|= 	( 45 << USART_BRR_DIV_Mantissa_Pos )
 800bb1e:	4b13      	ldr	r3, [pc, #76]	; (800bb6c <UART_Init+0x10c>)
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	4a12      	ldr	r2, [pc, #72]	; (800bb6c <UART_Init+0x10c>)
 800bb24:	f443 7334 	orr.w	r3, r3, #720	; 0x2d0
 800bb28:	6093      	str	r3, [r2, #8]
				|	( 0 << USART_BRR_DIV_Fraction_Pos );

  USART6->CR3 |= USART_CR3_DMAR_Msk;
 800bb2a:	4b10      	ldr	r3, [pc, #64]	; (800bb6c <UART_Init+0x10c>)
 800bb2c:	695b      	ldr	r3, [r3, #20]
 800bb2e:	4a0f      	ldr	r2, [pc, #60]	; (800bb6c <UART_Init+0x10c>)
 800bb30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb34:	6153      	str	r3, [r2, #20]

  /*	Enable only transmission for USART1. */

  USART6->CR1 |= USART_CR1_RE_Msk;
 800bb36:	4b0d      	ldr	r3, [pc, #52]	; (800bb6c <UART_Init+0x10c>)
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	4a0c      	ldr	r2, [pc, #48]	; (800bb6c <UART_Init+0x10c>)
 800bb3c:	f043 0304 	orr.w	r3, r3, #4
 800bb40:	60d3      	str	r3, [r2, #12]

  while( ( USART6->SR & USART_SR_TC_Msk ) == 0 );
 800bb42:	bf00      	nop
 800bb44:	4b09      	ldr	r3, [pc, #36]	; (800bb6c <UART_Init+0x10c>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d0f9      	beq.n	800bb44 <UART_Init+0xe4>


  /****** Enable DMA transfers ******/

  UART_Receive_DMA_Enable( UART_RX_DMA_BUFFER, 6 );
 800bb50:	2106      	movs	r1, #6
 800bb52:	4807      	ldr	r0, [pc, #28]	; (800bb70 <UART_Init+0x110>)
 800bb54:	f000 f80e 	bl	800bb74 <UART_Receive_DMA_Enable>
}
 800bb58:	bf00      	nop
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	40023800 	.word	0x40023800
 800bb60:	40020400 	.word	0x40020400
 800bb64:	40020800 	.word	0x40020800
 800bb68:	40011000 	.word	0x40011000
 800bb6c:	40011400 	.word	0x40011400
 800bb70:	20000478 	.word	0x20000478

0800bb74 <UART_Receive_DMA_Enable>:
/* Function to initialize UART DMA receive (UART6_RX). */

/* UART6_RX DMA: DMA controller 2, Stream 2, Channel 5. */

void UART_Receive_DMA_Enable(uint8_t* buffer, uint8_t nBytes)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	70fb      	strb	r3, [r7, #3]
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN_Msk;
 800bb80:	4b2b      	ldr	r3, [pc, #172]	; (800bc30 <UART_Receive_DMA_Enable+0xbc>)
 800bb82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb84:	4a2a      	ldr	r2, [pc, #168]	; (800bc30 <UART_Receive_DMA_Enable+0xbc>)
 800bb86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bb8a:	6313      	str	r3, [r2, #48]	; 0x30
	 	stream 2, channel 5.
	 */

	/*	Disable the DMA stream. */

	DMA2_Stream2->CR &= ~DMA_SxCR_EN_Msk;
 800bb8c:	4b29      	ldr	r3, [pc, #164]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a28      	ldr	r2, [pc, #160]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bb92:	f023 0301 	bic.w	r3, r3, #1
 800bb96:	6013      	str	r3, [r2, #0]

	/*	Wait until DMA stream disable request is acknowledged. */

	while( DMA2_Stream2->CR & DMA_SxCR_EN_Msk );
 800bb98:	bf00      	nop
 800bb9a:	4b26      	ldr	r3, [pc, #152]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 0301 	and.w	r3, r3, #1
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1f9      	bne.n	800bb9a <UART_Receive_DMA_Enable+0x26>

	/*	Set peripheral address register to the USART data register. */

	DMA2_Stream2->PAR = USART6_BASE + (uint32_t)0x4;
 800bba6:	4b23      	ldr	r3, [pc, #140]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bba8:	4a23      	ldr	r2, [pc, #140]	; (800bc38 <UART_Receive_DMA_Enable+0xc4>)
 800bbaa:	609a      	str	r2, [r3, #8]

	/*	Set memory location to load the data into. */

	DMA2_Stream2->M0AR = (uint32_t)buffer;
 800bbac:	4a21      	ldr	r2, [pc, #132]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	60d3      	str	r3, [r2, #12]

	/*	Set number of data points per stream. */

	DMA2_Stream2->NDTR = nBytes;
 800bbb2:	4a20      	ldr	r2, [pc, #128]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bbb4:	78fb      	ldrb	r3, [r7, #3]
 800bbb6:	6053      	str	r3, [r2, #4]

	/*	Set DMA Stream channel. */

	DMA2_Stream2->CR |=  0x5U << DMA_SxCR_CHSEL_Pos;
 800bbb8:	4b1e      	ldr	r3, [pc, #120]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a1d      	ldr	r2, [pc, #116]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bbbe:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 800bbc2:	6013      	str	r3, [r2, #0]

	/*	Set DMA transfer direction from peripheral to memory. */

	DMA2_Stream2->CR |= 0x0U << DMA_SxCR_DIR_Pos;
 800bbc4:	4b1b      	ldr	r3, [pc, #108]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bbc6:	4a1b      	ldr	r2, [pc, #108]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	6013      	str	r3, [r2, #0]

	/*	Enable memory increment mode. */

	DMA2_Stream2->CR |= 0x1U << DMA_SxCR_MINC_Pos;
 800bbcc:	4b19      	ldr	r3, [pc, #100]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4a18      	ldr	r2, [pc, #96]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bbd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bbd6:	6013      	str	r3, [r2, #0]

	/*	Enable circular mode. */

	DMA2_Stream2->CR |= 0x1U << DMA_SxCR_CIRC_Pos;
 800bbd8:	4b16      	ldr	r3, [pc, #88]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a15      	ldr	r2, [pc, #84]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bbde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbe2:	6013      	str	r3, [r2, #0]

	/*	Enable DMA stream full transfer interrupt. */

	DMA2_Stream2->CR |=  DMA_SxCR_TCIE_Msk;
 800bbe4:	4b13      	ldr	r3, [pc, #76]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a12      	ldr	r2, [pc, #72]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bbea:	f043 0310 	orr.w	r3, r3, #16
 800bbee:	6013      	str	r3, [r2, #0]

	/*	Enable DMA direct mode interrupt. */

	DMA2_Stream2->CR |= DMA_SxCR_DMEIE_Msk;
 800bbf0:	4b10      	ldr	r3, [pc, #64]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a0f      	ldr	r2, [pc, #60]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bbf6:	f043 0302 	orr.w	r3, r3, #2
 800bbfa:	6013      	str	r3, [r2, #0]

	//DMA1_Stream5->CR |= DMA_SxCR_TEIE_Msk;

	/*	Enable DMA Stream. */

	DMA2->LIFCR |= DMA_LIFCR_CTCIF2_Msk;
 800bbfc:	4b0f      	ldr	r3, [pc, #60]	; (800bc3c <UART_Receive_DMA_Enable+0xc8>)
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	4a0e      	ldr	r2, [pc, #56]	; (800bc3c <UART_Receive_DMA_Enable+0xc8>)
 800bc02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc06:	6093      	str	r3, [r2, #8]

	DMA2_Stream2->CR |= DMA_SxCR_EN_Msk;
 800bc08:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a09      	ldr	r2, [pc, #36]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bc0e:	f043 0301 	orr.w	r3, r3, #1
 800bc12:	6013      	str	r3, [r2, #0]

	while( ( DMA2_Stream2->CR & DMA_SxCR_EN_Msk ) == 0 );
 800bc14:	bf00      	nop
 800bc16:	4b07      	ldr	r3, [pc, #28]	; (800bc34 <UART_Receive_DMA_Enable+0xc0>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f003 0301 	and.w	r3, r3, #1
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d0f9      	beq.n	800bc16 <UART_Receive_DMA_Enable+0xa2>

	/*	Enable DMA1 Stream5 global interrupt. */

	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800bc22:	203a      	movs	r0, #58	; 0x3a
 800bc24:	f7ff fefe 	bl	800ba24 <__NVIC_EnableIRQ>
}
 800bc28:	bf00      	nop
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	40023800 	.word	0x40023800
 800bc34:	40026440 	.word	0x40026440
 800bc38:	40011404 	.word	0x40011404
 800bc3c:	40026400 	.word	0x40026400

0800bc40 <DMA2_Stream2_IRQHandler>:
  RCC->AHB1RSTR |= RCC_AHB1RSTR_DMA2RST_Msk;
}


void DMA2_Stream2_IRQHandler(void)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	af00      	add	r7, sp, #0
  if( DMA2->LISR & DMA_LISR_TCIF2 )
 800bc44:	4b08      	ldr	r3, [pc, #32]	; (800bc68 <DMA2_Stream2_IRQHandler+0x28>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d008      	beq.n	800bc62 <DMA2_Stream2_IRQHandler+0x22>
  {
    DMA2->LIFCR |= DMA_LIFCR_CTCIF2_Msk;
 800bc50:	4b05      	ldr	r3, [pc, #20]	; (800bc68 <DMA2_Stream2_IRQHandler+0x28>)
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	4a04      	ldr	r2, [pc, #16]	; (800bc68 <DMA2_Stream2_IRQHandler+0x28>)
 800bc56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc5a:	6093      	str	r3, [r2, #8]
    SDCP_RXNQ(UART_RX_DMA_BUFFER);
 800bc5c:	4803      	ldr	r0, [pc, #12]	; (800bc6c <DMA2_Stream2_IRQHandler+0x2c>)
 800bc5e:	f7fe ff37 	bl	800aad0 <SDCP_RXNQ>
  }
}
 800bc62:	bf00      	nop
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	40026400 	.word	0x40026400
 800bc6c:	20000478 	.word	0x20000478

0800bc70 <UART_DMA_Transmit>:

  USART1->SR &= ~USART_SR_TC_Msk;
}

void UART_DMA_Transmit(uint8_t* buffer, uint8_t nBytes)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	70fb      	strb	r3, [r7, #3]
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN_Msk;
 800bc7c:	4b2b      	ldr	r3, [pc, #172]	; (800bd2c <UART_DMA_Transmit+0xbc>)
 800bc7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc80:	4a2a      	ldr	r2, [pc, #168]	; (800bd2c <UART_DMA_Transmit+0xbc>)
 800bc82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bc86:	6313      	str	r3, [r2, #48]	; 0x30
	 	stream 7, channel 4.
	 */

	/*	Disable the DMA stream. */

	DMA2_Stream7->CR &= ~DMA_SxCR_EN_Msk;
 800bc88:	4b29      	ldr	r3, [pc, #164]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a28      	ldr	r2, [pc, #160]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bc8e:	f023 0301 	bic.w	r3, r3, #1
 800bc92:	6013      	str	r3, [r2, #0]

	/*	Wait until DMA stream disable request is acknowledged. */

	while( DMA2_Stream7->CR & DMA_SxCR_EN_Msk );
 800bc94:	bf00      	nop
 800bc96:	4b26      	ldr	r3, [pc, #152]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f003 0301 	and.w	r3, r3, #1
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1f9      	bne.n	800bc96 <UART_DMA_Transmit+0x26>

	/*	Set peripheral address register to the USART data register. */

	DMA2_Stream7->PAR = (uint32_t)(&(USART1->DR));
 800bca2:	4b23      	ldr	r3, [pc, #140]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bca4:	4a23      	ldr	r2, [pc, #140]	; (800bd34 <UART_DMA_Transmit+0xc4>)
 800bca6:	609a      	str	r2, [r3, #8]

	/*	Set memory location to load the data into. */

	DMA2_Stream7->M0AR = (uint32_t)buffer;
 800bca8:	4a21      	ldr	r2, [pc, #132]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	60d3      	str	r3, [r2, #12]

	/*	Set number of data points per stream. */

	DMA2_Stream7->NDTR = nBytes;
 800bcae:	4a20      	ldr	r2, [pc, #128]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bcb0:	78fb      	ldrb	r3, [r7, #3]
 800bcb2:	6053      	str	r3, [r2, #4]

	/*	Set DMA Stream channel. */

	DMA2_Stream7->CR |=  0x4U << DMA_SxCR_CHSEL_Pos;
 800bcb4:	4b1e      	ldr	r3, [pc, #120]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a1d      	ldr	r2, [pc, #116]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bcba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bcbe:	6013      	str	r3, [r2, #0]

	/*	Set DMA transfer direction: memory to peripheral. */

	DMA2_Stream7->CR |= 0x1U << DMA_SxCR_DIR_Pos;
 800bcc0:	4b1b      	ldr	r3, [pc, #108]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a1a      	ldr	r2, [pc, #104]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bcc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcca:	6013      	str	r3, [r2, #0]

	/*	Enable memory increment mode. */

	DMA2_Stream7->CR |= (0x1U << DMA_SxCR_MINC_Pos);
 800bccc:	4b18      	ldr	r3, [pc, #96]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a17      	ldr	r2, [pc, #92]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bcd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bcd6:	6013      	str	r3, [r2, #0]

	/*	Disable circular mode. */

	DMA2_Stream7->CR |= (0x0U << DMA_SxCR_CIRC_Pos);
 800bcd8:	4b15      	ldr	r3, [pc, #84]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bcda:	4a15      	ldr	r2, [pc, #84]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	6013      	str	r3, [r2, #0]

	/*	Enable DMA stream full transfer interrupt. */

	DMA2_Stream7->CR |=  DMA_SxCR_TCIE_Msk;
 800bce0:	4b13      	ldr	r3, [pc, #76]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a12      	ldr	r2, [pc, #72]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bce6:	f043 0310 	orr.w	r3, r3, #16
 800bcea:	6013      	str	r3, [r2, #0]

	/*	Enable DMA direct mode interrupt. */

	DMA2_Stream7->CR |= DMA_SxCR_DMEIE_Msk;
 800bcec:	4b10      	ldr	r3, [pc, #64]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a0f      	ldr	r2, [pc, #60]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bcf2:	f043 0302 	orr.w	r3, r3, #2
 800bcf6:	6013      	str	r3, [r2, #0]

	/*	Enable DMA Stream. */

	//DMA1->HIFCR |= DMA_HIFCR_CTCIF6_Msk;

	DMA2_Stream7->CR |= DMA_SxCR_EN_Msk;
 800bcf8:	4b0d      	ldr	r3, [pc, #52]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a0c      	ldr	r2, [pc, #48]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bcfe:	f043 0301 	orr.w	r3, r3, #1
 800bd02:	6013      	str	r3, [r2, #0]

	while( !( DMA2_Stream7->CR & DMA_SxCR_EN_Msk ) );
 800bd04:	bf00      	nop
 800bd06:	4b0a      	ldr	r3, [pc, #40]	; (800bd30 <UART_DMA_Transmit+0xc0>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 0301 	and.w	r3, r3, #1
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d0f9      	beq.n	800bd06 <UART_DMA_Transmit+0x96>

	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800bd12:	2046      	movs	r0, #70	; 0x46
 800bd14:	f7ff fe86 	bl	800ba24 <__NVIC_EnableIRQ>

	UART.UART_parameters.DMA_Tx_completed = 0;
 800bd18:	4a07      	ldr	r2, [pc, #28]	; (800bd38 <UART_DMA_Transmit+0xc8>)
 800bd1a:	7813      	ldrb	r3, [r2, #0]
 800bd1c:	f36f 03c3 	bfc	r3, #3, #1
 800bd20:	7013      	strb	r3, [r2, #0]
}
 800bd22:	bf00      	nop
 800bd24:	3708      	adds	r7, #8
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	40023800 	.word	0x40023800
 800bd30:	400264b8 	.word	0x400264b8
 800bd34:	40011004 	.word	0x40011004
 800bd38:	20000138 	.word	0x20000138

0800bd3c <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	af00      	add	r7, sp, #0
  if( DMA2->HISR & DMA_HISR_TCIF7 )
 800bd40:	4b0a      	ldr	r3, [pc, #40]	; (800bd6c <DMA2_Stream7_IRQHandler+0x30>)
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00a      	beq.n	800bd62 <DMA2_Stream7_IRQHandler+0x26>
  {
    DMA2->HIFCR |= DMA_HIFCR_CTCIF7_Msk;
 800bd4c:	4b07      	ldr	r3, [pc, #28]	; (800bd6c <DMA2_Stream7_IRQHandler+0x30>)
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	4a06      	ldr	r2, [pc, #24]	; (800bd6c <DMA2_Stream7_IRQHandler+0x30>)
 800bd52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bd56:	60d3      	str	r3, [r2, #12]
    UART.UART_parameters.DMA_Tx_completed = 1;
 800bd58:	4a05      	ldr	r2, [pc, #20]	; (800bd70 <DMA2_Stream7_IRQHandler+0x34>)
 800bd5a:	7813      	ldrb	r3, [r2, #0]
 800bd5c:	f043 0308 	orr.w	r3, r3, #8
 800bd60:	7013      	strb	r3, [r2, #0]
  }
}
 800bd62:	bf00      	nop
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	40026400 	.word	0x40026400
 800bd70:	20000138 	.word	0x20000138

0800bd74 <main>:
#include "Motion_Processing.h"

uint8_t counter = 0;

int main(void)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800bd7a:	b672      	cpsid	i
  /* Device peripheral initializations. */

  __disable_irq();

  System_ClockInit();
 800bd7c:	f7ff fb62 	bl	800b444 <System_ClockInit>

  Config_read();
 800bd80:	f7f4 ff56 	bl	8000c30 <Config_read>

  Ticks_setTicks(Ticks_10ms);
 800bd84:	2004      	movs	r0, #4
 800bd86:	f7ff fced 	bl	800b764 <Ticks_setTicks>
  Ticks_enableInterrupt();
 800bd8a:	f7ff fdff 	bl	800b98c <Ticks_enableInterrupt>

  UART_Init();
 800bd8e:	f7ff fe67 	bl	800ba60 <UART_Init>

  /* External devices initializations. */

  RotaryEncoder_Init();
 800bd92:	f7fe fc97 	bl	800a6c4 <RotaryEncoder_Init>
  MPU6050_Init();
 800bd96:	f7fb fd73 	bl	8007880 <MPU6050_Init>
  LED_Init();
 800bd9a:	f7fa fd23 	bl	80067e4 <LED_Init>
  LCD_GUI_Init();
 800bd9e:	f7f5 f8b7 	bl	8000f10 <LCD_GUI_Init>

  PM_Init();
 800bda2:	f7fd fa6f 	bl	8009284 <PM_Init>
  MP_Init();
 800bda6:	f7fc fbef 	bl	8008588 <MP_Init>

  /* Tasks to be executed in the main function. */

  TM_addTask(0,&LED_Update,10);
 800bdaa:	220a      	movs	r2, #10
 800bdac:	492c      	ldr	r1, [pc, #176]	; (800be60 <main+0xec>)
 800bdae:	2000      	movs	r0, #0
 800bdb0:	f7ff fbda 	bl	800b568 <TM_addTask>
  TM_addTask(1,&LCD_GUI_Update,15);
 800bdb4:	220f      	movs	r2, #15
 800bdb6:	492b      	ldr	r1, [pc, #172]	; (800be64 <main+0xf0>)
 800bdb8:	2001      	movs	r0, #1
 800bdba:	f7ff fbd5 	bl	800b568 <TM_addTask>
  TM_addTask(2,&Protocol_Manager,1);
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	4929      	ldr	r1, [pc, #164]	; (800be68 <main+0xf4>)
 800bdc2:	2002      	movs	r0, #2
 800bdc4:	f7ff fbd0 	bl	800b568 <TM_addTask>
  __ASM volatile ("cpsie i" : : : "memory");
 800bdc8:	b662      	cpsie	i

  __enable_irq();

  while (1)
  {
	if( Tick_IF )
 800bdca:	4b28      	ldr	r3, [pc, #160]	; (800be6c <main+0xf8>)
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d0fa      	beq.n	800bdca <main+0x56>
	{
	  /* Loop through induvidual tasks. */

      for(int i = 0 ; i < TM_nTasks ; i++)
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	60fb      	str	r3, [r7, #12]
 800bdd8:	e03b      	b.n	800be52 <main+0xde>
      {
    	/* Execute all pending executions of current tasks. */

    	uint32_t pendingExecutions = TM_Task[i].pendingExecutions;
 800bdda:	4925      	ldr	r1, [pc, #148]	; (800be70 <main+0xfc>)
 800bddc:	68fa      	ldr	r2, [r7, #12]
 800bdde:	4613      	mov	r3, r2
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	4413      	add	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	440b      	add	r3, r1
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	607b      	str	r3, [r7, #4]

        for(int j = 0 ; j < pendingExecutions ; j++ )
 800bdec:	2300      	movs	r3, #0
 800bdee:	60bb      	str	r3, [r7, #8]
 800bdf0:	e028      	b.n	800be44 <main+0xd0>
        {
        	if( TM_Task[i].runnable )
 800bdf2:	491f      	ldr	r1, [pc, #124]	; (800be70 <main+0xfc>)
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	4413      	add	r3, r2
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	440b      	add	r3, r1
 800be00:	3304      	adds	r3, #4
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d009      	beq.n	800be1c <main+0xa8>
        	{
        	  (*TM_Task[i].fptr)();
 800be08:	4919      	ldr	r1, [pc, #100]	; (800be70 <main+0xfc>)
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	4613      	mov	r3, r2
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4413      	add	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	440b      	add	r3, r1
 800be16:	3310      	adds	r3, #16
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4798      	blx	r3
        	}

        	TM_Task[i].pendingExecutions--;
 800be1c:	4914      	ldr	r1, [pc, #80]	; (800be70 <main+0xfc>)
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	4613      	mov	r3, r2
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	4413      	add	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	440b      	add	r3, r1
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	1e59      	subs	r1, r3, #1
 800be2e:	4810      	ldr	r0, [pc, #64]	; (800be70 <main+0xfc>)
 800be30:	68fa      	ldr	r2, [r7, #12]
 800be32:	4613      	mov	r3, r2
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	4413      	add	r3, r2
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	4403      	add	r3, r0
 800be3c:	6019      	str	r1, [r3, #0]
        for(int j = 0 ; j < pendingExecutions ; j++ )
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	3301      	adds	r3, #1
 800be42:	60bb      	str	r3, [r7, #8]
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d8d2      	bhi.n	800bdf2 <main+0x7e>
      for(int i = 0 ; i < TM_nTasks ; i++)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	3301      	adds	r3, #1
 800be50:	60fb      	str	r3, [r7, #12]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2b04      	cmp	r3, #4
 800be56:	ddc0      	ble.n	800bdda <main+0x66>
        }
      }

	  Tick_IF = 0;
 800be58:	4b04      	ldr	r3, [pc, #16]	; (800be6c <main+0xf8>)
 800be5a:	2200      	movs	r2, #0
 800be5c:	701a      	strb	r2, [r3, #0]
	if( Tick_IF )
 800be5e:	e7b4      	b.n	800bdca <main+0x56>
 800be60:	080069a5 	.word	0x080069a5
 800be64:	080028d9 	.word	0x080028d9
 800be68:	0800a5fd 	.word	0x0800a5fd
 800be6c:	20000130 	.word	0x20000130
 800be70:	20000538 	.word	0x20000538

0800be74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800be74:	b480      	push	{r7}
 800be76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800be78:	e7fe      	b.n	800be78 <NMI_Handler+0x4>

0800be7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800be7a:	b480      	push	{r7}
 800be7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800be7e:	e7fe      	b.n	800be7e <HardFault_Handler+0x4>

0800be80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800be80:	b480      	push	{r7}
 800be82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800be84:	e7fe      	b.n	800be84 <MemManage_Handler+0x4>

0800be86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800be86:	b480      	push	{r7}
 800be88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800be8a:	e7fe      	b.n	800be8a <BusFault_Handler+0x4>

0800be8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800be8c:	b480      	push	{r7}
 800be8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800be90:	e7fe      	b.n	800be90 <UsageFault_Handler+0x4>

0800be92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800be92:	b480      	push	{r7}
 800be94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800be96:	bf00      	nop
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bea0:	b480      	push	{r7}
 800bea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bea4:	bf00      	nop
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr

0800beae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800beae:	b480      	push	{r7}
 800beb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800beb2:	bf00      	nop
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bec0:	f000 f8e6 	bl	800c090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bec4:	bf00      	nop
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b086      	sub	sp, #24
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bed4:	2300      	movs	r3, #0
 800bed6:	617b      	str	r3, [r7, #20]
 800bed8:	e00a      	b.n	800bef0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800beda:	f3af 8000 	nop.w
 800bede:	4601      	mov	r1, r0
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	60ba      	str	r2, [r7, #8]
 800bee6:	b2ca      	uxtb	r2, r1
 800bee8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	3301      	adds	r3, #1
 800beee:	617b      	str	r3, [r7, #20]
 800bef0:	697a      	ldr	r2, [r7, #20]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	dbf0      	blt.n	800beda <_read+0x12>
	}

return len;
 800bef8:	687b      	ldr	r3, [r7, #4]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3718      	adds	r7, #24
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b086      	sub	sp, #24
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	60f8      	str	r0, [r7, #12]
 800bf0a:	60b9      	str	r1, [r7, #8]
 800bf0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bf0e:	2300      	movs	r3, #0
 800bf10:	617b      	str	r3, [r7, #20]
 800bf12:	e009      	b.n	800bf28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	1c5a      	adds	r2, r3, #1
 800bf18:	60ba      	str	r2, [r7, #8]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	3301      	adds	r3, #1
 800bf26:	617b      	str	r3, [r7, #20]
 800bf28:	697a      	ldr	r2, [r7, #20]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	dbf1      	blt.n	800bf14 <_write+0x12>
	}
	return len;
 800bf30:	687b      	ldr	r3, [r7, #4]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3718      	adds	r7, #24
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <_close>:

int _close(int file)
{
 800bf3a:	b480      	push	{r7}
 800bf3c:	b083      	sub	sp, #12
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
	return -1;
 800bf42:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	370c      	adds	r7, #12
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr

0800bf52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bf52:	b480      	push	{r7}
 800bf54:	b083      	sub	sp, #12
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bf62:	605a      	str	r2, [r3, #4]
	return 0;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	370c      	adds	r7, #12
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <_isatty>:

int _isatty(int file)
{
 800bf72:	b480      	push	{r7}
 800bf74:	b083      	sub	sp, #12
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
	return 1;
 800bf7a:	2301      	movs	r3, #1
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	60f8      	str	r0, [r7, #12]
 800bf90:	60b9      	str	r1, [r7, #8]
 800bf92:	607a      	str	r2, [r7, #4]
	return 0;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3714      	adds	r7, #20
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
	...

0800bfa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bfac:	4a14      	ldr	r2, [pc, #80]	; (800c000 <_sbrk+0x5c>)
 800bfae:	4b15      	ldr	r3, [pc, #84]	; (800c004 <_sbrk+0x60>)
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bfb8:	4b13      	ldr	r3, [pc, #76]	; (800c008 <_sbrk+0x64>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d102      	bne.n	800bfc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bfc0:	4b11      	ldr	r3, [pc, #68]	; (800c008 <_sbrk+0x64>)
 800bfc2:	4a12      	ldr	r2, [pc, #72]	; (800c00c <_sbrk+0x68>)
 800bfc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bfc6:	4b10      	ldr	r3, [pc, #64]	; (800c008 <_sbrk+0x64>)
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4413      	add	r3, r2
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d207      	bcs.n	800bfe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bfd4:	f000 f870 	bl	800c0b8 <__errno>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	230c      	movs	r3, #12
 800bfdc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800bfde:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe2:	e009      	b.n	800bff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bfe4:	4b08      	ldr	r3, [pc, #32]	; (800c008 <_sbrk+0x64>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bfea:	4b07      	ldr	r3, [pc, #28]	; (800c008 <_sbrk+0x64>)
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4413      	add	r3, r2
 800bff2:	4a05      	ldr	r2, [pc, #20]	; (800c008 <_sbrk+0x64>)
 800bff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bff6:	68fb      	ldr	r3, [r7, #12]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3718      	adds	r7, #24
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	20018000 	.word	0x20018000
 800c004:	00000600 	.word	0x00000600
 800c008:	20000124 	.word	0x20000124
 800c00c:	20000788 	.word	0x20000788

0800c010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c010:	b480      	push	{r7}
 800c012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c014:	4b08      	ldr	r3, [pc, #32]	; (800c038 <SystemInit+0x28>)
 800c016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c01a:	4a07      	ldr	r2, [pc, #28]	; (800c038 <SystemInit+0x28>)
 800c01c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c024:	4b04      	ldr	r3, [pc, #16]	; (800c038 <SystemInit+0x28>)
 800c026:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c02a:	609a      	str	r2, [r3, #8]
#endif
}
 800c02c:	bf00      	nop
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	e000ed00 	.word	0xe000ed00

0800c03c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800c03c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c074 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c040:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c042:	e003      	b.n	800c04c <LoopCopyDataInit>

0800c044 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c044:	4b0c      	ldr	r3, [pc, #48]	; (800c078 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c046:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c048:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c04a:	3104      	adds	r1, #4

0800c04c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c04c:	480b      	ldr	r0, [pc, #44]	; (800c07c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c04e:	4b0c      	ldr	r3, [pc, #48]	; (800c080 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c050:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c052:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c054:	d3f6      	bcc.n	800c044 <CopyDataInit>
  ldr  r2, =_sbss
 800c056:	4a0b      	ldr	r2, [pc, #44]	; (800c084 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c058:	e002      	b.n	800c060 <LoopFillZerobss>

0800c05a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c05a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c05c:	f842 3b04 	str.w	r3, [r2], #4

0800c060 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c060:	4b09      	ldr	r3, [pc, #36]	; (800c088 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c062:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c064:	d3f9      	bcc.n	800c05a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c066:	f7ff ffd3 	bl	800c010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c06a:	f000 f82b 	bl	800c0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c06e:	f7ff fe81 	bl	800bd74 <main>
  bx  lr    
 800c072:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800c074:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800c078:	0800d34c 	.word	0x0800d34c
  ldr  r0, =_sdata
 800c07c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c080:	200000f8 	.word	0x200000f8
  ldr  r2, =_sbss
 800c084:	200000f8 	.word	0x200000f8
  ldr  r3, = _ebss
 800c088:	20000784 	.word	0x20000784

0800c08c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c08c:	e7fe      	b.n	800c08c <ADC_IRQHandler>
	...

0800c090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c090:	b480      	push	{r7}
 800c092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c094:	4b06      	ldr	r3, [pc, #24]	; (800c0b0 <HAL_IncTick+0x20>)
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	461a      	mov	r2, r3
 800c09a:	4b06      	ldr	r3, [pc, #24]	; (800c0b4 <HAL_IncTick+0x24>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4413      	add	r3, r2
 800c0a0:	4a04      	ldr	r2, [pc, #16]	; (800c0b4 <HAL_IncTick+0x24>)
 800c0a2:	6013      	str	r3, [r2, #0]
}
 800c0a4:	bf00      	nop
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	2000008e 	.word	0x2000008e
 800c0b4:	2000077c 	.word	0x2000077c

0800c0b8 <__errno>:
 800c0b8:	4b01      	ldr	r3, [pc, #4]	; (800c0c0 <__errno+0x8>)
 800c0ba:	6818      	ldr	r0, [r3, #0]
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	20000090 	.word	0x20000090

0800c0c4 <__libc_init_array>:
 800c0c4:	b570      	push	{r4, r5, r6, lr}
 800c0c6:	4e0d      	ldr	r6, [pc, #52]	; (800c0fc <__libc_init_array+0x38>)
 800c0c8:	4c0d      	ldr	r4, [pc, #52]	; (800c100 <__libc_init_array+0x3c>)
 800c0ca:	1ba4      	subs	r4, r4, r6
 800c0cc:	10a4      	asrs	r4, r4, #2
 800c0ce:	2500      	movs	r5, #0
 800c0d0:	42a5      	cmp	r5, r4
 800c0d2:	d109      	bne.n	800c0e8 <__libc_init_array+0x24>
 800c0d4:	4e0b      	ldr	r6, [pc, #44]	; (800c104 <__libc_init_array+0x40>)
 800c0d6:	4c0c      	ldr	r4, [pc, #48]	; (800c108 <__libc_init_array+0x44>)
 800c0d8:	f000 fe6a 	bl	800cdb0 <_init>
 800c0dc:	1ba4      	subs	r4, r4, r6
 800c0de:	10a4      	asrs	r4, r4, #2
 800c0e0:	2500      	movs	r5, #0
 800c0e2:	42a5      	cmp	r5, r4
 800c0e4:	d105      	bne.n	800c0f2 <__libc_init_array+0x2e>
 800c0e6:	bd70      	pop	{r4, r5, r6, pc}
 800c0e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c0ec:	4798      	blx	r3
 800c0ee:	3501      	adds	r5, #1
 800c0f0:	e7ee      	b.n	800c0d0 <__libc_init_array+0xc>
 800c0f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c0f6:	4798      	blx	r3
 800c0f8:	3501      	adds	r5, #1
 800c0fa:	e7f2      	b.n	800c0e2 <__libc_init_array+0x1e>
 800c0fc:	0800d344 	.word	0x0800d344
 800c100:	0800d344 	.word	0x0800d344
 800c104:	0800d344 	.word	0x0800d344
 800c108:	0800d348 	.word	0x0800d348

0800c10c <memset>:
 800c10c:	4402      	add	r2, r0
 800c10e:	4603      	mov	r3, r0
 800c110:	4293      	cmp	r3, r2
 800c112:	d100      	bne.n	800c116 <memset+0xa>
 800c114:	4770      	bx	lr
 800c116:	f803 1b01 	strb.w	r1, [r3], #1
 800c11a:	e7f9      	b.n	800c110 <memset+0x4>

0800c11c <_puts_r>:
 800c11c:	b570      	push	{r4, r5, r6, lr}
 800c11e:	460e      	mov	r6, r1
 800c120:	4605      	mov	r5, r0
 800c122:	b118      	cbz	r0, 800c12c <_puts_r+0x10>
 800c124:	6983      	ldr	r3, [r0, #24]
 800c126:	b90b      	cbnz	r3, 800c12c <_puts_r+0x10>
 800c128:	f000 fa0c 	bl	800c544 <__sinit>
 800c12c:	69ab      	ldr	r3, [r5, #24]
 800c12e:	68ac      	ldr	r4, [r5, #8]
 800c130:	b913      	cbnz	r3, 800c138 <_puts_r+0x1c>
 800c132:	4628      	mov	r0, r5
 800c134:	f000 fa06 	bl	800c544 <__sinit>
 800c138:	4b23      	ldr	r3, [pc, #140]	; (800c1c8 <_puts_r+0xac>)
 800c13a:	429c      	cmp	r4, r3
 800c13c:	d117      	bne.n	800c16e <_puts_r+0x52>
 800c13e:	686c      	ldr	r4, [r5, #4]
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	071b      	lsls	r3, r3, #28
 800c144:	d51d      	bpl.n	800c182 <_puts_r+0x66>
 800c146:	6923      	ldr	r3, [r4, #16]
 800c148:	b1db      	cbz	r3, 800c182 <_puts_r+0x66>
 800c14a:	3e01      	subs	r6, #1
 800c14c:	68a3      	ldr	r3, [r4, #8]
 800c14e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c152:	3b01      	subs	r3, #1
 800c154:	60a3      	str	r3, [r4, #8]
 800c156:	b9e9      	cbnz	r1, 800c194 <_puts_r+0x78>
 800c158:	2b00      	cmp	r3, #0
 800c15a:	da2e      	bge.n	800c1ba <_puts_r+0x9e>
 800c15c:	4622      	mov	r2, r4
 800c15e:	210a      	movs	r1, #10
 800c160:	4628      	mov	r0, r5
 800c162:	f000 f83f 	bl	800c1e4 <__swbuf_r>
 800c166:	3001      	adds	r0, #1
 800c168:	d011      	beq.n	800c18e <_puts_r+0x72>
 800c16a:	200a      	movs	r0, #10
 800c16c:	e011      	b.n	800c192 <_puts_r+0x76>
 800c16e:	4b17      	ldr	r3, [pc, #92]	; (800c1cc <_puts_r+0xb0>)
 800c170:	429c      	cmp	r4, r3
 800c172:	d101      	bne.n	800c178 <_puts_r+0x5c>
 800c174:	68ac      	ldr	r4, [r5, #8]
 800c176:	e7e3      	b.n	800c140 <_puts_r+0x24>
 800c178:	4b15      	ldr	r3, [pc, #84]	; (800c1d0 <_puts_r+0xb4>)
 800c17a:	429c      	cmp	r4, r3
 800c17c:	bf08      	it	eq
 800c17e:	68ec      	ldreq	r4, [r5, #12]
 800c180:	e7de      	b.n	800c140 <_puts_r+0x24>
 800c182:	4621      	mov	r1, r4
 800c184:	4628      	mov	r0, r5
 800c186:	f000 f87f 	bl	800c288 <__swsetup_r>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d0dd      	beq.n	800c14a <_puts_r+0x2e>
 800c18e:	f04f 30ff 	mov.w	r0, #4294967295
 800c192:	bd70      	pop	{r4, r5, r6, pc}
 800c194:	2b00      	cmp	r3, #0
 800c196:	da04      	bge.n	800c1a2 <_puts_r+0x86>
 800c198:	69a2      	ldr	r2, [r4, #24]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	dc06      	bgt.n	800c1ac <_puts_r+0x90>
 800c19e:	290a      	cmp	r1, #10
 800c1a0:	d004      	beq.n	800c1ac <_puts_r+0x90>
 800c1a2:	6823      	ldr	r3, [r4, #0]
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	6022      	str	r2, [r4, #0]
 800c1a8:	7019      	strb	r1, [r3, #0]
 800c1aa:	e7cf      	b.n	800c14c <_puts_r+0x30>
 800c1ac:	4622      	mov	r2, r4
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	f000 f818 	bl	800c1e4 <__swbuf_r>
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	d1c9      	bne.n	800c14c <_puts_r+0x30>
 800c1b8:	e7e9      	b.n	800c18e <_puts_r+0x72>
 800c1ba:	6823      	ldr	r3, [r4, #0]
 800c1bc:	200a      	movs	r0, #10
 800c1be:	1c5a      	adds	r2, r3, #1
 800c1c0:	6022      	str	r2, [r4, #0]
 800c1c2:	7018      	strb	r0, [r3, #0]
 800c1c4:	e7e5      	b.n	800c192 <_puts_r+0x76>
 800c1c6:	bf00      	nop
 800c1c8:	0800d2dc 	.word	0x0800d2dc
 800c1cc:	0800d2fc 	.word	0x0800d2fc
 800c1d0:	0800d2bc 	.word	0x0800d2bc

0800c1d4 <puts>:
 800c1d4:	4b02      	ldr	r3, [pc, #8]	; (800c1e0 <puts+0xc>)
 800c1d6:	4601      	mov	r1, r0
 800c1d8:	6818      	ldr	r0, [r3, #0]
 800c1da:	f7ff bf9f 	b.w	800c11c <_puts_r>
 800c1de:	bf00      	nop
 800c1e0:	20000090 	.word	0x20000090

0800c1e4 <__swbuf_r>:
 800c1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e6:	460e      	mov	r6, r1
 800c1e8:	4614      	mov	r4, r2
 800c1ea:	4605      	mov	r5, r0
 800c1ec:	b118      	cbz	r0, 800c1f6 <__swbuf_r+0x12>
 800c1ee:	6983      	ldr	r3, [r0, #24]
 800c1f0:	b90b      	cbnz	r3, 800c1f6 <__swbuf_r+0x12>
 800c1f2:	f000 f9a7 	bl	800c544 <__sinit>
 800c1f6:	4b21      	ldr	r3, [pc, #132]	; (800c27c <__swbuf_r+0x98>)
 800c1f8:	429c      	cmp	r4, r3
 800c1fa:	d12a      	bne.n	800c252 <__swbuf_r+0x6e>
 800c1fc:	686c      	ldr	r4, [r5, #4]
 800c1fe:	69a3      	ldr	r3, [r4, #24]
 800c200:	60a3      	str	r3, [r4, #8]
 800c202:	89a3      	ldrh	r3, [r4, #12]
 800c204:	071a      	lsls	r2, r3, #28
 800c206:	d52e      	bpl.n	800c266 <__swbuf_r+0x82>
 800c208:	6923      	ldr	r3, [r4, #16]
 800c20a:	b363      	cbz	r3, 800c266 <__swbuf_r+0x82>
 800c20c:	6923      	ldr	r3, [r4, #16]
 800c20e:	6820      	ldr	r0, [r4, #0]
 800c210:	1ac0      	subs	r0, r0, r3
 800c212:	6963      	ldr	r3, [r4, #20]
 800c214:	b2f6      	uxtb	r6, r6
 800c216:	4283      	cmp	r3, r0
 800c218:	4637      	mov	r7, r6
 800c21a:	dc04      	bgt.n	800c226 <__swbuf_r+0x42>
 800c21c:	4621      	mov	r1, r4
 800c21e:	4628      	mov	r0, r5
 800c220:	f000 f926 	bl	800c470 <_fflush_r>
 800c224:	bb28      	cbnz	r0, 800c272 <__swbuf_r+0x8e>
 800c226:	68a3      	ldr	r3, [r4, #8]
 800c228:	3b01      	subs	r3, #1
 800c22a:	60a3      	str	r3, [r4, #8]
 800c22c:	6823      	ldr	r3, [r4, #0]
 800c22e:	1c5a      	adds	r2, r3, #1
 800c230:	6022      	str	r2, [r4, #0]
 800c232:	701e      	strb	r6, [r3, #0]
 800c234:	6963      	ldr	r3, [r4, #20]
 800c236:	3001      	adds	r0, #1
 800c238:	4283      	cmp	r3, r0
 800c23a:	d004      	beq.n	800c246 <__swbuf_r+0x62>
 800c23c:	89a3      	ldrh	r3, [r4, #12]
 800c23e:	07db      	lsls	r3, r3, #31
 800c240:	d519      	bpl.n	800c276 <__swbuf_r+0x92>
 800c242:	2e0a      	cmp	r6, #10
 800c244:	d117      	bne.n	800c276 <__swbuf_r+0x92>
 800c246:	4621      	mov	r1, r4
 800c248:	4628      	mov	r0, r5
 800c24a:	f000 f911 	bl	800c470 <_fflush_r>
 800c24e:	b190      	cbz	r0, 800c276 <__swbuf_r+0x92>
 800c250:	e00f      	b.n	800c272 <__swbuf_r+0x8e>
 800c252:	4b0b      	ldr	r3, [pc, #44]	; (800c280 <__swbuf_r+0x9c>)
 800c254:	429c      	cmp	r4, r3
 800c256:	d101      	bne.n	800c25c <__swbuf_r+0x78>
 800c258:	68ac      	ldr	r4, [r5, #8]
 800c25a:	e7d0      	b.n	800c1fe <__swbuf_r+0x1a>
 800c25c:	4b09      	ldr	r3, [pc, #36]	; (800c284 <__swbuf_r+0xa0>)
 800c25e:	429c      	cmp	r4, r3
 800c260:	bf08      	it	eq
 800c262:	68ec      	ldreq	r4, [r5, #12]
 800c264:	e7cb      	b.n	800c1fe <__swbuf_r+0x1a>
 800c266:	4621      	mov	r1, r4
 800c268:	4628      	mov	r0, r5
 800c26a:	f000 f80d 	bl	800c288 <__swsetup_r>
 800c26e:	2800      	cmp	r0, #0
 800c270:	d0cc      	beq.n	800c20c <__swbuf_r+0x28>
 800c272:	f04f 37ff 	mov.w	r7, #4294967295
 800c276:	4638      	mov	r0, r7
 800c278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c27a:	bf00      	nop
 800c27c:	0800d2dc 	.word	0x0800d2dc
 800c280:	0800d2fc 	.word	0x0800d2fc
 800c284:	0800d2bc 	.word	0x0800d2bc

0800c288 <__swsetup_r>:
 800c288:	4b32      	ldr	r3, [pc, #200]	; (800c354 <__swsetup_r+0xcc>)
 800c28a:	b570      	push	{r4, r5, r6, lr}
 800c28c:	681d      	ldr	r5, [r3, #0]
 800c28e:	4606      	mov	r6, r0
 800c290:	460c      	mov	r4, r1
 800c292:	b125      	cbz	r5, 800c29e <__swsetup_r+0x16>
 800c294:	69ab      	ldr	r3, [r5, #24]
 800c296:	b913      	cbnz	r3, 800c29e <__swsetup_r+0x16>
 800c298:	4628      	mov	r0, r5
 800c29a:	f000 f953 	bl	800c544 <__sinit>
 800c29e:	4b2e      	ldr	r3, [pc, #184]	; (800c358 <__swsetup_r+0xd0>)
 800c2a0:	429c      	cmp	r4, r3
 800c2a2:	d10f      	bne.n	800c2c4 <__swsetup_r+0x3c>
 800c2a4:	686c      	ldr	r4, [r5, #4]
 800c2a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	0715      	lsls	r5, r2, #28
 800c2ae:	d42c      	bmi.n	800c30a <__swsetup_r+0x82>
 800c2b0:	06d0      	lsls	r0, r2, #27
 800c2b2:	d411      	bmi.n	800c2d8 <__swsetup_r+0x50>
 800c2b4:	2209      	movs	r2, #9
 800c2b6:	6032      	str	r2, [r6, #0]
 800c2b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2bc:	81a3      	strh	r3, [r4, #12]
 800c2be:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c2:	e03e      	b.n	800c342 <__swsetup_r+0xba>
 800c2c4:	4b25      	ldr	r3, [pc, #148]	; (800c35c <__swsetup_r+0xd4>)
 800c2c6:	429c      	cmp	r4, r3
 800c2c8:	d101      	bne.n	800c2ce <__swsetup_r+0x46>
 800c2ca:	68ac      	ldr	r4, [r5, #8]
 800c2cc:	e7eb      	b.n	800c2a6 <__swsetup_r+0x1e>
 800c2ce:	4b24      	ldr	r3, [pc, #144]	; (800c360 <__swsetup_r+0xd8>)
 800c2d0:	429c      	cmp	r4, r3
 800c2d2:	bf08      	it	eq
 800c2d4:	68ec      	ldreq	r4, [r5, #12]
 800c2d6:	e7e6      	b.n	800c2a6 <__swsetup_r+0x1e>
 800c2d8:	0751      	lsls	r1, r2, #29
 800c2da:	d512      	bpl.n	800c302 <__swsetup_r+0x7a>
 800c2dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2de:	b141      	cbz	r1, 800c2f2 <__swsetup_r+0x6a>
 800c2e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2e4:	4299      	cmp	r1, r3
 800c2e6:	d002      	beq.n	800c2ee <__swsetup_r+0x66>
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	f000 fa19 	bl	800c720 <_free_r>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	6363      	str	r3, [r4, #52]	; 0x34
 800c2f2:	89a3      	ldrh	r3, [r4, #12]
 800c2f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2f8:	81a3      	strh	r3, [r4, #12]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	6063      	str	r3, [r4, #4]
 800c2fe:	6923      	ldr	r3, [r4, #16]
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	89a3      	ldrh	r3, [r4, #12]
 800c304:	f043 0308 	orr.w	r3, r3, #8
 800c308:	81a3      	strh	r3, [r4, #12]
 800c30a:	6923      	ldr	r3, [r4, #16]
 800c30c:	b94b      	cbnz	r3, 800c322 <__swsetup_r+0x9a>
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c318:	d003      	beq.n	800c322 <__swsetup_r+0x9a>
 800c31a:	4621      	mov	r1, r4
 800c31c:	4630      	mov	r0, r6
 800c31e:	f000 f9bf 	bl	800c6a0 <__smakebuf_r>
 800c322:	89a2      	ldrh	r2, [r4, #12]
 800c324:	f012 0301 	ands.w	r3, r2, #1
 800c328:	d00c      	beq.n	800c344 <__swsetup_r+0xbc>
 800c32a:	2300      	movs	r3, #0
 800c32c:	60a3      	str	r3, [r4, #8]
 800c32e:	6963      	ldr	r3, [r4, #20]
 800c330:	425b      	negs	r3, r3
 800c332:	61a3      	str	r3, [r4, #24]
 800c334:	6923      	ldr	r3, [r4, #16]
 800c336:	b953      	cbnz	r3, 800c34e <__swsetup_r+0xc6>
 800c338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c33c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c340:	d1ba      	bne.n	800c2b8 <__swsetup_r+0x30>
 800c342:	bd70      	pop	{r4, r5, r6, pc}
 800c344:	0792      	lsls	r2, r2, #30
 800c346:	bf58      	it	pl
 800c348:	6963      	ldrpl	r3, [r4, #20]
 800c34a:	60a3      	str	r3, [r4, #8]
 800c34c:	e7f2      	b.n	800c334 <__swsetup_r+0xac>
 800c34e:	2000      	movs	r0, #0
 800c350:	e7f7      	b.n	800c342 <__swsetup_r+0xba>
 800c352:	bf00      	nop
 800c354:	20000090 	.word	0x20000090
 800c358:	0800d2dc 	.word	0x0800d2dc
 800c35c:	0800d2fc 	.word	0x0800d2fc
 800c360:	0800d2bc 	.word	0x0800d2bc

0800c364 <__sflush_r>:
 800c364:	898a      	ldrh	r2, [r1, #12]
 800c366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c36a:	4605      	mov	r5, r0
 800c36c:	0710      	lsls	r0, r2, #28
 800c36e:	460c      	mov	r4, r1
 800c370:	d458      	bmi.n	800c424 <__sflush_r+0xc0>
 800c372:	684b      	ldr	r3, [r1, #4]
 800c374:	2b00      	cmp	r3, #0
 800c376:	dc05      	bgt.n	800c384 <__sflush_r+0x20>
 800c378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	dc02      	bgt.n	800c384 <__sflush_r+0x20>
 800c37e:	2000      	movs	r0, #0
 800c380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c386:	2e00      	cmp	r6, #0
 800c388:	d0f9      	beq.n	800c37e <__sflush_r+0x1a>
 800c38a:	2300      	movs	r3, #0
 800c38c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c390:	682f      	ldr	r7, [r5, #0]
 800c392:	6a21      	ldr	r1, [r4, #32]
 800c394:	602b      	str	r3, [r5, #0]
 800c396:	d032      	beq.n	800c3fe <__sflush_r+0x9a>
 800c398:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c39a:	89a3      	ldrh	r3, [r4, #12]
 800c39c:	075a      	lsls	r2, r3, #29
 800c39e:	d505      	bpl.n	800c3ac <__sflush_r+0x48>
 800c3a0:	6863      	ldr	r3, [r4, #4]
 800c3a2:	1ac0      	subs	r0, r0, r3
 800c3a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3a6:	b10b      	cbz	r3, 800c3ac <__sflush_r+0x48>
 800c3a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3aa:	1ac0      	subs	r0, r0, r3
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3b2:	6a21      	ldr	r1, [r4, #32]
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	47b0      	blx	r6
 800c3b8:	1c43      	adds	r3, r0, #1
 800c3ba:	89a3      	ldrh	r3, [r4, #12]
 800c3bc:	d106      	bne.n	800c3cc <__sflush_r+0x68>
 800c3be:	6829      	ldr	r1, [r5, #0]
 800c3c0:	291d      	cmp	r1, #29
 800c3c2:	d848      	bhi.n	800c456 <__sflush_r+0xf2>
 800c3c4:	4a29      	ldr	r2, [pc, #164]	; (800c46c <__sflush_r+0x108>)
 800c3c6:	40ca      	lsrs	r2, r1
 800c3c8:	07d6      	lsls	r6, r2, #31
 800c3ca:	d544      	bpl.n	800c456 <__sflush_r+0xf2>
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	6062      	str	r2, [r4, #4]
 800c3d0:	04d9      	lsls	r1, r3, #19
 800c3d2:	6922      	ldr	r2, [r4, #16]
 800c3d4:	6022      	str	r2, [r4, #0]
 800c3d6:	d504      	bpl.n	800c3e2 <__sflush_r+0x7e>
 800c3d8:	1c42      	adds	r2, r0, #1
 800c3da:	d101      	bne.n	800c3e0 <__sflush_r+0x7c>
 800c3dc:	682b      	ldr	r3, [r5, #0]
 800c3de:	b903      	cbnz	r3, 800c3e2 <__sflush_r+0x7e>
 800c3e0:	6560      	str	r0, [r4, #84]	; 0x54
 800c3e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3e4:	602f      	str	r7, [r5, #0]
 800c3e6:	2900      	cmp	r1, #0
 800c3e8:	d0c9      	beq.n	800c37e <__sflush_r+0x1a>
 800c3ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3ee:	4299      	cmp	r1, r3
 800c3f0:	d002      	beq.n	800c3f8 <__sflush_r+0x94>
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	f000 f994 	bl	800c720 <_free_r>
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	6360      	str	r0, [r4, #52]	; 0x34
 800c3fc:	e7c0      	b.n	800c380 <__sflush_r+0x1c>
 800c3fe:	2301      	movs	r3, #1
 800c400:	4628      	mov	r0, r5
 800c402:	47b0      	blx	r6
 800c404:	1c41      	adds	r1, r0, #1
 800c406:	d1c8      	bne.n	800c39a <__sflush_r+0x36>
 800c408:	682b      	ldr	r3, [r5, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d0c5      	beq.n	800c39a <__sflush_r+0x36>
 800c40e:	2b1d      	cmp	r3, #29
 800c410:	d001      	beq.n	800c416 <__sflush_r+0xb2>
 800c412:	2b16      	cmp	r3, #22
 800c414:	d101      	bne.n	800c41a <__sflush_r+0xb6>
 800c416:	602f      	str	r7, [r5, #0]
 800c418:	e7b1      	b.n	800c37e <__sflush_r+0x1a>
 800c41a:	89a3      	ldrh	r3, [r4, #12]
 800c41c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c420:	81a3      	strh	r3, [r4, #12]
 800c422:	e7ad      	b.n	800c380 <__sflush_r+0x1c>
 800c424:	690f      	ldr	r7, [r1, #16]
 800c426:	2f00      	cmp	r7, #0
 800c428:	d0a9      	beq.n	800c37e <__sflush_r+0x1a>
 800c42a:	0793      	lsls	r3, r2, #30
 800c42c:	680e      	ldr	r6, [r1, #0]
 800c42e:	bf08      	it	eq
 800c430:	694b      	ldreq	r3, [r1, #20]
 800c432:	600f      	str	r7, [r1, #0]
 800c434:	bf18      	it	ne
 800c436:	2300      	movne	r3, #0
 800c438:	eba6 0807 	sub.w	r8, r6, r7
 800c43c:	608b      	str	r3, [r1, #8]
 800c43e:	f1b8 0f00 	cmp.w	r8, #0
 800c442:	dd9c      	ble.n	800c37e <__sflush_r+0x1a>
 800c444:	4643      	mov	r3, r8
 800c446:	463a      	mov	r2, r7
 800c448:	6a21      	ldr	r1, [r4, #32]
 800c44a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c44c:	4628      	mov	r0, r5
 800c44e:	47b0      	blx	r6
 800c450:	2800      	cmp	r0, #0
 800c452:	dc06      	bgt.n	800c462 <__sflush_r+0xfe>
 800c454:	89a3      	ldrh	r3, [r4, #12]
 800c456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c45a:	81a3      	strh	r3, [r4, #12]
 800c45c:	f04f 30ff 	mov.w	r0, #4294967295
 800c460:	e78e      	b.n	800c380 <__sflush_r+0x1c>
 800c462:	4407      	add	r7, r0
 800c464:	eba8 0800 	sub.w	r8, r8, r0
 800c468:	e7e9      	b.n	800c43e <__sflush_r+0xda>
 800c46a:	bf00      	nop
 800c46c:	20400001 	.word	0x20400001

0800c470 <_fflush_r>:
 800c470:	b538      	push	{r3, r4, r5, lr}
 800c472:	690b      	ldr	r3, [r1, #16]
 800c474:	4605      	mov	r5, r0
 800c476:	460c      	mov	r4, r1
 800c478:	b1db      	cbz	r3, 800c4b2 <_fflush_r+0x42>
 800c47a:	b118      	cbz	r0, 800c484 <_fflush_r+0x14>
 800c47c:	6983      	ldr	r3, [r0, #24]
 800c47e:	b90b      	cbnz	r3, 800c484 <_fflush_r+0x14>
 800c480:	f000 f860 	bl	800c544 <__sinit>
 800c484:	4b0c      	ldr	r3, [pc, #48]	; (800c4b8 <_fflush_r+0x48>)
 800c486:	429c      	cmp	r4, r3
 800c488:	d109      	bne.n	800c49e <_fflush_r+0x2e>
 800c48a:	686c      	ldr	r4, [r5, #4]
 800c48c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c490:	b17b      	cbz	r3, 800c4b2 <_fflush_r+0x42>
 800c492:	4621      	mov	r1, r4
 800c494:	4628      	mov	r0, r5
 800c496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c49a:	f7ff bf63 	b.w	800c364 <__sflush_r>
 800c49e:	4b07      	ldr	r3, [pc, #28]	; (800c4bc <_fflush_r+0x4c>)
 800c4a0:	429c      	cmp	r4, r3
 800c4a2:	d101      	bne.n	800c4a8 <_fflush_r+0x38>
 800c4a4:	68ac      	ldr	r4, [r5, #8]
 800c4a6:	e7f1      	b.n	800c48c <_fflush_r+0x1c>
 800c4a8:	4b05      	ldr	r3, [pc, #20]	; (800c4c0 <_fflush_r+0x50>)
 800c4aa:	429c      	cmp	r4, r3
 800c4ac:	bf08      	it	eq
 800c4ae:	68ec      	ldreq	r4, [r5, #12]
 800c4b0:	e7ec      	b.n	800c48c <_fflush_r+0x1c>
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	bd38      	pop	{r3, r4, r5, pc}
 800c4b6:	bf00      	nop
 800c4b8:	0800d2dc 	.word	0x0800d2dc
 800c4bc:	0800d2fc 	.word	0x0800d2fc
 800c4c0:	0800d2bc 	.word	0x0800d2bc

0800c4c4 <std>:
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	b510      	push	{r4, lr}
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	e9c0 3300 	strd	r3, r3, [r0]
 800c4ce:	6083      	str	r3, [r0, #8]
 800c4d0:	8181      	strh	r1, [r0, #12]
 800c4d2:	6643      	str	r3, [r0, #100]	; 0x64
 800c4d4:	81c2      	strh	r2, [r0, #14]
 800c4d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4da:	6183      	str	r3, [r0, #24]
 800c4dc:	4619      	mov	r1, r3
 800c4de:	2208      	movs	r2, #8
 800c4e0:	305c      	adds	r0, #92	; 0x5c
 800c4e2:	f7ff fe13 	bl	800c10c <memset>
 800c4e6:	4b05      	ldr	r3, [pc, #20]	; (800c4fc <std+0x38>)
 800c4e8:	6263      	str	r3, [r4, #36]	; 0x24
 800c4ea:	4b05      	ldr	r3, [pc, #20]	; (800c500 <std+0x3c>)
 800c4ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4ee:	4b05      	ldr	r3, [pc, #20]	; (800c504 <std+0x40>)
 800c4f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4f2:	4b05      	ldr	r3, [pc, #20]	; (800c508 <std+0x44>)
 800c4f4:	6224      	str	r4, [r4, #32]
 800c4f6:	6323      	str	r3, [r4, #48]	; 0x30
 800c4f8:	bd10      	pop	{r4, pc}
 800c4fa:	bf00      	nop
 800c4fc:	0800c891 	.word	0x0800c891
 800c500:	0800c8b3 	.word	0x0800c8b3
 800c504:	0800c8eb 	.word	0x0800c8eb
 800c508:	0800c90f 	.word	0x0800c90f

0800c50c <_cleanup_r>:
 800c50c:	4901      	ldr	r1, [pc, #4]	; (800c514 <_cleanup_r+0x8>)
 800c50e:	f000 b885 	b.w	800c61c <_fwalk_reent>
 800c512:	bf00      	nop
 800c514:	0800c471 	.word	0x0800c471

0800c518 <__sfmoreglue>:
 800c518:	b570      	push	{r4, r5, r6, lr}
 800c51a:	1e4a      	subs	r2, r1, #1
 800c51c:	2568      	movs	r5, #104	; 0x68
 800c51e:	4355      	muls	r5, r2
 800c520:	460e      	mov	r6, r1
 800c522:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c526:	f000 f949 	bl	800c7bc <_malloc_r>
 800c52a:	4604      	mov	r4, r0
 800c52c:	b140      	cbz	r0, 800c540 <__sfmoreglue+0x28>
 800c52e:	2100      	movs	r1, #0
 800c530:	e9c0 1600 	strd	r1, r6, [r0]
 800c534:	300c      	adds	r0, #12
 800c536:	60a0      	str	r0, [r4, #8]
 800c538:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c53c:	f7ff fde6 	bl	800c10c <memset>
 800c540:	4620      	mov	r0, r4
 800c542:	bd70      	pop	{r4, r5, r6, pc}

0800c544 <__sinit>:
 800c544:	6983      	ldr	r3, [r0, #24]
 800c546:	b510      	push	{r4, lr}
 800c548:	4604      	mov	r4, r0
 800c54a:	bb33      	cbnz	r3, 800c59a <__sinit+0x56>
 800c54c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c550:	6503      	str	r3, [r0, #80]	; 0x50
 800c552:	4b12      	ldr	r3, [pc, #72]	; (800c59c <__sinit+0x58>)
 800c554:	4a12      	ldr	r2, [pc, #72]	; (800c5a0 <__sinit+0x5c>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	6282      	str	r2, [r0, #40]	; 0x28
 800c55a:	4298      	cmp	r0, r3
 800c55c:	bf04      	itt	eq
 800c55e:	2301      	moveq	r3, #1
 800c560:	6183      	streq	r3, [r0, #24]
 800c562:	f000 f81f 	bl	800c5a4 <__sfp>
 800c566:	6060      	str	r0, [r4, #4]
 800c568:	4620      	mov	r0, r4
 800c56a:	f000 f81b 	bl	800c5a4 <__sfp>
 800c56e:	60a0      	str	r0, [r4, #8]
 800c570:	4620      	mov	r0, r4
 800c572:	f000 f817 	bl	800c5a4 <__sfp>
 800c576:	2200      	movs	r2, #0
 800c578:	60e0      	str	r0, [r4, #12]
 800c57a:	2104      	movs	r1, #4
 800c57c:	6860      	ldr	r0, [r4, #4]
 800c57e:	f7ff ffa1 	bl	800c4c4 <std>
 800c582:	2201      	movs	r2, #1
 800c584:	2109      	movs	r1, #9
 800c586:	68a0      	ldr	r0, [r4, #8]
 800c588:	f7ff ff9c 	bl	800c4c4 <std>
 800c58c:	2202      	movs	r2, #2
 800c58e:	2112      	movs	r1, #18
 800c590:	68e0      	ldr	r0, [r4, #12]
 800c592:	f7ff ff97 	bl	800c4c4 <std>
 800c596:	2301      	movs	r3, #1
 800c598:	61a3      	str	r3, [r4, #24]
 800c59a:	bd10      	pop	{r4, pc}
 800c59c:	0800d2b8 	.word	0x0800d2b8
 800c5a0:	0800c50d 	.word	0x0800c50d

0800c5a4 <__sfp>:
 800c5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a6:	4b1b      	ldr	r3, [pc, #108]	; (800c614 <__sfp+0x70>)
 800c5a8:	681e      	ldr	r6, [r3, #0]
 800c5aa:	69b3      	ldr	r3, [r6, #24]
 800c5ac:	4607      	mov	r7, r0
 800c5ae:	b913      	cbnz	r3, 800c5b6 <__sfp+0x12>
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	f7ff ffc7 	bl	800c544 <__sinit>
 800c5b6:	3648      	adds	r6, #72	; 0x48
 800c5b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	d503      	bpl.n	800c5c8 <__sfp+0x24>
 800c5c0:	6833      	ldr	r3, [r6, #0]
 800c5c2:	b133      	cbz	r3, 800c5d2 <__sfp+0x2e>
 800c5c4:	6836      	ldr	r6, [r6, #0]
 800c5c6:	e7f7      	b.n	800c5b8 <__sfp+0x14>
 800c5c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5cc:	b16d      	cbz	r5, 800c5ea <__sfp+0x46>
 800c5ce:	3468      	adds	r4, #104	; 0x68
 800c5d0:	e7f4      	b.n	800c5bc <__sfp+0x18>
 800c5d2:	2104      	movs	r1, #4
 800c5d4:	4638      	mov	r0, r7
 800c5d6:	f7ff ff9f 	bl	800c518 <__sfmoreglue>
 800c5da:	6030      	str	r0, [r6, #0]
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	d1f1      	bne.n	800c5c4 <__sfp+0x20>
 800c5e0:	230c      	movs	r3, #12
 800c5e2:	603b      	str	r3, [r7, #0]
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5ea:	4b0b      	ldr	r3, [pc, #44]	; (800c618 <__sfp+0x74>)
 800c5ec:	6665      	str	r5, [r4, #100]	; 0x64
 800c5ee:	e9c4 5500 	strd	r5, r5, [r4]
 800c5f2:	60a5      	str	r5, [r4, #8]
 800c5f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c5f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c5fc:	2208      	movs	r2, #8
 800c5fe:	4629      	mov	r1, r5
 800c600:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c604:	f7ff fd82 	bl	800c10c <memset>
 800c608:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c60c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c610:	e7e9      	b.n	800c5e6 <__sfp+0x42>
 800c612:	bf00      	nop
 800c614:	0800d2b8 	.word	0x0800d2b8
 800c618:	ffff0001 	.word	0xffff0001

0800c61c <_fwalk_reent>:
 800c61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c620:	4680      	mov	r8, r0
 800c622:	4689      	mov	r9, r1
 800c624:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c628:	2600      	movs	r6, #0
 800c62a:	b914      	cbnz	r4, 800c632 <_fwalk_reent+0x16>
 800c62c:	4630      	mov	r0, r6
 800c62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c632:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c636:	3f01      	subs	r7, #1
 800c638:	d501      	bpl.n	800c63e <_fwalk_reent+0x22>
 800c63a:	6824      	ldr	r4, [r4, #0]
 800c63c:	e7f5      	b.n	800c62a <_fwalk_reent+0xe>
 800c63e:	89ab      	ldrh	r3, [r5, #12]
 800c640:	2b01      	cmp	r3, #1
 800c642:	d907      	bls.n	800c654 <_fwalk_reent+0x38>
 800c644:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c648:	3301      	adds	r3, #1
 800c64a:	d003      	beq.n	800c654 <_fwalk_reent+0x38>
 800c64c:	4629      	mov	r1, r5
 800c64e:	4640      	mov	r0, r8
 800c650:	47c8      	blx	r9
 800c652:	4306      	orrs	r6, r0
 800c654:	3568      	adds	r5, #104	; 0x68
 800c656:	e7ee      	b.n	800c636 <_fwalk_reent+0x1a>

0800c658 <__swhatbuf_r>:
 800c658:	b570      	push	{r4, r5, r6, lr}
 800c65a:	460e      	mov	r6, r1
 800c65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c660:	2900      	cmp	r1, #0
 800c662:	b096      	sub	sp, #88	; 0x58
 800c664:	4614      	mov	r4, r2
 800c666:	461d      	mov	r5, r3
 800c668:	da07      	bge.n	800c67a <__swhatbuf_r+0x22>
 800c66a:	2300      	movs	r3, #0
 800c66c:	602b      	str	r3, [r5, #0]
 800c66e:	89b3      	ldrh	r3, [r6, #12]
 800c670:	061a      	lsls	r2, r3, #24
 800c672:	d410      	bmi.n	800c696 <__swhatbuf_r+0x3e>
 800c674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c678:	e00e      	b.n	800c698 <__swhatbuf_r+0x40>
 800c67a:	466a      	mov	r2, sp
 800c67c:	f000 f96e 	bl	800c95c <_fstat_r>
 800c680:	2800      	cmp	r0, #0
 800c682:	dbf2      	blt.n	800c66a <__swhatbuf_r+0x12>
 800c684:	9a01      	ldr	r2, [sp, #4]
 800c686:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c68a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c68e:	425a      	negs	r2, r3
 800c690:	415a      	adcs	r2, r3
 800c692:	602a      	str	r2, [r5, #0]
 800c694:	e7ee      	b.n	800c674 <__swhatbuf_r+0x1c>
 800c696:	2340      	movs	r3, #64	; 0x40
 800c698:	2000      	movs	r0, #0
 800c69a:	6023      	str	r3, [r4, #0]
 800c69c:	b016      	add	sp, #88	; 0x58
 800c69e:	bd70      	pop	{r4, r5, r6, pc}

0800c6a0 <__smakebuf_r>:
 800c6a0:	898b      	ldrh	r3, [r1, #12]
 800c6a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6a4:	079d      	lsls	r5, r3, #30
 800c6a6:	4606      	mov	r6, r0
 800c6a8:	460c      	mov	r4, r1
 800c6aa:	d507      	bpl.n	800c6bc <__smakebuf_r+0x1c>
 800c6ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6b0:	6023      	str	r3, [r4, #0]
 800c6b2:	6123      	str	r3, [r4, #16]
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	6163      	str	r3, [r4, #20]
 800c6b8:	b002      	add	sp, #8
 800c6ba:	bd70      	pop	{r4, r5, r6, pc}
 800c6bc:	ab01      	add	r3, sp, #4
 800c6be:	466a      	mov	r2, sp
 800c6c0:	f7ff ffca 	bl	800c658 <__swhatbuf_r>
 800c6c4:	9900      	ldr	r1, [sp, #0]
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	4630      	mov	r0, r6
 800c6ca:	f000 f877 	bl	800c7bc <_malloc_r>
 800c6ce:	b948      	cbnz	r0, 800c6e4 <__smakebuf_r+0x44>
 800c6d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6d4:	059a      	lsls	r2, r3, #22
 800c6d6:	d4ef      	bmi.n	800c6b8 <__smakebuf_r+0x18>
 800c6d8:	f023 0303 	bic.w	r3, r3, #3
 800c6dc:	f043 0302 	orr.w	r3, r3, #2
 800c6e0:	81a3      	strh	r3, [r4, #12]
 800c6e2:	e7e3      	b.n	800c6ac <__smakebuf_r+0xc>
 800c6e4:	4b0d      	ldr	r3, [pc, #52]	; (800c71c <__smakebuf_r+0x7c>)
 800c6e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6e8:	89a3      	ldrh	r3, [r4, #12]
 800c6ea:	6020      	str	r0, [r4, #0]
 800c6ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6f0:	81a3      	strh	r3, [r4, #12]
 800c6f2:	9b00      	ldr	r3, [sp, #0]
 800c6f4:	6163      	str	r3, [r4, #20]
 800c6f6:	9b01      	ldr	r3, [sp, #4]
 800c6f8:	6120      	str	r0, [r4, #16]
 800c6fa:	b15b      	cbz	r3, 800c714 <__smakebuf_r+0x74>
 800c6fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c700:	4630      	mov	r0, r6
 800c702:	f000 f93d 	bl	800c980 <_isatty_r>
 800c706:	b128      	cbz	r0, 800c714 <__smakebuf_r+0x74>
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	f023 0303 	bic.w	r3, r3, #3
 800c70e:	f043 0301 	orr.w	r3, r3, #1
 800c712:	81a3      	strh	r3, [r4, #12]
 800c714:	89a3      	ldrh	r3, [r4, #12]
 800c716:	431d      	orrs	r5, r3
 800c718:	81a5      	strh	r5, [r4, #12]
 800c71a:	e7cd      	b.n	800c6b8 <__smakebuf_r+0x18>
 800c71c:	0800c50d 	.word	0x0800c50d

0800c720 <_free_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4605      	mov	r5, r0
 800c724:	2900      	cmp	r1, #0
 800c726:	d045      	beq.n	800c7b4 <_free_r+0x94>
 800c728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c72c:	1f0c      	subs	r4, r1, #4
 800c72e:	2b00      	cmp	r3, #0
 800c730:	bfb8      	it	lt
 800c732:	18e4      	addlt	r4, r4, r3
 800c734:	f000 f946 	bl	800c9c4 <__malloc_lock>
 800c738:	4a1f      	ldr	r2, [pc, #124]	; (800c7b8 <_free_r+0x98>)
 800c73a:	6813      	ldr	r3, [r2, #0]
 800c73c:	4610      	mov	r0, r2
 800c73e:	b933      	cbnz	r3, 800c74e <_free_r+0x2e>
 800c740:	6063      	str	r3, [r4, #4]
 800c742:	6014      	str	r4, [r2, #0]
 800c744:	4628      	mov	r0, r5
 800c746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c74a:	f000 b93c 	b.w	800c9c6 <__malloc_unlock>
 800c74e:	42a3      	cmp	r3, r4
 800c750:	d90c      	bls.n	800c76c <_free_r+0x4c>
 800c752:	6821      	ldr	r1, [r4, #0]
 800c754:	1862      	adds	r2, r4, r1
 800c756:	4293      	cmp	r3, r2
 800c758:	bf04      	itt	eq
 800c75a:	681a      	ldreq	r2, [r3, #0]
 800c75c:	685b      	ldreq	r3, [r3, #4]
 800c75e:	6063      	str	r3, [r4, #4]
 800c760:	bf04      	itt	eq
 800c762:	1852      	addeq	r2, r2, r1
 800c764:	6022      	streq	r2, [r4, #0]
 800c766:	6004      	str	r4, [r0, #0]
 800c768:	e7ec      	b.n	800c744 <_free_r+0x24>
 800c76a:	4613      	mov	r3, r2
 800c76c:	685a      	ldr	r2, [r3, #4]
 800c76e:	b10a      	cbz	r2, 800c774 <_free_r+0x54>
 800c770:	42a2      	cmp	r2, r4
 800c772:	d9fa      	bls.n	800c76a <_free_r+0x4a>
 800c774:	6819      	ldr	r1, [r3, #0]
 800c776:	1858      	adds	r0, r3, r1
 800c778:	42a0      	cmp	r0, r4
 800c77a:	d10b      	bne.n	800c794 <_free_r+0x74>
 800c77c:	6820      	ldr	r0, [r4, #0]
 800c77e:	4401      	add	r1, r0
 800c780:	1858      	adds	r0, r3, r1
 800c782:	4282      	cmp	r2, r0
 800c784:	6019      	str	r1, [r3, #0]
 800c786:	d1dd      	bne.n	800c744 <_free_r+0x24>
 800c788:	6810      	ldr	r0, [r2, #0]
 800c78a:	6852      	ldr	r2, [r2, #4]
 800c78c:	605a      	str	r2, [r3, #4]
 800c78e:	4401      	add	r1, r0
 800c790:	6019      	str	r1, [r3, #0]
 800c792:	e7d7      	b.n	800c744 <_free_r+0x24>
 800c794:	d902      	bls.n	800c79c <_free_r+0x7c>
 800c796:	230c      	movs	r3, #12
 800c798:	602b      	str	r3, [r5, #0]
 800c79a:	e7d3      	b.n	800c744 <_free_r+0x24>
 800c79c:	6820      	ldr	r0, [r4, #0]
 800c79e:	1821      	adds	r1, r4, r0
 800c7a0:	428a      	cmp	r2, r1
 800c7a2:	bf04      	itt	eq
 800c7a4:	6811      	ldreq	r1, [r2, #0]
 800c7a6:	6852      	ldreq	r2, [r2, #4]
 800c7a8:	6062      	str	r2, [r4, #4]
 800c7aa:	bf04      	itt	eq
 800c7ac:	1809      	addeq	r1, r1, r0
 800c7ae:	6021      	streq	r1, [r4, #0]
 800c7b0:	605c      	str	r4, [r3, #4]
 800c7b2:	e7c7      	b.n	800c744 <_free_r+0x24>
 800c7b4:	bd38      	pop	{r3, r4, r5, pc}
 800c7b6:	bf00      	nop
 800c7b8:	20000128 	.word	0x20000128

0800c7bc <_malloc_r>:
 800c7bc:	b570      	push	{r4, r5, r6, lr}
 800c7be:	1ccd      	adds	r5, r1, #3
 800c7c0:	f025 0503 	bic.w	r5, r5, #3
 800c7c4:	3508      	adds	r5, #8
 800c7c6:	2d0c      	cmp	r5, #12
 800c7c8:	bf38      	it	cc
 800c7ca:	250c      	movcc	r5, #12
 800c7cc:	2d00      	cmp	r5, #0
 800c7ce:	4606      	mov	r6, r0
 800c7d0:	db01      	blt.n	800c7d6 <_malloc_r+0x1a>
 800c7d2:	42a9      	cmp	r1, r5
 800c7d4:	d903      	bls.n	800c7de <_malloc_r+0x22>
 800c7d6:	230c      	movs	r3, #12
 800c7d8:	6033      	str	r3, [r6, #0]
 800c7da:	2000      	movs	r0, #0
 800c7dc:	bd70      	pop	{r4, r5, r6, pc}
 800c7de:	f000 f8f1 	bl	800c9c4 <__malloc_lock>
 800c7e2:	4a21      	ldr	r2, [pc, #132]	; (800c868 <_malloc_r+0xac>)
 800c7e4:	6814      	ldr	r4, [r2, #0]
 800c7e6:	4621      	mov	r1, r4
 800c7e8:	b991      	cbnz	r1, 800c810 <_malloc_r+0x54>
 800c7ea:	4c20      	ldr	r4, [pc, #128]	; (800c86c <_malloc_r+0xb0>)
 800c7ec:	6823      	ldr	r3, [r4, #0]
 800c7ee:	b91b      	cbnz	r3, 800c7f8 <_malloc_r+0x3c>
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f000 f83d 	bl	800c870 <_sbrk_r>
 800c7f6:	6020      	str	r0, [r4, #0]
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f000 f838 	bl	800c870 <_sbrk_r>
 800c800:	1c43      	adds	r3, r0, #1
 800c802:	d124      	bne.n	800c84e <_malloc_r+0x92>
 800c804:	230c      	movs	r3, #12
 800c806:	6033      	str	r3, [r6, #0]
 800c808:	4630      	mov	r0, r6
 800c80a:	f000 f8dc 	bl	800c9c6 <__malloc_unlock>
 800c80e:	e7e4      	b.n	800c7da <_malloc_r+0x1e>
 800c810:	680b      	ldr	r3, [r1, #0]
 800c812:	1b5b      	subs	r3, r3, r5
 800c814:	d418      	bmi.n	800c848 <_malloc_r+0x8c>
 800c816:	2b0b      	cmp	r3, #11
 800c818:	d90f      	bls.n	800c83a <_malloc_r+0x7e>
 800c81a:	600b      	str	r3, [r1, #0]
 800c81c:	50cd      	str	r5, [r1, r3]
 800c81e:	18cc      	adds	r4, r1, r3
 800c820:	4630      	mov	r0, r6
 800c822:	f000 f8d0 	bl	800c9c6 <__malloc_unlock>
 800c826:	f104 000b 	add.w	r0, r4, #11
 800c82a:	1d23      	adds	r3, r4, #4
 800c82c:	f020 0007 	bic.w	r0, r0, #7
 800c830:	1ac3      	subs	r3, r0, r3
 800c832:	d0d3      	beq.n	800c7dc <_malloc_r+0x20>
 800c834:	425a      	negs	r2, r3
 800c836:	50e2      	str	r2, [r4, r3]
 800c838:	e7d0      	b.n	800c7dc <_malloc_r+0x20>
 800c83a:	428c      	cmp	r4, r1
 800c83c:	684b      	ldr	r3, [r1, #4]
 800c83e:	bf16      	itet	ne
 800c840:	6063      	strne	r3, [r4, #4]
 800c842:	6013      	streq	r3, [r2, #0]
 800c844:	460c      	movne	r4, r1
 800c846:	e7eb      	b.n	800c820 <_malloc_r+0x64>
 800c848:	460c      	mov	r4, r1
 800c84a:	6849      	ldr	r1, [r1, #4]
 800c84c:	e7cc      	b.n	800c7e8 <_malloc_r+0x2c>
 800c84e:	1cc4      	adds	r4, r0, #3
 800c850:	f024 0403 	bic.w	r4, r4, #3
 800c854:	42a0      	cmp	r0, r4
 800c856:	d005      	beq.n	800c864 <_malloc_r+0xa8>
 800c858:	1a21      	subs	r1, r4, r0
 800c85a:	4630      	mov	r0, r6
 800c85c:	f000 f808 	bl	800c870 <_sbrk_r>
 800c860:	3001      	adds	r0, #1
 800c862:	d0cf      	beq.n	800c804 <_malloc_r+0x48>
 800c864:	6025      	str	r5, [r4, #0]
 800c866:	e7db      	b.n	800c820 <_malloc_r+0x64>
 800c868:	20000128 	.word	0x20000128
 800c86c:	2000012c 	.word	0x2000012c

0800c870 <_sbrk_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4c06      	ldr	r4, [pc, #24]	; (800c88c <_sbrk_r+0x1c>)
 800c874:	2300      	movs	r3, #0
 800c876:	4605      	mov	r5, r0
 800c878:	4608      	mov	r0, r1
 800c87a:	6023      	str	r3, [r4, #0]
 800c87c:	f7ff fb92 	bl	800bfa4 <_sbrk>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d102      	bne.n	800c88a <_sbrk_r+0x1a>
 800c884:	6823      	ldr	r3, [r4, #0]
 800c886:	b103      	cbz	r3, 800c88a <_sbrk_r+0x1a>
 800c888:	602b      	str	r3, [r5, #0]
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	20000780 	.word	0x20000780

0800c890 <__sread>:
 800c890:	b510      	push	{r4, lr}
 800c892:	460c      	mov	r4, r1
 800c894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c898:	f000 f896 	bl	800c9c8 <_read_r>
 800c89c:	2800      	cmp	r0, #0
 800c89e:	bfab      	itete	ge
 800c8a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c8a2:	89a3      	ldrhlt	r3, [r4, #12]
 800c8a4:	181b      	addge	r3, r3, r0
 800c8a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c8aa:	bfac      	ite	ge
 800c8ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800c8ae:	81a3      	strhlt	r3, [r4, #12]
 800c8b0:	bd10      	pop	{r4, pc}

0800c8b2 <__swrite>:
 800c8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b6:	461f      	mov	r7, r3
 800c8b8:	898b      	ldrh	r3, [r1, #12]
 800c8ba:	05db      	lsls	r3, r3, #23
 800c8bc:	4605      	mov	r5, r0
 800c8be:	460c      	mov	r4, r1
 800c8c0:	4616      	mov	r6, r2
 800c8c2:	d505      	bpl.n	800c8d0 <__swrite+0x1e>
 800c8c4:	2302      	movs	r3, #2
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8cc:	f000 f868 	bl	800c9a0 <_lseek_r>
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8da:	81a3      	strh	r3, [r4, #12]
 800c8dc:	4632      	mov	r2, r6
 800c8de:	463b      	mov	r3, r7
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e6:	f000 b817 	b.w	800c918 <_write_r>

0800c8ea <__sseek>:
 800c8ea:	b510      	push	{r4, lr}
 800c8ec:	460c      	mov	r4, r1
 800c8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8f2:	f000 f855 	bl	800c9a0 <_lseek_r>
 800c8f6:	1c43      	adds	r3, r0, #1
 800c8f8:	89a3      	ldrh	r3, [r4, #12]
 800c8fa:	bf15      	itete	ne
 800c8fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c8fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c906:	81a3      	strheq	r3, [r4, #12]
 800c908:	bf18      	it	ne
 800c90a:	81a3      	strhne	r3, [r4, #12]
 800c90c:	bd10      	pop	{r4, pc}

0800c90e <__sclose>:
 800c90e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c912:	f000 b813 	b.w	800c93c <_close_r>
	...

0800c918 <_write_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4c07      	ldr	r4, [pc, #28]	; (800c938 <_write_r+0x20>)
 800c91c:	4605      	mov	r5, r0
 800c91e:	4608      	mov	r0, r1
 800c920:	4611      	mov	r1, r2
 800c922:	2200      	movs	r2, #0
 800c924:	6022      	str	r2, [r4, #0]
 800c926:	461a      	mov	r2, r3
 800c928:	f7ff faeb 	bl	800bf02 <_write>
 800c92c:	1c43      	adds	r3, r0, #1
 800c92e:	d102      	bne.n	800c936 <_write_r+0x1e>
 800c930:	6823      	ldr	r3, [r4, #0]
 800c932:	b103      	cbz	r3, 800c936 <_write_r+0x1e>
 800c934:	602b      	str	r3, [r5, #0]
 800c936:	bd38      	pop	{r3, r4, r5, pc}
 800c938:	20000780 	.word	0x20000780

0800c93c <_close_r>:
 800c93c:	b538      	push	{r3, r4, r5, lr}
 800c93e:	4c06      	ldr	r4, [pc, #24]	; (800c958 <_close_r+0x1c>)
 800c940:	2300      	movs	r3, #0
 800c942:	4605      	mov	r5, r0
 800c944:	4608      	mov	r0, r1
 800c946:	6023      	str	r3, [r4, #0]
 800c948:	f7ff faf7 	bl	800bf3a <_close>
 800c94c:	1c43      	adds	r3, r0, #1
 800c94e:	d102      	bne.n	800c956 <_close_r+0x1a>
 800c950:	6823      	ldr	r3, [r4, #0]
 800c952:	b103      	cbz	r3, 800c956 <_close_r+0x1a>
 800c954:	602b      	str	r3, [r5, #0]
 800c956:	bd38      	pop	{r3, r4, r5, pc}
 800c958:	20000780 	.word	0x20000780

0800c95c <_fstat_r>:
 800c95c:	b538      	push	{r3, r4, r5, lr}
 800c95e:	4c07      	ldr	r4, [pc, #28]	; (800c97c <_fstat_r+0x20>)
 800c960:	2300      	movs	r3, #0
 800c962:	4605      	mov	r5, r0
 800c964:	4608      	mov	r0, r1
 800c966:	4611      	mov	r1, r2
 800c968:	6023      	str	r3, [r4, #0]
 800c96a:	f7ff faf2 	bl	800bf52 <_fstat>
 800c96e:	1c43      	adds	r3, r0, #1
 800c970:	d102      	bne.n	800c978 <_fstat_r+0x1c>
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	b103      	cbz	r3, 800c978 <_fstat_r+0x1c>
 800c976:	602b      	str	r3, [r5, #0]
 800c978:	bd38      	pop	{r3, r4, r5, pc}
 800c97a:	bf00      	nop
 800c97c:	20000780 	.word	0x20000780

0800c980 <_isatty_r>:
 800c980:	b538      	push	{r3, r4, r5, lr}
 800c982:	4c06      	ldr	r4, [pc, #24]	; (800c99c <_isatty_r+0x1c>)
 800c984:	2300      	movs	r3, #0
 800c986:	4605      	mov	r5, r0
 800c988:	4608      	mov	r0, r1
 800c98a:	6023      	str	r3, [r4, #0]
 800c98c:	f7ff faf1 	bl	800bf72 <_isatty>
 800c990:	1c43      	adds	r3, r0, #1
 800c992:	d102      	bne.n	800c99a <_isatty_r+0x1a>
 800c994:	6823      	ldr	r3, [r4, #0]
 800c996:	b103      	cbz	r3, 800c99a <_isatty_r+0x1a>
 800c998:	602b      	str	r3, [r5, #0]
 800c99a:	bd38      	pop	{r3, r4, r5, pc}
 800c99c:	20000780 	.word	0x20000780

0800c9a0 <_lseek_r>:
 800c9a0:	b538      	push	{r3, r4, r5, lr}
 800c9a2:	4c07      	ldr	r4, [pc, #28]	; (800c9c0 <_lseek_r+0x20>)
 800c9a4:	4605      	mov	r5, r0
 800c9a6:	4608      	mov	r0, r1
 800c9a8:	4611      	mov	r1, r2
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	6022      	str	r2, [r4, #0]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	f7ff faea 	bl	800bf88 <_lseek>
 800c9b4:	1c43      	adds	r3, r0, #1
 800c9b6:	d102      	bne.n	800c9be <_lseek_r+0x1e>
 800c9b8:	6823      	ldr	r3, [r4, #0]
 800c9ba:	b103      	cbz	r3, 800c9be <_lseek_r+0x1e>
 800c9bc:	602b      	str	r3, [r5, #0]
 800c9be:	bd38      	pop	{r3, r4, r5, pc}
 800c9c0:	20000780 	.word	0x20000780

0800c9c4 <__malloc_lock>:
 800c9c4:	4770      	bx	lr

0800c9c6 <__malloc_unlock>:
 800c9c6:	4770      	bx	lr

0800c9c8 <_read_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4c07      	ldr	r4, [pc, #28]	; (800c9e8 <_read_r+0x20>)
 800c9cc:	4605      	mov	r5, r0
 800c9ce:	4608      	mov	r0, r1
 800c9d0:	4611      	mov	r1, r2
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	6022      	str	r2, [r4, #0]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	f7ff fa76 	bl	800bec8 <_read>
 800c9dc:	1c43      	adds	r3, r0, #1
 800c9de:	d102      	bne.n	800c9e6 <_read_r+0x1e>
 800c9e0:	6823      	ldr	r3, [r4, #0]
 800c9e2:	b103      	cbz	r3, 800c9e6 <_read_r+0x1e>
 800c9e4:	602b      	str	r3, [r5, #0]
 800c9e6:	bd38      	pop	{r3, r4, r5, pc}
 800c9e8:	20000780 	.word	0x20000780

0800c9ec <atan2f>:
 800c9ec:	f000 b850 	b.w	800ca90 <__ieee754_atan2f>

0800c9f0 <sqrtf>:
 800c9f0:	b510      	push	{r4, lr}
 800c9f2:	ed2d 8b02 	vpush	{d8}
 800c9f6:	b08a      	sub	sp, #40	; 0x28
 800c9f8:	eeb0 8a40 	vmov.f32	s16, s0
 800c9fc:	f000 f8f6 	bl	800cbec <__ieee754_sqrtf>
 800ca00:	4b21      	ldr	r3, [pc, #132]	; (800ca88 <sqrtf+0x98>)
 800ca02:	f993 4000 	ldrsb.w	r4, [r3]
 800ca06:	1c63      	adds	r3, r4, #1
 800ca08:	d02c      	beq.n	800ca64 <sqrtf+0x74>
 800ca0a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ca0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca12:	d627      	bvs.n	800ca64 <sqrtf+0x74>
 800ca14:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ca18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca1c:	d522      	bpl.n	800ca64 <sqrtf+0x74>
 800ca1e:	2301      	movs	r3, #1
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	4b1a      	ldr	r3, [pc, #104]	; (800ca8c <sqrtf+0x9c>)
 800ca24:	9301      	str	r3, [sp, #4]
 800ca26:	ee18 0a10 	vmov	r0, s16
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	9308      	str	r3, [sp, #32]
 800ca2e:	f7f3 fd37 	bl	80004a0 <__aeabi_f2d>
 800ca32:	2200      	movs	r2, #0
 800ca34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	b9ac      	cbnz	r4, 800ca6c <sqrtf+0x7c>
 800ca40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ca44:	4668      	mov	r0, sp
 800ca46:	f000 f8d4 	bl	800cbf2 <matherr>
 800ca4a:	b1b8      	cbz	r0, 800ca7c <sqrtf+0x8c>
 800ca4c:	9b08      	ldr	r3, [sp, #32]
 800ca4e:	b11b      	cbz	r3, 800ca58 <sqrtf+0x68>
 800ca50:	f7ff fb32 	bl	800c0b8 <__errno>
 800ca54:	9b08      	ldr	r3, [sp, #32]
 800ca56:	6003      	str	r3, [r0, #0]
 800ca58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca5c:	f7f3 ffaa 	bl	80009b4 <__aeabi_d2f>
 800ca60:	ee00 0a10 	vmov	s0, r0
 800ca64:	b00a      	add	sp, #40	; 0x28
 800ca66:	ecbd 8b02 	vpop	{d8}
 800ca6a:	bd10      	pop	{r4, pc}
 800ca6c:	4610      	mov	r0, r2
 800ca6e:	4619      	mov	r1, r3
 800ca70:	f7f3 fe98 	bl	80007a4 <__aeabi_ddiv>
 800ca74:	2c02      	cmp	r4, #2
 800ca76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ca7a:	d1e3      	bne.n	800ca44 <sqrtf+0x54>
 800ca7c:	f7ff fb1c 	bl	800c0b8 <__errno>
 800ca80:	2321      	movs	r3, #33	; 0x21
 800ca82:	6003      	str	r3, [r0, #0]
 800ca84:	e7e2      	b.n	800ca4c <sqrtf+0x5c>
 800ca86:	bf00      	nop
 800ca88:	200000f4 	.word	0x200000f4
 800ca8c:	0800d31c 	.word	0x0800d31c

0800ca90 <__ieee754_atan2f>:
 800ca90:	ee10 2a90 	vmov	r2, s1
 800ca94:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800ca98:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ca9c:	b510      	push	{r4, lr}
 800ca9e:	eef0 7a40 	vmov.f32	s15, s0
 800caa2:	dc06      	bgt.n	800cab2 <__ieee754_atan2f+0x22>
 800caa4:	ee10 0a10 	vmov	r0, s0
 800caa8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800caac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cab0:	dd04      	ble.n	800cabc <__ieee754_atan2f+0x2c>
 800cab2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800cab6:	eeb0 0a67 	vmov.f32	s0, s15
 800caba:	bd10      	pop	{r4, pc}
 800cabc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800cac0:	d103      	bne.n	800caca <__ieee754_atan2f+0x3a>
 800cac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cac6:	f000 b897 	b.w	800cbf8 <atanf>
 800caca:	1794      	asrs	r4, r2, #30
 800cacc:	f004 0402 	and.w	r4, r4, #2
 800cad0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800cad4:	b943      	cbnz	r3, 800cae8 <__ieee754_atan2f+0x58>
 800cad6:	2c02      	cmp	r4, #2
 800cad8:	d06e      	beq.n	800cbb8 <__ieee754_atan2f+0x128>
 800cada:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800cbc0 <__ieee754_atan2f+0x130>
 800cade:	2c03      	cmp	r4, #3
 800cae0:	bf08      	it	eq
 800cae2:	eef0 7a47 	vmoveq.f32	s15, s14
 800cae6:	e7e6      	b.n	800cab6 <__ieee754_atan2f+0x26>
 800cae8:	b941      	cbnz	r1, 800cafc <__ieee754_atan2f+0x6c>
 800caea:	eddf 7a36 	vldr	s15, [pc, #216]	; 800cbc4 <__ieee754_atan2f+0x134>
 800caee:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800cbc8 <__ieee754_atan2f+0x138>
 800caf2:	2800      	cmp	r0, #0
 800caf4:	bfb8      	it	lt
 800caf6:	eef0 7a47 	vmovlt.f32	s15, s14
 800cafa:	e7dc      	b.n	800cab6 <__ieee754_atan2f+0x26>
 800cafc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cb00:	d122      	bne.n	800cb48 <__ieee754_atan2f+0xb8>
 800cb02:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cb06:	d112      	bne.n	800cb2e <__ieee754_atan2f+0x9e>
 800cb08:	2c02      	cmp	r4, #2
 800cb0a:	d00a      	beq.n	800cb22 <__ieee754_atan2f+0x92>
 800cb0c:	2c03      	cmp	r4, #3
 800cb0e:	d00b      	beq.n	800cb28 <__ieee754_atan2f+0x98>
 800cb10:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800cbcc <__ieee754_atan2f+0x13c>
 800cb14:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800cbd0 <__ieee754_atan2f+0x140>
 800cb18:	2c01      	cmp	r4, #1
 800cb1a:	bf18      	it	ne
 800cb1c:	eef0 7a47 	vmovne.f32	s15, s14
 800cb20:	e7c9      	b.n	800cab6 <__ieee754_atan2f+0x26>
 800cb22:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800cbd4 <__ieee754_atan2f+0x144>
 800cb26:	e7c6      	b.n	800cab6 <__ieee754_atan2f+0x26>
 800cb28:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800cbd8 <__ieee754_atan2f+0x148>
 800cb2c:	e7c3      	b.n	800cab6 <__ieee754_atan2f+0x26>
 800cb2e:	2c02      	cmp	r4, #2
 800cb30:	d042      	beq.n	800cbb8 <__ieee754_atan2f+0x128>
 800cb32:	2c03      	cmp	r4, #3
 800cb34:	d005      	beq.n	800cb42 <__ieee754_atan2f+0xb2>
 800cb36:	2c01      	cmp	r4, #1
 800cb38:	eddf 7a28 	vldr	s15, [pc, #160]	; 800cbdc <__ieee754_atan2f+0x14c>
 800cb3c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800cbe0 <__ieee754_atan2f+0x150>
 800cb40:	e7eb      	b.n	800cb1a <__ieee754_atan2f+0x8a>
 800cb42:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800cbc0 <__ieee754_atan2f+0x130>
 800cb46:	e7b6      	b.n	800cab6 <__ieee754_atan2f+0x26>
 800cb48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cb4c:	d0cd      	beq.n	800caea <__ieee754_atan2f+0x5a>
 800cb4e:	1a5b      	subs	r3, r3, r1
 800cb50:	15db      	asrs	r3, r3, #23
 800cb52:	2b3c      	cmp	r3, #60	; 0x3c
 800cb54:	dc1a      	bgt.n	800cb8c <__ieee754_atan2f+0xfc>
 800cb56:	2a00      	cmp	r2, #0
 800cb58:	da01      	bge.n	800cb5e <__ieee754_atan2f+0xce>
 800cb5a:	333c      	adds	r3, #60	; 0x3c
 800cb5c:	db19      	blt.n	800cb92 <__ieee754_atan2f+0x102>
 800cb5e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800cb62:	f000 f91d 	bl	800cda0 <fabsf>
 800cb66:	f000 f847 	bl	800cbf8 <atanf>
 800cb6a:	eef0 7a40 	vmov.f32	s15, s0
 800cb6e:	2c01      	cmp	r4, #1
 800cb70:	d012      	beq.n	800cb98 <__ieee754_atan2f+0x108>
 800cb72:	2c02      	cmp	r4, #2
 800cb74:	d017      	beq.n	800cba6 <__ieee754_atan2f+0x116>
 800cb76:	2c00      	cmp	r4, #0
 800cb78:	d09d      	beq.n	800cab6 <__ieee754_atan2f+0x26>
 800cb7a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800cbe4 <__ieee754_atan2f+0x154>
 800cb7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb82:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800cbe8 <__ieee754_atan2f+0x158>
 800cb86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb8a:	e794      	b.n	800cab6 <__ieee754_atan2f+0x26>
 800cb8c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800cbc4 <__ieee754_atan2f+0x134>
 800cb90:	e7ed      	b.n	800cb6e <__ieee754_atan2f+0xde>
 800cb92:	eddf 7a13 	vldr	s15, [pc, #76]	; 800cbe0 <__ieee754_atan2f+0x150>
 800cb96:	e7ea      	b.n	800cb6e <__ieee754_atan2f+0xde>
 800cb98:	ee17 3a90 	vmov	r3, s15
 800cb9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cba0:	ee07 3a90 	vmov	s15, r3
 800cba4:	e787      	b.n	800cab6 <__ieee754_atan2f+0x26>
 800cba6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800cbe4 <__ieee754_atan2f+0x154>
 800cbaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800cbe8 <__ieee754_atan2f+0x158>
 800cbb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbb6:	e77e      	b.n	800cab6 <__ieee754_atan2f+0x26>
 800cbb8:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800cbe8 <__ieee754_atan2f+0x158>
 800cbbc:	e77b      	b.n	800cab6 <__ieee754_atan2f+0x26>
 800cbbe:	bf00      	nop
 800cbc0:	c0490fdb 	.word	0xc0490fdb
 800cbc4:	3fc90fdb 	.word	0x3fc90fdb
 800cbc8:	bfc90fdb 	.word	0xbfc90fdb
 800cbcc:	bf490fdb 	.word	0xbf490fdb
 800cbd0:	3f490fdb 	.word	0x3f490fdb
 800cbd4:	4016cbe4 	.word	0x4016cbe4
 800cbd8:	c016cbe4 	.word	0xc016cbe4
 800cbdc:	80000000 	.word	0x80000000
 800cbe0:	00000000 	.word	0x00000000
 800cbe4:	33bbbd2e 	.word	0x33bbbd2e
 800cbe8:	40490fdb 	.word	0x40490fdb

0800cbec <__ieee754_sqrtf>:
 800cbec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cbf0:	4770      	bx	lr

0800cbf2 <matherr>:
 800cbf2:	2000      	movs	r0, #0
 800cbf4:	4770      	bx	lr
	...

0800cbf8 <atanf>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	ee10 5a10 	vmov	r5, s0
 800cbfe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800cc02:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800cc06:	eef0 7a40 	vmov.f32	s15, s0
 800cc0a:	db10      	blt.n	800cc2e <atanf+0x36>
 800cc0c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800cc10:	dd04      	ble.n	800cc1c <atanf+0x24>
 800cc12:	ee70 7a00 	vadd.f32	s15, s0, s0
 800cc16:	eeb0 0a67 	vmov.f32	s0, s15
 800cc1a:	bd38      	pop	{r3, r4, r5, pc}
 800cc1c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800cd54 <atanf+0x15c>
 800cc20:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800cd58 <atanf+0x160>
 800cc24:	2d00      	cmp	r5, #0
 800cc26:	bfd8      	it	le
 800cc28:	eef0 7a47 	vmovle.f32	s15, s14
 800cc2c:	e7f3      	b.n	800cc16 <atanf+0x1e>
 800cc2e:	4b4b      	ldr	r3, [pc, #300]	; (800cd5c <atanf+0x164>)
 800cc30:	429c      	cmp	r4, r3
 800cc32:	dc10      	bgt.n	800cc56 <atanf+0x5e>
 800cc34:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800cc38:	da0a      	bge.n	800cc50 <atanf+0x58>
 800cc3a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800cd60 <atanf+0x168>
 800cc3e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800cc42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc46:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800cc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc4e:	dce2      	bgt.n	800cc16 <atanf+0x1e>
 800cc50:	f04f 33ff 	mov.w	r3, #4294967295
 800cc54:	e013      	b.n	800cc7e <atanf+0x86>
 800cc56:	f000 f8a3 	bl	800cda0 <fabsf>
 800cc5a:	4b42      	ldr	r3, [pc, #264]	; (800cd64 <atanf+0x16c>)
 800cc5c:	429c      	cmp	r4, r3
 800cc5e:	dc4f      	bgt.n	800cd00 <atanf+0x108>
 800cc60:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800cc64:	429c      	cmp	r4, r3
 800cc66:	dc41      	bgt.n	800ccec <atanf+0xf4>
 800cc68:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800cc6c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cc70:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cc74:	2300      	movs	r3, #0
 800cc76:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cc7e:	1c5a      	adds	r2, r3, #1
 800cc80:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800cc84:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800cd68 <atanf+0x170>
 800cc88:	eddf 5a38 	vldr	s11, [pc, #224]	; 800cd6c <atanf+0x174>
 800cc8c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800cd70 <atanf+0x178>
 800cc90:	ee66 6a06 	vmul.f32	s13, s12, s12
 800cc94:	eee6 5a87 	vfma.f32	s11, s13, s14
 800cc98:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800cd74 <atanf+0x17c>
 800cc9c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cca0:	eddf 5a35 	vldr	s11, [pc, #212]	; 800cd78 <atanf+0x180>
 800cca4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cca8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800cd7c <atanf+0x184>
 800ccac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ccb0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cd80 <atanf+0x188>
 800ccb4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ccb8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800cd84 <atanf+0x18c>
 800ccbc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ccc0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800cd88 <atanf+0x190>
 800ccc4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ccc8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800cd8c <atanf+0x194>
 800cccc:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ccd0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800cd90 <atanf+0x198>
 800ccd4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ccd8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ccdc:	eea5 7a86 	vfma.f32	s14, s11, s12
 800cce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cce4:	d121      	bne.n	800cd2a <atanf+0x132>
 800cce6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccea:	e794      	b.n	800cc16 <atanf+0x1e>
 800ccec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ccf0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ccf4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ccfe:	e7be      	b.n	800cc7e <atanf+0x86>
 800cd00:	4b24      	ldr	r3, [pc, #144]	; (800cd94 <atanf+0x19c>)
 800cd02:	429c      	cmp	r4, r3
 800cd04:	dc0b      	bgt.n	800cd1e <atanf+0x126>
 800cd06:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800cd0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd0e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cd12:	2302      	movs	r3, #2
 800cd14:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cd18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd1c:	e7af      	b.n	800cc7e <atanf+0x86>
 800cd1e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cd22:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cd26:	2303      	movs	r3, #3
 800cd28:	e7a9      	b.n	800cc7e <atanf+0x86>
 800cd2a:	4a1b      	ldr	r2, [pc, #108]	; (800cd98 <atanf+0x1a0>)
 800cd2c:	491b      	ldr	r1, [pc, #108]	; (800cd9c <atanf+0x1a4>)
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	441a      	add	r2, r3
 800cd32:	440b      	add	r3, r1
 800cd34:	edd3 6a00 	vldr	s13, [r3]
 800cd38:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cd3c:	2d00      	cmp	r5, #0
 800cd3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd42:	ed92 7a00 	vldr	s14, [r2]
 800cd46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd4a:	bfb8      	it	lt
 800cd4c:	eef1 7a67 	vneglt.f32	s15, s15
 800cd50:	e761      	b.n	800cc16 <atanf+0x1e>
 800cd52:	bf00      	nop
 800cd54:	bfc90fdb 	.word	0xbfc90fdb
 800cd58:	3fc90fdb 	.word	0x3fc90fdb
 800cd5c:	3edfffff 	.word	0x3edfffff
 800cd60:	7149f2ca 	.word	0x7149f2ca
 800cd64:	3f97ffff 	.word	0x3f97ffff
 800cd68:	3c8569d7 	.word	0x3c8569d7
 800cd6c:	3d4bda59 	.word	0x3d4bda59
 800cd70:	bd6ef16b 	.word	0xbd6ef16b
 800cd74:	3d886b35 	.word	0x3d886b35
 800cd78:	3dba2e6e 	.word	0x3dba2e6e
 800cd7c:	3e124925 	.word	0x3e124925
 800cd80:	3eaaaaab 	.word	0x3eaaaaab
 800cd84:	bd15a221 	.word	0xbd15a221
 800cd88:	bd9d8795 	.word	0xbd9d8795
 800cd8c:	bde38e38 	.word	0xbde38e38
 800cd90:	be4ccccd 	.word	0xbe4ccccd
 800cd94:	401bffff 	.word	0x401bffff
 800cd98:	0800d324 	.word	0x0800d324
 800cd9c:	0800d334 	.word	0x0800d334

0800cda0 <fabsf>:
 800cda0:	ee10 3a10 	vmov	r3, s0
 800cda4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cda8:	ee00 3a10 	vmov	s0, r3
 800cdac:	4770      	bx	lr
	...

0800cdb0 <_init>:
 800cdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb2:	bf00      	nop
 800cdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdb6:	bc08      	pop	{r3}
 800cdb8:	469e      	mov	lr, r3
 800cdba:	4770      	bx	lr

0800cdbc <_fini>:
 800cdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdbe:	bf00      	nop
 800cdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdc2:	bc08      	pop	{r3}
 800cdc4:	469e      	mov	lr, r3
 800cdc6:	4770      	bx	lr
